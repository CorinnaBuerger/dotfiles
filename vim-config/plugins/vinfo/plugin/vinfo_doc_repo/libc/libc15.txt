
     'string.h' (SVID): *note Copying Strings and Arrays::.

'char * strdupa (const char *S)'

     'string.h' (GNU): *note Copying Strings and Arrays::.

'char * strerror (int ERRNUM)'

     'string.h' (ISO): *note Error Messages::.

'char * strerror_r (int ERRNUM, char *BUF, size_t N)'

     'string.h' (GNU): *note Error Messages::.

'int strfromd (char *restrict STRING, size_t SIZE, const char *restrict FORMAT, double VALUE)'

     'stdlib.h' (ISO/IEC TS 18661-1): *note Printing of Floats::.

'int strfromf (char *restrict STRING, size_t SIZE, const char *restrict FORMAT, float VALUE)'

     'stdlib.h' (ISO/IEC TS 18661-1): *note Printing of Floats::.

'int strfromfN (char *restrict STRING, size_t SIZE, const char *restrict FORMAT, _FloatN VALUE)'

     'stdlib.h' (ISO/IEC TS 18661-3): *note Printing of Floats::.

'int strfromfNx (char *restrict STRING, size_t SIZE, const char *restrict FORMAT, _FloatNx VALUE)'

     'stdlib.h' (ISO/IEC TS 18661-3): *note Printing of Floats::.

'int strfroml (char *restrict STRING, size_t SIZE, const char *restrict FORMAT, long double VALUE)'

     'stdlib.h' (ISO/IEC TS 18661-1): *note Printing of Floats::.

'char * strfry (char *STRING)'

     'string.h' (GNU): *note Shuffling Bytes::.

'size_t strftime (char *S, size_t SIZE, const char *TEMPLATE, const struct tm *BROKENTIME)'

     'time.h' (ISO): *note Formatting Calendar Time::.

'size_t strlen (const char *S)'

     'string.h' (ISO): *note String Length::.

'int strncasecmp (const char *S1, const char *S2, size_t N)'

     'string.h' (BSD): *note String/Array Comparison::.

'char * strncat (char *restrict TO, const char *restrict FROM, size_t SIZE)'

     'string.h' (ISO): *note Truncating Strings::.

'int strncmp (const char *S1, const char *S2, size_t SIZE)'

     'string.h' (ISO): *note String/Array Comparison::.

'char * strncpy (char *restrict TO, const char *restrict FROM, size_t SIZE)'

     'string.h' (C90): *note Truncating Strings::.

'char * strndup (const char *S, size_t SIZE)'

     'string.h' (GNU): *note Truncating Strings::.

'char * strndupa (const char *S, size_t SIZE)'

     'string.h' (GNU): *note Truncating Strings::.

'size_t strnlen (const char *S, size_t MAXLEN)'

     'string.h' (GNU): *note String Length::.

'char * strpbrk (const char *STRING, const char *STOPSET)'

     'string.h' (ISO): *note Search Functions::.

'char * strptime (const char *S, const char *FMT, struct tm *TP)'

     'time.h' (XPG4): *note Low-Level Time String Parsing::.

'char * strrchr (const char *STRING, int C)'

     'string.h' (ISO): *note Search Functions::.

'char * strsep (char **STRING_PTR, const char *DELIMITER)'

     'string.h' (BSD): *note Finding Tokens in a String::.

'char * strsignal (int SIGNUM)'

     'string.h' (GNU): *note Signal Messages::.

'size_t strspn (const char *STRING, const char *SKIPSET)'

     'string.h' (ISO): *note Search Functions::.

'char * strstr (const char *HAYSTACK, const char *NEEDLE)'

     'string.h' (ISO): *note Search Functions::.

'double strtod (const char *restrict STRING, char **restrict TAILPTR)'

     'stdlib.h' (ISO): *note Parsing of Floats::.

'float strtof (const char *STRING, char **TAILPTR)'

     'stdlib.h' (ISO): *note Parsing of Floats::.

'_FloatN strtofN (const char *STRING, char **TAILPTR)'

     'stdlib.h' (ISO/IEC TS 18661-3): *note Parsing of Floats::.

'_FloatNx strtofNx (const char *STRING, char **TAILPTR)'

     'stdlib.h' (ISO/IEC TS 18661-3): *note Parsing of Floats::.

'intmax_t strtoimax (const char *restrict STRING, char **restrict TAILPTR, int BASE)'

     'inttypes.h' (ISO): *note Parsing of Integers::.

'char * strtok (char *restrict NEWSTRING, const char *restrict DELIMITERS)'

     'string.h' (ISO): *note Finding Tokens in a String::.

'char * strtok_r (char *NEWSTRING, const char *DELIMITERS, char **SAVE_PTR)'

     'string.h' (POSIX): *note Finding Tokens in a String::.

'long int strtol (const char *restrict STRING, char **restrict TAILPTR, int BASE)'

     'stdlib.h' (ISO): *note Parsing of Integers::.

'long double strtold (const char *STRING, char **TAILPTR)'

     'stdlib.h' (ISO): *note Parsing of Floats::.

'long long int strtoll (const char *restrict STRING, char **restrict TAILPTR, int BASE)'

     'stdlib.h' (ISO): *note Parsing of Integers::.

'long long int strtoq (const char *restrict STRING, char **restrict TAILPTR, int BASE)'

     'stdlib.h' (BSD): *note Parsing of Integers::.

'unsigned long int strtoul (const char *restrict STRING, char **restrict TAILPTR, int BASE)'

     'stdlib.h' (ISO): *note Parsing of Integers::.

'unsigned long long int strtoull (const char *restrict STRING, char **restrict TAILPTR, int BASE)'

     'stdlib.h' (ISO): *note Parsing of Integers::.

'uintmax_t strtoumax (const char *restrict STRING, char **restrict TAILPTR, int BASE)'

     'inttypes.h' (ISO): *note Parsing of Integers::.

'unsigned long long int strtouq (const char *restrict STRING, char **restrict TAILPTR, int BASE)'

     'stdlib.h' (BSD): *note Parsing of Integers::.

'int strverscmp (const char *S1, const char *S2)'

     'string.h' (GNU): *note String/Array Comparison::.

'size_t strxfrm (char *restrict TO, const char *restrict FROM, size_t SIZE)'

     'string.h' (ISO): *note Collation Functions::.

'int stty (int FILEDES, const struct sgttyb *ATTRIBUTES)'

     'sgtty.h' (BSD): *note BSD Terminal Modes::.

'int swapcontext (ucontext_t *restrict OUCP, const ucontext_t *restrict UCP)'

     'ucontext.h' (SVID): *note System V contexts::.

'int swprintf (wchar_t *WS, size_t SIZE, const wchar_t *TEMPLATE, ...)'

     'wchar.h' (GNU): *note Formatted Output Functions::.

'int swscanf (const wchar_t *WS, const wchar_t *TEMPLATE, ...)'

     'wchar.h' (ISO): *note Formatted Input Functions::.

'int symlink (const char *OLDNAME, const char *NEWNAME)'

     'unistd.h' (BSD): *note Symbolic Links::.

'void sync (void)'

     'unistd.h' (X/Open): *note Synchronizing I/O::.

'long int syscall (long int SYSNO, ...)'

     'unistd.h' (???): *note System Calls::.

'long int sysconf (int PARAMETER)'

     'unistd.h' (POSIX.1): *note Sysconf Definition::.

'int sysctl (int *NAMES, int NLEN, void *OLDVAL, size_t *OLDLENP, void *NEWVAL, size_t NEWLEN)'

     'sys/sysctl.h' (BSD): *note System Parameters::.

'void syslog (int FACILITY_PRIORITY, const char *FORMAT, ...)'

     'syslog.h' (BSD): *note syslog; vsyslog::.

'int system (const char *COMMAND)'

     'stdlib.h' (ISO): *note Running a Command::.

'sighandler_t sysv_signal (int SIGNUM, sighandler_t ACTION)'

     'signal.h' (GNU): *note Basic Signal Handling::.

'double tan (double X)'

     'math.h' (ISO): *note Trig Functions::.

'float tanf (float X)'

     'math.h' (ISO): *note Trig Functions::.

'_FloatN tanfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Trig Functions::.

'_FloatNx tanfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Trig Functions::.

'double tanh (double X)'

     'math.h' (ISO): *note Hyperbolic Functions::.

'float tanhf (float X)'

     'math.h' (ISO): *note Hyperbolic Functions::.

'_FloatN tanhfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Hyperbolic Functions::.

'_FloatNx tanhfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Hyperbolic Functions::.

'long double tanhl (long double X)'

     'math.h' (ISO): *note Hyperbolic Functions::.

'long double tanl (long double X)'

     'math.h' (ISO): *note Trig Functions::.

'int tcdrain (int FILEDES)'

     'termios.h' (POSIX.1): *note Line Control::.

'tcflag_t'

     'termios.h' (POSIX.1): *note Mode Data Types::.

'int tcflow (int FILEDES, int ACTION)'

     'termios.h' (POSIX.1): *note Line Control::.

'int tcflush (int FILEDES, int QUEUE)'

     'termios.h' (POSIX.1): *note Line Control::.

'int tcgetattr (int FILEDES, struct termios *TERMIOS-P)'

     'termios.h' (POSIX.1): *note Mode Functions::.

'pid_t tcgetpgrp (int FILEDES)'

     'unistd.h' (POSIX.1): *note Terminal Access Functions::.

'pid_t tcgetsid (int FILDES)'

     'termios.h' (Unix98): *note Terminal Access Functions::.

'int tcsendbreak (int FILEDES, int DURATION)'

     'termios.h' (POSIX.1): *note Line Control::.

'int tcsetattr (int FILEDES, int WHEN, const struct termios *TERMIOS-P)'

     'termios.h' (POSIX.1): *note Mode Functions::.

'int tcsetpgrp (int FILEDES, pid_t PGID)'

     'unistd.h' (POSIX.1): *note Terminal Access Functions::.

'void * tdelete (const void *KEY, void **ROOTP, comparison_fn_t COMPAR)'

     'search.h' (SVID): *note Tree Search Function::.

'void tdestroy (void *VROOT, __free_fn_t FREEFCT)'

     'search.h' (GNU): *note Tree Search Function::.

'long int telldir (DIR *DIRSTREAM)'

     'dirent.h' (BSD): *note Random Access Directory::.

'char * tempnam (const char *DIR, const char *PREFIX)'

     'stdio.h' (SVID): *note Temporary Files::.

'struct termios'

     'termios.h' (POSIX.1): *note Mode Data Types::.

'char * textdomain (const char *DOMAINNAME)'

     'libintl.h' (GNU): *note Locating gettext catalog::.

'void * tfind (const void *KEY, void *const *ROOTP, comparison_fn_t COMPAR)'

     'search.h' (SVID): *note Tree Search Function::.

'double tgamma (double X)'

     'math.h' (XPG): *note Special Functions::.

     'math.h' (ISO): *note Special Functions::.

'float tgammaf (float X)'

     'math.h' (XPG): *note Special Functions::.

     'math.h' (ISO): *note Special Functions::.

'_FloatN tgammafN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Special Functions::.

'_FloatNx tgammafNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Special Functions::.

'long double tgammal (long double X)'

     'math.h' (XPG): *note Special Functions::.

     'math.h' (ISO): *note Special Functions::.

'thrd_busy'

     'threads.h' (C11): *note ISO C Threads Return Values::.

'int thrd_create (thrd_t *THR, thrd_start_t FUNC, void *ARG)'

     'threads.h' (C11): *note ISO C Thread Management::.

'thrd_t thrd_current (void)'

     'threads.h' (C11): *note ISO C Thread Management::.

'int thrd_detach (thrd_t THR)'

     'threads.h' (C11): *note ISO C Thread Management::.

'int thrd_equal (thrd_t LHS, thrd_t RHS)'

     'threads.h' (C11): *note ISO C Thread Management::.

'thrd_error'

     'threads.h' (C11): *note ISO C Threads Return Values::.

'_Noreturn void thrd_exit (int RES)'

     'threads.h' (C11): *note ISO C Thread Management::.

'int thrd_join (thrd_t THR, int *RES)'

     'threads.h' (C11): *note ISO C Thread Management::.

'thrd_nomem'

     'threads.h' (C11): *note ISO C Threads Return Values::.

'int thrd_sleep (const struct timespec *TIME_POINT, struct timespec *REMAINING)'

     'threads.h' (C11): *note ISO C Thread Management::.

'thrd_start_t'

     'threads.h' (C11): *note ISO C Thread Management::.

'thrd_success'

     'threads.h' (C11): *note ISO C Threads Return Values::.

'thrd_t'

     'threads.h' (C11): *note ISO C Thread Management::.

'thrd_timedout'

     'threads.h' (C11): *note ISO C Threads Return Values::.

'void thrd_yield (void)'

     'threads.h' (C11): *note ISO C Thread Management::.

'thread_local'

     'threads.h' (C11): *note ISO C Thread-local Storage::.

'time_t time (time_t *RESULT)'

     'time.h' (ISO): *note Simple Calendar Time::.

'time_t'

     'time.h' (ISO): *note Simple Calendar Time::.

'time_t timegm (struct tm *BROKENTIME)'

     'time.h' (???): *note Broken-down Time::.

'time_t timelocal (struct tm *BROKENTIME)'

     'time.h' (???): *note Broken-down Time::.

'clock_t times (struct tms *BUFFER)'

     'sys/times.h' (POSIX.1): *note Processor Time::.

'struct timespec'

     'sys/time.h' (POSIX.1): *note Elapsed Time::.

'struct timeval'

     'sys/time.h' (BSD): *note Elapsed Time::.

'long int timezone'

     'time.h' (SVID): *note Time Zone Functions::.

'struct timezone'

     'sys/time.h' (BSD): *note High-Resolution Calendar::.

'struct tm'

     'time.h' (ISO): *note Broken-down Time::.

'FILE * tmpfile (void)'

     'stdio.h' (ISO): *note Temporary Files::.

'FILE * tmpfile64 (void)'

     'stdio.h' (Unix98): *note Temporary Files::.

'char * tmpnam (char *RESULT)'

     'stdio.h' (ISO): *note Temporary Files::.

'char * tmpnam_r (char *RESULT)'

     'stdio.h' (GNU): *note Temporary Files::.

'struct tms'

     'sys/times.h' (POSIX.1): *note Processor Time::.

'int toascii (int C)'

     'ctype.h' (SVID): *note Case Conversion::.

     'ctype.h' (BSD): *note Case Conversion::.

'int tolower (int C)'

     'ctype.h' (ISO): *note Case Conversion::.

'int totalorder (double X, double Y)'

     'math.h' (TS 18661-1:2014): *note FP Comparison Functions::.

'int totalorderf (float X, float Y)'

     'math.h' (TS 18661-1:2014): *note FP Comparison Functions::.

'int totalorderfN (_FloatN X, _FloatN Y)'

     'math.h' (TS 18661-3:2015): *note FP Comparison Functions::.

'int totalorderfNx (_FloatNx X, _FloatNx Y)'

     'math.h' (TS 18661-3:2015): *note FP Comparison Functions::.

'int totalorderl (long double X, long double Y)'

     'math.h' (TS 18661-1:2014): *note FP Comparison Functions::.

'int totalordermag (double X, double Y)'

     'math.h' (TS 18661-1:2014): *note FP Comparison Functions::.

'int totalordermagf (float X, float Y)'

     'math.h' (TS 18661-1:2014): *note FP Comparison Functions::.

'int totalordermagfN (_FloatN X, _FloatN Y)'

     'math.h' (TS 18661-3:2015): *note FP Comparison Functions::.

'int totalordermagfNx (_FloatNx X, _FloatNx Y)'

     'math.h' (TS 18661-3:2015): *note FP Comparison Functions::.

'int totalordermagl (long double X, long double Y)'

     'math.h' (TS 18661-1:2014): *note FP Comparison Functions::.

'int toupper (int C)'

     'ctype.h' (ISO): *note Case Conversion::.

'wint_t towctrans (wint_t WC, wctrans_t DESC)'

     'wctype.h' (ISO): *note Wide Character Case Conversion::.

'wint_t towlower (wint_t WC)'

     'wctype.h' (ISO): *note Wide Character Case Conversion::.

'wint_t towupper (wint_t WC)'

     'wctype.h' (ISO): *note Wide Character Case Conversion::.

'double trunc (double X)'

     'math.h' (ISO): *note Rounding Functions::.

'int truncate (const char *FILENAME, off_t LENGTH)'

     'unistd.h' (X/Open): *note File Size::.

'int truncate64 (const char *NAME, off64_t LENGTH)'

     'unistd.h' (Unix98): *note File Size::.

'float truncf (float X)'

     'math.h' (ISO): *note Rounding Functions::.

'_FloatN truncfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'_FloatNx truncfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'long double truncl (long double X)'

     'math.h' (ISO): *note Rounding Functions::.

'void * tsearch (const void *KEY, void **ROOTP, comparison_fn_t COMPAR)'

     'search.h' (SVID): *note Tree Search Function::.

'int tss_create (tss_t *TSS_KEY, tss_dtor_t DESTRUCTOR)'

     'threads.h' (C11): *note ISO C Thread-local Storage::.

'void tss_delete (tss_t TSS_KEY)'

     'threads.h' (C11): *note ISO C Thread-local Storage::.

'tss_dtor_t'

     'threads.h' (C11): *note ISO C Thread-local Storage::.

'void * tss_get (tss_t TSS_KEY)'

     'threads.h' (C11): *note ISO C Thread-local Storage::.

'int tss_set (tss_t TSS_KEY, void *VAL)'

     'threads.h' (C11): *note ISO C Thread-local Storage::.

'tss_t'

     'threads.h' (C11): *note ISO C Thread-local Storage::.

'char * ttyname (int FILEDES)'

     'unistd.h' (POSIX.1): *note Is It a Terminal::.

'int ttyname_r (int FILEDES, char *BUF, size_t LEN)'

     'unistd.h' (POSIX.1): *note Is It a Terminal::.

'void twalk (const void *ROOT, __action_fn_t ACTION)'

     'search.h' (SVID): *note Tree Search Function::.

'char * tzname [2]'

     'time.h' (POSIX.1): *note Time Zone Functions::.

'void tzset (void)'

     'time.h' (POSIX.1): *note Time Zone Functions::.

'ucontext_t'

     'ucontext.h' (SVID): *note System V contexts::.

'uintmax_t ufromfp (double X, int ROUND, unsigned int WIDTH)'

     'math.h' (ISO): *note Rounding Functions::.

'uintmax_t ufromfpf (float X, int ROUND, unsigned int WIDTH)'

     'math.h' (ISO): *note Rounding Functions::.

'uintmax_t ufromfpfN (_FloatN X, int ROUND, unsigned int WIDTH)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'uintmax_t ufromfpfNx (_FloatNx X, int ROUND, unsigned int WIDTH)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'uintmax_t ufromfpl (long double X, int ROUND, unsigned int WIDTH)'

     'math.h' (ISO): *note Rounding Functions::.

'uintmax_t ufromfpx (double X, int ROUND, unsigned int WIDTH)'

     'math.h' (ISO): *note Rounding Functions::.

'uintmax_t ufromfpxf (float X, int ROUND, unsigned int WIDTH)'

     'math.h' (ISO): *note Rounding Functions::.

'uintmax_t ufromfpxfN (_FloatN X, int ROUND, unsigned int WIDTH)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'uintmax_t ufromfpxfNx (_FloatNx X, int ROUND, unsigned int WIDTH)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'uintmax_t ufromfpxl (long double X, int ROUND, unsigned int WIDTH)'

     'math.h' (ISO): *note Rounding Functions::.

'uid_t'

     'sys/types.h' (POSIX.1): *note Reading Persona::.

'long int ulimit (int CMD, ...)'

     'ulimit.h' (BSD): *note Limits on Resources::.

'mode_t umask (mode_t MASK)'

     'sys/stat.h' (POSIX.1): *note Setting Permissions::.

'int umount (const char *FILE)'

     'sys/mount.h' (SVID): *note Mount-Unmount-Remount::.

     'sys/mount.h' (GNU): *note Mount-Unmount-Remount::.

'int umount2 (const char *FILE, int FLAGS)'

     'sys/mount.h' (GNU): *note Mount-Unmount-Remount::.

'int uname (struct utsname *INFO)'

     'sys/utsname.h' (POSIX.1): *note Platform Type::.

'int ungetc (int C, FILE *STREAM)'

     'stdio.h' (ISO): *note How Unread::.

'wint_t ungetwc (wint_t WC, FILE *STREAM)'

     'wchar.h' (ISO): *note How Unread::.

'int unlink (const char *FILENAME)'

     'unistd.h' (POSIX.1): *note Deleting Files::.

'int unlockpt (int FILEDES)'

     'stdlib.h' (SVID): *note Allocation::.

     'stdlib.h' (XPG4.2): *note Allocation::.

'int unsetenv (const char *NAME)'

     'stdlib.h' (BSD): *note Environment Access::.

'void updwtmp (const char *WTMP_FILE, const struct utmp *UTMP)'

     'utmp.h' (SVID): *note Manipulating the Database::.

'struct utimbuf'

     'utime.h' (POSIX.1): *note File Times::.

'int utime (const char *FILENAME, const struct utimbuf *TIMES)'

     'utime.h' (POSIX.1): *note File Times::.

'int utimes (const char *FILENAME, const struct timeval TVP[2])'

     'sys/time.h' (BSD): *note File Times::.

'int utmpname (const char *FILE)'

     'utmp.h' (SVID): *note Manipulating the Database::.

'int utmpxname (const char *FILE)'

     'utmpx.h' (XPG4.2): *note XPG Functions::.

'struct utsname'

     'sys/utsname.h' (POSIX.1): *note Platform Type::.

'TYPE va_arg (va_list AP, TYPE)'

     'stdarg.h' (ISO): *note Argument Macros::.

'void va_copy (va_list DEST, va_list SRC)'

     'stdarg.h' (C99): *note Argument Macros::.

'void va_end (va_list AP)'

     'stdarg.h' (ISO): *note Argument Macros::.

'va_list'

     'stdarg.h' (ISO): *note Argument Macros::.

'void va_start (va_list AP, LAST-REQUIRED)'

     'stdarg.h' (ISO): *note Argument Macros::.

'void * valloc (size_t SIZE)'

     'malloc.h' (BSD): *note Aligned Memory Blocks::.

     'stdlib.h' (BSD): *note Aligned Memory Blocks::.

'int vasprintf (char **PTR, const char *TEMPLATE, va_list AP)'

     'stdio.h' (GNU): *note Variable Arguments Output::.

'void verr (int STATUS, const char *FORMAT, va_list AP)'

     'err.h' (BSD): *note Error Messages::.

'void verrx (int STATUS, const char *FORMAT, va_list AP)'

     'err.h' (BSD): *note Error Messages::.

'int versionsort (const struct dirent **A, const struct dirent **B)'

     'dirent.h' (GNU): *note Scanning Directory Content::.

'int versionsort64 (const struct dirent64 **A, const struct dirent64 **B)'

     'dirent.h' (GNU): *note Scanning Directory Content::.

'pid_t vfork (void)'

     'unistd.h' (BSD): *note Creating a Process::.

'int vfprintf (FILE *STREAM, const char *TEMPLATE, va_list AP)'

     'stdio.h' (ISO): *note Variable Arguments Output::.

'int vfscanf (FILE *STREAM, const char *TEMPLATE, va_list AP)'

     'stdio.h' (ISO): *note Variable Arguments Input::.

'int vfwprintf (FILE *STREAM, const wchar_t *TEMPLATE, va_list AP)'

     'wchar.h' (ISO): *note Variable Arguments Output::.

'int vfwscanf (FILE *STREAM, const wchar_t *TEMPLATE, va_list AP)'

     'wchar.h' (ISO): *note Variable Arguments Input::.

'int vlimit (int RESOURCE, int LIMIT)'

     'sys/vlimit.h' (BSD): *note Limits on Resources::.

'int vprintf (const char *TEMPLATE, va_list AP)'

     'stdio.h' (ISO): *note Variable Arguments Output::.

'int vscanf (const char *TEMPLATE, va_list AP)'

     'stdio.h' (ISO): *note Variable Arguments Input::.

'int vsnprintf (char *S, size_t SIZE, const char *TEMPLATE, va_list AP)'

     'stdio.h' (GNU): *note Variable Arguments Output::.

'int vsprintf (char *S, const char *TEMPLATE, va_list AP)'

     'stdio.h' (ISO): *note Variable Arguments Output::.

'int vsscanf (const char *S, const char *TEMPLATE, va_list AP)'

     'stdio.h' (ISO): *note Variable Arguments Input::.

'int vswprintf (wchar_t *WS, size_t SIZE, const wchar_t *TEMPLATE, va_list AP)'

     'wchar.h' (GNU): *note Variable Arguments Output::.

'int vswscanf (const wchar_t *S, const wchar_t *TEMPLATE, va_list AP)'

     'wchar.h' (ISO): *note Variable Arguments Input::.

'void vsyslog (int FACILITY_PRIORITY, const char *FORMAT, va_list ARGLIST)'

     'syslog.h' (BSD): *note syslog; vsyslog::.

'int vtimes (struct vtimes *CURRENT, struct vtimes *CHILD)'

     'sys/vtimes.h' (???): *note Resource Usage::.

'void vwarn (const char *FORMAT, va_list AP)'

     'err.h' (BSD): *note Error Messages::.

'void vwarnx (const char *FORMAT, va_list AP)'

     'err.h' (BSD): *note Error Messages::.

'int vwprintf (const wchar_t *TEMPLATE, va_list AP)'

     'wchar.h' (ISO): *note Variable Arguments Output::.

'int vwscanf (const wchar_t *TEMPLATE, va_list AP)'

     'wchar.h' (ISO): *note Variable Arguments Input::.

'pid_t wait (int *STATUS-PTR)'

     'sys/wait.h' (POSIX.1): *note Process Completion::.

'pid_t wait3 (int *STATUS-PTR, int OPTIONS, struct rusage *USAGE)'

     'sys/wait.h' (BSD): *note BSD Wait Functions::.

'pid_t wait4 (pid_t PID, int *STATUS-PTR, int OPTIONS, struct rusage *USAGE)'

     'sys/wait.h' (BSD): *note Process Completion::.

'pid_t waitpid (pid_t PID, int *STATUS-PTR, int OPTIONS)'

     'sys/wait.h' (POSIX.1): *note Process Completion::.

'void warn (const char *FORMAT, ...)'

     'err.h' (BSD): *note Error Messages::.

'void warnx (const char *FORMAT, ...)'

     'err.h' (BSD): *note Error Messages::.

'wchar_t'

     'stddef.h' (ISO): *note Extended Char Intro::.

'wchar_t * wcpcpy (wchar_t *restrict WTO, const wchar_t *restrict WFROM)'

     'wchar.h' (GNU): *note Copying Strings and Arrays::.

'wchar_t * wcpncpy (wchar_t *restrict WTO, const wchar_t *restrict WFROM, size_t SIZE)'

     'wchar.h' (GNU): *note Truncating Strings::.

'size_t wcrtomb (char *restrict S, wchar_t WC, mbstate_t *restrict PS)'

     'wchar.h' (ISO): *note Converting a Character::.

'int wcscasecmp (const wchar_t *WS1, const wchar_t *WS2)'

     'wchar.h' (GNU): *note String/Array Comparison::.

'wchar_t * wcscat (wchar_t *restrict WTO, const wchar_t *restrict WFROM)'

     'wchar.h' (ISO): *note Concatenating Strings::.

'wchar_t * wcschr (const wchar_t *WSTRING, int WC)'

     'wchar.h' (ISO): *note Search Functions::.

'wchar_t * wcschrnul (const wchar_t *WSTRING, wchar_t WC)'

     'wchar.h' (GNU): *note Search Functions::.

'int wcscmp (const wchar_t *WS1, const wchar_t *WS2)'

     'wchar.h' (ISO): *note String/Array Comparison::.

'int wcscoll (const wchar_t *WS1, const wchar_t *WS2)'

     'wchar.h' (ISO): *note Collation Functions::.

'wchar_t * wcscpy (wchar_t *restrict WTO, const wchar_t *restrict WFROM)'

     'wchar.h' (ISO): *note Copying Strings and Arrays::.

'size_t wcscspn (const wchar_t *WSTRING, const wchar_t *STOPSET)'

     'wchar.h' (ISO): *note Search Functions::.

'wchar_t * wcsdup (const wchar_t *WS)'

     'wchar.h' (GNU): *note Copying Strings and Arrays::.

'size_t wcsftime (wchar_t *S, size_t SIZE, const wchar_t *TEMPLATE, const struct tm *BROKENTIME)'

     'time.h' (ISO/Amend1): *note Formatting Calendar Time::.

'size_t wcslen (const wchar_t *WS)'

     'wchar.h' (ISO): *note String Length::.

'int wcsncasecmp (const wchar_t *WS1, const wchar_t *S2, size_t N)'

     'wchar.h' (GNU): *note String/Array Comparison::.

'wchar_t * wcsncat (wchar_t *restrict WTO, const wchar_t *restrict WFROM, size_t SIZE)'

     'wchar.h' (ISO): *note Truncating Strings::.

'int wcsncmp (const wchar_t *WS1, const wchar_t *WS2, size_t SIZE)'

     'wchar.h' (ISO): *note String/Array Comparison::.

'wchar_t * wcsncpy (wchar_t *restrict WTO, const wchar_t *restrict WFROM, size_t SIZE)'

     'wchar.h' (ISO): *note Truncating Strings::.

'size_t wcsnlen (const wchar_t *WS, size_t MAXLEN)'

     'wchar.h' (GNU): *note String Length::.

'size_t wcsnrtombs (char *restrict DST, const wchar_t **restrict SRC, size_t NWC, size_t LEN, mbstate_t *restrict PS)'

     'wchar.h' (GNU): *note Converting Strings::.

'wchar_t * wcspbrk (const wchar_t *WSTRING, const wchar_t *STOPSET)'

     'wchar.h' (ISO): *note Search Functions::.

'wchar_t * wcsrchr (const wchar_t *WSTRING, wchar_t C)'

     'wchar.h' (ISO): *note Search Functions::.

'size_t wcsrtombs (char *restrict DST, const wchar_t **restrict SRC, size_t LEN, mbstate_t *restrict PS)'

     'wchar.h' (ISO): *note Converting Strings::.

'size_t wcsspn (const wchar_t *WSTRING, const wchar_t *SKIPSET)'

     'wchar.h' (ISO): *note Search Functions::.

'wchar_t * wcsstr (const wchar_t *HAYSTACK, const wchar_t *NEEDLE)'

     'wchar.h' (ISO): *note Search Functions::.

'double wcstod (const wchar_t *restrict STRING, wchar_t **restrict TAILPTR)'

     'wchar.h' (ISO): *note Parsing of Floats::.

'float wcstof (const wchar_t *STRING, wchar_t **TAILPTR)'

     'wchar.h' (ISO): *note Parsing of Floats::.

'_FloatN wcstofN (const wchar_t *STRING, wchar_t **TAILPTR)'

     'wchar.h' (GNU): *note Parsing of Floats::.

'_FloatNx wcstofNx (const wchar_t *STRING, wchar_t **TAILPTR)'

     'wchar.h' (GNU): *note Parsing of Floats::.

'intmax_t wcstoimax (const wchar_t *restrict STRING, wchar_t **restrict TAILPTR, int BASE)'

     'wchar.h' (ISO): *note Parsing of Integers::.

'wchar_t * wcstok (wchar_t *NEWSTRING, const wchar_t *DELIMITERS, wchar_t **SAVE_PTR)'

     'wchar.h' (ISO): *note Finding Tokens in a String::.

'long int wcstol (const wchar_t *restrict STRING, wchar_t **restrict TAILPTR, int BASE)'

     'wchar.h' (ISO): *note Parsing of Integers::.

'long double wcstold (const wchar_t *STRING, wchar_t **TAILPTR)'

     'wchar.h' (ISO): *note Parsing of Floats::.

'long long int wcstoll (const wchar_t *restrict STRING, wchar_t **restrict TAILPTR, int BASE)'

     'wchar.h' (ISO): *note Parsing of Integers::.

'size_t wcstombs (char *STRING, const wchar_t *WSTRING, size_t SIZE)'

     'stdlib.h' (ISO): *note Non-reentrant String Conversion::.

'long long int wcstoq (const wchar_t *restrict STRING, wchar_t **restrict TAILPTR, int BASE)'

     'wchar.h' (GNU): *note Parsing of Integers::.

'unsigned long int wcstoul (const wchar_t *restrict STRING, wchar_t **restrict TAILPTR, int BASE)'

     'wchar.h' (ISO): *note Parsing of Integers::.

'unsigned long long int wcstoull (const wchar_t *restrict STRING, wchar_t **restrict TAILPTR, int BASE)'

     'wchar.h' (ISO): *note Parsing of Integers::.

'uintmax_t wcstoumax (const wchar_t *restrict STRING, wchar_t **restrict TAILPTR, int BASE)'

     'wchar.h' (ISO): *note Parsing of Integers::.

'unsigned long long int wcstouq (const wchar_t *restrict STRING, wchar_t **restrict TAILPTR, int BASE)'

     'wchar.h' (GNU): *note Parsing of Integers::.

'wchar_t * wcswcs (const wchar_t *HAYSTACK, const wchar_t *NEEDLE)'

     'wchar.h' (XPG): *note Search Functions::.

'size_t wcsxfrm (wchar_t *restrict WTO, const wchar_t *WFROM, size_t SIZE)'

     'wchar.h' (ISO): *note Collation Functions::.

'int wctob (wint_t C)'

     'wchar.h' (ISO): *note Converting a Character::.

'int wctomb (char *STRING, wchar_t WCHAR)'

     'stdlib.h' (ISO): *note Non-reentrant Character Conversion::.

'wctrans_t wctrans (const char *PROPERTY)'

     'wctype.h' (ISO): *note Wide Character Case Conversion::.

'wctrans_t'

     'wctype.h' (ISO): *note Wide Character Case Conversion::.

'wctype_t wctype (const char *PROPERTY)'

     'wctype.h' (ISO): *note Classification of Wide Characters::.

'wctype_t'

     'wctype.h' (ISO): *note Classification of Wide Characters::.

'wint_t'

     'wchar.h' (ISO): *note Extended Char Intro::.

'wchar_t * wmemchr (const wchar_t *BLOCK, wchar_t WC, size_t SIZE)'

     'wchar.h' (ISO): *note Search Functions::.

'int wmemcmp (const wchar_t *A1, const wchar_t *A2, size_t SIZE)'

     'wchar.h' (ISO): *note String/Array Comparison::.

'wchar_t * wmemcpy (wchar_t *restrict WTO, const wchar_t *restrict WFROM, size_t SIZE)'

     'wchar.h' (ISO): *note Copying Strings and Arrays::.

'wchar_t * wmemmove (wchar_t *WTO, const wchar_t *WFROM, size_t SIZE)'

     'wchar.h' (ISO): *note Copying Strings and Arrays::.

'wchar_t * wmempcpy (wchar_t *restrict WTO, const wchar_t *restrict WFROM, size_t SIZE)'

     'wchar.h' (GNU): *note Copying Strings and Arrays::.

'wchar_t * wmemset (wchar_t *BLOCK, wchar_t WC, size_t SIZE)'

     'wchar.h' (ISO): *note Copying Strings and Arrays::.

'int wordexp (const char *WORDS, wordexp_t *WORD-VECTOR-PTR, int FLAGS)'

     'wordexp.h' (POSIX.2): *note Calling Wordexp::.

'wordexp_t'

     'wordexp.h' (POSIX.2): *note Calling Wordexp::.

'void wordfree (wordexp_t *WORD-VECTOR-PTR)'

     'wordexp.h' (POSIX.2): *note Calling Wordexp::.

'int wprintf (const wchar_t *TEMPLATE, ...)'

     'wchar.h' (ISO): *note Formatted Output Functions::.

'ssize_t write (int FILEDES, const void *BUFFER, size_t SIZE)'

     'unistd.h' (POSIX.1): *note I/O Primitives::.

'ssize_t writev (int FILEDES, const struct iovec *VECTOR, int COUNT)'

     'sys/uio.h' (BSD): *note Scatter-Gather::.

'int wscanf (const wchar_t *TEMPLATE, ...)'

     'wchar.h' (ISO): *note Formatted Input Functions::.

'double y0 (double X)'

     'math.h' (SVID): *note Special Functions::.

'float y0f (float X)'

     'math.h' (SVID): *note Special Functions::.

'_FloatN y0fN (_FloatN X)'

     'math.h' (GNU): *note Special Functions::.

'_FloatNx y0fNx (_FloatNx X)'

     'math.h' (GNU): *note Special Functions::.

'long double y0l (long double X)'

     'math.h' (SVID): *note Special Functions::.

'double y1 (double X)'

     'math.h' (SVID): *note Special Functions::.

'float y1f (float X)'

     'math.h' (SVID): *note Special Functions::.

'_FloatN y1fN (_FloatN X)'

     'math.h' (GNU): *note Special Functions::.

'_FloatNx y1fNx (_FloatNx X)'

     'math.h' (GNU): *note Special Functions::.

'long double y1l (long double X)'

     'math.h' (SVID): *note Special Functions::.

'double yn (int N, double X)'

     'math.h' (SVID): *note Special Functions::.

'float ynf (int N, float X)'

     'math.h' (SVID): *note Special Functions::.

'_FloatN ynfN (int N, _FloatN X)'

     'math.h' (GNU): *note Special Functions::.

'_FloatNx ynfNx (int N, _FloatNx X)'

     'math.h' (GNU): *note Special Functions::.

'long double ynl (int N, long double X)'

     'math.h' (SVID): *note Special Functions::.

==============================================================================
File: libc.info,  Node: |Installation|,  Next: |Maintenance|,  Prev: |Library_Summary|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Installation*

Appendix C Installing the GNU C Library
=======================================

Before you do anything else, you should read the FAQ at
<https://sourceware.org/glibc/wiki/FAQ>.  It answers common questions
and describes problems you may experience with compilation and
installation.

   You will need recent versions of several GNU tools: definitely GCC
and GNU Make, and possibly others.  *Note Tools for Compilation::,
below.

MENU

* |Configuring_and_compiling|::   How to compile and test GNU libc.
* |Running_make_install|::        How to install it once you've got it
 compiled.
* |Tools_for_Compilation|::       You'll need these first.
* |Linux|::                       Specific advice for GNU/Linux systems.
* |Reporting_Bugs|::              So they'll get fixed.

==============================================================================
File: libc.info,  Node: |Configuring_and_compiling|,  Next: |Running_make_install|,  Up: |Installation|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *Configuring_and_compiling*

C.1 Configuring and compiling the GNU C Library
-----------------------------------------------

The GNU C Library cannot be compiled in the source directory.  You must
build it in a separate build directory.  For example, if you have
unpacked the GNU C Library sources in '/src/gnu/glibc-VERSION', create a
directory '/src/gnu/glibc-build' to put the object files in.  This
allows removing the whole build directory in case an error occurs, which
is the safest way to get a fresh start and should always be done.

   From your object directory, run the shell script 'configure' located
at the top level of the source tree.  In the scenario above, you'd type

     $ ../glibc-VERSION/configure ARGS...

   Please note that even though you're building in a separate build
directory, the compilation may need to create or modify files and
directories in the source directory.

'configure' takes many options, but the only one that is usually
mandatory is '--prefix'.  This option tells 'configure' where you want
the GNU C Library installed.  This defaults to '/usr/local', but the
normal setting to install as the standard system library is
'--prefix=/usr' for GNU/Linux systems and '--prefix=' (an empty prefix)
for GNU/Hurd systems.

   It may also be useful to pass 'CC=COMPILER' and 'CFLAGS=FLAGS'
arguments to 'configure'.  'CC' selects the C compiler that will be
used, and 'CFLAGS' sets optimization options for the compiler.  Any
compiler options required for all compilations, such as options
selecting an ABI or a processor for which to generate code, should be
included in 'CC'.  Options that may be overridden by the GNU C Library
build system for particular files, such as for optimization and
debugging, should go in 'CFLAGS'.  The default value of 'CFLAGS' is '-g
-O2', and the GNU C Library cannot be compiled without optimization, so
if 'CFLAGS' is specified it must enable optimization.  For example:

     $ ../glibc-VERSION/configure CC="gcc -m32" CFLAGS="-O3"

   The following list describes all of the available options for
'configure':

'--prefix=DIRECTORY'
     Install machine-independent data files in subdirectories of
     'DIRECTORY'.  The default is to install in '/usr/local'.

'--exec-prefix=DIRECTORY'
     Install the library and other machine-dependent files in
     subdirectories of 'DIRECTORY'.  The default is to the '--prefix'
     directory if that option is specified, or '/usr/local' otherwise.

'--with-headers=DIRECTORY'
     Look for kernel header files in DIRECTORY, not '/usr/include'.  The
     GNU C Library needs information from the kernel's header files
     describing the interface to the kernel.  The GNU C Library will
     normally look in '/usr/include' for them, but if you specify this
     option, it will look in DIRECTORY instead.

     This option is primarily of use on a system where the headers in
     '/usr/include' come from an older version of the GNU C Library.
     Conflicts can occasionally happen in this case.  You can also use
     this option if you want to compile the GNU C Library with a newer
     set of kernel headers than the ones found in '/usr/include'.

'--enable-kernel=VERSION'
     This option is currently only useful on GNU/Linux systems.  The
     VERSION parameter should have the form X.Y.Z and describes the
     smallest version of the Linux kernel the generated library is
     expected to support.  The higher the VERSION number is, the less
     compatibility code is added, and the faster the code gets.

'--with-binutils=DIRECTORY'
     Use the binutils (assembler and linker) in 'DIRECTORY', not the
     ones the C compiler would default to.  You can use this option if
     the default binutils on your system cannot deal with all the
     constructs in the GNU C Library.  In that case, 'configure' will
     detect the problem and suppress these constructs, so that the
     library will still be usable, but functionality may be lost--for
     example, you can't build a shared libc with old binutils.

'--with-nonshared-cflags=CFLAGS'
     Use additional compiler flags CFLAGS to build the parts of the
     library which are always statically linked into applications and
     libraries even with shared linking (that is, the object files
     contained in 'lib*_nonshared.a' libraries).  The build process will
     automatically use the appropriate flags, but this option can be
     used to set additional flags required for building applications and
     libraries, to match local policy.

'--disable-shared'
     Don't build shared libraries even if it is possible.  Not all
     systems support shared libraries; you need ELF support and
     (currently) the GNU linker.

'--enable-static-pie'
     Enable static position independent executable (static PIE) support.
     Static PIE is similar to static executable, but can be loaded at
     any address without help from a dynamic linker.  All static
     programs as well as static tests are built as static PIE, except
     for those marked with no-pie.  The resulting glibc can be used with
     the GCC option, -static-pie, which is available with GCC 8 or
     above, to create static PIE. This option also implies that glibc
     programs and tests are created as dynamic position independent
     executables (PIE) by default.

'--enable-cet'
     Enable Intel Control-flow Enforcement Technology (CET) support.
     When the GNU C Library is built with '--enable-cet', the resulting
     library is protected with indirect branch tracking (IBT) and shadow
     stack (SHSTK).  When CET is enabled, the GNU C Library is
     compatible with all existing executables and shared libraries.
     This feature is currently supported on i386, x86_64 and x32 with
     GCC 8 and binutils 2.29 or later.  Note that when CET is enabled,
     the GNU C Library requires CPUs capable of multi-byte NOPs, like
     x86-64 processors as well as Intel Pentium Pro or newer.

     NOTE: '--enable-cet' has been tested for i686, x86_64 and x32 on
     non-CET processors.  '--enable-cet' has been tested for x86_64 and
     x32 on CET SDVs, but Intel CET support hasn't been validated for
     i686.

'--disable-profile'
     Don't build libraries with profiling information.  You may want to
     use this option if you don't plan to do profiling.

'--enable-static-nss'
     Compile static versions of the NSS (Name Service Switch) libraries.
     This is not recommended because it defeats the purpose of NSS; a
     program linked statically with the NSS libraries cannot be
     dynamically reconfigured to use a different name database.

'--enable-hardcoded-path-in-tests'
     By default, dynamic tests are linked to run with the installed C
     library.  This option hardcodes the newly built C library path in
     dynamic tests so that they can be invoked directly.

'--disable-timezone-tools'
     By default, timezone related utilities ('zic', 'zdump', and
     'tzselect') are installed with the GNU C Library.  If you are
     building these independently (e.g.  by using the 'tzcode' package),
     then this option will allow disabling the install of these.

     Note that you need to make sure the external tools are kept in sync
     with the versions that the GNU C Library expects as the data
     formats may change over time.  Consult the 'timezone' subdirectory
     for more details.

'--enable-stack-protector'
'--enable-stack-protector=strong'
'--enable-stack-protector=all'
     Compile the C library and all other parts of the glibc package
     (including the threading and math libraries, NSS modules, and
     transliteration modules) using the GCC '-fstack-protector',
     '-fstack-protector-strong' or '-fstack-protector-all' options to
     detect stack overruns.  Only the dynamic linker and a small number
     of routines called directly from assembler are excluded from this
     protection.

'--enable-bind-now'
     Disable lazy binding for installed shared objects.  This provides
     additional security hardening because it enables full RELRO and a
     read-only global offset table (GOT), at the cost of slightly
     increased program load times.

'--enable-pt_chown'
     The file 'pt_chown' is a helper binary for 'grantpt' (*note
     Pseudo-Terminals: Allocation.) that is installed setuid root to fix
     up pseudo-terminal ownership.  It is not built by default because
     systems using the Linux kernel are commonly built with the 'devpts'
     filesystem enabled and mounted at '/dev/pts', which manages
     pseudo-terminal ownership automatically.  By using
     '--enable-pt_chown', you may build 'pt_chown' and install it setuid
     and owned by 'root'.  The use of 'pt_chown' introduces additional
     security risks to the system and you should enable it only if you
     understand and accept those risks.

'--disable-werror'
     By default, the GNU C Library is built with '-Werror'.  If you wish
     to build without this option (for example, if building with a newer
     version of GCC than this version of the GNU C Library was tested
     with, so new warnings cause the build with '-Werror' to fail), you
     can configure with '--disable-werror'.

'--disable-mathvec'
     By default for x86_64, the GNU C Library is built with the vector
     math library.  Use this option to disable the vector math library.

'--enable-tunables'
     Tunables support allows additional library parameters to be
     customized at runtime.  This feature is enabled by default.  This
     option can take the following values:

     'yes'
          This is the default if no option is passed to configure.  This
          enables tunables and selects the default frontend (currently
          'valstring').

     'no'
          This option disables tunables.

     'valstring'
          This enables tunables and selects the 'valstring' frontend for
          tunables.  This frontend allows users to specify tunables as a
          colon-separated list in a single environment variable
          'GLIBC_TUNABLES'.

'--enable-obsolete-nsl'
     By default, libnsl is only built as shared library for backward
     compatibility and the NSS modules libnss_compat, libnss_nis and
     libnss_nisplus are not built at all.  Use this option to enable
     libnsl with all depending NSS modules and header files.

'--disable-crypt'
     Do not install the passphrase-hashing library 'libcrypt' or the
     header file 'crypt.h'.  'unistd.h' will still declare the function
     'crypt'.  Using this option does not change the set of programs
     that may need to be linked with '-lcrypt'; it only means that the
     GNU C Library will not provide that library.

     This option is for hackers and distributions experimenting with
     independently-maintained implementations of libcrypt.  It may
     become the default in a future release.

'--disable-experimental-malloc'
     By default, a per-thread cache is enabled in 'malloc'.  While this
     cache can be disabled on a per-application basis using tunables
     (set glibc.malloc.tcache_count to zero), this option can be used to
     remove it from the build completely.

'--build=BUILD-SYSTEM'
'--host=HOST-SYSTEM'
     These options are for cross-compiling.  If you specify both options
     and BUILD-SYSTEM is different from HOST-SYSTEM, 'configure' will
     prepare to cross-compile the GNU C Library from BUILD-SYSTEM to be
     used on HOST-SYSTEM.  You'll probably need the '--with-headers'
     option too, and you may have to override CONFIGURE's selection of
     the compiler and/or binutils.

     If you only specify '--host', 'configure' will prepare for a native
     compile but use what you specify instead of guessing what your
     system is.  This is most useful to change the CPU submodel.  For
     example, if 'configure' guesses your machine as 'i686-pc-linux-gnu'
     but you want to compile a library for 586es, give
     '--host=i586-pc-linux-gnu' or just '--host=i586-linux' and add the
     appropriate compiler flags ('-mcpu=i586' will do the trick) to
     'CC'.

     If you specify just '--build', 'configure' will get confused.

'--with-pkgversion=VERSION'
     Specify a description, possibly including a build number or build
     date, of the binaries being built, to be included in '--version'
     output from programs installed with the GNU C Library.  For
     example, '--with-pkgversion='FooBar GNU/Linux glibc build 123''.
     The default value is 'GNU libc'.

'--with-bugurl=URL'
     Specify the URL that users should visit if they wish to report a
     bug, to be included in '--help' output from programs installed with
     the GNU C Library.  The default value refers to the main
     bug-reporting information for the GNU C Library.

   To build the library and related programs, type 'make'.  This will
produce a lot of output, some of which may look like errors from 'make'
but aren't.  Look for error messages from 'make' containing '***'.
Those indicate that something is seriously wrong.

   The compilation process can take a long time, depending on the
configuration and the speed of your machine.  Some complex modules may
take a very long time to compile, as much as several minutes on slower
machines.  Do not panic if the compiler appears to hang.

   If you want to run a parallel make, simply pass the '-j' option with
an appropriate numeric parameter to 'make'.  You need a recent GNU
'make' version, though.

   To build and run test programs which exercise some of the library
facilities, type 'make check'.  If it does not complete successfully, do
not use the built library, and report a bug after verifying that the
problem is not already known.  *Note Reporting Bugs::, for instructions
on reporting bugs.  Note that some of the tests assume they are not
being run by 'root'.  We recommend you compile and test the GNU C
Library as an unprivileged user.

   Before reporting bugs make sure there is no problem with your system.
The tests (and later installation) use some pre-existing files of the
system such as '/etc/passwd', '/etc/nsswitch.conf' and others.  These
files must all contain correct and sensible content.

   Normally, 'make check' will run all the tests before reporting all
problems found and exiting with error status if any problems occurred.
You can specify 'stop-on-test-failure=y' when running 'make check' to
make the test run stop and exit with an error status immediately when a
failure occurs.

   The GNU C Library pretty printers come with their own set of scripts
for testing, which run together with the rest of the testsuite through
'make check'.  These scripts require the following tools to run
successfully:

   * Python 2.7/3.4 or later

     Python is required for running the printers' test scripts.  As of
     release time, Python 3.6 is the newest verified to work to test the
     pretty printers.

   * PExpect 4.0

     The printer tests drive GDB through test programs and compare its
     output to the printers'.  PExpect is used to capture the output of
     GDB, and should be compatible with the Python version in your
     system.  As of release time PExpect 4.3 is the newest verified to
     work to test the pretty printers.

   * GDB 7.8 or later with support for Python 2.7/3.4 or later

     GDB itself needs to be configured with Python support in order to
     use the pretty printers.  Notice that your system having Python
     available doesn't imply that GDB supports it, nor that your
     system's Python and GDB's have the same version.  As of release
     time GNU 'debugger' 8.0.1 is the newest verified to work to test
     the pretty printers.

If these tools are absent, the printer tests will report themselves as
'UNSUPPORTED'.  Notice that some of the printer tests require the GNU C
Library to be compiled with debugging symbols.

   To format the 'GNU C Library Reference Manual' for printing, type
'make dvi'.  You need a working TeX installation to do this.  The
distribution builds the on-line formatted version of the manual, as Info
files, as part of the build process.  You can build them manually with
'make info'.

   The library has a number of special-purpose configuration parameters
which you can find in 'Makeconfig'.  These can be overwritten with the
file 'configparms'.  To change them, create a 'configparms' in your
build directory and add values as appropriate for your system.  The file
is included and parsed by 'make' and has to follow the conventions for
makefiles.

   It is easy to configure the GNU C Library for cross-compilation by
setting a few variables in 'configparms'.  Set 'CC' to the
cross-compiler for the target you configured the library for; it is
important to use this same 'CC' value when running 'configure', like
this: 'configure TARGET CC=TARGET-gcc'.  Set 'BUILD_CC' to the compiler
to use for programs run on the build system as part of compiling the
library.  You may need to set 'AR' to cross-compiling versions of 'ar'
if the native tools are not configured to work with object files for the
target you configured for.  When cross-compiling the GNU C Library, it
may be tested using 'make check
test-wrapper="SRCDIR/scripts/cross-test-ssh.sh HOSTNAME"', where SRCDIR
is the absolute directory name for the main source directory and
HOSTNAME is the host name of a system that can run the newly built
binaries of the GNU C Library.  The source and build directories must be
visible at the same locations on both the build system and HOSTNAME.

   In general, when testing the GNU C Library, 'test-wrapper' may be set
to the name and arguments of any program to run newly built binaries.
This program must preserve the arguments to the binary being run, its
working directory and the standard input, output and error file
descriptors.  If 'TEST-WRAPPER env' will not work to run a program with
environment variables set, then 'test-wrapper-env' must be set to a
program that runs a newly built program with environment variable
assignments in effect, those assignments being specified as 'VAR=VALUE'
before the name of the program to be run.  If multiple assignments to
the same variable are specified, the last assignment specified must take
precedence.  Similarly, if 'TEST-WRAPPER env -i' will not work to run a
program with an environment completely empty of variables except those
directly assigned, then 'test-wrapper-env-only' must be set; its use has
the same syntax as 'test-wrapper-env', the only difference in its
semantics being starting with an empty set of environment variables
rather than the ambient set.

==============================================================================
File: libc.info,  Node: |Running_make_install|,  Next: |Tools_for_Compilation|,  Prev: |Configuring_and_compiling|,  Up: |Installation|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Running_make_install*

C.2 Installing the C Library
----------------------------

To install the library and its header files, and the Info files of the
manual, type 'make install'.  This will build things, if necessary,
before installing them; however, you should still compile everything
first.  If you are installing the GNU C Library as your primary C
library, we recommend that you shut the system down to single-user mode
first, and reboot afterward.  This minimizes the risk of breaking things
when the library changes out from underneath.

   'make install' will do the entire job of upgrading from a previous
installation of the GNU C Library version 2.x.  There may sometimes be
headers left behind from the previous installation, but those are
generally harmless.  If you want to avoid leaving headers behind you can
do things in the following order.

   You must first build the library ('make'), optionally check it ('make
check'), switch the include directories and then install ('make
install').  The steps must be done in this order.  Not moving the
directory before install will result in an unusable mixture of header
files from both libraries, but configuring, building, and checking the
library requires the ability to compile and run programs against the old
library.  The new '/usr/include', after switching the include
directories and before installing the library should contain the Linux
headers, but nothing else.  If you do this, you will need to restore any
headers from libraries other than the GNU C Library yourself after
installing the library.

   You can install the GNU C Library somewhere other than where you
configured it to go by setting the 'DESTDIR' GNU standard make variable
on the command line for 'make install'.  The value of this variable is
prepended to all the paths for installation.  This is useful when
setting up a chroot environment or preparing a binary distribution.  The
directory should be specified with an absolute file name.  Installing
with the 'prefix' and 'exec_prefix' GNU standard make variables set is
not supported.

   The GNU C Library includes a daemon called 'nscd', which you may or
may not want to run.  'nscd' caches name service lookups; it can
dramatically improve performance with NIS+, and may help with DNS as
well.

   One auxiliary program, '/usr/libexec/pt_chown', is installed setuid
'root' if the '--enable-pt_chown' configuration option is used.  This
program is invoked by the 'grantpt' function; it sets the permissions on
a pseudoterminal so it can be used by the calling process.  If you are
using a Linux kernel with the 'devpts' filesystem enabled and mounted at
'/dev/pts', you don't need this program.

   After installation you might want to configure the timezone and
locale installation of your system.  The GNU C Library comes with a
locale database which gets configured with 'localedef'.  For example, to
set up a German locale with name 'de_DE', simply issue the command
'localedef -i de_DE -f ISO-8859-1 de_DE'.  To configure all locales that
are supported by the GNU C Library, you can issue from your build
directory the command 'make localedata/install-locales'.

   To configure the locally used timezone, set the 'TZ' environment
variable.  The script 'tzselect' helps you to select the right value.
As an example, for Germany, 'tzselect' would tell you to use
'TZ='Europe/Berlin''.  For a system wide installation (the given paths
are for an installation with '--prefix=/usr'), link the timezone file
which is in '/usr/share/zoneinfo' to the file '/etc/localtime'.  For
Germany, you might execute 'ln -s /usr/share/zoneinfo/Europe/Berlin
/etc/localtime'.

==============================================================================
File: libc.info,  Node: |Tools_for_Compilation|,  Next: |Linux|,  Prev: |Running_make_install|,  Up: |Installation|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *Tools_for_Compilation*

C.3 Recommended Tools for Compilation
-------------------------------------

We recommend installing the following GNU tools before attempting to
build the GNU C Library:

   * GNU 'make' 4.0 or newer

     As of relase time, GNU 'make' 4.2.1 is the newest verified to work
     to build the GNU C Library.

   * GCC 4.9 or newer

     GCC 4.9 or higher is required.  In general it is recommended to use
     the newest version of the compiler that is known to work for
     building the GNU C Library, as newer compilers usually produce
     better code.  As of release time, GCC 8.1.1 is the newest compiler
     verified to work to build the GNU C Library.

     For PowerPC 64-bits little-endian (powerpc64le), GCC 6.2 or higher
     is required.  This compiler version is the first to provide the
     features required for building the GNU C Library with support for
     '_Float128'.

     For multi-arch support it is recommended to use a GCC which has
     been built with support for GNU indirect functions.  This ensures
     that correct debugging information is generated for functions
     selected by IFUNC resolvers.  This support can either be enabled by
     configuring GCC with '--enable-gnu-indirect-function', or by
     enabling it by default by setting 'default_gnu_indirect_function'
     variable for a particular architecture in the GCC source file
     'gcc/config.gcc'.

     You can use whatever compiler you like to compile programs that use
     the GNU C Library.

     Check the FAQ for any special compiler issues on particular
     platforms.

   * GNU 'binutils' 2.25 or later

     You must use GNU 'binutils' (as and ld) to build the GNU C Library.
     No other assembler or linker has the necessary functionality at the
     moment.  As of release time, GNU 'binutils' 2.31.1 is the newest
     verified to work to build the GNU C Library.

   * GNU 'texinfo' 4.7 or later

     To correctly translate and install the Texinfo documentation you
     need this version of the 'texinfo' package.  Earlier versions do
     not understand all the tags used in the document, and the
     installation mechanism for the info files is not present or works
     differently.  As of release time, 'texinfo' 6.5 is the newest
     verified to work to build the GNU C Library.

   * GNU 'awk' 3.1.2, or higher

     'awk' is used in several places to generate files.  Some 'gawk'
     extensions are used, including the 'asorti' function, which was
     introduced in version 3.1.2 of 'gawk'.  As of release time, 'gawk'
     version 4.2.1 is the newest verified to work to build the GNU C
     Library.

   * GNU 'bison' 2.7 or later

     'bison' is used to generate the 'yacc' parser code in the 'intl'
     subdirectory.  As of release time, 'bison' version 3.0.4 is the
     newest verified to work to build the GNU C Library.

   * Perl 5

     Perl is not required, but it is used if present to test the
     installation.  We may decide to use it elsewhere in the future.  As
     of release time 'perl' version 5.28.0 is the newest verified to
     work to build the GNU C Library.

   * GNU 'sed' 3.02 or newer

     'Sed' is used in several places to generate files.  Most scripts
     work with any version of 'sed'.  As of release time, 'sed' version
     4.5 is the newest verified to work to build the GNU C Library.

If you change any of the 'configure.ac' files you will also need

   * GNU 'autoconf' 2.69 (exactly)

and if you change any of the message translation files you will need

   * GNU 'gettext' 0.10.36 or later

     As of release time, GNU 'gettext' version 0.19.8.1 is the newest
     version verified to work to build the GNU C Library.

You may also need these packages if you upgrade your source tree using
patches, although we try to avoid this.

==============================================================================
File: libc.info,  Node: |Linux|,  Next: |Reporting_Bugs|,  Prev: |Tools_for_Compilation|,  Up: |Installation|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *Linux*

C.4 Specific advice for GNU/Linux systems
-----------------------------------------

If you are installing the GNU C Library on GNU/Linux systems, you need
to have the header files from a 3.2 or newer kernel around for
reference.  (For the ia64 architecture, you need version 3.2.18 or newer
because this is the first version with support for the 'accept4' system
call.)  These headers must be installed using 'make headers_install';
the headers present in the kernel source directory are not suitable for
direct use by the GNU C Library.  You do not need to use that kernel,
just have its headers installed where the GNU C Library can access them,
referred to here as INSTALL-DIRECTORY.  The easiest way to do this is to
unpack it in a directory such as '/usr/src/linux-VERSION'.  In that
directory, run 'make headers_install
INSTALL_HDR_PATH=INSTALL-DIRECTORY'.  Finally, configure the GNU C
Library with the option '--with-headers=INSTALL-DIRECTORY/include'.  Use
the most recent kernel you can get your hands on.  (If you are
cross-compiling the GNU C Library, you need to specify
'ARCH=ARCHITECTURE' in the 'make headers_install' command, where
ARCHITECTURE is the architecture name used by the Linux kernel, such as
'x86' or 'powerpc'.)

   After installing the GNU C Library, you may need to remove or rename
directories such as '/usr/include/linux' and '/usr/include/asm', and
replace them with copies of directories such as 'linux' and 'asm' from
'INSTALL-DIRECTORY/include'.  All directories present in
'INSTALL-DIRECTORY/include' should be copied, except that the GNU C
Library provides its own version of '/usr/include/scsi'; the files
provided by the kernel should be copied without replacing those provided
by the GNU C Library.  The 'linux', 'asm' and 'asm-generic' directories
are required to compile programs using the GNU C Library; the other
directories describe interfaces to the kernel but are not required if
not compiling programs using those interfaces.  You do not need to copy
kernel headers if you did not specify an alternate kernel header source
using '--with-headers'.

   The Filesystem Hierarchy Standard for GNU/Linux systems expects some
components of the GNU C Library installation to be in '/lib' and some in
'/usr/lib'.  This is handled automatically if you configure the GNU C
Library with '--prefix=/usr'.  If you set some other prefix or allow it
to default to '/usr/local', then all the components are installed there.

==============================================================================
File: libc.info,  Node: |Reporting_Bugs|,  Prev: |Linux|,  Up: |Installation|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Reporting_Bugs*

C.5 Reporting Bugs
------------------

There are probably bugs in the GNU C Library.  There are certainly
errors and omissions in this manual.  If you report them, they will get
fixed.  If you don't, no one will ever know about them and they will
remain unfixed for all eternity, if not longer.

   It is a good idea to verify that the problem has not already been
reported.  Bugs are documented in two places: The file 'BUGS' describes
a number of well known bugs and the central GNU C Library bug tracking
system has a WWW interface at <https://sourceware.org/bugzilla/>.  The
WWW interface gives you access to open and closed reports.  A closed
report normally includes a patch or a hint on solving the problem.

   To report a bug, first you must find it.  With any luck, this will be
the hard part.  Once you've found a bug, make sure it's really a bug.  A
good way to do this is to see if the GNU C Library behaves the same way
some other C library does.  If so, probably you are wrong and the
libraries are right (but not necessarily).  If not, one of the libraries
is probably wrong.  It might not be the GNU C Library.  Many historical
Unix C libraries permit things that we don't, such as closing a file
twice.

   If you think you have found some way in which the GNU C Library does
not conform to the ISO and POSIX standards (*note Standards and
Portability::), that is definitely a bug.  Report it!

   Once you're sure you've found a bug, try to narrow it down to the
smallest test case that reproduces the problem.  In the case of a C
library, you really only need to narrow it down to one library function
call, if possible.  This should not be too difficult.

   The final step when you have a simple test case is to report the bug.
Do this at <http://www.gnu.org/software/libc/bugs.html>.

   If you are not sure how a function should behave, and this manual
doesn't tell you, that's a bug in the manual.  Report that too!  If the
function's behavior disagrees with the manual, then either the library
or the manual has a bug, so report the disagreement.  If you find any
errors or omissions in this manual, please report them to the bug
database.  If you refer to specific sections of the manual, please
include the section names for easier identification.

==============================================================================
File: libc.info,  Node: |Maintenance|,  Next: |Platform|,  Prev: |Installation|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Maintenance*

Appendix D Library Maintenance
==============================

MENU

* |Source_Layout|::         How to add new functions or header files
                             to the GNU C Library.
* |Porting|::               How to port the GNU C Library to
                             a new machine or operating system.

==============================================================================
File: libc.info,  Node: |Source_Layout|,  Next: |Porting|,  Up: |Maintenance|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Source_Layout*

D.1 Adding New Functions
------------------------

The process of building the library is driven by the makefiles, which
make heavy use of special features of GNU 'make'.  The makefiles are
very complex, and you probably don't want to try to understand them.
But what they do is fairly straightforward, and only requires that you
define a few variables in the right places.

   The library sources are divided into subdirectories, grouped by
topic.

   The 'string' subdirectory has all the string-manipulation functions,
'math' has all the mathematical functions, etc.

   Each subdirectory contains a simple makefile, called 'Makefile',
which defines a few 'make' variables and then includes the global
makefile 'Rules' with a line like:

     include ../Rules

The basic variables that a subdirectory makefile defines are:

'subdir'
     The name of the subdirectory, for example 'stdio'.  This variable
     must be defined.

'headers'
     The names of the header files in this section of the library, such
     as 'stdio.h'.

'routines'
'aux'
     The names of the modules (source files) in this section of the
     library.  These should be simple names, such as 'strlen' (rather
     than complete file names, such as 'strlen.c').  Use 'routines' for
     modules that define functions in the library, and 'aux' for
     auxiliary modules containing things like data definitions.  But the
     values of 'routines' and 'aux' are just concatenated, so there
     really is no practical difference.

'tests'
     The names of test programs for this section of the library.  These
     should be simple names, such as 'tester' (rather than complete file
     names, such as 'tester.c').  'make tests' will build and run all
     the test programs.  If a test program needs input, put the test
     data in a file called 'TEST-PROGRAM.input'; it will be given to the
     test program on its standard input.  If a test program wants to be
     run with arguments, put the arguments (all on a single line) in a
     file called 'TEST-PROGRAM.args'.  Test programs should exit with
     zero status when the test passes, and nonzero status when the test
     indicates a bug in the library or error in building.

'others'
     The names of "other" programs associated with this section of the
     library.  These are programs which are not tests per se, but are
     other small programs included with the library.  They are built by
     'make others'.

'install-lib'
'install-data'
'install'
     Files to be installed by 'make install'.  Files listed in
     'install-lib' are installed in the directory specified by 'libdir'
     in 'configparms' or 'Makeconfig' (*note Installation::).  Files
     listed in 'install-data' are installed in the directory specified
     by 'datadir' in 'configparms' or 'Makeconfig'.  Files listed in
     'install' are installed in the directory specified by 'bindir' in
     'configparms' or 'Makeconfig'.

'distribute'
     Other files from this subdirectory which should be put into a
     distribution tar file.  You need not list here the makefile itself
     or the source and header files listed in the other standard
     variables.  Only define 'distribute' if there are files used in an
     unusual way that should go into the distribution.

'generated'
     Files which are generated by 'Makefile' in this subdirectory.
     These files will be removed by 'make clean', and they will never go
     into a distribution.

'extra-objs'
     Extra object files which are built by 'Makefile' in this
     subdirectory.  This should be a list of file names like 'foo.o';
     the files will actually be found in whatever directory object files
     are being built in.  These files will be removed by 'make clean'.
     This variable is used for secondary object files needed to build
     'others' or 'tests'.

MENU

* Platform: Adding Platform-specific.             Adding platform-specific
                                         features.

==============================================================================
File: libc.info,  Node: |Adding_Platform_specific|,  Up: Source Layout
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *Adding_Platform_specific*

D.1.1 Platform-specific types, macros and functions
---------------------------------------------------

It's sometimes necessary to provide nonstandard, platform-specific
features to developers.  The C library is traditionally the lowest
library layer, so it makes sense for it to provide these low-level
features.  However, including these features in the C library may be a
disadvantage if another package provides them as well as there will be
two conflicting versions of them.  Also, the features won't be available
to projects that do not use the GNU C Library but use other GNU tools,
like GCC.

   The current guidelines are:
   * If the header file provides features that only make sense on a
     particular machine architecture and have nothing to do with an
     operating system, then the features should ultimately be provided
     as GCC built-in functions.  Until then, the GNU C Library may
     provide them in the header file.  When the GCC built-in functions
     become available, those provided in the header file should be made
     conditionally available prior to the GCC version in which the
     built-in function was made available.

   * If the header file provides features that are specific to an
     operating system, both GCC and the GNU C Library could provide it,
     but the GNU C Library is preferred as it already has a lot of
     information about the operating system.

   * If the header file provides features that are specific to an
     operating system but used by the GNU C Library, then the GNU C
     Library should provide them.

   The general solution for providing low-level features is to export
them as follows:

   * A nonstandard, low-level header file that defines macros and inline
     functions should be called 'sys/platform/NAME.h'.

   * Each header file's name should include the platform name, to avoid
     users thinking there is anything in common between the different
     header files for different platforms.  For example, a
     'sys/platform/ARCH.h' name such as 'sys/platform/ppc.h' is better
     than 'sys/platform.h'.

   * A platform-specific header file provided by the GNU C Library
     should coordinate with GCC such that compiler built-in versions of
     the functions and macros are preferred if available.  This means
     that user programs will only ever need to include
     'sys/platform/ARCH.h', keeping the same names of types, macros, and
     functions for convenience and portability.

   * Each included symbol must have the prefix '__ARCH_', such as
     '__ppc_get_timebase'.

   The easiest way to provide a header file is to add it to the
'sysdep_headers' variable.  For example, the combination of
Linux-specific header files on PowerPC could be provided like this:

     sysdep_headers += sys/platform/ppc.h

   Then ensure that you have added a 'sys/platform/ppc.h' header file in
the machine-specific directory, e.g.,
'sysdeps/powerpc/sys/platform/ppc.h'.

==============================================================================
File: libc.info,  Node: |Porting|,  Prev: |Source_Layout|,  Up: |Maintenance|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *Porting*

D.2 Porting the GNU C Library
-----------------------------

The GNU C Library is written to be easily portable to a variety of
machines and operating systems.  Machine- and operating system-dependent
functions are well separated to make it easy to add implementations for
new machines or operating systems.  This section describes the layout of
the library source tree and explains the mechanisms used to select
machine-dependent code to use.

   All the machine-dependent and operating system-dependent files in the
library are in the subdirectory 'sysdeps' under the top-level library
source directory.  This directory contains a hierarchy of subdirectories
(*note Hierarchy Conventions::).

   Each subdirectory of 'sysdeps' contains source files for a particular
machine or operating system, or for a class of machine or operating
system (for example, systems by a particular vendor, or all machines
that use IEEE 754 floating-point format).  A configuration specifies an
ordered list of these subdirectories.  Each subdirectory implicitly
appends its parent directory to the list.  For example, specifying the
list 'unix/bsd/vax' is equivalent to specifying the list 'unix/bsd/vax
unix/bsd unix'.  A subdirectory can also specify that it implies other
subdirectories which are not directly above it in the directory
hierarchy.  If the file 'Implies' exists in a subdirectory, it lists
other subdirectories of 'sysdeps' which are appended to the list,
appearing after the subdirectory containing the 'Implies' file.  Lines
in an 'Implies' file that begin with a '#' character are ignored as
comments.  For example, 'unix/bsd/Implies' contains:
     # BSD has Internet-related things.
     unix/inet
and 'unix/Implies' contains:
     posix

So the final list is 'unix/bsd/vax unix/bsd unix/inet unix posix'.

   'sysdeps' has a "special" subdirectory called 'generic'.  It is
always implicitly appended to the list of subdirectories, so you needn't
put it in an 'Implies' file, and you should not create any
subdirectories under it intended to be new specific categories.
'generic' serves two purposes.  First, the makefiles do not bother to
look for a system-dependent version of a file that's not in 'generic'.
This means that any system-dependent source file must have an analogue
in 'generic', even if the routines defined by that file are not
implemented on other platforms.  Second, the 'generic' version of a
system-dependent file is used if the makefiles do not find a version
specific to the system you're compiling for.

   If it is possible to implement the routines in a 'generic' file in
machine-independent C, using only other machine-independent functions in
the C library, then you should do so.  Otherwise, make them stubs.  A
"stub" function is a function which cannot be implemented on a
particular machine or operating system.  Stub functions always return an
error, and set 'errno' to 'ENOSYS' (Function not implemented).  *Note
Error Reporting::.  If you define a stub function, you must place the
statement 'stub_warning(FUNCTION)', where FUNCTION is the name of your
function, after its definition.  This causes the function to be listed
in the installed '<gnu/stubs.h>', and makes GNU ld warn when the
function is used.

   Some rare functions are only useful on specific systems and aren't
defined at all on others; these do not appear anywhere in the
system-independent source code or makefiles (including the 'generic'
directory), only in the system-dependent 'Makefile' in the specific
system's subdirectory.

   If you come across a file that is in one of the main source
directories ('string', 'stdio', etc.), and you want to write a machine-
or operating system-dependent version of it, move the file into
'sysdeps/generic' and write your new implementation in the appropriate
system-specific subdirectory.  Note that if a file is to be
system-dependent, it *must not* appear in one of the main source
directories.

   There are a few special files that may exist in each subdirectory of
'sysdeps':

'Makefile'

     A makefile for this machine or operating system, or class of
     machine or operating system.  This file is included by the library
     makefile 'Makerules', which is used by the top-level makefile and
     the subdirectory makefiles.  It can change the variables set in the
     including makefile or add new rules.  It can use GNU 'make'
     conditional directives based on the variable 'subdir' (see above)
     to select different sets of variables and rules for different
     sections of the library.  It can also set the 'make' variable
     'sysdep-routines', to specify extra modules to be included in the
     library.  You should use 'sysdep-routines' rather than adding
     modules to 'routines' because the latter is used in determining
     what to distribute for each subdirectory of the main source tree.

     Each makefile in a subdirectory in the ordered list of
     subdirectories to be searched is included in order.  Since several
     system-dependent makefiles may be included, each should append to
     'sysdep-routines' rather than simply setting it:

          sysdep-routines := $(sysdep-routines) foo bar

'Subdirs'

     This file contains the names of new whole subdirectories under the
     top-level library source tree that should be included for this
     system.  These subdirectories are treated just like the
     system-independent subdirectories in the library source tree, such
     as 'stdio' and 'math'.

     Use this when there are completely new sets of functions and header
     files that should go into the library for the system this
     subdirectory of 'sysdeps' implements.  For example,
     'sysdeps/unix/inet/Subdirs' contains 'inet'; the 'inet' directory
     contains various network-oriented operations which only make sense
     to put in the library on systems that support the Internet.

'configure'

     This file is a shell script fragment to be run at configuration
     time.  The top-level 'configure' script uses the shell '.' command
     to read the 'configure' file in each system-dependent directory
     chosen, in order.  The 'configure' files are often generated from
     'configure.ac' files using Autoconf.

     A system-dependent 'configure' script will usually add things to
     the shell variables 'DEFS' and 'config_vars'; see the top-level
     'configure' script for details.  The script can check for
     '--with-PACKAGE' options that were passed to the top-level
     'configure'.  For an option '--with-PACKAGE=VALUE' 'configure' sets
     the shell variable 'with_PACKAGE' (with any dashes in PACKAGE
     converted to underscores) to VALUE; if the option is just
     '--with-PACKAGE' (no argument), then it sets 'with_PACKAGE' to
     'yes'.

'configure.ac'

     This file is an Autoconf input fragment to be processed into the
     file 'configure' in this subdirectory.  *Note
     (autoconf.info)Introduction::, for a description of Autoconf.  You
     should write either 'configure' or 'configure.ac', but not both.
     The first line of 'configure.ac' should invoke the 'm4' macro
     'GLIBC_PROVIDES'.  This macro does several 'AC_PROVIDE' calls for
     Autoconf macros which are used by the top-level 'configure' script;
     without this, those macros might be invoked again unnecessarily by
     Autoconf.

   That is the general system for how system-dependencies are isolated.

MENU

* |Hierarchy_Conventions|::       The layout of the 'sysdeps' hierarchy.
* |Porting_to_Unix|::             Porting the library to an average
                                   Unix-like system.

==============================================================================
File: libc.info,  Node: |Hierarchy_Conventions|,  Next: |Porting_to_Unix|,  Up: Porting
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *Hierarchy_Conventions*

D.2.1 Layout of the 'sysdeps' Directory Hierarchy
-------------------------------------------------

A GNU configuration name has three parts: the CPU type, the
manufacturer's name, and the operating system.  'configure' uses these
to pick the list of system-dependent directories to look for.  If the
'--nfp' option is _not_ passed to 'configure', the directory
'MACHINE/fpu' is also used.  The operating system often has a "base
operating system"; for example, if the operating system is 'Linux', the
base operating system is 'unix/sysv'.  The algorithm used to pick the
list of directories is simple: 'configure' makes a list of the base
operating system, manufacturer, CPU type, and operating system, in that
order.  It then concatenates all these together with slashes in between,
to produce a directory name; for example, the configuration
'i686-linux-gnu' results in 'unix/sysv/linux/i386/i686'.  'configure'
then tries removing each element of the list in turn, so
'unix/sysv/linux' and 'unix/sysv' are also tried, among others.  Since
the precise version number of the operating system is often not
important, and it would be very inconvenient, for example, to have
identical 'irix6.2' and 'irix6.3' directories, 'configure' tries
successively less specific operating system names by removing trailing
suffixes starting with a period.

   As an example, here is the complete list of directories that would be
tried for the configuration 'i686-linux-gnu':

     sysdeps/i386/elf
     sysdeps/unix/sysv/linux/i386
     sysdeps/unix/sysv/linux
     sysdeps/gnu
     sysdeps/unix/common
     sysdeps/unix/mman
     sysdeps/unix/inet
     sysdeps/unix/sysv/i386/i686
     sysdeps/unix/sysv/i386
     sysdeps/unix/sysv
     sysdeps/unix/i386
     sysdeps/unix
     sysdeps/posix
     sysdeps/i386/i686
     sysdeps/i386/i486
     sysdeps/libm-i387/i686
     sysdeps/i386/fpu
     sysdeps/libm-i387
     sysdeps/i386
     sysdeps/wordsize-32
     sysdeps/ieee754
     sysdeps/libm-ieee754
     sysdeps/generic

   Different machine architectures are conventionally subdirectories at
the top level of the 'sysdeps' directory tree.  For example,
'sysdeps/sparc' and 'sysdeps/m68k'.  These contain files specific to
those machine architectures, but not specific to any particular
operating system.  There might be subdirectories for specializations of
those architectures, such as 'sysdeps/m68k/68020'.  Code which is
specific to the floating-point coprocessor used with a particular
machine should go in 'sysdeps/MACHINE/fpu'.

   There are a few directories at the top level of the 'sysdeps'
hierarchy that are not for particular machine architectures.

'generic'
     As described above (*note Porting::), this is the subdirectory that
     every configuration implicitly uses after all others.

'ieee754'
     This directory is for code using the IEEE 754 floating-point
     format, where the C type 'float' is IEEE 754 single-precision
     format, and 'double' is IEEE 754 double-precision format.  Usually
     this directory is referred to in the 'Implies' file in a machine
     architecture-specific directory, such as 'm68k/Implies'.

'libm-ieee754'
     This directory contains an implementation of a mathematical library
     usable on platforms which use IEEE 754 conformant floating-point
     arithmetic.

'libm-i387'
     This is a special case.  Ideally the code should be in
     'sysdeps/i386/fpu' but for various reasons it is kept aside.

'posix'
     This directory contains implementations of things in the library in
     terms of POSIX.1 functions.  This includes some of the POSIX.1
     functions themselves.  Of course, POSIX.1 cannot be completely
     implemented in terms of itself, so a configuration using just
     'posix' cannot be complete.

'unix'
     This is the directory for Unix-like things.  *Note Porting to
     Unix::.  'unix' implies 'posix'.  There are some special-purpose
     subdirectories of 'unix':

     'unix/common'
          This directory is for things common to both BSD and System V
          release 4.  Both 'unix/bsd' and 'unix/sysv/sysv4' imply
          'unix/common'.

     'unix/inet'
          This directory is for 'socket' and related functions on Unix
          systems.  'unix/inet/Subdirs' enables the 'inet' top-level
          subdirectory.  'unix/common' implies 'unix/inet'.

'mach'
     This is the directory for things based on the Mach microkernel from
     CMU (including GNU/Hurd systems).  Other basic operating systems
     (VMS, for example) would have their own directories at the top
     level of the 'sysdeps' hierarchy, parallel to 'unix' and 'mach'.

==============================================================================
File: libc.info,  Node: |Porting_to_Unix|,  Prev: |Hierarchy_Conventions|,  Up: |Porting|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *Porting_to_Unix*

D.2.2 Porting the GNU C Library to Unix Systems
-----------------------------------------------

Most Unix systems are fundamentally very similar.  There are variations
between different machines, and variations in what facilities are
provided by the kernel.  But the interface to the operating system
facilities is, for the most part, pretty uniform and simple.

   The code for Unix systems is in the directory 'unix', at the top
level of the 'sysdeps' hierarchy.  This directory contains
subdirectories (and subdirectory trees) for various Unix variants.

   The functions which are system calls in most Unix systems are
implemented in assembly code, which is generated automatically from
specifications in files named 'syscalls.list'.  There are several such
files, one in 'sysdeps/unix' and others in its subdirectories.  Some
special system calls are implemented in files that are named with a
suffix of '.S'; for example, '_exit.S'.  Files ending in '.S' are run
through the C preprocessor before being fed to the assembler.

   These files all use a set of macros that should be defined in
'sysdep.h'.  The 'sysdep.h' file in 'sysdeps/unix' partially defines
them; a 'sysdep.h' file in another directory must finish defining them
for the particular machine and operating system variant.  See
'sysdeps/unix/sysdep.h' and the machine-specific 'sysdep.h'
implementations to see what these macros are and what they should do.

   The system-specific makefile for the 'unix' directory
('sysdeps/unix/Makefile') gives rules to generate several files from the
Unix system you are building the library on (which is assumed to be the
target system you are building the library _for_).  All the generated
files are put in the directory where the object files are kept; they
should not affect the source tree itself.  The files generated are
'ioctls.h', 'errnos.h', 'sys/param.h', and 'errlist.c' (for the 'stdio'
section of the library).

==============================================================================
File: libc.info,  Node: |Platform|,  Next: |Contributors|,  Prev: |Maintenance|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *Platform*

Appendix E Platform-specific facilities
=======================================

The GNU C Library can provide machine-specific functionality.

MENU

* |PowerPC|::           Facilities Specific to the PowerPC Architecture
* |RISC_V|::            Facilities Specific to the RISC-V Architecture

==============================================================================
File: libc.info,  Node: |PowerPC|,  Next: |RISC_V|,  Up: |Platform|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *PowerPC*

E.1 PowerPC-specific Facilities
-------------------------------

Facilities specific to PowerPC that are not specific to a particular
operating system are declared in 'sys/platform/ppc.h'.

 -- Function: uint64_t __ppc_get_timebase (void)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Read the current value of the Time Base Register.

     The "Time Base Register" is a 64-bit register that stores a
     monotonically incremented value updated at a system-dependent
     frequency that may be different from the processor frequency.  More
     information is available in 'Power ISA 2.06b - Book II - Section
     5.2'.

     '__ppc_get_timebase' uses the processor's time base facility
     directly without requiring assistance from the operating system, so
     it is very efficient.

 -- Function: uint64_t __ppc_get_timebase_freq (void)
     Preliminary: | MT-Unsafe init | AS-Unsafe corrupt:init | AC-Unsafe
     corrupt:init | *Note POSIX Safety Concepts::.

     Read the current frequency at which the Time Base Register is
     updated.

     This frequency is not related to the processor clock or the bus
     clock.  It is also possible that this frequency is not constant.
     More information is available in 'Power ISA 2.06b - Book II -
     Section 5.2'.

   The following functions provide hints about the usage of resources
that are shared with other processors.  They can be used, for example,
if a program waiting on a lock intends to divert the shared resources to
be used by other processors.  More information is available in 'Power
ISA 2.06b - Book II - Section 3.2'.

 -- Function: void __ppc_yield (void)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Provide a hint that performance will probably be improved if shared
     resources dedicated to the executing processor are released for use
     by other processors.

 -- Function: void __ppc_mdoio (void)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Provide a hint that performance will probably be improved if shared
     resources dedicated to the executing processor are released until
     all outstanding storage accesses to caching-inhibited storage have
     been completed.

 -- Function: void __ppc_mdoom (void)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Provide a hint that performance will probably be improved if shared
     resources dedicated to the executing processor are released until
     all outstanding storage accesses to cacheable storage for which the
     data is not in the cache have been completed.

 -- Function: void __ppc_set_ppr_med (void)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Set the Program Priority Register to medium value (default).

     The "Program Priority Register" (PPR) is a 64-bit register that
     controls the program's priority.  By adjusting the PPR value the
     programmer may improve system throughput by causing the system
     resources to be used more efficiently, especially in contention
     situations.  The three unprivileged states available are covered by
     the functions '__ppc_set_ppr_med' (medium - default),
     '__ppc_set_ppc_low' (low) and '__ppc_set_ppc_med_low' (medium low).
     More information available in 'Power ISA 2.06b - Book II - Section
     3.1'.

 -- Function: void __ppc_set_ppr_low (void)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Set the Program Priority Register to low value.

 -- Function: void __ppc_set_ppr_med_low (void)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Set the Program Priority Register to medium low value.

   Power ISA 2.07 extends the priorities that can be set to the Program
Priority Register (PPR). The following functions implement the new
priority levels: very low and medium high.

 -- Function: void __ppc_set_ppr_very_low (void)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Set the Program Priority Register to very low value.

 -- Function: void __ppc_set_ppr_med_high (void)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Set the Program Priority Register to medium high value.  The medium
     high priority is privileged and may only be set during certain time
     intervals by problem-state programs.  If the program priority is
     medium high when the time interval expires or if an attempt is made
     to set the priority to medium high when it is not allowed, the
     priority is set to medium.

==============================================================================
File: libc.info,  Node: |RISC_V|,  Prev: |PowerPC|,  Up: |Platform|
==============================================================================



E.2 RISC-V-specific Facilities
------------------------------

Cache management facilities specific to RISC-V systems that implement
the Linux ABI are declared in 'sys/cachectl.h'.

 -- Function: void __riscv_flush_icache (void *START, void *END,
          unsigned long int FLAGS)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Enforce ordering between stores and instruction cache fetches.  The
     range of addresses over which ordering is enforced is specified by
     START and END.  The FLAGS argument controls the extent of this
     ordering, with the default behavior (a FLAGS value of 0) being to
     enforce the fence on all threads in the current process.  Setting
     the 'SYS_RISCV_FLUSH_ICACHE_LOCAL' bit allows users to indicate
     that enforcing ordering on only the current thread is necessary.
     All other flag bits are reserved.

==============================================================================
File: libc.info,  Node: |Contributors|,  Next: |Free_Manuals|,  Prev: |Platform|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Contributors*

Appendix F Contributors to the GNU C Library
============================================

The GNU C Library project would like to thank its many contributors.
Without them the project would not have been nearly as successful as it
has been.  Any omissions in this list are accidental.  Feel free to file
a bug in bugzilla if you have been left out or some of your
contributions are not listed.  Please keep this list in alphabetical
order.

   * Nick Alcock for contributing fixes to allow the GNU C Library to be
     built with the stack smashing protector enabled.

   * John David Anglin for various fixes to the hppa port.

   * Ryan S. Arnold for his improvements for Linux on PowerPC and his
     direction as FSF Project Steward for the GNU C Library.

   * Miles Bader for writing the 'argp' argument-parsing package, and
     the 'argz'/'envz' interfaces.

   * Jeff Bailey for his maintainership of the HPPA architecture.

   * Petr Baudis for bug fixes and testing.

   * Stephen R. van den Berg for contributing a highly-optimized
     'strstr' function.

   * Ondrej Bilka for contributing optimized string routines for x64 and
     various fixes.

   * Eric Blake for adding O(n) implementations of 'memmem', 'strstr'
     and 'strcasestr'.

   * Philip Blundell for the ports to Linux/ARM
     ('arm-ANYTHING-linuxaout') and ARM standalone
     ('arm-ANYTHING-none'), as well as for parts of the IPv6 support
     code.

   * Per Bothner for the implementation of the 'libio' library which is
     used to implement 'stdio' functions.

   * Mark Brown for his direction as part of the GNU C Library steering
     committee.

   * Thomas Bushnell for his contributions to Hurd.

   * Rogerio Alves Cardoso for various fixes to PowerPC.

   * Paul Clarke for optimized functions on PowerPC.

   * Palmer Dabbelt for contributing the port to Linux/RISC-V.

   * DJ Delorie for maintenance of Linux/RISC-V, and various fixes.

   * Wilco Dijkstra for various fixes.

   * Liubov Dmitrieva for optimized string and math functions on x86-64
     and x86.

   * Ulrich Drepper for his many contributions in almost all parts of
     the GNU C Library, including:
        * writing most of the POSIX Threads Library originally.
        * internationalization support, including the 'locale' and
          'localedef' utilities.
        * Linux i386/ELF support
        * the 'hsearch' and 'drand48' families of functions, reentrant
          '...'_r'' versions of the 'random' family; System V shared
          memory and IPC support code
        * several highly-optimized string functions for iX86 processors
        * many math functions
        * the character conversion functions ('iconv')
        * the 'ftw' and 'nftw' functions
        * the floating-point printing function used by 'printf' and
          friends and the floating-point reading function used by
          'scanf', 'strtod' and friends
        * the 'catgets' support and the entire suite of multi-byte and
          wide-character support functions ('wctype.h', 'wchar.h',
          etc.).
        * versioning of objects on the symbol level

   * Wilco Dijkstra for various fixes.

   * Richard Earnshaw for continued support and fixes to the various ARM
     machine files.

   * Paul Eggert for the 'mktime' function and for his direction as part
     of the GNU C Library steering committee.

   * Steve Ellcey for various fixes.

   * Mike FABIAN for automating Unicode updates, for updating the locale
     data for ISO 14651, for updating the library Unicode support, and
     for various locale updates and fixes.

   * Tulio Magno Quites Machado Filho for adding a new class of
     installed headers for low-level platform-specific functionality and
     one such for PowerPC and various fixes.

   * Mike Frysinger for his maintaining of the IA64 architecture and for
     testing and bug fixing.

   * Martin Galvan for contributing gdb pretty printer support to glibc
     and adding an initial set of pretty printers for structures in the
     POSIX Threads library.

   * Michael Glad for the passphrase-hashing function 'crypt' and
     related functions.

   * Wolfram Gloger for contributing the memory allocation functions
     functions 'malloc', 'realloc' and 'free' and related code.

   * Gabriel F. T. Gomes for his improvements for Linux on PowerPC and
     for implementing the IEEE 128-bit floating point type for PowerPC.

   * Torbjo"rn Granlund for fast implementations of many of the string
     functions ('memcpy', 'strlen', etc.).

   * Michael J. Haertel for writing the merge sort function 'qsort' and
     malloc checking functions like 'mcheck'.

   * Bruno Haible for his improvements to the 'iconv' and locale
     implementations.

   * Richard Henderson for the port to Linux on Alpha
     ('alpha-ANYTHING-linux') and software floating-point support.

   * David Holsgrove for the port to Linux on MicroBlaze.

   * Daniel Jacobowitz for various fixes and enhancements.

   * Andreas Jaeger for the port to Linux on x86-64
     ('x86_64-ANYTHING-linux' and his work on Linux for MIPS
     ('mips-ANYTHING-linux'), implementing the 'ldconfig' program,
     providing a test suite for the math library and for his direction
     as part of the GNU C Library steering committee.

   * Aurelien Jarno for various fixes.

   * Rical Jasan for contributing various fixes in the GNU C Library
     manual.

   * Jakub Jelinek for implementing a number of checking functions,
     software floating-point support and for his direction as part of
     the GNU C Library steering committee.

   * Simon Josefsson for the 'libidn' add-on.

   * Geoffrey Keating for the port to Linux on PowerPC
     ('powerpc-ANYTHING-linux').

   * Brendan Kehoe for contributing the port to the MIPS DECStation
     running Ultrix 4 ('mips-dec-ultrix4') and the port to the DEC Alpha
     running OSF/1 ('alpha-dec-osf1').

   * Mark Kettenis for implementing the 'utmpx' interface and a utmp
     daemon, and for a Hesiod NSS module.

   * Andi Kleen for implementing pthreads lock elision with TSX.

   * Kazumoto Kojima for the port of the Mach and Hurd code to the MIPS
     architecture ('mips-ANYTHING-gnu') and for his work on the SH
     architecture.

   * Maxim Kuvyrkov for various fixes.

   * Andreas Krebbel for his work on Linux for s390 and s390x.

   * Thorsten Kukuk for providing an implementation for NIS (YP) and
     NIS+, securelevel 0, 1 and 2 and for the implementation for a
     caching daemon for NSS ('nscd').

   * Akhilesh Kumar for various fixes to locales.

   * Jeff Law for various fixes.

   * Doug Lea for contributing the memory allocation functions 'malloc',
     'realloc' and 'free' and related code.

   * Chris Leonard for various fixes and enhancements to localedata.

   * Stefan Liebler for various fixes.

   * Hongjiu Lu for providing the support for a Linux 32-bit runtime
     environment under x86-64 (x32), for porting to Linux on IA64, for
     improved string functions, a framework for testing IFUNC
     implementations, for implementing Intel Control-Flow Enforcement
     Technology, and many bug fixes.

   * Rafal Luzynski for contributing support for two grammatical forms
     of month names, and for various fixes to locales.

   * Luis Machado for optimized functions on PowerPC.

   * David J. MacKenzie for his contribution to the 'getopt' function
     and writing the 'tar.h' header.

   * Greg McGary for adding runtime support for bounds checking.

   * Roland McGrath for writing most of the GNU C Library originally,
     for his work on the Hurd port, his direction as part of the GNU C
     Library steering committee and as FSF Project Steward for the GNU C
     Library, and for many bug fixes and reviewing of contributions.

   * Allan McRae for various fixes.

   * Jason Merrill for the port to the Sequent Symmetry running Dynix
     version 3 ('i386-sequent-bsd').

   * Chris Metcalf for the port to Linux/Tile ('tilegx-ANYTHING-linux'
     and 'tilepro-ANYTHING-linux') and support for the generic Linux
     kernel syscall interface used by several newer ports.

   * David Miller for contributing the port to Linux/Sparc
     ('sparc*-ANYTHING-linux').

   * Alan Modra for his improvements for Linux on PowerPC.

   * David Mosberger-Tang for contributing the port to Linux/Alpha
     ('alpha-ANYTHING-linux').

   * Wainer dos Santos Moschetta for various fixes to powerpc.

   * Stephen Moshier for implementing some 128-bit long double format
     math functions.

   * Stephen Munroe for his port to Linux on PowerPC64
     ('powerpc64-ANYTHING-linux') and for adding optimized
     implementations for PowerPC.

   * Paul E. Murphy for various fixes on PowerPC and for implementing
     the IEEE 128-bit floating point type for PowerPC.

   * Joseph S. Myers for numerous bug fixes for the libm functions, for
     his maintainership of the ARM and MIPS architectures and the math
     component, improving cross-compilation and cross-testing of the GNU
     C Library, expanded coverage of conformtest, merging the ports/
     subdirectory into the GNU C Library main repository and his
     direction as FSF Project Steward for the GNU C Library.

   * Marko Myllynen for various fixes.

   * Szabolcs Nagy for various fixes.

   * Will Newton for contributing some optimized string functions and
     pointer encryption support for ARM and various fixes.

   * Carlos O'Donell for his maintainership of the HPPA architecture,
     for maintaining the GNU C Library web pages and wiki, for his
     direction as FSF Project Steward for the GNU C Library and various
     bug fixes.

   * Alexandre Oliva for adding TLS descriptors for LD and GD on x86 and
     x86-64, for the am33 port, for completing the MIPS n64/n32/o32
     multilib port, for thread-safety, async-signal safety and
     async-cancellation safety documentation in the manual, for his
     direction as FSF Project Maintainer and for various fixes.

   * Paul Pluzhnikov for various fixes.

   * Marek Polacek for various fixes.

   * Siddhesh Poyarekar for various fixes, an implementation of a
     framework for performance benchmarking of functions and
     implementing the tunables infrastructure.

   * Tom Quinn for contributing the startup code to support SunOS shared
     libraries and the port to SGI machines running Irix 4
     ('mips-sgi-irix4').

   * Torvald Riegel for the implementation of new algorithms for
     semaphores, pthread_rwlock and condition variables.

   * Maciej W. Rozycki for MIPS fixes, support for ABSOLUTE symbols, and
     various fixes.

   * Pravin Satpute for writing sorting rules for some Indian languages.

   * Douglas C. Schmidt for writing the quick sort function used as a
     fallback by 'qsort'.

   * Will Schmidt for optimized string functions on PowerPC.

   * Andreas Schwab for the port to Linux/m68k ('m68k-ANYTHING-linux'),
     for his direction as part of the GNU C Library steering committee,
     and for various bug fixes.

   * Martin Schwidefsky for porting to Linux on s390
     ('s390-ANYTHING-linux') and s390x ('s390x-ANYTHING-linux').

   * Thomas Schwinge for his contribution to Hurd and the SH
     architecture.

   * Andrew Senkevich for contributing vector math function
     implementations for x86.

   * Carlos Eduardo Seo for optimized functions on PowerPC.

   * Arjun Shankar for testing and bug fixing.

   * Marcus Shawcroft for contributing the AArch64 port.

   * Franz Sirl for various fixes.

   * Jes Sorensen for porting to Linux on IA64 ('ia64-ANYTHING-linux').

   * Rajalakshmi Srinivasaraghavan for various fixes and optimizations
     on PowerPC and for implementing the IEEE 128-bit floating point
     type for PowerPC.

   * Richard Stallman for his contribution to the 'getopt' function.

   * Alfred M. Szmidt for various fixes.

   * Chung-Lin Tang for contributing the Nios II port.

   * Ian Lance Taylor for contributing the port to the MIPS DECStation
     running Ultrix 4 ('mips-dec-ultrix4').

   * Samuel Thibault for improving the Hurd port.

   * Pino Toscano for various fixes.

   * Tim Waugh for the implementation of the POSIX.2 'wordexp' function
     family.

   * Florian Weimer for his maintainership of the network component, for
     handling of security issues, and for various fixes.

   * Zack Weinberg for the 'explicit_bzero' implementation and for
     various fixes.

   * Eric Youngdale for implementing versioning of objects on the symbol
     level.

   * Adhemerval Zanella for optimized functions on PowerPC, ISO C
     threads support and various fixes.

   Some code in the GNU C Library comes from other projects and might be
under a different license:

   * The timezone support code is derived from the public-domain
     timezone package by Arthur David Olson and his many contributors.

   * Some of the support code for Mach is taken from Mach 3.0 by CMU;
     the file 'if_ppp.h' is also copyright by CMU, but under a different
     license; see the file 'LICENSES' for the text of the licenses.

   * The random number generation functions 'random', 'srandom',
     'setstate' and 'initstate', which are also the basis for the 'rand'
     and 'srand' functions, were written by Earl T. Cohen for the
     University of California at Berkeley and are copyrighted by the
     Regents of the University of California.  They have undergone minor
     changes to fit into the GNU C Library and to fit the ISO C
     standard, but the functional code is Berkeley's.

   * The Internet-related code (most of the 'inet' subdirectory) and
     several other miscellaneous functions and header files have been
     included from 4.4 BSD with little or no modification.  The copying
     permission notice for this code can be found in the file 'LICENSES'
     in the source distribution.

   * The 'getaddrinfo' and 'getnameinfo' functions and supporting code
     were written by Craig Metz; see the file 'LICENSES' for details on
     their licensing.

   * The DNS resolver code is taken directly from BIND 8.2.3-T5B, which
     includes copyrighted code from UC Berkeley and from Digital
     Equipment Corporation.  See the file 'LICENSES' for the text of the
     DEC license.

   * The code to support Sun RPC is taken verbatim from Sun's RPCSRC-4.0
     distribution; see the file 'LICENSES' for the text of the license.

   * The math functions are taken from 'fdlibm-5.1' by Sun Microsystems,
     as modified by J.T. Conklin, Ian Lance Taylor, Ulrich Drepper,
     Andreas Schwab, and Roland McGrath.

   * Many of the IEEE 64-bit double precision math functions (in the
     'sysdeps/ieee754/dbl-64' subdirectory) come from the IBM Accurate
     Mathematical Library, contributed by IBM.

   * Many of the IA64 math functions are taken from a collection of
     "Highly Optimized Mathematical Functions for Itanium" that Intel
     makes available under a free license; see the file 'LICENSES' for
     details.

==============================================================================
File: libc.info,  Node: |Free_Manuals|,  Next: |Copying|,  Prev: |Contributors|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Free_Manuals*

Appendix G Free Software Needs Free Documentation
=================================================

The biggest deficiency in the free software community today is not in
the software--it is the lack of good free documentation that we can
include with the free software.  Many of our most important programs do
not come with free reference manuals and free introductory texts.
Documentation is an essential part of any software package; when an
important free software package does not come with a free manual and a
free tutorial, that is a major gap.  We have many such gaps today.

   Consider Perl, for instance.  The tutorial manuals that people
normally use are non-free.  How did this come about?  Because the
authors of those manuals published them with restrictive terms--no
copying, no modification, source files not available--which exclude them
from the free software world.

   That wasn't the first time this sort of thing happened, and it was
far from the last.  Many times we have heard a GNU user eagerly describe
a manual that he is writing, his intended contribution to the community,
only to learn that he had ruined everything by signing a publication
contract to make it non-free.

   Free documentation, like free software, is a matter of freedom, not
price.  The problem with the non-free manual is not that publishers
charge a price for printed copies--that in itself is fine.  (The Free
Software Foundation sells printed copies of manuals, too.)  The problem
is the restrictions on the use of the manual.  Free manuals are
available in source code form, and give you permission to copy and
modify.  Non-free manuals do not allow this.

   The criteria of freedom for a free manual are roughly the same as for
free software.  Redistribution (including the normal kinds of commercial
redistribution) must be permitted, so that the manual can accompany
every copy of the program, both on-line and on paper.

   Permission for modification of the technical content is crucial too.
When people modify the software, adding or changing features, if they
are conscientious they will change the manual too--so they can provide
accurate and clear documentation for the modified program.  A manual
that leaves you no choice but to write a new manual to document a
changed version of the program is not really available to our community.

   Some kinds of limits on the way modification is handled are
acceptable.  For example, requirements to preserve the original author's
copyright notice, the distribution terms, or the list of authors, are
ok.  It is also no problem to require modified versions to include
notice that they were modified.  Even entire sections that may not be
deleted or changed are acceptable, as long as they deal with
nontechnical topics (like this one).  These kinds of restrictions are
acceptable because they don't obstruct the community's normal use of the
manual.

   However, it must be possible to modify all the _technical_ content of
the manual, and then distribute the result in all the usual media,
through all the usual channels.  Otherwise, the restrictions obstruct
the use of the manual, it is not free, and we need another manual to
replace it.

   Please spread the word about this issue.  Our community continues to
lose manuals to proprietary publishing.  If we spread the word that free
software needs free reference manuals and free tutorials, perhaps the
next person who wants to contribute by writing documentation will
realize, before it is too late, that only free manuals contribute to the
free software community.

   If you are writing documentation, please insist on publishing it
under the GNU Free Documentation License or another free documentation
license.  Remember that this decision requires your approval--you don't
have to let the publisher decide.  Some commercial publishers will use a
free license if you insist, but they will not propose the option; it is
up to you to raise the issue and say firmly that this is what you want.
If the publisher you are dealing with refuses, please try other
publishers.  If you're not sure whether a proposed license is free,
write to <licensing@gnu.org>.

   You can encourage commercial publishers to sell more free, copylefted
manuals and tutorials by buying them, and particularly by buying copies
from the publishers that paid for their writing or for major
improvements.  Meanwhile, try to avoid buying non-free documentation at
all.  Check the distribution terms of a manual before you buy it, and
insist that whoever seeks your business must respect your freedom.
Check the history of the book, and try reward the publishers that have
paid or pay the authors to work on it.

   The Free Software Foundation maintains a list of free documentation
published by other publishers, at
<http://www.fsf.org/doc/other-free-books.html>.

==============================================================================
File: libc.info,  Node: |Copying|,  Next: |Documentation_License|,  Prev: |Free_Manuals|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *Copying*

Appendix H GNU Lesser General Public License
============================================

                      Version 2.1, February 1999

     Copyright (C) 1991, 1999 Free Software Foundation, Inc.
     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

     [This is the first released version of the Lesser GPL.  It also counts
     as the successor of the GNU Library Public License, version 2, hence the
     version number 2.1.]

Preamble
--------

The licenses for most software are designed to take away your freedom to
share and change it.  By contrast, the GNU General Public Licenses are
intended to guarantee your freedom to share and change free software--to
make sure the software is free for all its users.

   This license, the Lesser General Public License, applies to some
specially designated software--typically libraries--of the Free Software
Foundation and other authors who decide to use it.  You can use it too,
but we suggest you first think carefully about whether this license or
the ordinary General Public License is the better strategy to use in any
particular case, based on the explanations below.

   When we speak of free software, we are referring to freedom of use,
not price.  Our General Public Licenses are designed to make sure that
you have the freedom to distribute copies of free software (and charge
for this service if you wish); that you receive source code or can get
it if you want it; that you can change the software and use pieces of it
in new free programs; and that you are informed that you can do these
things.

   To protect your rights, we need to make restrictions that forbid
distributors to deny you these rights or to ask you to surrender these
rights.  These restrictions translate to certain responsibilities for
you if you distribute copies of the library or if you modify it.

   For example, if you distribute copies of the library, whether gratis
or for a fee, you must give the recipients all the rights that we gave
you.  You must make sure that they, too, receive or can get the source
code.  If you link other code with the library, you must provide
complete object files to the recipients, so that they can relink them
with the library after making changes to the library and recompiling it.
And you must show them these terms so they know their rights.

   We protect your rights with a two-step method: (1) we copyright the
library, and (2) we offer you this license, which gives you legal
permission to copy, distribute and/or modify the library.

   To protect each distributor, we want to make it very clear that there
is no warranty for the free library.  Also, if the library is modified
by someone else and passed on, the recipients should know that what they
have is not the original version, so that the original author's
reputation will not be affected by problems that might be introduced by
others.

   Finally, software patents pose a constant threat to the existence of
any free program.  We wish to make sure that a company cannot
effectively restrict the users of a free program by obtaining a
restrictive license from a patent holder.  Therefore, we insist that any
patent license obtained for a version of the library must be consistent
with the full freedom of use specified in this license.

   Most GNU software, including some libraries, is covered by the
ordinary GNU General Public License.  This license, the GNU Lesser
General Public License, applies to certain designated libraries, and is
quite different from the ordinary General Public License.  We use this
license for certain libraries in order to permit linking those libraries
into non-free programs.

   When a program is linked with a library, whether statically or using
a shared library, the combination of the two is legally speaking a
combined work, a derivative of the original library.  The ordinary
General Public License therefore permits such linking only if the entire
combination fits its criteria of freedom.  The Lesser General Public
License permits more lax criteria for linking other code with the
library.

   We call this license the "Lesser" General Public License because it
does _Less_ to protect the user's freedom than the ordinary General
Public License.  It also provides other free software developers Less of
an advantage over competing non-free programs.  These disadvantages are
the reason we use the ordinary General Public License for many
libraries.  However, the Lesser license provides advantages in certain
special circumstances.

   For example, on rare occasions, there may be a special need to
encourage the widest possible use of a certain library, so that it
becomes a de-facto standard.  To achieve this, non-free programs must be
allowed to use the library.  A more frequent case is that a free library
does the same job as widely used non-free libraries.  In this case,
there is little to gain by limiting the free library to free software
only, so we use the Lesser General Public License.

   In other cases, permission to use a particular library in non-free
programs enables a greater number of people to use a large body of free
software.  For example, permission to use the GNU C Library in non-free
programs enables many more people to use the whole GNU operating system,
as well as its variant, the GNU/Linux operating system.

   Although the Lesser General Public License is Less protective of the
users' freedom, it does ensure that the user of a program that is linked
with the Library has the freedom and the wherewithal to run that program
using a modified version of the Library.

   The precise terms and conditions for copying, distribution and
modification follow.  Pay close attention to the difference between a
"work based on the library" and a "work that uses the library".  The
former contains code derived from the library, whereas the latter must
be combined with the library in order to run.

TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
---------------------------------------------------------------

  0. This License Agreement applies to any software library or other
     program which contains a notice placed by the copyright holder or
     other authorized party saying it may be distributed under the terms
     of this Lesser General Public License (also called "this License").
     Each licensee is addressed as "you".

     A "library" means a collection of software functions and/or data
     prepared so as to be conveniently linked with application programs
     (which use some of those functions and data) to form executables.

     The "Library", below, refers to any such software library or work
     which has been distributed under these terms.  A "work based on the
     Library" means either the Library or any derivative work under
     copyright law: that is to say, a work containing the Library or a
     portion of it, either verbatim or with modifications and/or
     translated straightforwardly into another language.  (Hereinafter,
     translation is included without limitation in the term
     "modification".)

     "Source code" for a work means the preferred form of the work for
     making modifications to it.  For a library, complete source code
     means all the source code for all modules it contains, plus any
     associated interface definition files, plus the scripts used to
     control compilation and installation of the library.

     Activities other than copying, distribution and modification are
     not covered by this License; they are outside its scope.  The act
     of running a program using the Library is not restricted, and
     output from such a program is covered only if its contents
     constitute a work based on the Library (independent of the use of
     the Library in a tool for writing it).  Whether that is true
     depends on what the Library does and what the program that uses the
     Library does.

  1. You may copy and distribute verbatim copies of the Library's
     complete source code as you receive it, in any medium, provided
     that you conspicuously and appropriately publish on each copy an
     appropriate copyright notice and disclaimer of warranty; keep
     intact all the notices that refer to this License and to the
     absence of any warranty; and distribute a copy of this License
     along with the Library.

     You may charge a fee for the physical act of transferring a copy,
     and you may at your option offer warranty protection in exchange
     for a fee.

  2. You may modify your copy or copies of the Library or any portion of
     it, thus forming a work based on the Library, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:

       a. The modified work must itself be a software library.

       b. You must cause the files modified to carry prominent notices
          stating that you changed the files and the date of any change.

       c. You must cause the whole of the work to be licensed at no
          charge to all third parties under the terms of this License.

       d. If a facility in the modified Library refers to a function or
          a table of data to be supplied by an application program that
          uses the facility, other than as an argument passed when the
          facility is invoked, then you must make a good faith effort to
          ensure that, in the event an application does not supply such
          function or table, the facility still operates, and performs
          whatever part of its purpose remains meaningful.

          (For example, a function in a library to compute square roots
          has a purpose that is entirely well-defined independent of the
          application.  Therefore, Subsection 2d requires that any
          application-supplied function or table used by this function
          must be optional: if the application does not supply it, the
          square root function must still compute square roots.)

     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the
     Library, and can be reasonably considered independent and separate
     works in themselves, then this License, and its terms, do not apply
     to those sections when you distribute them as separate works.  But
     when you distribute the same sections as part of a whole which is a
     work based on the Library, the distribution of the whole must be on
     the terms of this License, whose permissions for other licensees
     extend to the entire whole, and thus to each and every part
     regardless of who wrote it.

     Thus, it is not the intent of this section to claim rights or
     contest your rights to work written entirely by you; rather, the
     intent is to exercise the right to control the distribution of
     derivative or collective works based on the Library.

     In addition, mere aggregation of another work not based on the
     Library with the Library (or with a work based on the Library) on a
     volume of a storage or distribution medium does not bring the other
     work under the scope of this License.

  3. You may opt to apply the terms of the ordinary GNU General Public
     License instead of this License to a given copy of the Library.  To
     do this, you must alter all the notices that refer to this License,
     so that they refer to the ordinary GNU General Public License,
     version 2, instead of to this License.  (If a newer version than
     version 2 of the ordinary GNU General Public License has appeared,
     then you can specify that version instead if you wish.)  Do not
     make any other change in these notices.

     Once this change is made in a given copy, it is irreversible for
     that copy, so the ordinary GNU General Public License applies to
     all subsequent copies and derivative works made from that copy.

     This option is useful when you wish to copy part of the code of the
     Library into a program that is not a library.

  4. You may copy and distribute the Library (or a portion or derivative
     of it, under Section 2) in object code or executable form under the
     terms of Sections 1 and 2 above provided that you accompany it with
     the complete corresponding machine-readable source code, which must
     be distributed under the terms of Sections 1 and 2 above on a
     medium customarily used for software interchange.

     If distribution of object code is made by offering access to copy
     from a designated place, then offering equivalent access to copy
     the source code from the same place satisfies the requirement to
     distribute the source code, even though third parties are not
     compelled to copy the source along with the object code.

  5. A program that contains no derivative of any portion of the
     Library, but is designed to work with the Library by being compiled
     or linked with it, is called a "work that uses the Library".  Such
     a work, in isolation, is not a derivative work of the Library, and
     therefore falls outside the scope of this License.

     However, linking a "work that uses the Library" with the Library
     creates an executable that is a derivative of the Library (because
     it contains portions of the Library), rather than a "work that uses
     the library".  The executable is therefore covered by this License.
     Section 6 states terms for distribution of such executables.

     When a "work that uses the Library" uses material from a header
     file that is part of the Library, the object code for the work may
     be a derivative work of the Library even though the source code is
     not.  Whether this is true is especially significant if the work
     can be linked without the Library, or if the work is itself a
     library.  The threshold for this to be true is not precisely
     defined by law.

     If such an object file uses only numerical parameters, data
     structure layouts and accessors, and small macros and small inline
     functions (ten lines or less in length), then the use of the object
     file is unrestricted, regardless of whether it is legally a
     derivative work.  (Executables containing this object code plus
     portions of the Library will still fall under Section 6.)

     Otherwise, if the work is a derivative of the Library, you may
     distribute the object code for the work under the terms of Section
     6.  Any executables containing that work also fall under Section 6,
     whether or not they are linked directly with the Library itself.

  6. As an exception to the Sections above, you may also combine or link
     a "work that uses the Library" with the Library to produce a work
     containing portions of the Library, and distribute that work under
     terms of your choice, provided that the terms permit modification
     of the work for the customer's own use and reverse engineering for
     debugging such modifications.

     You must give prominent notice with each copy of the work that the
     Library is used in it and that the Library and its use are covered
     by this License.  You must supply a copy of this License.  If the
     work during execution displays copyright notices, you must include
     the copyright notice for the Library among them, as well as a
     reference directing the user to the copy of this License.  Also,
     you must do one of these things:

       a. Accompany the work with the complete corresponding
          machine-readable source code for the Library including
          whatever changes were used in the work (which must be
          distributed under Sections 1 and 2 above); and, if the work is
          an executable linked with the Library, with the complete
          machine-readable "work that uses the Library", as object code
          and/or source code, so that the user can modify the Library
          and then relink to produce a modified executable containing
          the modified Library.  (It is understood that the user who
          changes the contents of definitions files in the Library will
          not necessarily be able to recompile the application to use
          the modified definitions.)

       b. Use a suitable shared library mechanism for linking with the
          Library.  A suitable mechanism is one that (1) uses at run
          time a copy of the library already present on the user's
          computer system, rather than copying library functions into
          the executable, and (2) will operate properly with a modified
          version of the library, if the user installs one, as long as
          the modified version is interface-compatible with the version
          that the work was made with.

       c. Accompany the work with a written offer, valid for at least
          three years, to give the same user the materials specified in
          Subsection 6a, above, for a charge no more than the cost of
          performing this distribution.

       d. If distribution of the work is made by offering access to copy
          from a designated place, offer equivalent access to copy the
          above specified materials from the same place.

       e. Verify that the user has already received a copy of these
          materials or that you have already sent this user a copy.

     For an executable, the required form of the "work that uses the
     Library" must include any data and utility programs needed for
     reproducing the executable from it.  However, as a special
     exception, the materials to be distributed need not include
     anything that is normally distributed (in either source or binary
     form) with the major components (compiler, kernel, and so on) of
     the operating system on which the executable runs, unless that
     component itself accompanies the executable.

     It may happen that this requirement contradicts the license
     restrictions of other proprietary libraries that do not normally
     accompany the operating system.  Such a contradiction means you
     cannot use both them and the Library together in an executable that
     you distribute.

  7. You may place library facilities that are a work based on the
     Library side-by-side in a single library together with other
     library facilities not covered by this License, and distribute such
     a combined library, provided that the separate distribution of the
     work based on the Library and of the other library facilities is
     otherwise permitted, and provided that you do these two things:

       a. Accompany the combined library with a copy of the same work
          based on the Library, uncombined with any other library
          facilities.  This must be distributed under the terms of the
          Sections above.

       b. Give prominent notice with the combined library of the fact
          that part of it is a work based on the Library, and explaining
          where to find the accompanying uncombined form of the same
          work.

  8. You may not copy, modify, sublicense, link with, or distribute the
     Library except as expressly provided under this License.  Any
     attempt otherwise to copy, modify, sublicense, link with, or
     distribute the Library is void, and will automatically terminate
     your rights under this License.  However, parties who have received
     copies, or rights, from you under this License will not have their
     licenses terminated so long as such parties remain in full
     compliance.

  9. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify
     or distribute the Library or its derivative works.  These actions
     are prohibited by law if you do not accept this License.
     Therefore, by modifying or distributing the Library (or any work
     based on the Library), you indicate your acceptance of this License
     to do so, and all its terms and conditions for copying,
     distributing or modifying the Library or works based on it.

  10. Each time you redistribute the Library (or any work based on the
     Library), the recipient automatically receives a license from the
     original licensor to copy, distribute, link with or modify the
     Library subject to these terms and conditions.  You may not impose
     any further restrictions on the recipients' exercise of the rights
     granted herein.  You are not responsible for enforcing compliance
     by third parties with this License.

  11. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent
     issues), conditions are imposed on you (whether by court order,
     agreement or otherwise) that contradict the conditions of this
     License, they do not excuse you from the conditions of this
     License.  If you cannot distribute so as to satisfy simultaneously
     your obligations under this License and any other pertinent
     obligations, then as a consequence you may not distribute the
     Library at all.  For example, if a patent license would not permit
     royalty-free redistribution of the Library by all those who receive
     copies directly or indirectly through you, then the only way you
     could satisfy both it and this License would be to refrain entirely
     from distribution of the Library.

     If any portion of this section is held invalid or unenforceable
     under any particular circumstance, the balance of the section is
     intended to apply, and the section as a whole is intended to apply
     in other circumstances.

     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of
     any such claims; this section has the sole purpose of protecting
     the integrity of the free software distribution system which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is
     willing to distribute software through any other system and a
     licensee cannot impose that choice.

     This section is intended to make thoroughly clear what is believed
     to be a consequence of the rest of this License.

  12. If the distribution and/or use of the Library is restricted in
     certain countries either by patents or by copyrighted interfaces,
     the original copyright holder who places the Library under this
     License may add an explicit geographical distribution limitation
     excluding those countries, so that distribution is permitted only
     in or among countries not thus excluded.  In such case, this
     License incorporates the limitation as if written in the body of
     this License.

  13. The Free Software Foundation may publish revised and/or new
     versions of the Lesser General Public License from time to time.
     Such new versions will be similar in spirit to the present version,
     but may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Library specifies a version number of this License which applies to
     it and "any later version", you have the option of following the
     terms and conditions either of that version or of any later version
     published by the Free Software Foundation.  If the Library does not
     specify a license version number, you may choose any version ever
     published by the Free Software Foundation.

  14. If you wish to incorporate parts of the Library into other free
     programs whose distribution conditions are incompatible with these,
     write to the author to ask for permission.  For software which is
     copyrighted by the Free Software Foundation, write to the Free
     Software Foundation; we sometimes make exceptions for this.  Our
     decision will be guided by the two goals of preserving the free
     status of all derivatives of our free software and of promoting the
     sharing and reuse of software generally.

                              NO WARRANTY

  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO
     WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE
     LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS
     AND/OR OTHER PARTIES PROVIDE THE LIBRARY "AS IS" WITHOUT WARRANTY
     OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
     LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
     FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND
     PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE
     DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR
     OR CORRECTION.

  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY
     MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE
     LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL,
     INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR
     INABILITY TO USE THE LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF
     DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU
     OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE WITH ANY
     OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
     ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.

END OF TERMS AND CONDITIONS
---------------------------

How to Apply These Terms to Your New Libraries
----------------------------------------------

If you develop a new library, and you want it to be of the greatest
possible use to the public, we recommend making it free software that
everyone can redistribute and change.  You can do so by permitting
redistribution under these terms (or, alternatively, under the terms of
the ordinary General Public License).

   To apply these terms, attach the following notices to the library.
It is safest to attach them to the start of each source file to most
effectively convey the exclusion of warranty; and each file should have
at least the "copyright" line and a pointer to where the full notice is
found.

     ONE LINE TO GIVE THE LIBRARY'S NAME AND AN IDEA OF WHAT IT DOES.
     Copyright (C) YEAR  NAME OF AUTHOR

     This library is free software; you can redistribute it and/or modify it
     under the terms of the GNU Lesser General Public License as published by
     the Free Software Foundation; either version 2.1 of the License, or (at
     your option) any later version.

     This library is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     Lesser General Public License for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the Free Software
     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
     USA.

   Also add information on how to contact you by electronic and paper
mail.

   You should also get your employer (if you work as a programmer) or
your school, if any, to sign a "copyright disclaimer" for the library,
if necessary.  Here is a sample; alter the names:

     Yoyodyne, Inc., hereby disclaims all copyright interest in the library
     `Frob' (a library for tweaking knobs) written by James Random Hacker.

     SIGNATURE OF TY COON, 1 April 1990
     Ty Coon, President of Vice

   That's all there is to it!

==============================================================================
File: libc.info,  Node: |Documentation_License|,  Next: |Concept_Index|,  Prev: |Copying|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *Documentation_License*

Appendix I GNU Free Documentation License
=========================================

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of
     a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
----------------------------------------------------

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.

==============================================================================
File: libc.info,  Node: |Concept_Index|,  Next: |Type_Index|,  Prev: |Documentation_License|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Concept_Index*

Concept Index
=============


MENU

* !posix:                                Other Safety Remarks.
                                                              (line 135)
* .lib section in a.out corrupted:       Error Codes.         (line 754)
* /condition:                            Other Safety Remarks.
                                                              (line 168)
* /etc/hostname:                         Host Identification. (line  93)
* /etc/nsswitch.conf:                    NSS Configuration File.
                                                              (line   6)
* 4.N BSD Unix:                          Berkeley Unix.       (line   6)
* :identifier:                           Other Safety Remarks.
                                                              (line 147)
* ?:                                     Error Codes.         (line 563)
* _POSIX_OPTION_ORDER environment variable.: Standard Environment.
                                                              (line 118)
* _POSIX_SAVED_IDS:                      How Change Persona.  (line   6)
* abort signal:                          Program Error Signals.
                                                              (line 141)
* aborting a program:                    Aborting a Program.  (line   6)
* absolute file name:                    File Name Resolution.
                                                              (line  19)
* absolute priority:                     Absolute Priority.   (line   6)
* absolute value functions:              Absolute Value.      (line   6)
* AC-Safe:                               POSIX Safety Concepts.
                                                              (line  49)
* AC-Unsafe:                             POSIX Safety Concepts.
                                                              (line  68)
* accepting connections:                 Accepting Connections.
                                                              (line   6)
* access permission for a file:          Access Permission.   (line   6)
* access, testing for:                   Testing File Access. (line   6)
* Accessing a corrupted shared library:  Error Codes.         (line 750)
* accessing directories:                 Accessing Directories.
                                                              (line   6)
* Address already in use:                Error Codes.         (line 330)
* Address family not supported by protocol: Error Codes.      (line 324)
* address of socket:                     Socket Addresses.    (line   6)
* address space:                         Memory Subsystem.    (line   6)
* address space <1>:                     Program Basics.      (line   6)
* Advertise error:                       Error Codes.         (line 718)
* alarm signal:                          Alarm Signals.       (line  20)
* alarms, setting:                       Setting an Alarm.    (line  10)
* alignment (in obstacks):               Obstacks Data Alignment.
                                                              (line   6)
* alignment (with malloc):               Aligned Memory Blocks.
                                                              (line   6)
* alloca disadvantages:                  Disadvantages of Alloca.
                                                              (line   6)
* alloca function:                       Variable Size Automatic.
                                                              (line   6)
* allocating file storage:               Storage Allocation.  (line   6)
* allocating pseudo-terminals:           Allocation.          (line   6)
* allocation (obstacks):                 Allocation in an Obstack.
                                                              (line   6)
* allocation debugging:                  Allocation Debugging.
                                                              (line   6)
* allocation hooks, for malloc:          Hooks for Malloc.    (line   6)
* allocation of memory with malloc:      Basic Allocation.    (line   6)
* allocation size of string:             Representation of Strings.
                                                              (line  61)
* allocation statistics:                 Statistics of Malloc.
                                                              (line   6)
* alphabetic character:                  Classification of Characters.
                                                              (line  43)
* alphabetic character <1>:              Classification of Wide Characters.
                                                              (line  93)
* alphanumeric character:                Classification of Characters.
                                                              (line  64)
* alphanumeric character <1>:            Classification of Wide Characters.
                                                              (line  77)
* alternative malloc implementations:    Replacing malloc.    (line   6)
* append-access files:                   File Position.       (line  28)
* argc (program argument count):         Program Arguments.   (line  16)
* argp (program argument parser):        Argp.                (line   6)
* argp parser functions:                 Argp Parser Functions.
                                                              (line  13)
* ARGP_HELP_FMT environment variable:    Argp User Customization.
                                                              (line   6)
* Argument list too long:                Error Codes.         (line  52)
* argument parsing with argp:            Argp.                (line   6)
* argument promotion:                    Calling Variadics.   (line  27)
* argument vectors, null-byte separated: Argz and Envz Vectors.
                                                              (line   6)
* arguments (variadic functions):        Receiving Arguments. (line   6)
* arguments, how many:                   How Many Arguments.  (line   6)
* arguments, to program:                 Program Arguments.   (line   6)
* argv (program argument vector):        Program Arguments.   (line  16)
* argz vectors (string vectors):         Argz and Envz Vectors.
                                                              (line   6)
* arithmetic expansion:                  Expansion Stages.    (line  23)
* array comparison functions:            String/Array Comparison.
                                                              (line   6)
* array copy functions:                  Copying Strings and Arrays.
                                                              (line   9)
* array search function:                 Array Search Function.
                                                              (line   6)
* array sort function:                   Array Sort Function. (line   6)
* AS-Safe:                               POSIX Safety Concepts.
                                                              (line  35)
* AS-Unsafe:                             POSIX Safety Concepts.
                                                              (line  68)
* ASCII character:                       Classification of Characters.
                                                              (line 153)
* assertions:                            Consistency Checking.
                                                              (line   6)
* Async-Cancel-Safe:                     POSIX Safety Concepts.
                                                              (line  49)
* Async-Cancel-Unsafe:                   POSIX Safety Concepts.
                                                              (line  68)
* Async-Signal-Safe:                     POSIX Safety Concepts.
                                                              (line  35)
* Async-Signal-Unsafe:                   POSIX Safety Concepts.
                                                              (line  68)
* Attempting to link in too many shared libraries: Error Codes.
                                                              (line 758)
* attributes of a file:                  Attribute Meanings.  (line   6)
* Authentication error:                  Error Codes.         (line 508)
* automatic freeing:                     Variable Size Automatic.
                                                              (line   6)
* automatic memory allocation:           Memory Allocation and C.
                                                              (line  19)
* automatic storage class:               Memory Allocation and C.
                                                              (line  19)
* automatic storage with variable size:  Variable Size Automatic.
                                                              (line   6)
* auxiliary vector:                      Auxiliary Vector.    (line   6)
* background job:                        Concepts of Job Control.
                                                              (line  47)
* background job, launching:             Foreground and Background.
                                                              (line  62)
* backtrace:                             Backtraces.          (line   6)
* backtrace_fd:                          Backtraces.          (line   6)
* backtrace_symbols:                     Backtraces.          (line   6)
* Bad address:                           Error Codes.         (line  95)
* Bad file descriptor:                   Error Codes.         (line  65)
* Bad font file format:                  Error Codes.         (line 706)
* Bad message:                           Error Codes.         (line 580)
* base (of floating point number):       Floating Point Concepts.
                                                              (line  20)
* baud rate:                             Line Speed.          (line   6)
* Berkeley Unix:                         Berkeley Unix.       (line   6)
* Bessel functions:                      Special Functions.   (line   6)
* bias (of floating point number exponent): Floating Point Concepts.
                                                              (line  27)
* big-endian:                            Byte Order.          (line   6)
* binary I/O to a stream:                Block Input/Output.  (line   9)
* binary search function (for arrays):   Array Search Function.
                                                              (line   6)
* binary stream:                         Binary Streams.      (line  14)
* binding a socket address:              Socket Addresses.    (line   6)
* blank character:                       Classification of Characters.
                                                              (line 117)
* blank character <1>:                   Classification of Wide Characters.
                                                              (line 275)
* Block device required:                 Error Codes.         (line 100)
* block I/O to a stream:                 Block Input/Output.  (line   9)
* blocked signals:                       Delivery of Signal.  (line   6)
* blocked signals, checking for:         Checking for Pending Signals.
                                                              (line   6)
* blocking signals:                      Blocking Signals.    (line   6)
* blocking signals, in a handler:        Blocking for Handler.
                                                              (line   6)
* bootstrapping, and services:           Actions in the NSS configuration.
                                                              (line 112)
* break condition, detecting:            Input Modes.         (line  63)
* break condition, generating:           Line Control.        (line  14)
* breaking a string into tokens:         Finding Tokens in a String.
                                                              (line   6)
* Broken pipe:                           Error Codes.         (line 202)
* broken pipe signal:                    Operation Error Signals.
                                                              (line  14)
* broken-down time:                      Calendar Time.       (line  26)
* broken-down time <1>:                  Broken-down Time.    (line   6)
* BSD Unix:                              Berkeley Unix.       (line   6)
* buffering of streams:                  Stream Buffering.    (line   6)
* buffering, controlling:                Controlling Buffering.
                                                              (line   8)
* bugs, reporting:                       Reporting Bugs.      (line   6)
* bus error:                             Program Error Signals.
                                                              (line 138)
* butterfly:                             Misc FP Arithmetic.  (line  92)
* byte order conversion, for socket:     Byte Order.          (line   6)
* byte stream:                           Socket Concepts.     (line  12)
* C threads:                             ISO C Threads.       (line   6)
* C++ streams:                           Streams and I18N.    (line  30)
* calendar time:                         Time Basics.         (line  13)
* calendar time and broken-down time:    Broken-down Time.    (line   6)
* calendar, Gregorian:                   Calendar Time.       (line  26)
* call once:                             Call Once.           (line   6)
* calling variadic functions:            Calling Variadics.   (line   6)
* Can not access a needed shared library: Error Codes.        (line 746)
* Cannot allocate memory:                Error Codes.         (line  85)
* Cannot assign requested address:       Error Codes.         (line 335)
* Cannot exec a shared library directly: Error Codes.         (line 762)
* Cannot send after transport endpoint shutdown: Error Codes. (line 394)
* canonical input processing:            Canonical or Not.    (line   9)
* capacity limits, POSIX:                General Limits.      (line   6)
* carrier detect:                        Control Modes.       (line  22)
* case conversion of characters:         Case Conversion.     (line   6)
* catching signals:                      Delivery of Signal.  (line  13)
* categories for locales:                Locale Categories.   (line   6)
* change working directory:              Working Directory.   (line   6)
* changing the locale:                   Setting the Locale.  (line  20)
* changing the size of a block (malloc): Changing Block Size. (line   6)
* changing the size of a block (obstacks): Growing Objects.   (line   6)
* Channel number out of range:           Error Codes.         (line 646)
* channels:                              Stream/Descriptor Precautions.
                                                              (line   6)
* character case conversion:             Case Conversion.     (line   6)
* character predicates:                  Classification of Characters.
                                                              (line   6)
* character testing:                     Classification of Characters.
                                                              (line   6)
* checking for pending signals:          Checking for Pending Signals.
                                                              (line   6)
* child process:                         Processor Time.      (line  33)
* child process <1>:                     Processes.           (line  13)
* child process <2>:                     Process Creation Concepts.
                                                              (line  15)
* child process signal:                  Job Control Signals. (line  15)
* chunks:                                Obstack Chunks.      (line   6)
* classes, floating-point:               Floating Point Classes.
                                                              (line   6)
* classification of characters:          Classification of Characters.
                                                              (line   6)
* cleaning up a stream:                  Linked Channels.     (line  15)
* clearing terminal input queue:         Line Control.        (line  67)
* client:                                Connections.         (line   6)
* clock ticks:                           Processor And CPU Time.
                                                              (line  19)
* clock, high accuracy:                  High Accuracy Clock. (line   6)
* close-on-exec (file descriptor flag):  Descriptor Flags.    (line  54)
* closing a file descriptor:             Opening and Closing Files.
                                                              (line   6)
* closing a socket:                      Closing a Socket.    (line   6)
* closing a stream:                      Closing Streams.     (line   6)
* collating strings:                     Collation Functions. (line   6)
* combining locales:                     Choosing Locale.     (line  19)
* command argument syntax:               Argument Syntax.     (line   6)
* command arguments, parsing:            Parsing Program Arguments.
                                                              (line   6)
* command line arguments:                Program Arguments.   (line   6)
* command substitution:                  Expansion Stages.    (line  18)
* Communication error on send:           Error Codes.         (line 726)
* communication style (of a socket):     Socket Concepts.     (line   6)
* comparing strings and arrays:          String/Array Comparison.
                                                              (line   6)
* Comparison Function:                   Comparison Functions.
                                                              (line   6)
* compiling:                             Configuring and compiling.
                                                              (line   6)
* complex exponentiation functions:      Exponents and Logarithms.
                                                              (line 264)
* complex logarithm functions:           Exponents and Logarithms.
                                                              (line 264)
* complex numbers:                       Complex Numbers.     (line   6)
* complex trigonometric functions:       Trig Functions.      (line  82)
* Computer bought the farm:              Error Codes.         (line 571)
* concatenating strings:                 Copying Strings and Arrays.
                                                              (line   9)
* concatenating strings <1>:             Concatenating Strings.
                                                              (line   6)
* condition variables:                   ISO C Condition Variables.
                                                              (line   6)
* Conditionally Safe Features:           Conditionally Safe Features.
                                                              (line   6)
* condvar:                               ISO C Condition Variables.
                                                              (line   6)
* configuring:                           Configuring and compiling.
                                                              (line   6)
* conjugate complex numbers:             Operations on Complex.
                                                              (line   6)
* connecting a socket:                   Connecting.          (line   6)
* connection:                            Connections.         (line   6)
* Connection refused:                    Error Codes.         (line 408)
* Connection reset by peer:              Error Codes.         (line 361)
* Connection timed out:                  Error Codes.         (line 403)
* consistency checking:                  Consistency Checking.
                                                              (line   6)
* consistency checking, of heap:         Heap Consistency Checking.
                                                              (line   6)
* const:                                 Conditionally Safe Features.
                                                              (line 131)
* constants:                             Memory Concepts.     (line  67)
* constants <1>:                         Mathematical Constants.
                                                              (line   6)
* continue signal:                       Job Control Signals. (line  31)
* control character:                     Classification of Characters.
                                                              (line 145)
* control character <1>:                 Classification of Wide Characters.
                                                              (line 113)
* control operations on files:           Control Operations.  (line   6)
* controlling process:                   Controlling Terminal.
                                                              (line  13)
* controlling terminal:                  Concepts of Job Control.
                                                              (line  40)
* controlling terminal, access to:       Access to the Terminal.
                                                              (line   6)
* controlling terminal, determining:     Identifying the Terminal.
                                                              (line   6)
* controlling terminal, setting:         Open-time Flags.     (line  85)
* conversion specifications (printf):    Formatted Output Basics.
                                                              (line  14)
* conversion specifications (scanf):     Formatted Input Basics.
                                                              (line  18)
* converting byte order:                 Byte Order.          (line   6)
* converting case of characters:         Case Conversion.     (line   6)
* converting file descriptor to stream:  Descriptors and Streams.
                                                              (line   6)
* converting floats to integers:         Rounding Functions.  (line   6)
* converting group ID to group name:     Lookup Group.        (line   6)
* converting group name to group ID:     Lookup Group.        (line   6)
* converting host address to name:       Host Names.          (line   6)
* converting host name to address:       Host Names.          (line   6)
* converting network name to network number: Networks Database.
                                                              (line   6)
* converting network number to network name: Networks Database.
                                                              (line   6)
* converting port number to service name: Services Database.  (line   6)
* converting service name to port number: Services Database.  (line   6)
* converting string to collation order:  Collation Functions. (line  86)
* converting strings to numbers:         Parsing of Numbers.  (line   6)
* converting user ID to user name:       Lookup User.         (line   6)
* converting user name to user ID:       Lookup User.         (line   6)
* cookie, for custom stream:             Streams and Cookies. (line   6)
* copy-on-write page fault:              Locked Memory Details.
                                                              (line  40)
* copying files:                         Copying File Data.   (line   6)
* copying strings and arrays:            Copying Strings and Arrays.
                                                              (line   9)
* corrupt:                               Unsafe Features.     (line  26)
* cpu priority:                          Priority.            (line   6)
* CPU time:                              Time Basics.         (line  37)
* CPU time <1>:                          Processor And CPU Time.
                                                              (line  19)
* CPU time <2>:                          Processor Time.      (line  10)
* create on open (file status flag):     Open-time Flags.     (line  23)
* creating a directory:                  Creating Directories.
                                                              (line   6)
* creating a FIFO special file:          FIFO Special Files.  (line   6)
* creating a pipe:                       Creating a Pipe.     (line   6)
* creating a pipe to a subprocess:       Pipe to a Subprocess.
                                                              (line   6)
* creating a process:                    Process Creation Concepts.
                                                              (line  15)
* creating a socket:                     Creating a Socket.   (line   6)
* creating a socket pair:                Socket Pairs.        (line   6)
* creating special files:                Making Special Files.
                                                              (line   6)
* CRNG:                                  Unpredictable Bytes. (line   6)
* cryptographic random number generator: Unpredictable Bytes. (line   6)
* CSPRNG:                                Unpredictable Bytes. (line   6)
* cube root function:                    Exponents and Logarithms.
                                                              (line 210)
* currency symbols:                      Currency Symbol.     (line   6)
* current limit:                         Limits on Resources. (line  17)
* current working directory:             Working Directory.   (line   6)
* custom streams:                        Custom Streams.      (line   6)
* customizing malloc:                    Replacing malloc.    (line   6)
* customizing printf:                    Customizing Printf.  (line   6)
* cwd:                                   Other Safety Remarks.
                                                              (line 121)
* data loss on sockets:                  Socket Concepts.     (line  17)
* databases:                             Name Service Switch. (line   6)
* datagram socket:                       Datagrams.           (line   6)
* datagrams, transmitting:               Sending Datagrams.   (line   6)
* data_cache_size tunables:              Hardware Capability Tunables.
                                                              (line   6)
* date:                                  Time Basics.         (line  16)
* Daylight Saving Time:                  Broken-down Time.    (line  63)
* decimal digit character:               Classification of Characters.
                                                              (line  57)
* decimal-point separator:               General Numeric.     (line  13)
* declaration (compared to definition):  Header Files.        (line  17)
* declaring variadic functions:          Calling Variadics.   (line   6)
* decompose complex numbers:             Operations on Complex.
                                                              (line   6)
* default action (for a signal):         Delivery of Signal.  (line  13)
* default action for a signal:           Basic Signal Handling.
                                                              (line  39)
* default argument promotions:           Calling Variadics.   (line  27)
* default value, and NSS:                Notes on NSS Configuration File.
                                                              (line  11)
* defining new printf conversions:       Customizing Printf.  (line   6)
* definition (compared to declaration):  Header Files.        (line  17)
* delayed suspend character:             Signal Characters.   (line  57)
* deleting a directory:                  Deleting Files.      (line  59)
* deleting a file:                       Deleting Files.      (line   6)
* delivery of signals:                   Delivery of Signal.  (line   6)
* descriptors and streams:               Stream/Descriptor Precautions.
                                                              (line   6)
* Destination address required:          Error Codes.         (line 387)
* deterministic random bit generator:    Unpredictable Bytes. (line   6)
* Device not a stream:                   Error Codes.         (line 608)
* Device or resource busy:               Error Codes.         (line 106)
* digit character:                       Classification of Characters.
                                                              (line  57)
* digit character <1>:                   Classification of Wide Characters.
                                                              (line 127)
* directories, accessing:                Accessing Directories.
                                                              (line   6)
* directories, creating:                 Creating Directories.
                                                              (line   6)
* directories, deleting:                 Deleting Files.      (line  59)
* directory:                             Directories.         (line   9)
* directory entry:                       Directories.         (line   9)
* directory hierarchy:                   Working with Directory Trees.
                                                              (line   6)
* Directory not empty:                   Error Codes.         (line 436)
* directory stream:                      Accessing Directories.
                                                              (line  10)
* disadvantages of alloca:               Disadvantages of Alloca.
                                                              (line   6)
* DISCARD character:                     Other Special.       (line  26)
* Disk quota exceeded:                   Error Codes.         (line 453)
* division by zero:                      FP Exceptions.       (line   6)
* dlopen:                                Unsafe Features.     (line  49)
* DNS:                                   Host Identification. (line  17)
* DNS server unavailable:                Actions in the NSS configuration.
                                                              (line  30)
* domain (of socket):                    Socket Concepts.     (line  33)
* domain error:                          Math Error Reporting.
                                                              (line   6)
* domain name:                           Host Identification. (line  20)
* Domain Name System:                    Host Identification. (line  17)
* dot notation, for Internet addresses:  Abstract Host Addresses.
                                                              (line  47)
* DRBG:                                  Unpredictable Bytes. (line   6)
* DSUSP character:                       Signal Characters.   (line  57)
* duplicating file descriptors:          Duplicating Descriptors.
                                                              (line   6)
* dynamic memory allocation:             Memory Allocation and C.
                                                              (line  26)
* dynamic memory allocation <1>:         Memory Allocation and C.
                                                              (line  31)
* EBCDIC:                                Extended Char Intro. (line 167)
* echo of terminal input:                Local Modes.         (line  26)
* effective group ID:                    Process Persona.     (line   6)
* effective user ID:                     Process Persona.     (line   6)
* efficiency and obstacks:               Extra Fast Growing.  (line   6)
* efficiency of chunks:                  Obstack Chunks.      (line   6)
* EINTR, and restarting interrupted primitives: Interrupted Primitives.
                                                              (line  47)
* elapsed time:                          Time Basics.         (line  24)
* elapsed time <1>:                      Elapsed Time.        (line   6)
* elision tunables:                      Elision Tunables.    (line   6)
* end of file, on a stream:              EOF and Errors.      (line   6)
* end-of-file, on a file descriptor:     I/O Primitives.      (line  26)
* env:                                   Other Safety Remarks.
                                                              (line  26)
* environment:                           Environment Variables.
                                                              (line  22)
* environment access:                    Environment Access.  (line   6)
* environment representation:            Environment Access.  (line   6)
* environment variable:                  Environment Variables.
                                                              (line   6)
* environment vectors, null-byte separated: Argz and Envz Vectors.
                                                              (line   9)
* envz vectors (environment vectors):    Argz and Envz Vectors.
                                                              (line   9)
* EOF character:                         Editing Characters.  (line  11)
* EOL character:                         Editing Characters.  (line  24)
* EOL2 character:                        Editing Characters.  (line  38)
* epoch:                                 Simple Calendar Time.
                                                              (line  10)
* ERASE character:                       Editing Characters.  (line  51)
* errno:                                 System Calls.        (line  59)
* error codes:                           Error Reporting.     (line   6)
* error messages, in argp:               Argp Helper Functions.
                                                              (line  33)
* error reporting:                       Error Reporting.     (line   6)
* errors, mathematical:                  Math Error Reporting.
                                                              (line   6)
* establishing a handler:                Signal Actions.      (line   6)
* ethers:                                NSS Basics.          (line  24)
* EUC:                                   Extended Char Intro. (line 199)
* EUC-JP:                                glibc iconv Implementation.
                                                              (line  56)
* exception:                             FP Exceptions.       (line   6)
* exception <1>:                         Program Error Signals.
                                                              (line  49)
* Exchange full:                         Error Codes.         (line 686)
* exclusive lock:                        File Locks.          (line  15)
* Exec format error:                     Error Codes.         (line  59)
* exec functions:                        Executing a File.    (line   6)
* execing a program:                     Memory Concepts.     (line  90)
* executable:                            Memory Concepts.     (line  67)
* executing a file:                      Executing a File.    (line   6)
* exit status:                           Exit Status.         (line   6)
* exit status value:                     Program Termination. (line   6)
* exiting a program:                     Memory Concepts.     (line  90)
* expansion of shell words:              Word Expansion.      (line   6)
* exponent (of floating point number):   Floating Point Concepts.
                                                              (line  23)
* exponentiation functions:              Exponents and Logarithms.
                                                              (line   6)
* extending printf:                      Customizing Printf.  (line   6)
* extracting file descriptor from stream: Descriptors and Streams.
                                                              (line   6)
* fcntl function:                        Control Operations.  (line   6)
* fd:                                    Other Safety Remarks.
                                                              (line  67)
* FDL, GNU Free Documentation License:   Documentation License.
                                                              (line   6)
* feature test macros:                   Feature Test Macros. (line   6)
* field splitting:                       Expansion Stages.    (line  26)
* FIFO special file:                     Pipes and FIFOs.     (line  12)
* file access permission:                Access Permission.   (line   6)
* file access time:                      File Times.          (line   6)
* file allocation:                       Storage Allocation.  (line   6)
* file attribute modification time:      File Times.          (line   6)
* file attributes:                       Attribute Meanings.  (line   6)
* file copy:                             Copying File Data.   (line   6)
* file creation mask:                    Setting Permissions. (line   6)
* file descriptor flags:                 Descriptor Flags.    (line   6)
* File descriptor in bad state:          Error Codes.         (line 738)
* file descriptor sets, for select:      Waiting for I/O.     (line  30)
* file descriptors, standard:            Descriptors and Streams.
                                                              (line  61)
* File exists:                           Error Codes.         (line 112)
* file fragmentation:                    Storage Allocation.  (line   6)
* File locking deadlock error:           Error Codes.         (line 702)
* file locks:                            File Locks.          (line   6)
* file modification time:                File Times.          (line   6)
* file name:                             File Names.          (line  14)
* file name component:                   Directories.         (line  15)
* file name errors:                      File Name Errors.    (line   6)
* file name resolution:                  File Name Resolution.
                                                              (line  10)
* File name too long:                    Error Codes.         (line 420)
* file name translation flags:           Open-time Flags.     (line  14)
* file names, multiple:                  Hard Links.          (line   6)
* file owner:                            File Owner.          (line   6)
* file permission bits:                  Permission Bits.     (line  15)
* file pointer:                          Streams.             (line  12)
* file position:                         File Position.       (line  14)
* file positioning on a file descriptor: File Position Primitive.
                                                              (line  15)
* file positioning on a stream:          File Positioning.    (line   6)
* file status flags:                     File Status Flags.   (line   6)
* File too large:                        Error Codes.         (line 177)
* files, accessing:                      Memory Concepts.     (line  83)
* files, sparse:                         Storage Allocation.  (line   6)
* filtering i/o through subprocess:      Pipe to a Subprocess.
                                                              (line   6)
* flag character (printf):               Output Conversion Syntax.
                                                              (line  60)
* flag character (scanf):                Input Conversion Syntax.
                                                              (line  35)
* flags for sigaction:                   Flags for Sigaction. (line   6)
* flags, file name translation:          Open-time Flags.     (line  14)
* flags, open-time action:               Open-time Flags.     (line  17)
* floating point:                        Floating Point Numbers.
                                                              (line   6)
* floating point, IEEE:                  IEEE Floating Point. (line   6)
* floating type measurements:            Floating Type Macros.
                                                              (line   6)
* floating-point classes:                Floating Point Classes.
                                                              (line   6)
* floating-point exception:              Program Error Signals.
                                                              (line  49)
* flow control, terminal:                Line Control.        (line 108)
* flushing a stream:                     Flushing Buffers.    (line   6)
* flushing terminal output queue:        Line Control.        (line  38)
* foreground job:                        Concepts of Job Control.
                                                              (line  47)
* foreground job, launching:             Foreground and Background.
                                                              (line  10)
* forking a process:                     Process Creation Concepts.
                                                              (line  15)
* format string, for printf:             Formatted Output.    (line   6)
* format string, for scanf:              Formatted Input.     (line   6)
* formatted input from a stream:         Formatted Input.     (line   6)
* formatted messages:                    Formatted Messages.  (line   6)
* formatted output to a stream:          Formatted Output.    (line   6)
* FP arithmetic:                         FP Bit Twiddling.    (line   6)
* FQDN:                                  Host Identification. (line  31)
* fragmentation of files:                Storage Allocation.  (line   6)
* frame, real memory:                    Memory Concepts.     (line  18)
* free documentation:                    Free Manuals.        (line   6)
* freeing (obstacks):                    Freeing Obstack Objects.
                                                              (line   6)
* freeing memory:                        Memory Concepts.     (line  90)
* freeing memory allocated with malloc:  Freeing after Malloc.
                                                              (line   6)
* fully buffered stream:                 Buffering Concepts.  (line  15)
* Function not implemented:              Error Codes.         (line 516)
* function prototypes (variadic):        Variadic Prototypes. (line   6)
* gamma function:                        Special Functions.   (line   6)
* gcvt_r:                                System V Number Conversion.
                                                              (line 107)
* gencat:                                The gencat program.  (line   6)
* generation of signals:                 Signal Generation.   (line   6)
* generic i/o control operations:        IOCTLs.              (line   6)
* globbing:                              Globbing.            (line   6)
* gnu allocator:                         The GNU Allocator.   (line   6)
* graphic character:                     Classification of Characters.
                                                              (line 128)
* graphic character <1>:                 Classification of Wide Characters.
                                                              (line 151)
* Gratuitous error:                      Error Codes.         (line 576)
* Gregorian calendar:                    Calendar Time.       (line  26)
* group:                                 NSS Basics.          (line  24)
* group database:                        Group Database.      (line   6)
* group ID:                              User and Group IDs.  (line  12)
* group name:                            User and Group IDs.  (line  12)
* group owner of a file:                 File Owner.          (line   6)
* grouping of digits:                    General Numeric.     (line  28)
* growing objects (in obstacks):         Growing Objects.     (line   6)
* handling multiple signals:             Merged Signals.      (line   6)
* hangup signal:                         Termination Signals. (line  77)
* hard limit:                            Limits on Resources. (line  24)
* hard link:                             Hard Links.          (line   6)
* hardware capability tunables:          Hardware Capability Tunables.
                                                              (line   6)
* hashing, passphrase:                   Passphrase Storage.  (line   6)
* header files:                          Header Files.        (line   6)
* heap:                                  Unsafe Features.     (line  41)
* heap consistency checking:             Heap Consistency Checking.
                                                              (line   6)
* heap, dynamic allocation from:         Unconstrained Allocation.
                                                              (line   6)
* heap, freeing memory from:             Freeing after Malloc.
                                                              (line   6)
* hexadecimal digit character:           Classification of Characters.
                                                              (line  73)
* hexadecimal digit character <1>:       Classification of Wide Characters.
                                                              (line 255)
* hidden bit (of floating point number mantissa): Floating Point Concepts.
                                                              (line  42)
* hierarchy, directory:                  Working with Directory Trees.
                                                              (line   6)
* high-priority data:                    Out-of-Band Data.    (line   6)
* high-resolution time:                  Calendar Time.       (line  20)
* holes in files:                        File Position Primitive.
                                                              (line  63)
* home directory:                        Standard Environment.
                                                              (line  12)
* HOME environment variable:             Standard Environment.
                                                              (line  12)
* hook functions (of custom streams):    Hook Functions.      (line   6)
* host address, Internet:                Abstract Host Addresses.
                                                              (line   6)
* Host is down:                          Error Codes.         (line 426)
* host name:                             Host Identification. (line  14)
* hostid:                                Other Safety Remarks.
                                                              (line  40)
* hostname:                              Host Identification. (line  19)
* hosts:                                 NSS Basics.          (line  24)
* hosts database:                        Host Names.          (line   6)
* how many arguments:                    How Many Arguments.  (line   6)
* hwcap tunables:                        Hardware Capability Tunables.
                                                              (line   6)
* hwcaps tunables:                       Hardware Capability Tunables.
                                                              (line   6)
* hyperbolic functions:                  Hyperbolic Functions.
                                                              (line   6)
* hyperbolic functions <1>:              Hyperbolic Functions.
                                                              (line  51)
* i18n:                                  Unsafe Features.     (line  79)
* iconv:                                 Unsafe Features.     (line  67)
* Identifier removed:                    Error Codes.         (line 584)
* identifying terminals:                 Is It a Terminal.    (line   6)
* IEEE 754:                              Floating Point Numbers.
                                                              (line   6)
* IEEE floating point:                   Floating Point Numbers.
                                                              (line   6)
* IEEE floating point representation:    IEEE Floating Point. (line   6)
* IEEE Std 1003.1:                       POSIX.               (line   6)
* IEEE Std 1003.2:                       POSIX.               (line   6)
* ignore action for a signal:            Basic Signal Handling.
                                                              (line  44)
* illegal instruction:                   Program Error Signals.
                                                              (line 109)
* Illegal seek:                          Error Codes.         (line 187)
* impossible events:                     Consistency Checking.
                                                              (line   6)
* Inappropriate file type or format:     Error Codes.         (line 500)
* Inappropriate ioctl for device:        Error Codes.         (line 162)
* Inappropriate operation for background process: Error Codes.
                                                              (line 546)
* independent channels:                  Independent Channels.
                                                              (line   6)
* inexact exception:                     FP Exceptions.       (line   6)
* infinity:                              Infinity and NaN.    (line   6)
* init:                                  Conditionally Safe Features.
                                                              (line  16)
* initial signal actions:                Initial Signal Actions.
                                                              (line   6)
* inode number:                          Attribute Meanings.  (line 195)
* input available signal:                Asynchronous I/O Signals.
                                                              (line  14)
* input conversions, for scanf:          Table of Input Conversions.
                                                              (line   6)
* input from multiple files:             Waiting for I/O.     (line   6)
* Input/output error:                    Error Codes.         (line  39)
* installation tools:                    Tools for Compilation.
                                                              (line   6)
* installing:                            Running make install.
                                                              (line   6)
* integer:                               Integers.            (line   6)
* integer division functions:            Integer Division.    (line   6)
* integer type range:                    Range of Type.       (line   6)
* integer type width:                    Width of Type.       (line   6)
* interactive signals, from terminal:    Local Modes.         (line 103)
* interactive stop signal:               Job Control Signals. (line  62)
* internal representation:               Extended Char Intro. (line  13)
* internationalization:                  Locales.             (line  11)
* Internet host address:                 Abstract Host Addresses.
                                                              (line   6)
* Internet namespace, for sockets:       Internet Namespace.  (line   6)
* interposing malloc:                    Replacing malloc.    (line   6)
* interprocess communication, with FIFO: FIFO Special Files.  (line   6)
* interprocess communication, with pipes: Creating a Pipe.    (line   6)
* interprocess communication, with signals: Kill Example.     (line   6)
* interprocess communication, with sockets: Sockets.          (line   9)
* interrupt character:                   Signal Characters.   (line  12)
* interrupt signal:                      Termination Signals. (line  32)
* interrupt-driven input:                Interrupt Input.     (line   6)
* Interrupted system call:               Error Codes.         (line  29)
* Interrupted system call should be restarted: Error Codes.   (line 642)
* interrupting primitives:               Interrupted Primitives.
                                                              (line  47)
* interval:                              Time Basics.         (line  20)
* interval timer, setting:               Setting an Alarm.    (line  10)
* INTR character:                        Signal Characters.   (line  12)
* Invalid argument:                      Error Codes.         (line 139)
* Invalid cross-device link:             Error Codes.         (line 117)
* invalid exception:                     FP Exceptions.       (line   6)
* Invalid exchange:                      Error Codes.         (line 678)
* Invalid or incomplete multibyte or wide character: Error Codes.
                                                              (line 539)
* Invalid request code:                  Error Codes.         (line 694)
* Invalid request descriptor:            Error Codes.         (line 682)
* Invalid slot:                          Error Codes.         (line 698)
* inverse complex hyperbolic functions:  Hyperbolic Functions.
                                                              (line 132)
* inverse complex trigonometric functions: Inverse Trig Functions.
                                                              (line  82)
* inverse hyperbolic functions:          Hyperbolic Functions.
                                                              (line  93)
* inverse trigonometric functions:       Inverse Trig Functions.
                                                              (line   6)
* invocation of program:                 Program Arguments.   (line   6)
* IOCTLs:                                IOCTLs.              (line   6)
* ipc:                                   Inter-Process Communication.
                                                              (line   6)
* Is a directory:                        Error Codes.         (line 134)
* Is a named type file:                  Error Codes.         (line 782)
* ISO 10646:                             Extended Char Intro. (line  38)
* ISO 2022:                              Extended Char Intro. (line 190)
* ISO 6937:                              Extended Char Intro. (line 213)
* ISO C:                                 ISO C.               (line   6)
* ISO C threads:                         ISO C Threads.       (line   6)
* ISO-2022-JP:                           glibc iconv Implementation.
                                                              (line  56)
* ISO/IEC 9945-1:                        POSIX.               (line   6)
* ISO/IEC 9945-2:                        POSIX.               (line   6)
* job:                                   Job Control.         (line   6)
* job control:                           Job Control.         (line   6)
* job control functions:                 Functions for Job Control.
                                                              (line   6)
* job control is optional:               Job Control is Optional.
                                                              (line   6)
* job control signals:                   Job Control Signals. (line   6)
* job control, enabling:                 Initializing the Shell.
                                                              (line   6)
* job control, enabling <1>:             Initializing the Shell.
                                                              (line  24)
* Kermit the frog:                       Search/Sort Example. (line 107)
* kernel call:                           System Calls.        (line  16)
* kernel header files:                   Linux.               (line   6)
* Key has been revoked:                  Error Codes.         (line 806)
* Key has expired:                       Error Codes.         (line 802)
* Key was rejected by service:           Error Codes.         (line 810)
* KILL character:                        Editing Characters.  (line  91)
* kill signal:                           Termination Signals. (line  74)
* killing a process:                     Signaling Another Process.
                                                              (line   6)
* Korn Shell:                            Wildcard Matching.   (line  79)
* LANG environment variable:             The catgets Functions.
                                                              (line 101)
* LANG environment variable <1>:         Standard Environment.
                                                              (line  73)
* launching jobs:                        Launching Jobs.      (line   6)
* LC_ALL environment variable:           The catgets Functions.
                                                              (line 101)
* LC_ALL environment variable <1>:       Standard Environment.
                                                              (line  80)
* LC_COLLATE environment variable:       Standard Environment.
                                                              (line  87)
* LC_CTYPE environment variable:         Standard Environment.
                                                              (line  91)
* LC_MESSAGES environment variable:      The catgets Functions.
                                                              (line 101)
* LC_MESSAGES environment variable <1>:  Standard Environment.
                                                              (line  96)
* LC_MONETARY environment variable:      Standard Environment.
                                                              (line 101)
* LC_NUMERIC environment variable:       Standard Environment.
                                                              (line 105)
* LC_TIME environment variable:          Standard Environment.
                                                              (line 109)
* LD_PRELOAD and malloc:                 Replacing malloc.    (line   6)
* leap second:                           Broken-down Time.    (line  29)
* length of string:                      Representation of Strings.
                                                              (line  61)
* Level 2 halted:                        Error Codes.         (line 674)
* Level 2 not synchronized:              Error Codes.         (line 650)
* Level 3 halted:                        Error Codes.         (line 654)
* Level 3 reset:                         Error Codes.         (line 658)
* level, for socket options:             Socket Options.      (line   9)
* library:                               Introduction.        (line   9)
* limit:                                 Limits on Resources. (line  12)
* limits on resource usage:              Limits on Resources. (line   6)
* limits, file name length:              Limits for Files.    (line  39)
* limits, floating types:                Floating Type Macros.
                                                              (line   6)
* limits, integer types:                 Range of Type.       (line   6)
* limits, link count of files:           Limits for Files.    (line  24)
* limits, number of open files:          General Limits.      (line  36)
* limits, number of processes:           General Limits.      (line  29)
* limits, number of supplementary group IDs: General Limits.  (line  55)
* limits, pipe buffer size:              Limits for Files.    (line  56)
* limits, POSIX:                         General Limits.      (line   6)
* limits, program argument size:         General Limits.      (line  24)
* limits, terminal input queue:          Limits for Files.    (line  29)
* limits, time zone name length:         General Limits.      (line  48)
* line buffered stream:                  Buffering Concepts.  (line  12)
* line speed:                            Line Speed.          (line   6)
* lines (in a text file):                Binary Streams.      (line  26)
* link:                                  Directories.         (line   9)
* Link has been severed:                 Error Codes.         (line 596)
* Link number out of range:              Error Codes.         (line 662)
* link, hard:                            Hard Links.          (line   6)
* link, soft:                            Symbolic Links.      (line   6)
* link, symbolic:                        Symbolic Links.      (line   6)
* linked channels:                       Linked Channels.     (line   6)
* listening (sockets):                   Listening.           (line   6)
* literals:                              Memory Concepts.     (line  67)
* little-endian:                         Byte Order.          (line   6)
* LNEXT character:                       Other Special.       (line   8)
* load average:                          Processor Resources. (line  48)
* local namespace, for sockets:          Local Namespace.     (line   6)
* local network address number:          Abstract Host Addresses.
                                                              (line   9)
* local time:                            Calendar Time.       (line  26)
* locale:                                Other Safety Remarks.
                                                              (line  10)
* locale categories:                     Locale Categories.   (line   6)
* locale, changing:                      Setting the Locale.  (line  20)
* locales:                               Locales.             (line  11)
* lock:                                  Unsafe Features.     (line  13)
* locking pages:                         Locking Pages.       (line   6)
* logarithm functions:                   Exponents and Logarithms.
                                                              (line   6)
* login name:                            User and Group IDs.  (line   6)
* login name, determining:               Who Logged In.       (line   6)
* LOGNAME environment variable:          Standard Environment.
                                                              (line  25)
* long jumps:                            Non-Local Exits.     (line   6)
* long-named options:                    Argument Syntax.     (line  51)
* longjmp:                               Advantages of Alloca.
                                                              (line  15)
* loss of data on sockets:               Socket Concepts.     (line  17)
* lost resource signal:                  Operation Error Signals.
                                                              (line  29)
* lower-case character:                  Classification of Characters.
                                                              (line  27)
* lower-case character <1>:              Classification of Wide Characters.
                                                              (line 166)
* Machine is not on the network:         Error Codes.         (line 710)
* macros:                                Obstack Functions.   (line   6)
* main function:                         Program Arguments.   (line   6)
* malloc debugger:                       Allocation Debugging.
                                                              (line   6)
* malloc function:                       Unconstrained Allocation.
                                                              (line   6)
* malloc replacement:                    Replacing malloc.    (line   6)
* malloc tunables:                       Memory Allocation Tunables.
                                                              (line   6)
* mantissa (of floating point number):   Floating Point Concepts.
                                                              (line  35)
* matching failure, in scanf:            Formatted Input Basics.
                                                              (line  32)
* math errors:                           Errors in Math Functions.
                                                              (line   6)
* mathematical constants:                Mathematical Constants.
                                                              (line   6)
* maximum:                               Misc FP Arithmetic.  (line   6)
* maximum field width (scanf):           Input Conversion Syntax.
                                                              (line  50)
* maximum limit:                         Limits on Resources. (line  24)
* maximum possible integer:              Integers.            (line  82)
* measurements of floating types:        Floating Type Macros.
                                                              (line   6)
* mem:                                   Other Safety Remarks.
                                                              (line 103)
* memory allocation:                     Memory.              (line   6)
* memory allocation tunables:            Memory Allocation Tunables.
                                                              (line   6)
* memory lock:                           Locking Pages.       (line   6)
* memory mapped file:                    Memory Concepts.     (line  83)
* memory mapped I/O:                     Memory Concepts.     (line  83)
* memory page:                           Memory Subsystem.    (line  33)
* Memory page has hardware error:        Error Codes.         (line 818)
* memory protection:                     Memory Protection.   (line   6)
* memory protection key:                 Memory Protection.   (line 123)
* merging of signals:                    Merged Signals.      (line   6)
* Message too long:                      Error Codes.         (line 283)
* MIN termios slot:                      Noncanonical Input.  (line  27)
* minimum:                               Misc FP Arithmetic.  (line   6)
* minimum field width (printf):          Output Conversion Syntax.
                                                              (line  67)
* minimum possible integer:              Integers.            (line  82)
* mixing descriptors and streams:        Stream/Descriptor Precautions.
                                                              (line   6)
* modem disconnect:                      Control Modes.       (line  34)
* modem status lines:                    Control Modes.       (line  22)
* monetary value formatting:             The Lame Way to Locale Data.
                                                              (line  13)
* MPK:                                   Memory Protection.   (line 123)
* MT-Safe:                               POSIX Safety Concepts.
                                                              (line  16)
* MT-Unsafe:                             POSIX Safety Concepts.
                                                              (line  68)
* multi-threaded application:            Streams and Threads. (line   6)
* multibyte character:                   Representation of Strings.
                                                              (line  22)
* multibyte character <1>:               Extended Char Intro. (line 167)
* multibyte string:                      Representation of Strings.
                                                              (line  22)
* multibyte string <1>:                  Representation of Strings.
                                                              (line  71)
* Multihop attempted:                    Error Codes.         (line 588)
* multiple names for one file:           Hard Links.          (line   6)
* multiplexing input:                    Waiting for I/O.     (line   6)
* multiply-add:                          Misc FP Arithmetic.  (line   6)
* mutex:                                 ISO C Mutexes.       (line   6)
* mutual exclusion:                      ISO C Mutexes.       (line   6)
* Name not unique on network:            Error Codes.         (line 734)
* name of running program:               Error Messages.      (line  81)
* name of socket:                        Socket Addresses.    (line   6)
* Name Service Switch:                   Name Service Switch. (line   6)
* name space:                            Reserved Names.      (line   6)
* names of signals:                      Standard Signals.    (line   6)
* namespace (of socket):                 Socket Concepts.     (line  33)
* NaN:                                   Infinity and NaN.    (line   6)
* NaN <1>:                               FP Bit Twiddling.    (line 113)
* Need authenticator:                    Error Codes.         (line 512)
* netgroup:                              NSS Basics.          (line  24)
* Netgroup:                              Netgroup Data.       (line   6)
* network byte order:                    Byte Order.          (line  11)
* Network dropped connection on reset:   Error Codes.         (line 351)
* Network is down:                       Error Codes.         (line 341)
* Network is unreachable:                Error Codes.         (line 346)
* network number:                        Abstract Host Addresses.
                                                              (line   9)
* network protocol:                      Socket Concepts.     (line  42)
* networks:                              NSS Basics.          (line  24)
* networks database:                     Networks Database.   (line   6)
* NIS:                                   Host Identification. (line  37)
* NIS domain name:                       Host Identification. (line  37)
* NIS domain name <1>:                   Host Identification. (line 110)
* NIS domain name <2>:                   Host Identification. (line 122)
* nisplus, and booting:                  Actions in the NSS configuration.
                                                              (line 112)
* nisplus, and completeness:             Actions in the NSS configuration.
                                                              (line 105)
* NLSPATH environment variable:          The catgets Functions.
                                                              (line  33)
* NLSPATH environment variable <1>:      Standard Environment.
                                                              (line 113)
* No anode:                              Error Codes.         (line 690)
* No buffer space available:             Error Codes.         (line 367)
* No child processes:                    Error Codes.         (line  71)
* No CSI structure available:            Error Codes.         (line 670)
* No data available:                     Error Codes.         (line 592)
* No locks available:                    Error Codes.         (line 493)
* No medium found:                       Error Codes.         (line 790)
* No message of desired type:            Error Codes.         (line 600)
* No route to host:                      Error Codes.         (line 431)
* No space left on device:               Error Codes.         (line 182)
* No such device:                        Error Codes.         (line 124)
* No such device or address:             Error Codes.         (line  44)
* No such file or directory:             Error Codes.         (line  19)
* No such process:                       Error Codes.         (line  25)
* No XENIX semaphores available:         Error Codes.         (line 778)
* non-blocking open:                     Open-time Flags.     (line  60)
* non-local exit, from signal handler:   Longjmp in Handler.  (line   6)
* non-local exits:                       Non-Local Exits.     (line   6)
* noncanonical input processing:         Canonical or Not.    (line  26)
* non_temporal_threshold tunables:       Hardware Capability Tunables.
                                                              (line   6)
* normalization functions (floating-point): Normalization Functions.
                                                              (line   6)
* normalized floating point number:      Floating Point Concepts.
                                                              (line  58)
* Not a directory:                       Error Codes.         (line 129)
* not a number:                          Infinity and NaN.    (line   6)
* Not a XENIX named type file:           Error Codes.         (line 774)
* Not supported:                         Error Codes.         (line 524)
* NSS:                                   Unsafe Features.     (line  66)
* NSS <1>:                               Name Service Switch. (line   6)
* nsswitch.conf:                         NSS Configuration File.
                                                              (line   6)
* null byte:                             Representation of Strings.
                                                              (line  31)
* null pointer constant:                 Null Pointer Constant.
                                                              (line   6)
* null wide character:                   Representation of Strings.
                                                              (line  31)
* number of arguments passed:            How Many Arguments.  (line   6)
* number syntax, parsing:                Parsing of Numbers.  (line   6)
* numeric value formatting:              The Lame Way to Locale Data.
                                                              (line  13)
* Numerical argument out of domain:      Error Codes.         (line 210)
* Numerical result out of range:         Error Codes.         (line 216)
* Object is remote:                      Error Codes.         (line 465)
* obstack status:                        Status of an Obstack.
                                                              (line   6)
* obstacks:                              Obstacks.            (line   6)
* one-way hashing:                       Passphrase Storage.  (line   6)
* open-time action flags:                Open-time Flags.     (line  17)
* opening a file:                        I/O Concepts.        (line   9)
* opening a file descriptor:             Opening and Closing Files.
                                                              (line   6)
                                                              vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
