
     The return value and error conditions are also the same as for
     'send', but you cannot rely on the system to detect errors and
     report them; the most common error is that the packet is lost or
     there is no-one at the specified address to receive it, and the
     operating system on your machine usually does not know this.

     It is also possible for one call to 'sendto' to report an error
     owing to a problem related to a previous call.

     This function is defined as a cancellation point in multi-threaded
     programs, so one has to be prepared for this and make sure that
     allocated resources (like memory, file descriptors, semaphores or
     whatever) are freed even if the thread is canceled.

==============================================================================
File: libc.info,  Node: |Receiving_Datagrams|,  Next: |Datagram_Example|,  Prev: |Sending_Datagrams|,  Up: |Datagrams|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *Receiving_Datagrams*

16.10.2 Receiving Datagrams
---------------------------

The 'recvfrom' function reads a packet from a datagram socket and also
tells you where it was sent from.  This function is declared in
'sys/socket.h'.

 -- Function: ssize_t recvfrom (int SOCKET, void *BUFFER, size_t SIZE,
          int FLAGS, struct sockaddr *ADDR, socklen_t *LENGTH-PTR)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'recvfrom' function reads one packet from the socket SOCKET
     into the buffer BUFFER.  The SIZE argument specifies the maximum
     number of bytes to be read.

     If the packet is longer than SIZE bytes, then you get the first
     SIZE bytes of the packet and the rest of the packet is lost.
     There's no way to read the rest of the packet.  Thus, when you use
     a packet protocol, you must always know how long a packet to
     expect.

     The ADDR and LENGTH-PTR arguments are used to return the address
     where the packet came from.  *Note Socket Addresses::.  For a
     socket in the local domain the address information won't be
     meaningful, since you can't read the address of such a socket
     (*note Local Namespace::).  You can specify a null pointer as the
     ADDR argument if you are not interested in this information.

     The FLAGS are interpreted the same way as for 'recv' (*note Socket
     Data Options::).  The return value and error conditions are also
     the same as for 'recv'.

     This function is defined as a cancellation point in multi-threaded
     programs, so one has to be prepared for this and make sure that
     allocated resources (like memory, file descriptors, semaphores or
     whatever) are freed even if the thread is canceled.

   You can use plain 'recv' (*note Receiving Data::) instead of
'recvfrom' if you don't need to find out who sent the packet (either
because you know where it should come from or because you treat all
possible senders alike).  Even 'read' can be used if you don't want to
specify FLAGS (*note I/O Primitives::).

==============================================================================
File: libc.info,  Node: |Datagram_Example|,  Next: |Example_Receiver|,  Prev: |Receiving_Datagrams|,  Up: |Datagrams|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Datagram_Example*

16.10.3 Datagram Socket Example
-------------------------------

Here is a set of example programs that send messages over a datagram
stream in the local namespace.  Both the client and server programs use
the 'make_named_socket' function that was presented in *note Local
Socket Example::, to create and name their sockets.

   First, here is the server program.  It sits in a loop waiting for
messages to arrive, bouncing each message back to the sender.  Obviously
this isn't a particularly useful program, but it does show the general
ideas involved.


     #include <stdio.h>
     #include <errno.h>
     #include <stdlib.h>
     #include <sys/socket.h>
     #include <sys/un.h>

     #define SERVER  "/tmp/serversocket"
     #define MAXMSG  512

     int
     main (void)
     {
       int sock;
       char message[MAXMSG];
       struct sockaddr_un name;
       size_t size;
       int nbytes;

       /* Remove the filename first, it's ok if the call fails */
       unlink (SERVER);

       /* Make the socket, then loop endlessly. */
       sock = make_named_socket (SERVER);
       while (1)
         {
           /* Wait for a datagram. */
           size = sizeof (name);
           nbytes = recvfrom (sock, message, MAXMSG, 0,
                              (struct sockaddr *) & name, &size);
           if (nbytes < 0)
             {
               perror ("recfrom (server)");
               exit (EXIT_FAILURE);
             }

           /* Give a diagnostic message. */
           fprintf (stderr, "Server: got message: %s\n", message);

           /* Bounce the message back to the sender. */
           nbytes = sendto (sock, message, nbytes, 0,
                            (struct sockaddr *) & name, size);
           if (nbytes < 0)
             {
               perror ("sendto (server)");
               exit (EXIT_FAILURE);
             }
         }
     }

==============================================================================
File: libc.info,  Node: |Example_Receiver|,  Prev: |Datagram_Example|,  Up: |Datagrams|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Example_Receiver*

16.10.4 Example of Reading Datagrams
------------------------------------

Here is the client program corresponding to the server above.

   It sends a datagram to the server and then waits for a reply.  Notice
that the socket for the client (as well as for the server) in this
example has to be given a name.  This is so that the server can direct a
message back to the client.  Since the socket has no associated
connection state, the only way the server can do this is by referencing
the name of the client.


     #include <stdio.h>
     #include <errno.h>
     #include <unistd.h>
     #include <stdlib.h>
     #include <sys/socket.h>
     #include <sys/un.h>

     #define SERVER  "/tmp/serversocket"
     #define CLIENT  "/tmp/mysocket"
     #define MAXMSG  512
     #define MESSAGE "Yow!!! Are we having fun yet?!?"

     int
     main (void)
     {
       extern int make_named_socket (const char *name);
       int sock;
       char message[MAXMSG];
       struct sockaddr_un name;
       size_t size;
       int nbytes;

       /* Make the socket. */
       sock = make_named_socket (CLIENT);

       /* Initialize the server socket address. */
       name.sun_family = AF_LOCAL;
       strcpy (name.sun_path, SERVER);
       size = strlen (name.sun_path) + sizeof (name.sun_family);

       /* Send the datagram. */
       nbytes = sendto (sock, MESSAGE, strlen (MESSAGE) + 1, 0,
                        (struct sockaddr *) & name, size);
       if (nbytes < 0)
         {
           perror ("sendto (client)");
           exit (EXIT_FAILURE);
         }

       /* Wait for a reply. */
       nbytes = recvfrom (sock, message, MAXMSG, 0, NULL, 0);
       if (nbytes < 0)
         {
           perror ("recfrom (client)");
           exit (EXIT_FAILURE);
         }

       /* Print a diagnostic message. */
       fprintf (stderr, "Client: got message: %s\n", message);

       /* Clean up. */
       remove (CLIENT);
       close (sock);
     }

   Keep in mind that datagram socket communications are unreliable.  In
this example, the client program waits indefinitely if the message never
reaches the server or if the server's response never comes back.  It's
up to the user running the program to kill and restart it if desired.  A
more automatic solution could be to use 'select' (*note Waiting for
I/O::) to establish a timeout period for the reply, and in case of
timeout either re-send the message or shut down the socket and exit.

==============================================================================
File: libc.info,  Node: |Inetd|,  Next: |Socket_Options|,  Prev: |Datagrams|,  Up: |Sockets|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *Inetd*

16.11 The 'inetd' Daemon
------------------------

We've explained above how to write a server program that does its own
listening.  Such a server must already be running in order for anyone to
connect to it.

   Another way to provide a service on an Internet port is to let the
daemon program 'inetd' do the listening.  'inetd' is a program that runs
all the time and waits (using 'select') for messages on a specified set
of ports.  When it receives a message, it accepts the connection (if the
socket style calls for connections) and then forks a child process to
run the corresponding server program.  You specify the ports and their
programs in the file '/etc/inetd.conf'.

MENU

* |Inetd_Servers|::
* |Configuring_Inetd|::

==============================================================================
File: libc.info,  Node: |Inetd_Servers|,  Next: |Configuring_Inetd|,  Up: |Inetd|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Inetd_Servers*

16.11.1 'inetd' Servers
-----------------------

Writing a server program to be run by 'inetd' is very simple.  Each time
someone requests a connection to the appropriate port, a new server
process starts.  The connection already exists at this time; the socket
is available as the standard input descriptor and as the standard output
descriptor (descriptors 0 and 1) in the server process.  Thus the server
program can begin reading and writing data right away.  Often the
program needs only the ordinary I/O facilities; in fact, a
general-purpose filter program that knows nothing about sockets can work
as a byte stream server run by 'inetd'.

   You can also use 'inetd' for servers that use connectionless
communication styles.  For these servers, 'inetd' does not try to accept
a connection since no connection is possible.  It just starts the server
program, which can read the incoming datagram packet from descriptor 0.
The server program can handle one request and then exit, or you can
choose to write it to keep reading more requests until no more arrive,
and then exit.  You must specify which of these two techniques the
server uses when you configure 'inetd'.

==============================================================================
File: libc.info,  Node: |Configuring_Inetd|,  Prev: |Inetd_Servers|,  Up: |Inetd|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Configuring_Inetd*

16.11.2 Configuring 'inetd'
---------------------------

The file '/etc/inetd.conf' tells 'inetd' which ports to listen to and
what server programs to run for them.  Normally each entry in the file
is one line, but you can split it onto multiple lines provided all but
the first line of the entry start with whitespace.  Lines that start
with '#' are comments.

   Here are two standard entries in '/etc/inetd.conf':

     ftp	stream	tcp	nowait	root	/libexec/ftpd	ftpd
     talk	dgram	udp	wait	root	/libexec/talkd	talkd

   An entry has this format:

     SERVICE STYLE PROTOCOL WAIT USERNAME PROGRAM ARGUMENTS

   The SERVICE field says which service this program provides.  It
should be the name of a service defined in '/etc/services'.  'inetd'
uses SERVICE to decide which port to listen on for this entry.

   The fields STYLE and PROTOCOL specify the communication style and the
protocol to use for the listening socket.  The style should be the name
of a communication style, converted to lower case and with 'SOCK_'
deleted--for example, 'stream' or 'dgram'.  PROTOCOL should be one of the
protocols listed in '/etc/protocols'.  The typical protocol names are
'tcp' for byte stream connections and 'udp' for unreliable datagrams.

   The WAIT field should be either 'wait' or 'nowait'.  Use 'wait' if
STYLE is a connectionless style and the server, once started, handles
multiple requests as they come in.  Use 'nowait' if 'inetd' should start
a new process for each message or request that comes in.  If STYLE uses
connections, then WAIT must be 'nowait'.

   USER is the user name that the server should run as.  'inetd' runs as
root, so it can set the user ID of its children arbitrarily.  It's best
to avoid using 'root' for USER if you can; but some servers, such as
Telnet and FTP, read a username and passphrase themselves.  These
servers need to be root initially so they can log in as commanded by the
data coming over the network.

   PROGRAM together with ARGUMENTS specifies the command to run to start
the server.  PROGRAM should be an absolute file name specifying the
executable file to run.  ARGUMENTS consists of any number of
whitespace-separated words, which become the command-line arguments of
PROGRAM.  The first word in ARGUMENTS is argument zero, which should by
convention be the program name itself (sans directories).

   If you edit '/etc/inetd.conf', you can tell 'inetd' to reread the
file and obey its new contents by sending the 'inetd' process the
'SIGHUP' signal.  You'll have to use 'ps' to determine the process ID of
the 'inetd' process as it is not fixed.

==============================================================================
File: libc.info,  Node: |Socket_Options|,  Next: |Networks_Database|,  Prev: |Inetd|,  Up: |Sockets|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Socket_Options*

16.12 Socket Options
--------------------

This section describes how to read or set various options that modify
the behavior of sockets and their underlying communications protocols.

   When you are manipulating a socket option, you must specify which
"level" the option pertains to.  This describes whether the option
applies to the socket interface, or to a lower-level communications
protocol interface.

MENU

* |Socket_Option_Functions|::     The basic functions for setting and getting
                                 socket options.
* |Socket_Level_Options|::        Details of the options at the socket level.

==============================================================================
File: libc.info,  Node: |Socket_Option_Functions|,  Next: |Socket_Level_Options|,  Up: |Socket_Options|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *Socket_Option_Functions*

16.12.1 Socket Option Functions
-------------------------------

Here are the functions for examining and modifying socket options.  They
are declared in 'sys/socket.h'.

 -- Function: int getsockopt (int SOCKET, int LEVEL, int OPTNAME, void
          *OPTVAL, socklen_t *OPTLEN-PTR)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'getsockopt' function gets information about the value of
     option OPTNAME at level LEVEL for socket SOCKET.

     The option value is stored in the buffer that OPTVAL points to.
     Before the call, you should supply in '*OPTLEN-PTR' the size of
     this buffer; on return, it contains the number of bytes of
     information actually stored in the buffer.

     Most options interpret the OPTVAL buffer as a single 'int' value.

     The actual return value of 'getsockopt' is '0' on success and '-1'
     on failure.  The following 'errno' error conditions are defined:

     'EBADF'
          The SOCKET argument is not a valid file descriptor.

     'ENOTSOCK'
          The descriptor SOCKET is not a socket.

     'ENOPROTOOPT'
          The OPTNAME doesn't make sense for the given LEVEL.

 -- Function: int setsockopt (int SOCKET, int LEVEL, int OPTNAME, const
          void *OPTVAL, socklen_t OPTLEN)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function is used to set the socket option OPTNAME at level
     LEVEL for socket SOCKET.  The value of the option is passed in the
     buffer OPTVAL of size OPTLEN.

     The return value and error codes for 'setsockopt' are the same as
     for 'getsockopt'.

==============================================================================
File: libc.info,  Node: |Socket_Level_Options|,  Prev: |Socket_Option_Functions|,  Up: |Socket_Options|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Socket_Level_Options*

16.12.2 Socket-Level Options
----------------------------

 -- Constant: int SOL_SOCKET

     Use this constant as the LEVEL argument to 'getsockopt' or
     'setsockopt' to manipulate the socket-level options described in
     this section.

Here is a table of socket-level option names; all are defined in the
header file 'sys/socket.h'.

'SO_DEBUG'

     This option toggles recording of debugging information in the
     underlying protocol modules.  The value has type 'int'; a nonzero
     value means "yes".

'SO_REUSEADDR'

     This option controls whether 'bind' (*note Setting Address::)
     should permit reuse of local addresses for this socket.  If you
     enable this option, you can actually have two sockets with the same
     Internet port number; but the system won't allow you to use the two
     identically-named sockets in a way that would confuse the Internet.
     The reason for this option is that some higher-level Internet
     protocols, including FTP, require you to keep reusing the same port
     number.

     The value has type 'int'; a nonzero value means "yes".

'SO_KEEPALIVE'

     This option controls whether the underlying protocol should
     periodically transmit messages on a connected socket.  If the peer
     fails to respond to these messages, the connection is considered
     broken.  The value has type 'int'; a nonzero value means "yes".

'SO_DONTROUTE'

     This option controls whether outgoing messages bypass the normal
     message routing facilities.  If set, messages are sent directly to
     the network interface instead.  The value has type 'int'; a nonzero
     value means "yes".

'SO_LINGER'

     This option specifies what should happen when the socket of a type
     that promises reliable delivery still has untransmitted messages
     when it is closed; see *note Closing a Socket::.  The value has
     type 'struct linger'.

      -- Data Type: struct linger

          This structure type has the following members:

          'int l_onoff'
               This field is interpreted as a boolean.  If nonzero,
               'close' blocks until the data are transmitted or the
               timeout period has expired.

          'int l_linger'
               This specifies the timeout period, in seconds.

'SO_BROADCAST'

     This option controls whether datagrams may be broadcast from the
     socket.  The value has type 'int'; a nonzero value means "yes".

'SO_OOBINLINE'

     If this option is set, out-of-band data received on the socket is
     placed in the normal input queue.  This permits it to be read using
     'read' or 'recv' without specifying the 'MSG_OOB' flag.  *Note
     Out-of-Band Data::.  The value has type 'int'; a nonzero value
     means "yes".

'SO_SNDBUF'

     This option gets or sets the size of the output buffer.  The value
     is a 'size_t', which is the size in bytes.

'SO_RCVBUF'

     This option gets or sets the size of the input buffer.  The value
     is a 'size_t', which is the size in bytes.

'SO_STYLE'
'SO_TYPE'

     This option can be used with 'getsockopt' only.  It is used to get
     the socket's communication style.  'SO_TYPE' is the historical
     name, and 'SO_STYLE' is the preferred name in GNU. The value has
     type 'int' and its value designates a communication style; see
     *note Communication Styles::.

'SO_ERROR'

     This option can be used with 'getsockopt' only.  It is used to
     reset the error status of the socket.  The value is an 'int', which
     represents the previous error status.

==============================================================================
File: libc.info,  Node: |Networks_Database|,  Prev: Socket Options,  Up: |Sockets|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Networks_Database*

16.13 Networks Database
-----------------------

Many systems come with a database that records a list of networks known
to the system developer.  This is usually kept either in the file
'/etc/networks' or in an equivalent from a name server.  This data base
is useful for routing programs such as 'route', but it is not useful for
programs that simply communicate over the network.  We provide functions
to access this database, which are declared in 'netdb.h'.

 -- Data Type: struct netent

     This data type is used to represent information about entries in
     the networks database.  It has the following members:

     'char *n_name'
          This is the "official" name of the network.

     'char **n_aliases'
          These are alternative names for the network, represented as a
          vector of strings.  A null pointer terminates the array.

     'int n_addrtype'
          This is the type of the network number; this is always equal
          to 'AF_INET' for Internet networks.

     'unsigned long int n_net'
          This is the network number.  Network numbers are returned in
          host byte order; see *note Byte Order::.

   Use the 'getnetbyname' or 'getnetbyaddr' functions to search the
networks database for information about a specific network.  The
information is returned in a statically-allocated structure; you must
copy the information if you need to save it.

 -- Function: struct netent * getnetbyname (const char *NAME)

     Preliminary: | MT-Unsafe race:netbyname env locale | AS-Unsafe
     dlopen plugin heap lock | AC-Unsafe corrupt lock fd mem | *Note
     POSIX Safety Concepts::.

     The 'getnetbyname' function returns information about the network
     named NAME.  It returns a null pointer if there is no such network.

 -- Function: struct netent * getnetbyaddr (uint32_t NET, int TYPE)

     Preliminary: | MT-Unsafe race:netbyaddr locale | AS-Unsafe dlopen
     plugin heap lock | AC-Unsafe corrupt lock fd mem | *Note POSIX
     Safety Concepts::.

     The 'getnetbyaddr' function returns information about the network
     of type TYPE with number NET.  You should specify a value of
     'AF_INET' for the TYPE argument for Internet networks.

     'getnetbyaddr' returns a null pointer if there is no such network.

   You can also scan the networks database using 'setnetent',
'getnetent' and 'endnetent'.  Be careful when using these functions
because they are not reentrant.

 -- Function: void setnetent (int STAYOPEN)

     Preliminary: | MT-Unsafe race:netent env locale | AS-Unsafe dlopen
     plugin heap lock | AC-Unsafe corrupt lock fd mem | *Note POSIX
     Safety Concepts::.

     This function opens and rewinds the networks database.

     If the STAYOPEN argument is nonzero, this sets a flag so that
     subsequent calls to 'getnetbyname' or 'getnetbyaddr' will not close
     the database (as they usually would).  This makes for more
     efficiency if you call those functions several times, by avoiding
     reopening the database for each call.

 -- Function: struct netent * getnetent (void)

     Preliminary: | MT-Unsafe race:netent race:netentbuf env locale |
     AS-Unsafe dlopen plugin heap lock | AC-Unsafe corrupt lock fd mem |
     *Note POSIX Safety Concepts::.

     This function returns the next entry in the networks database.  It
     returns a null pointer if there are no more entries.

 -- Function: void endnetent (void)

     Preliminary: | MT-Unsafe race:netent env locale | AS-Unsafe dlopen
     plugin heap lock | AC-Unsafe corrupt lock fd mem | *Note POSIX
     Safety Concepts::.

     This function closes the networks database.

==============================================================================
File: libc.info,  Node: |Low_Level_Terminal_Interface|,  Next: |Syslog|,  Prev: |Sockets|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Low_Level_Terminal_Interface*

17 Low-Level Terminal Interface
===============================

This chapter describes functions that are specific to terminal devices.
You can use these functions to do things like turn off input echoing;
set serial line characteristics such as line speed and flow control; and
change which characters are used for end-of-file, command-line editing,
sending signals, and similar control functions.

   Most of the functions in this chapter operate on file descriptors.
*Note Low-Level I/O::, for more information about what a file descriptor
is and how to open a file descriptor for a terminal device.

MENU

* |Is_It_a_Terminal|::            How to determine if a file is a terminal
			         device, and what its name is.
* |I/O_Queues|::                  About flow control and typeahead.
* |Canonical_or_Not|::            Two basic styles of input processing.
* |Terminal_Modes|::              How to examine and modify flags controlling
			         details of terminal I/O: echoing,
                                 signals, editing.  Posix.
* |BSD_Terminal_Modes|::          BSD compatible terminal mode setting
* |Line_Control|::                Sending break sequences, clearing
                                 terminal buffers ...
* |Noncanon_Example|::            How to read single characters without echo.
* |getpass|::                     Prompting the user for a passphrase.
* |Pseudo_Terminals|::            How to open a pseudo-terminal.

==============================================================================
File: libc.info,  Node: |Is_It_a_Terminal|,  Next: |I/O_Queues|,  Up: |Low_Level_Terminal_Interface|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Is_It_a_Terminal*

17.1 Identifying Terminals
--------------------------

The functions described in this chapter only work on files that
correspond to terminal devices.  You can find out whether a file
descriptor is associated with a terminal by using the 'isatty' function.

   Prototypes for the functions in this section are declared in the
header file 'unistd.h'.

 -- Function: int isatty (int FILEDES)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function returns '1' if FILEDES is a file descriptor
     associated with an open terminal device, and 0 otherwise.

   If a file descriptor is associated with a terminal, you can get its
associated file name using the 'ttyname' function.  See also the
'ctermid' function, described in *note Identifying the Terminal::.

 -- Function: char * ttyname (int FILEDES)

     Preliminary: | MT-Unsafe race:ttyname | AS-Unsafe heap lock |
     AC-Unsafe lock fd mem | *Note POSIX Safety Concepts::.

     If the file descriptor FILEDES is associated with a terminal
     device, the 'ttyname' function returns a pointer to a
     statically-allocated, null-terminated string containing the file
     name of the terminal file.  The value is a null pointer if the file
     descriptor isn't associated with a terminal, or the file name
     cannot be determined.

 -- Function: int ttyname_r (int FILEDES, char *BUF, size_t LEN)

     Preliminary: | MT-Safe | AS-Unsafe heap | AC-Unsafe mem fd | *Note
     POSIX Safety Concepts::.

     The 'ttyname_r' function is similar to the 'ttyname' function
     except that it places its result into the user-specified buffer
     starting at BUF with length LEN.

     The normal return value from 'ttyname_r' is 0.  Otherwise an error
     number is returned to indicate the error.  The following 'errno'
     error conditions are defined for this function:

     'EBADF'
          The FILEDES argument is not a valid file descriptor.

     'ENOTTY'
          The FILEDES is not associated with a terminal.

     'ERANGE'
          The buffer length LEN is too small to store the string to be
          returned.

     'ENODEV'
          The FILEDES is associated with a terminal device that is a
          slave pseudo-terminal, but the file name associated with that
          device could not be determined.  This is a GNU extension.

==============================================================================
File: libc.info,  Node: |I/O_Queues|,  Next: |Canonical_or_Not|,  Prev: |Is_It_a_Terminal|,  Up: |Low_Level_Terminal_Interface|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *I/O_Queues*

17.2 I/O Queues
---------------

Many of the remaining functions in this section refer to the input and
output queues of a terminal device.  These queues implement a form of
buffering _within the kernel_ independent of the buffering implemented
by I/O streams (*note I/O on Streams::).

   The "terminal input queue" is also sometimes referred to as its
"typeahead buffer".  It holds the characters that have been received
from the terminal but not yet read by any process.

   The size of the input queue is described by the 'MAX_INPUT' and
'_POSIX_MAX_INPUT' parameters; see *note Limits for Files::.  You are
guaranteed a queue size of at least 'MAX_INPUT', but the queue might be
larger, and might even dynamically change size.  If input flow control
is enabled by setting the 'IXOFF' input mode bit (*note Input Modes::),
the terminal driver transmits STOP and START characters to the terminal
when necessary to prevent the queue from overflowing.  Otherwise, input
may be lost if it comes in too fast from the terminal.  In canonical
mode, all input stays in the queue until a newline character is
received, so the terminal input queue can fill up when you type a very
long line.  *Note Canonical or Not::.

   The "terminal output queue" is like the input queue, but for output;
it contains characters that have been written by processes, but not yet
transmitted to the terminal.  If output flow control is enabled by
setting the 'IXON' input mode bit (*note Input Modes::), the terminal
driver obeys START and STOP characters sent by the terminal to stop and
restart transmission of output.

   "Clearing" the terminal input queue means discarding any characters
that have been received but not yet read.  Similarly, clearing the
terminal output queue means discarding any characters that have been
written but not yet transmitted.

==============================================================================
File: libc.info,  Node: |Canonical_or_Not|,  Next: |Terminal_Modes|,  Prev: |I/O_Queues|,  Up: |Low_Level_Terminal_Interface|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Canonical_or_Not*

17.3 Two Styles of Input: Canonical or Not
------------------------------------------

POSIX systems support two basic modes of input: canonical and
noncanonical.

   In "canonical input processing" mode, terminal input is processed in
lines terminated by newline (''\n''), EOF, or EOL characters.  No input
can be read until an entire line has been typed by the user, and the
'read' function (*note I/O Primitives::) returns at most a single line
of input, no matter how many bytes are requested.

   In canonical input mode, the operating system provides input editing
facilities: some characters are interpreted specially to perform editing
operations within the current line of text, such as ERASE and KILL.
*Note Editing Characters::.

   The constants '_POSIX_MAX_CANON' and 'MAX_CANON' parameterize the
maximum number of bytes which may appear in a single line of canonical
input.  *Note Limits for Files::.  You are guaranteed a maximum line
length of at least 'MAX_CANON' bytes, but the maximum might be larger,
and might even dynamically change size.

   In "noncanonical input processing" mode, characters are not grouped
into lines, and ERASE and KILL processing is not performed.  The
granularity with which bytes are read in noncanonical input mode is
controlled by the MIN and TIME settings.  *Note Noncanonical Input::.

   Most programs use canonical input mode, because this gives the user a
way to edit input line by line.  The usual reason to use noncanonical
mode is when the program accepts single-character commands or provides
its own editing facilities.

   The choice of canonical or noncanonical input is controlled by the
'ICANON' flag in the 'c_lflag' member of 'struct termios'.  *Note Local
Modes::.

==============================================================================
File: libc.info,  Node: |Terminal_Modes|,  Next: |BSD_Terminal_Modes|,  Prev: |Canonical_or_Not|,  Up: |Low_Level_Terminal_Interface|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Terminal_Modes*

17.4 Terminal Modes
-------------------

This section describes the various terminal attributes that control how
input and output are done.  The functions, data structures, and symbolic
constants are all declared in the header file 'termios.h'.

   Don't confuse terminal attributes with file attributes.  A device
special file which is associated with a terminal has file attributes as
described in *note File Attributes::.  These are unrelated to the
attributes of the terminal device itself, which are discussed in this
section.

MENU

* |Mode_Data_Types|::             The data type 'struct termios' and
                                 related types.
* |Mode_Functions|::              Functions to read and set the terminal
                                 attributes.
* |Setting_Modes|::               The right way to set terminal attributes
                                 reliably.
* |Input_Modes|::                 Flags controlling low-level input handling.
* |Output_Modes|::                Flags controlling low-level output handling.
* |Control_Modes|::               Flags controlling serial port behavior.
* |Local_Modes|::                 Flags controlling high-level input handling.
* |Line_Speed|::                  How to read and set the terminal line speed.
* |Special_Characters|::          Characters that have special effects,
			         and how to change them.
* |Noncanonical_Input|::          Controlling how long to wait for input.

==============================================================================
File: libc.info,  Node: |Mode_Data_Types|,  Next: |Mode_Functions|,  Up: |Terminal_Modes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *Mode_Data_Types*

17.4.1 Terminal Mode Data Types
-------------------------------

The entire collection of attributes of a terminal is stored in a
structure of type 'struct termios'.  This structure is used with the
functions 'tcgetattr' and 'tcsetattr' to read and set the attributes.

 -- Data Type: struct termios

     A 'struct termios' records all the I/O attributes of a terminal.
     The structure includes at least the following members:

     'tcflag_t c_iflag'
          A bit mask specifying flags for input modes; see *note Input
          Modes::.

     'tcflag_t c_oflag'
          A bit mask specifying flags for output modes; see *note Output
          Modes::.

     'tcflag_t c_cflag'
          A bit mask specifying flags for control modes; see *note
          Control Modes::.

     'tcflag_t c_lflag'
          A bit mask specifying flags for local modes; see *note Local
          Modes::.

     'cc_t c_cc[NCCS]'
          An array specifying which characters are associated with
          various control functions; see *note Special Characters::.

     The 'struct termios' structure also contains members which encode
     input and output transmission speeds, but the representation is not
     specified.  *Note Line Speed::, for how to examine and store the
     speed values.

   The following sections describe the details of the members of the
'struct termios' structure.

 -- Data Type: tcflag_t

     This is an unsigned integer type used to represent the various bit
     masks for terminal flags.

 -- Data Type: cc_t

     This is an unsigned integer type used to represent characters
     associated with various terminal control functions.

 -- Macro: int NCCS

     The value of this macro is the number of elements in the 'c_cc'
     array.

==============================================================================
File: libc.info,  Node: |Mode_Functions|,  Next: |Setting_Modes|,  Prev: |Mode_Data_Types|,  Up: |Terminal_Modes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Mode_Functions*

17.4.2 Terminal Mode Functions
------------------------------

 -- Function: int tcgetattr (int FILEDES, struct termios *TERMIOS-P)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function is used to examine the attributes of the terminal
     device with file descriptor FILEDES.  The attributes are returned
     in the structure that TERMIOS-P points to.

     If successful, 'tcgetattr' returns 0.  A return value of -1
     indicates an error.  The following 'errno' error conditions are
     defined for this function:

     'EBADF'
          The FILEDES argument is not a valid file descriptor.

     'ENOTTY'
          The FILEDES is not associated with a terminal.

 -- Function: int tcsetattr (int FILEDES, int WHEN, const struct termios
          *TERMIOS-P)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function sets the attributes of the terminal device with file
     descriptor FILEDES.  The new attributes are taken from the
     structure that TERMIOS-P points to.

     The WHEN argument specifies how to deal with input and output
     already queued.  It can be one of the following values:

     'TCSANOW'

          Make the change immediately.

     'TCSADRAIN'

          Make the change after waiting until all queued output has been
          written.  You should usually use this option when changing
          parameters that affect output.

     'TCSAFLUSH'

          This is like 'TCSADRAIN', but also discards any queued input.

     'TCSASOFT'

          This is a flag bit that you can add to any of the above
          alternatives.  Its meaning is to inhibit alteration of the
          state of the terminal hardware.  It is a BSD extension; it is
          only supported on BSD systems and GNU/Hurd systems.

          Using 'TCSASOFT' is exactly the same as setting the 'CIGNORE'
          bit in the 'c_cflag' member of the structure TERMIOS-P points
          to.  *Note Control Modes::, for a description of 'CIGNORE'.

     If this function is called from a background process on its
     controlling terminal, normally all processes in the process group
     are sent a 'SIGTTOU' signal, in the same way as if the process were
     trying to write to the terminal.  The exception is if the calling
     process itself is ignoring or blocking 'SIGTTOU' signals, in which
     case the operation is performed and no signal is sent.  *Note Job
     Control::.

     If successful, 'tcsetattr' returns 0.  A return value of -1
     indicates an error.  The following 'errno' error conditions are
     defined for this function:

     'EBADF'
          The FILEDES argument is not a valid file descriptor.

     'ENOTTY'
          The FILEDES is not associated with a terminal.

     'EINVAL'
          Either the value of the 'when' argument is not valid, or there
          is something wrong with the data in the TERMIOS-P argument.

   Although 'tcgetattr' and 'tcsetattr' specify the terminal device with
a file descriptor, the attributes are those of the terminal device
itself and not of the file descriptor.  This means that the effects of
changing terminal attributes are persistent; if another process opens
the terminal file later on, it will see the changed attributes even
though it doesn't have anything to do with the open file descriptor you
originally specified in changing the attributes.

   Similarly, if a single process has multiple or duplicated file
descriptors for the same terminal device, changing the terminal
attributes affects input and output to all of these file descriptors.
This means, for example, that you can't open one file descriptor or
stream to read from a terminal in the normal line-buffered, echoed mode;
and simultaneously have another file descriptor for the same terminal
that you use to read from it in single-character, non-echoed mode.
Instead, you have to explicitly switch the terminal back and forth
between the two modes.

==============================================================================
File: libc.info,  Node: |Setting_Modes|,  Next: |Input_Modes|,  Prev: |Mode_Functions|,  Up: |Terminal_Modes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Setting_Modes*

17.4.3 Setting Terminal Modes Properly
--------------------------------------

When you set terminal modes, you should call 'tcgetattr' first to get
the current modes of the particular terminal device, modify only those
modes that you are really interested in, and store the result with
'tcsetattr'.

   It's a bad idea to simply initialize a 'struct termios' structure to
a chosen set of attributes and pass it directly to 'tcsetattr'.  Your
program may be run years from now, on systems that support members not
documented in this manual.  The way to avoid setting these members to
unreasonable values is to avoid changing them.

   What's more, different terminal devices may require different mode
settings in order to function properly.  So you should avoid blindly
copying attributes from one terminal device to another.

   When a member contains a collection of independent flags, as the
'c_iflag', 'c_oflag' and 'c_cflag' members do, even setting the entire
member is a bad idea, because particular operating systems have their
own flags.  Instead, you should start with the current value of the
member and alter only the flags whose values matter in your program,
leaving any other flags unchanged.

   Here is an example of how to set one flag ('ISTRIP') in the 'struct
termios' structure while properly preserving all the other data in the
structure:

     int
     set_istrip (int desc, int value)
     {
       struct termios settings;
       int result;

       result = tcgetattr (desc, &settings);
       if (result < 0)
         {
           perror ("error in tcgetattr");
           return 0;
         }
       settings.c_iflag &= ~ISTRIP;
       if (value)
         settings.c_iflag |= ISTRIP;
       result = tcsetattr (desc, TCSANOW, &settings);
       if (result < 0)
         {
           perror ("error in tcsetattr");
           return 0;
        }
       return 1;
     }

==============================================================================
File: libc.info,  Node: |Input_Modes|,  Next: |Output_Modes|,  Prev: |Setting_Modes|,  Up: |Terminal_Modes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Input_Modes*

17.4.4 Input Modes
------------------

This section describes the terminal attribute flags that control fairly
low-level aspects of input processing: handling of parity errors, break
signals, flow control, and <RET> and <LFD> characters.

   All of these flags are bits in the 'c_iflag' member of the 'struct
termios' structure.  The member is an integer, and you change flags
using the operators '&', '|' and '^'.  Don't try to specify the entire
value for 'c_iflag'--instead, change only specific flags and leave the
rest untouched (*note Setting Modes::).

 -- Macro: tcflag_t INPCK

     If this bit is set, input parity checking is enabled.  If it is not
     set, no checking at all is done for parity errors on input; the
     characters are simply passed through to the application.

     Parity checking on input processing is independent of whether
     parity detection and generation on the underlying terminal hardware
     is enabled; see *note Control Modes::.  For example, you could
     clear the 'INPCK' input mode flag and set the 'PARENB' control mode
     flag to ignore parity errors on input, but still generate parity on
     output.

     If this bit is set, what happens when a parity error is detected
     depends on whether the 'IGNPAR' or 'PARMRK' bits are set.  If
     neither of these bits are set, a byte with a parity error is passed
     to the application as a ''\0'' character.

 -- Macro: tcflag_t IGNPAR

     If this bit is set, any byte with a framing or parity error is
     ignored.  This is only useful if 'INPCK' is also set.

 -- Macro: tcflag_t PARMRK

     If this bit is set, input bytes with parity or framing errors are
     marked when passed to the program.  This bit is meaningful only
     when 'INPCK' is set and 'IGNPAR' is not set.

     The way erroneous bytes are marked is with two preceding bytes,
     '377' and '0'.  Thus, the program actually reads three bytes for
     one erroneous byte received from the terminal.

     If a valid byte has the value '0377', and 'ISTRIP' (see below) is
     not set, the program might confuse it with the prefix that marks a
     parity error.  So a valid byte '0377' is passed to the program as
     two bytes, '0377' '0377', in this case.

 -- Macro: tcflag_t ISTRIP

     If this bit is set, valid input bytes are stripped to seven bits;
     otherwise, all eight bits are available for programs to read.

 -- Macro: tcflag_t IGNBRK

     If this bit is set, break conditions are ignored.

     A "break condition" is defined in the context of asynchronous
     serial data transmission as a series of zero-value bits longer than
     a single byte.

 -- Macro: tcflag_t BRKINT

     If this bit is set and 'IGNBRK' is not set, a break condition
     clears the terminal input and output queues and raises a 'SIGINT'
     signal for the foreground process group associated with the
     terminal.

     If neither 'BRKINT' nor 'IGNBRK' are set, a break condition is
     passed to the application as a single ''\0'' character if 'PARMRK'
     is not set, or otherwise as a three-character sequence ''\377'',
     ''\0'', ''\0''.

 -- Macro: tcflag_t IGNCR

     If this bit is set, carriage return characters (''\r'') are
     discarded on input.  Discarding carriage return may be useful on
     terminals that send both carriage return and linefeed when you type
     the <RET> key.

 -- Macro: tcflag_t ICRNL

     If this bit is set and 'IGNCR' is not set, carriage return
     characters (''\r'') received as input are passed to the application
     as newline characters (''\n'').

 -- Macro: tcflag_t INLCR

     If this bit is set, newline characters (''\n'') received as input
     are passed to the application as carriage return characters
     (''\r'').

 -- Macro: tcflag_t IXOFF

     If this bit is set, start/stop control on input is enabled.  In
     other words, the computer sends STOP and START characters as
     necessary to prevent input from coming in faster than programs are
     reading it.  The idea is that the actual terminal hardware that is
     generating the input data responds to a STOP character by
     suspending transmission, and to a START character by resuming
     transmission.  *Note Start/Stop Characters::.

 -- Macro: tcflag_t IXON

     If this bit is set, start/stop control on output is enabled.  In
     other words, if the computer receives a STOP character, it suspends
     output until a START character is received.  In this case, the STOP
     and START characters are never passed to the application program.
     If this bit is not set, then START and STOP can be read as ordinary
     characters.  *Note Start/Stop Characters::.

 -- Macro: tcflag_t IXANY

     If this bit is set, any input character restarts output when output
     has been suspended with the STOP character.  Otherwise, only the
     START character restarts output.

     This is a BSD extension; it exists only on BSD systems and
     GNU/Linux and GNU/Hurd systems.

 -- Macro: tcflag_t IMAXBEL

     If this bit is set, then filling up the terminal input buffer sends
     a BEL character (code '007') to the terminal to ring the bell.

     This is a BSD extension.

==============================================================================
File: libc.info,  Node: |Output_Modes|,  Next: |Control_Modes|,  Prev: |Input_Modes|,  Up: |Terminal_Modes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Output_Modes*

17.4.5 Output Modes
-------------------

This section describes the terminal flags and fields that control how
output characters are translated and padded for display.  All of these
are contained in the 'c_oflag' member of the 'struct termios' structure.

   The 'c_oflag' member itself is an integer, and you change the flags
and fields using the operators '&', '|', and '^'.  Don't try to specify
the entire value for 'c_oflag'--instead, change only specific flags and
leave the rest untouched (*note Setting Modes::).

 -- Macro: tcflag_t OPOST

     If this bit is set, output data is processed in some unspecified
     way so that it is displayed appropriately on the terminal device.
     This typically includes mapping newline characters (''\n'') onto
     carriage return and linefeed pairs.

     If this bit isn't set, the characters are transmitted as-is.

   The following three bits are effective only if 'OPOST' is set.

 -- Macro: tcflag_t ONLCR

     If this bit is set, convert the newline character on output into a
     pair of characters, carriage return followed by linefeed.

 -- Macro: tcflag_t OXTABS

     If this bit is set, convert tab characters on output into the
     appropriate number of spaces to emulate a tab stop every eight
     columns.  This bit exists only on BSD systems and GNU/Hurd systems;
     on GNU/Linux systems it is available as 'XTABS'.

 -- Macro: tcflag_t ONOEOT

     If this bit is set, discard 'C-d' characters (code '004') on
     output.  These characters cause many dial-up terminals to
     disconnect.  This bit exists only on BSD systems and GNU/Hurd
     systems.

==============================================================================
File: libc.info,  Node: |Control_Modes|,  Next: |Local_Modes|,  Prev: |Output_Modes|,  Up: |Terminal_Modes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Control_Modes*

17.4.6 Control Modes
--------------------

This section describes the terminal flags and fields that control
parameters usually associated with asynchronous serial data
transmission.  These flags may not make sense for other kinds of
terminal ports (such as a network connection pseudo-terminal).  All of
these are contained in the 'c_cflag' member of the 'struct termios'
structure.

   The 'c_cflag' member itself is an integer, and you change the flags
and fields using the operators '&', '|', and '^'.  Don't try to specify
the entire value for 'c_cflag'--instead, change only specific flags and
leave the rest untouched (*note Setting Modes::).

 -- Macro: tcflag_t CLOCAL

     If this bit is set, it indicates that the terminal is connected
     "locally" and that the modem status lines (such as carrier detect)
     should be ignored.

     On many systems if this bit is not set and you call 'open' without
     the 'O_NONBLOCK' flag set, 'open' blocks until a modem connection
     is established.

     If this bit is not set and a modem disconnect is detected, a
     'SIGHUP' signal is sent to the controlling process group for the
     terminal (if it has one).  Normally, this causes the process to
     exit; see *note Signal Handling::.  Reading from the terminal after
     a disconnect causes an end-of-file condition, and writing causes an
     'EIO' error to be returned.  The terminal device must be closed and
     reopened to clear the condition.

 -- Macro: tcflag_t HUPCL

     If this bit is set, a modem disconnect is generated when all
     processes that have the terminal device open have either closed the
     file or exited.

 -- Macro: tcflag_t CREAD

     If this bit is set, input can be read from the terminal.
     Otherwise, input is discarded when it arrives.

 -- Macro: tcflag_t CSTOPB

     If this bit is set, two stop bits are used.  Otherwise, only one
     stop bit is used.

 -- Macro: tcflag_t PARENB

     If this bit is set, generation and detection of a parity bit are
     enabled.  *Note Input Modes::, for information on how input parity
     errors are handled.

     If this bit is not set, no parity bit is added to output
     characters, and input characters are not checked for correct
     parity.

 -- Macro: tcflag_t PARODD

     This bit is only useful if 'PARENB' is set.  If 'PARODD' is set,
     odd parity is used, otherwise even parity is used.

   The control mode flags also includes a field for the number of bits
per character.  You can use the 'CSIZE' macro as a mask to extract the
value, like this: 'settings.c_cflag & CSIZE'.

 -- Macro: tcflag_t CSIZE

     This is a mask for the number of bits per character.

 -- Macro: tcflag_t CS5

     This specifies five bits per byte.

 -- Macro: tcflag_t CS6

     This specifies six bits per byte.

 -- Macro: tcflag_t CS7

     This specifies seven bits per byte.

 -- Macro: tcflag_t CS8

     This specifies eight bits per byte.

   The following four bits are BSD extensions; these exist only on BSD
systems and GNU/Hurd systems.

 -- Macro: tcflag_t CCTS_OFLOW

     If this bit is set, enable flow control of output based on the CTS
     wire (RS232 protocol).

 -- Macro: tcflag_t CRTS_IFLOW

     If this bit is set, enable flow control of input based on the RTS
     wire (RS232 protocol).

 -- Macro: tcflag_t MDMBUF

     If this bit is set, enable carrier-based flow control of output.

 -- Macro: tcflag_t CIGNORE

     If this bit is set, it says to ignore the control modes and line
     speed values entirely.  This is only meaningful in a call to
     'tcsetattr'.

     The 'c_cflag' member and the line speed values returned by
     'cfgetispeed' and 'cfgetospeed' will be unaffected by the call.
     'CIGNORE' is useful if you want to set all the software modes in
     the other members, but leave the hardware details in 'c_cflag'
     unchanged.  (This is how the 'TCSASOFT' flag to 'tcsettattr'
     works.)

     This bit is never set in the structure filled in by 'tcgetattr'.

==============================================================================
File: libc.info,  Node: |Local_Modes|,  Next: |Line_Speed|,  Prev: |Control_Modes|,  Up: |Terminal_Modes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Local_Modes*

17.4.7 Local Modes
------------------

This section describes the flags for the 'c_lflag' member of the 'struct
termios' structure.  These flags generally control higher-level aspects
of input processing than the input modes flags described in *note Input
Modes::, such as echoing, signals, and the choice of canonical or
noncanonical input.

   The 'c_lflag' member itself is an integer, and you change the flags
and fields using the operators '&', '|', and '^'.  Don't try to specify
the entire value for 'c_lflag'--instead, change only specific flags and
leave the rest untouched (*note Setting Modes::).

 -- Macro: tcflag_t ICANON

     This bit, if set, enables canonical input processing mode.
     Otherwise, input is processed in noncanonical mode.  *Note
     Canonical or Not::.

 -- Macro: tcflag_t ECHO

     If this bit is set, echoing of input characters back to the
     terminal is enabled.

 -- Macro: tcflag_t ECHOE

     If this bit is set, echoing indicates erasure of input with the
     ERASE character by erasing the last character in the current line
     from the screen.  Otherwise, the character erased is re-echoed to
     show what has happened (suitable for a printing terminal).

     This bit only controls the display behavior; the 'ICANON' bit by
     itself controls actual recognition of the ERASE character and
     erasure of input, without which 'ECHOE' is simply irrelevant.

 -- Macro: tcflag_t ECHOPRT

     This bit, like 'ECHOE', enables display of the ERASE character in a
     way that is geared to a hardcopy terminal.  When you type the ERASE
     character, a '\' character is printed followed by the first
     character erased.  Typing the ERASE character again just prints the
     next character erased.  Then, the next time you type a normal
     character, a '/' character is printed before the character echoes.

     This is a BSD extension, and exists only in BSD systems and
     GNU/Linux and GNU/Hurd systems.

 -- Macro: tcflag_t ECHOK

     This bit enables special display of the KILL character by moving to
     a new line after echoing the KILL character normally.  The behavior
     of 'ECHOKE' (below) is nicer to look at.

     If this bit is not set, the KILL character echoes just as it would
     if it were not the KILL character.  Then it is up to the user to
     remember that the KILL character has erased the preceding input;
     there is no indication of this on the screen.

     This bit only controls the display behavior; the 'ICANON' bit by
     itself controls actual recognition of the KILL character and
     erasure of input, without which 'ECHOK' is simply irrelevant.

 -- Macro: tcflag_t ECHOKE

     This bit is similar to 'ECHOK'.  It enables special display of the
     KILL character by erasing on the screen the entire line that has
     been killed.  This is a BSD extension, and exists only in BSD
     systems and GNU/Linux and GNU/Hurd systems.

 -- Macro: tcflag_t ECHONL

     If this bit is set and the 'ICANON' bit is also set, then the
     newline (''\n'') character is echoed even if the 'ECHO' bit is not
     set.

 -- Macro: tcflag_t ECHOCTL

     If this bit is set and the 'ECHO' bit is also set, echo control
     characters with '^' followed by the corresponding text character.
     Thus, control-A echoes as '^A'.  This is usually the preferred mode
     for interactive input, because echoing a control character back to
     the terminal could have some undesired effect on the terminal.

     This is a BSD extension, and exists only in BSD systems and
     GNU/Linux and GNU/Hurd systems.

 -- Macro: tcflag_t ISIG

     This bit controls whether the INTR, QUIT, and SUSP characters are
     recognized.  The functions associated with these characters are
     performed if and only if this bit is set.  Being in canonical or
     noncanonical input mode has no effect on the interpretation of
     these characters.

     You should use caution when disabling recognition of these
     characters.  Programs that cannot be interrupted interactively are
     very user-unfriendly.  If you clear this bit, your program should
     provide some alternate interface that allows the user to
     interactively send the signals associated with these characters, or
     to escape from the program.

     *Note Signal Characters::.

 -- Macro: tcflag_t IEXTEN

     POSIX.1 gives 'IEXTEN' implementation-defined meaning, so you
     cannot rely on this interpretation on all systems.

     On BSD systems and GNU/Linux and GNU/Hurd systems, it enables the
     LNEXT and DISCARD characters.  *Note Other Special::.

 -- Macro: tcflag_t NOFLSH

     Normally, the INTR, QUIT, and SUSP characters cause input and
     output queues for the terminal to be cleared.  If this bit is set,
     the queues are not cleared.

 -- Macro: tcflag_t TOSTOP

     If this bit is set and the system supports job control, then
     'SIGTTOU' signals are generated by background processes that
     attempt to write to the terminal.  *Note Access to the Terminal::.

   The following bits are BSD extensions; they exist only on BSD systems
and GNU/Hurd systems.

 -- Macro: tcflag_t ALTWERASE

     This bit determines how far the WERASE character should erase.  The
     WERASE character erases back to the beginning of a word; the
     question is, where do words begin?

     If this bit is clear, then the beginning of a word is a
     nonwhitespace character following a whitespace character.  If the
     bit is set, then the beginning of a word is an alphanumeric
     character or underscore following a character which is none of
     those.

     *Note Editing Characters::, for more information about the WERASE
     character.

 -- Macro: tcflag_t FLUSHO

     This is the bit that toggles when the user types the DISCARD
     character.  While this bit is set, all output is discarded.  *Note
     Other Special::.

 -- Macro: tcflag_t NOKERNINFO

     Setting this bit disables handling of the STATUS character.  *Note
     Other Special::.

 -- Macro: tcflag_t PENDIN

     If this bit is set, it indicates that there is a line of input that
     needs to be reprinted.  Typing the REPRINT character sets this bit;
     the bit remains set until reprinting is finished.  *Note Editing
     Characters::.

==============================================================================
File: libc.info,  Node: |Line_Speed|,  Next: |Special_Characters|,  Prev: |Local_Modes|,  Up: |Terminal_Modes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *Line_Speed*

17.4.8 Line Speed
-----------------

The terminal line speed tells the computer how fast to read and write
data on the terminal.

   If the terminal is connected to a real serial line, the terminal
speed you specify actually controls the line--if it doesn't match the
terminal's own idea of the speed, communication does not work.  Real
serial ports accept only certain standard speeds.  Also, particular
hardware may not support even all the standard speeds.  Specifying a
speed of zero hangs up a dialup connection and turns off modem control
signals.

   If the terminal is not a real serial line (for example, if it is a
network connection), then the line speed won't really affect data
transmission speed, but some programs will use it to determine the
amount of padding needed.  It's best to specify a line speed value that
matches the actual speed of the actual terminal, but you can safely
experiment with different values to vary the amount of padding.

   There are actually two line speeds for each terminal, one for input
and one for output.  You can set them independently, but most often
terminals use the same speed for both directions.

   The speed values are stored in the 'struct termios' structure, but
don't try to access them in the 'struct termios' structure directly.
Instead, you should use the following functions to read and store them:

 -- Function: speed_t cfgetospeed (const struct termios *TERMIOS-P)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function returns the output line speed stored in the structure
     '*TERMIOS-P'.

 -- Function: speed_t cfgetispeed (const struct termios *TERMIOS-P)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function returns the input line speed stored in the structure
     '*TERMIOS-P'.

 -- Function: int cfsetospeed (struct termios *TERMIOS-P, speed_t SPEED)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function stores SPEED in '*TERMIOS-P' as the output speed.
     The normal return value is 0; a value of -1 indicates an error.  If
     SPEED is not a speed, 'cfsetospeed' returns -1.

 -- Function: int cfsetispeed (struct termios *TERMIOS-P, speed_t SPEED)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function stores SPEED in '*TERMIOS-P' as the input speed.  The
     normal return value is 0; a value of -1 indicates an error.  If
     SPEED is not a speed, 'cfsetospeed' returns -1.

 -- Function: int cfsetspeed (struct termios *TERMIOS-P, speed_t SPEED)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function stores SPEED in '*TERMIOS-P' as both the input and
     output speeds.  The normal return value is 0; a value of -1
     indicates an error.  If SPEED is not a speed, 'cfsetspeed' returns
     -1.  This function is an extension in 4.4 BSD.

 -- Data Type: speed_t

     The 'speed_t' type is an unsigned integer data type used to
     represent line speeds.

   The functions 'cfsetospeed' and 'cfsetispeed' report errors only for
speed values that the system simply cannot handle.  If you specify a
speed value that is basically acceptable, then those functions will
succeed.  But they do not check that a particular hardware device can
actually support the specified speeds--in fact, they don't know which
device you plan to set the speed for.  If you use 'tcsetattr' to set the
speed of a particular device to a value that it cannot handle,
'tcsetattr' returns -1.

   *Portability note:* In the GNU C Library, the functions above accept
speeds measured in bits per second as input, and return speed values
measured in bits per second.  Other libraries require speeds to be
indicated by special codes.  For POSIX.1 portability, you must use one
of the following symbols to represent the speed; their precise numeric
values are system-dependent, but each name has a fixed meaning: 'B110'
stands for 110 bps, 'B300' for 300 bps, and so on.  There is no portable
way to represent any speed but these, but these are the only speeds that
typical serial lines can support.

     B0  B50  B75  B110  B134  B150  B200
     B300  B600  B1200  B1800  B2400  B4800
     B9600  B19200  B38400  B57600  B115200
     B230400  B460800

   BSD defines two additional speed symbols as aliases: 'EXTA' is an
alias for 'B19200' and 'EXTB' is an alias for 'B38400'.  These aliases
are obsolete.

==============================================================================
File: libc.info,  Node: |Special_Characters|,  Next: |Noncanonical_Input|,  Prev: |Line_Speed|,  Up: |Terminal_Modes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *Special_Characters*

17.4.9 Special Characters
-------------------------

In canonical input, the terminal driver recognizes a number of special
characters which perform various control functions.  These include the
ERASE character (usually <DEL>) for editing input, and other editing
characters.  The INTR character (normally 'C-c') for sending a 'SIGINT'
signal, and other signal-raising characters, may be available in either
canonical or noncanonical input mode.  All these characters are
described in this section.

   The particular characters used are specified in the 'c_cc' member of
the 'struct termios' structure.  This member is an array; each element
specifies the character for a particular role.  Each element has a
symbolic constant that stands for the index of that element--for example,
'VINTR' is the index of the element that specifies the INTR character,
so storing ''='' in 'TERMIOS.c_cc[VINTR]' specifies '=' as the INTR
character.

   On some systems, you can disable a particular special character
function by specifying the value '_POSIX_VDISABLE' for that role.  This
value is unequal to any possible character code.  *Note Options for
Files::, for more information about how to tell whether the operating
system you are using supports '_POSIX_VDISABLE'.

MENU

* |Editing_Characters|::          Special characters that terminate lines and
                                  delete text, and other editing functions.
* |Signal_Characters|::           Special characters that send or raise signals
                                  to or for certain classes of processes.
* |Start/Stop_Characters|::       Special characters that suspend or resume
                                  suspended output.
* |Other_Special|::		Other special characters for BSD systems:
				  they can discard output, and print status.

==============================================================================
File: libc.info,  Node: |Editing_Characters|,  Next: |Signal_Characters|,  Up: |Special_Characters|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *Editing_Characters*

17.4.9.1 Characters for Input Editing
-------------------------------------

These special characters are active only in canonical input mode.  *Note
Canonical or Not::.

 -- Macro: int VEOF

     This is the subscript for the EOF character in the special control
     character array.  'TERMIOS.c_cc[VEOF]' holds the character itself.

     The EOF character is recognized only in canonical input mode.  It
     acts as a line terminator in the same way as a newline character,
     but if the EOF character is typed at the beginning of a line it
     causes 'read' to return a byte count of zero, indicating
     end-of-file.  The EOF character itself is discarded.

     Usually, the EOF character is 'C-d'.

 -- Macro: int VEOL

     This is the subscript for the EOL character in the special control
     character array.  'TERMIOS.c_cc[VEOL]' holds the character itself.

     The EOL character is recognized only in canonical input mode.  It
     acts as a line terminator, just like a newline character.  The EOL
     character is not discarded; it is read as the last character in the
     input line.

     You don't need to use the EOL character to make <RET> end a line.
     Just set the ICRNL flag.  In fact, this is the default state of
     affairs.

 -- Macro: int VEOL2

     This is the subscript for the EOL2 character in the special control
     character array.  'TERMIOS.c_cc[VEOL2]' holds the character itself.

     The EOL2 character works just like the EOL character (see above),
     but it can be a different character.  Thus, you can specify two
     characters to terminate an input line, by setting EOL to one of
     them and EOL2 to the other.

     The EOL2 character is a BSD extension; it exists only on BSD
     systems and GNU/Linux and GNU/Hurd systems.

 -- Macro: int VERASE

     This is the subscript for the ERASE character in the special
     control character array.  'TERMIOS.c_cc[VERASE]' holds the
     character itself.

     The ERASE character is recognized only in canonical input mode.
     When the user types the erase character, the previous character
     typed is discarded.  (If the terminal generates multibyte character
     sequences, this may cause more than one byte of input to be
     discarded.)  This cannot be used to erase past the beginning of the
     current line of text.  The ERASE character itself is discarded.

     Usually, the ERASE character is <DEL>.

 -- Macro: int VWERASE

     This is the subscript for the WERASE character in the special
     control character array.  'TERMIOS.c_cc[VWERASE]' holds the
     character itself.

     The WERASE character is recognized only in canonical mode.  It
     erases an entire word of prior input, and any whitespace after it;
     whitespace characters before the word are not erased.

     The definition of a "word" depends on the setting of the
     'ALTWERASE' mode; *note Local Modes::.

     If the 'ALTWERASE' mode is not set, a word is defined as a sequence
     of any characters except space or tab.

     If the 'ALTWERASE' mode is set, a word is defined as a sequence of
     characters containing only letters, numbers, and underscores,
     optionally followed by one character that is not a letter, number,
     or underscore.

     The WERASE character is usually 'C-w'.

     This is a BSD extension.

 -- Macro: int VKILL

     This is the subscript for the KILL character in the special control
     character array.  'TERMIOS.c_cc[VKILL]' holds the character itself.

     The KILL character is recognized only in canonical input mode.
     When the user types the kill character, the entire contents of the
     current line of input are discarded.  The kill character itself is
     discarded too.

     The KILL character is usually 'C-u'.

 -- Macro: int VREPRINT

     This is the subscript for the REPRINT character in the special
     control character array.  'TERMIOS.c_cc[VREPRINT]' holds the
     character itself.

     The REPRINT character is recognized only in canonical mode.  It
     reprints the current input line.  If some asynchronous output has
     come while you are typing, this lets you see the line you are
     typing clearly again.

     The REPRINT character is usually 'C-r'.

     This is a BSD extension.

==============================================================================
File: libc.info,  Node: |Signal_Characters|,  Next: |Start/Stop_Characters|,  Prev: |Editing_Characters|,  Up: |Special_Characters|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Signal_Characters*

17.4.9.2 Characters that Cause Signals
--------------------------------------

These special characters may be active in either canonical or
noncanonical input mode, but only when the 'ISIG' flag is set (*note
Local Modes::).

 -- Macro: int VINTR

     This is the subscript for the INTR character in the special control
     character array.  'TERMIOS.c_cc[VINTR]' holds the character itself.

     The INTR (interrupt) character raises a 'SIGINT' signal for all
     processes in the foreground job associated with the terminal.  The
     INTR character itself is then discarded.  *Note Signal Handling::,
     for more information about signals.

     Typically, the INTR character is 'C-c'.

 -- Macro: int VQUIT

     This is the subscript for the QUIT character in the special control
     character array.  'TERMIOS.c_cc[VQUIT]' holds the character itself.

     The QUIT character raises a 'SIGQUIT' signal for all processes in
     the foreground job associated with the terminal.  The QUIT
     character itself is then discarded.  *Note Signal Handling::, for
     more information about signals.

     Typically, the QUIT character is 'C-\'.

 -- Macro: int VSUSP

     This is the subscript for the SUSP character in the special control
     character array.  'TERMIOS.c_cc[VSUSP]' holds the character itself.

     The SUSP (suspend) character is recognized only if the
     implementation supports job control (*note Job Control::).  It
     causes a 'SIGTSTP' signal to be sent to all processes in the
     foreground job associated with the terminal.  The SUSP character
     itself is then discarded.  *Note Signal Handling::, for more
     information about signals.

     Typically, the SUSP character is 'C-z'.

   Few applications disable the normal interpretation of the SUSP
character.  If your program does this, it should provide some other
mechanism for the user to stop the job.  When the user invokes this
mechanism, the program should send a 'SIGTSTP' signal to the process
group of the process, not just to the process itself.  *Note Signaling
Another Process::.

 -- Macro: int VDSUSP

     This is the subscript for the DSUSP character in the special
     control character array.  'TERMIOS.c_cc[VDSUSP]' holds the
     character itself.

     The DSUSP (suspend) character is recognized only if the
     implementation supports job control (*note Job Control::).  It
     sends a 'SIGTSTP' signal, like the SUSP character, but not right
     away--only when the program tries to read it as input.  Not all
     systems with job control support DSUSP; only BSD-compatible systems
     do (including GNU/Hurd systems).

     *Note Signal Handling::, for more information about signals.

     Typically, the DSUSP character is 'C-y'.

==============================================================================
File: libc.info,  Node: |Start/Stop_Characters|,  Next: |Other_Special|,  Prev: |Signal_Characters|,  Up: |Special_Characters|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *Start/Stop_Characters*

17.4.9.3 Special Characters for Flow Control
--------------------------------------------

These special characters may be active in either canonical or
noncanonical input mode, but their use is controlled by the flags 'IXON'
and 'IXOFF' (*note Input Modes::).

 -- Macro: int VSTART

     This is the subscript for the START character in the special
     control character array.  'TERMIOS.c_cc[VSTART]' holds the
     character itself.

     The START character is used to support the 'IXON' and 'IXOFF' input
     modes.  If 'IXON' is set, receiving a START character resumes
     suspended output; the START character itself is discarded.  If
     'IXANY' is set, receiving any character at all resumes suspended
     output; the resuming character is not discarded unless it is the
     START character.  If 'IXOFF' is set, the system may also transmit
     START characters to the terminal.

     The usual value for the START character is 'C-q'.  You may not be
     able to change this value--the hardware may insist on using 'C-q'
     regardless of what you specify.

 -- Macro: int VSTOP

     This is the subscript for the STOP character in the special control
     character array.  'TERMIOS.c_cc[VSTOP]' holds the character itself.

     The STOP character is used to support the 'IXON' and 'IXOFF' input
     modes.  If 'IXON' is set, receiving a STOP character causes output
     to be suspended; the STOP character itself is discarded.  If
     'IXOFF' is set, the system may also transmit STOP characters to the
     terminal, to prevent the input queue from overflowing.

     The usual value for the STOP character is 'C-s'.  You may not be
     able to change this value--the hardware may insist on using 'C-s'
     regardless of what you specify.

==============================================================================
File: libc.info,  Node: |Other_Special|,  Prev: |Start/Stop_Characters|,  Up: |Special_Characters|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Other_Special*

17.4.9.4 Other Special Characters
---------------------------------

 -- Macro: int VLNEXT

     This is the subscript for the LNEXT character in the special
     control character array.  'TERMIOS.c_cc[VLNEXT]' holds the
     character itself.

     The LNEXT character is recognized only when 'IEXTEN' is set, but in
     both canonical and noncanonical mode.  It disables any special
     significance of the next character the user types.  Even if the
     character would normally perform some editing function or generate
     a signal, it is read as a plain character.  This is the analogue of
     the 'C-q' command in Emacs.  "LNEXT" stands for "literal next."

     The LNEXT character is usually 'C-v'.

     This character is available on BSD systems and GNU/Linux and
     GNU/Hurd systems.

 -- Macro: int VDISCARD

     This is the subscript for the DISCARD character in the special
     control character array.  'TERMIOS.c_cc[VDISCARD]' holds the
     character itself.

     The DISCARD character is recognized only when 'IEXTEN' is set, but
     in both canonical and noncanonical mode.  Its effect is to toggle
     the discard-output flag.  When this flag is set, all program output
     is discarded.  Setting the flag also discards all output currently
     in the output buffer.  Typing any other character resets the flag.

     This character is available on BSD systems and GNU/Linux and
     GNU/Hurd systems.

 -- Macro: int VSTATUS

     This is the subscript for the STATUS character in the special
     control character array.  'TERMIOS.c_cc[VSTATUS]' holds the
     character itself.

     The STATUS character's effect is to print out a status message
     about how the current process is running.

     The STATUS character is recognized only in canonical mode, and only
     if 'NOKERNINFO' is not set.

     This character is available only on BSD systems and GNU/Hurd
     systems.

==============================================================================
File: libc.info,  Node: |Noncanonical_Input|,  Prev: Special Characters,  Up: |Terminal_Modes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *Noncanonical_Input*

17.4.10 Noncanonical Input
--------------------------

In noncanonical input mode, the special editing characters such as ERASE
and KILL are ignored.  The system facilities for the user to edit input
are disabled in noncanonical mode, so that all input characters (unless
they are special for signal or flow-control purposes) are passed to the
application program exactly as typed.  It is up to the application
program to give the user ways to edit the input, if appropriate.

   Noncanonical mode offers special parameters called MIN and TIME for
controlling whether and how long to wait for input to be available.  You
can even use them to avoid ever waiting--to return immediately with
whatever input is available, or with no input.

   The MIN and TIME are stored in elements of the 'c_cc' array, which is
a member of the 'struct termios' structure.  Each element of this array
has a particular role, and each element has a symbolic constant that
stands for the index of that element.  'VMIN' and 'VTIME' are the names
for the indices in the array of the MIN and TIME slots.

 -- Macro: int VMIN

     This is the subscript for the MIN slot in the 'c_cc' array.  Thus,
     'TERMIOS.c_cc[VMIN]' is the value itself.

     The MIN slot is only meaningful in noncanonical input mode; it
     specifies the minimum number of bytes that must be available in the
     input queue in order for 'read' to return.

 -- Macro: int VTIME

     This is the subscript for the TIME slot in the 'c_cc' array.  Thus,
     'TERMIOS.c_cc[VTIME]' is the value itself.

     The TIME slot is only meaningful in noncanonical input mode; it
     specifies how long to wait for input before returning, in units of
     0.1 seconds.

   The MIN and TIME values interact to determine the criterion for when
'read' should return; their precise meanings depend on which of them are
nonzero.  There are four possible cases:

   * Both TIME and MIN are nonzero.

     In this case, TIME specifies how long to wait after each input
     character to see if more input arrives.  After the first character
     received, 'read' keeps waiting until either MIN bytes have arrived
     in all, or TIME elapses with no further input.

     'read' always blocks until the first character arrives, even if
     TIME elapses first.  'read' can return more than MIN characters if
     more than MIN happen to be in the queue.

   * Both MIN and TIME are zero.

     In this case, 'read' always returns immediately with as many
     characters as are available in the queue, up to the number
     requested.  If no input is immediately available, 'read' returns a
     value of zero.

   * MIN is zero but TIME has a nonzero value.

     In this case, 'read' waits for time TIME for input to become
     available; the availability of a single byte is enough to satisfy
     the read request and cause 'read' to return.  When it returns, it
     returns as many characters as are available, up to the number
     requested.  If no input is available before the timer expires,
     'read' returns a value of zero.

   * TIME is zero but MIN has a nonzero value.

     In this case, 'read' waits until at least MIN bytes are available
     in the queue.  At that time, 'read' returns as many characters as
     are available, up to the number requested.  'read' can return more
     than MIN characters if more than MIN happen to be in the queue.

   What happens if MIN is 50 and you ask to read just 10 bytes?
Normally, 'read' waits until there are 50 bytes in the buffer (or, more
generally, the wait condition described above is satisfied), and then
reads 10 of them, leaving the other 40 buffered in the operating system
for a subsequent call to 'read'.

   *Portability note:* On some systems, the MIN and TIME slots are
actually the same as the EOF and EOL slots.  This causes no serious
problem because the MIN and TIME slots are used only in noncanonical
input and the EOF and EOL slots are used only in canonical input, but it
isn't very clean.  The GNU C Library allocates separate slots for these
uses.

 -- Function: void cfmakeraw (struct termios *TERMIOS-P)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function provides an easy way to set up '*TERMIOS-P' for what
     has traditionally been called "raw mode" in BSD. This uses
     noncanonical input, and turns off most processing to give an
     unmodified channel to the terminal.

     It does exactly this:
            TERMIOS-P->c_iflag &= ~(IGNBRK|BRKINT|PARMRK|ISTRIP
                                          |INLCR|IGNCR|ICRNL|IXON);
            TERMIOS-P->c_oflag &= ~OPOST;
            TERMIOS-P->c_lflag &= ~(ECHO|ECHONL|ICANON|ISIG|IEXTEN);
            TERMIOS-P->c_cflag &= ~(CSIZE|PARENB);
            TERMIOS-P->c_cflag |= CS8;

==============================================================================
File: libc.info,  Node: |BSD_Terminal_Modes|,  Next: |Line_Control|,  Prev: |Terminal_Modes|,  Up: |Low_Level_Terminal_Interface|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *BSD_Terminal_Modes*

17.5 BSD Terminal Modes
-----------------------

The usual way to get and set terminal modes is with the functions
described in *note Terminal Modes::.  However, on some systems you can
use the BSD-derived functions in this section to do some of the same
things.  On many systems, these functions do not exist.  Even with the
GNU C Library, the functions simply fail with 'errno' = 'ENOSYS' with
many kernels, including Linux.

   The symbols used in this section are declared in 'sgtty.h'.

 -- Data Type: struct sgttyb

     This structure is an input or output parameter list for 'gtty' and
     'stty'.

     'char sg_ispeed'
          Line speed for input
     'char sg_ospeed'
          Line speed for output
     'char sg_erase'
          Erase character
     'char sg_kill'
          Kill character
     'int sg_flags'
          Various flags

 -- Function: int gtty (int FILEDES, struct sgttyb *ATTRIBUTES)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function gets the attributes of a terminal.

     'gtty' sets *ATTRIBUTES to describe the terminal attributes of the
     terminal which is open with file descriptor FILEDES.

 -- Function: int stty (int FILEDES, const struct sgttyb *ATTRIBUTES)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function sets the attributes of a terminal.

     'stty' sets the terminal attributes of the terminal which is open
     with file descriptor FILEDES to those described by *ATTRIBUTES.

==============================================================================
File: libc.info,  Node: |Line_Control|,  Next: |Noncanon_Example|,  Prev: |BSD_Terminal_Modes|,  Up: |Low_Level_Terminal_Interface|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Line_Control*

17.6 Line Control Functions
---------------------------

These functions perform miscellaneous control actions on terminal
devices.  As regards terminal access, they are treated like doing
output: if any of these functions is used by a background process on its
controlling terminal, normally all processes in the process group are
sent a 'SIGTTOU' signal.  The exception is if the calling process itself
is ignoring or blocking 'SIGTTOU' signals, in which case the operation
is performed and no signal is sent.  *Note Job Control::.

 -- Function: int tcsendbreak (int FILEDES, int DURATION)

     Preliminary: | MT-Unsafe race:tcattr(filedes)/bsd | AS-Unsafe |
     AC-Unsafe corrupt/bsd | *Note POSIX Safety Concepts::.

     This function generates a break condition by transmitting a stream
     of zero bits on the terminal associated with the file descriptor
     FILEDES.  The duration of the break is controlled by the DURATION
     argument.  If zero, the duration is between 0.25 and 0.5 seconds.
     The meaning of a nonzero value depends on the operating system.

     This function does nothing if the terminal is not an asynchronous
     serial data port.

     The return value is normally zero.  In the event of an error, a
     value of -1 is returned.  The following 'errno' error conditions
     are defined for this function:

     'EBADF'
          The FILEDES is not a valid file descriptor.

     'ENOTTY'
          The FILEDES is not associated with a terminal device.

 -- Function: int tcdrain (int FILEDES)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'tcdrain' function waits until all queued output to the
     terminal FILEDES has been transmitted.

     This function is a cancellation point in multi-threaded programs.
     This is a problem if the thread allocates some resources (like
     memory, file descriptors, semaphores or whatever) at the time
     'tcdrain' is called.  If the thread gets canceled these resources
     stay allocated until the program ends.  To avoid this calls to
     'tcdrain' should be protected using cancellation handlers.

     The return value is normally zero.  In the event of an error, a
     value of -1 is returned.  The following 'errno' error conditions
     are defined for this function:

     'EBADF'
          The FILEDES is not a valid file descriptor.

     'ENOTTY'
          The FILEDES is not associated with a terminal device.

     'EINTR'
          The operation was interrupted by delivery of a signal.  *Note
          Interrupted Primitives::.

 -- Function: int tcflush (int FILEDES, int QUEUE)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'tcflush' function is used to clear the input and/or output
     queues associated with the terminal file FILEDES.  The QUEUE
     argument specifies which queue(s) to clear, and can be one of the
     following values:

     'TCIFLUSH'

          Clear any input data received, but not yet read.

     'TCOFLUSH'

          Clear any output data written, but not yet transmitted.

     'TCIOFLUSH'

          Clear both queued input and output.

     The return value is normally zero.  In the event of an error, a
     value of -1 is returned.  The following 'errno' error conditions
     are defined for this function:

     'EBADF'
          The FILEDES is not a valid file descriptor.

     'ENOTTY'
          The FILEDES is not associated with a terminal device.

     'EINVAL'
          A bad value was supplied as the QUEUE argument.

     It is unfortunate that this function is named 'tcflush', because
     the term "flush" is normally used for quite another
     operation--waiting until all output is transmitted--and using it for
     discarding input or output would be confusing.  Unfortunately, the
     name 'tcflush' comes from POSIX and we cannot change it.

 -- Function: int tcflow (int FILEDES, int ACTION)

     Preliminary: | MT-Unsafe race:tcattr(filedes)/bsd | AS-Unsafe |
     AC-Safe | *Note POSIX Safety Concepts::.

     The 'tcflow' function is used to perform operations relating to
     XON/XOFF flow control on the terminal file specified by FILEDES.

     The ACTION argument specifies what operation to perform, and can be
     one of the following values:

     'TCOOFF'
          Suspend transmission of output.

     'TCOON'
          Restart transmission of output.

     'TCIOFF'
          Transmit a STOP character.

     'TCION'
          Transmit a START character.

     For more information about the STOP and START characters, see *note
     Special Characters::.

     The return value is normally zero.  In the event of an error, a
     value of -1 is returned.  The following 'errno' error conditions
     are defined for this function:

     'EBADF'
          The FILEDES is not a valid file descriptor.

     'ENOTTY'
          The FILEDES is not associated with a terminal device.

     'EINVAL'
          A bad value was supplied as the ACTION argument.

==============================================================================
File: libc.info,  Node: |Noncanon_Example|,  Next: |getpass|,  Prev: |Line_Control|,  Up: |Low_Level_Terminal_Interface|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Noncanon_Example*

17.7 Noncanonical Mode Example
------------------------------

Here is an example program that shows how you can set up a terminal
device to read single characters in noncanonical input mode, without
echo.


     #include <unistd.h>
     #include <stdio.h>
     #include <stdlib.h>
     #include <termios.h>

     /* Use this variable to remember original terminal attributes. */

     struct termios saved_attributes;

     void
     reset_input_mode (void)
     {
       tcsetattr (STDIN_FILENO, TCSANOW, &saved_attributes);
     }

     void
     set_input_mode (void)
     {
       struct termios tattr;
       char *name;

       /* Make sure stdin is a terminal. */
       if (!isatty (STDIN_FILENO))
         {
           fprintf (stderr, "Not a terminal.\n");
           exit (EXIT_FAILURE);
         }

       /* Save the terminal attributes so we can restore them later. */
       tcgetattr (STDIN_FILENO, &saved_attributes);
       atexit (reset_input_mode);

       /* Set the funny terminal modes. */
       tcgetattr (STDIN_FILENO, &tattr);
       tattr.c_lflag &= ~(ICANON|ECHO); /* Clear ICANON and ECHO. */
       tattr.c_cc[VMIN] = 1;
       tattr.c_cc[VTIME] = 0;
       tcsetattr (STDIN_FILENO, TCSAFLUSH, &tattr);
     }

     int
     main (void)
     {
       char c;

       set_input_mode ();

       while (1)
         {
           read (STDIN_FILENO, &c, 1);
           if (c == '\004')          /* 'C-d' */
             break;
           else
             putchar (c);
         }

       return EXIT_SUCCESS;
     }

   This program is careful to restore the original terminal modes before
exiting or terminating with a signal.  It uses the 'atexit' function
(*note Cleanups on Exit::) to make sure this is done by 'exit'.

   The shell is supposed to take care of resetting the terminal modes
when a process is stopped or continued; see *note Job Control::.  But
some existing shells do not actually do this, so you may wish to
establish handlers for job control signals that reset terminal modes.
The above example does so.

==============================================================================
File: libc.info,  Node: |getpass|,  Next: |Pseudo_Terminals|,  Prev: |Noncanon_Example|,  Up: |Low_Level_Terminal_Interface|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *getpass*

17.8 Reading Passphrases
------------------------

When reading in a passphrase, it is desirable to avoid displaying it on
the screen, to help keep it secret.  The following function handles this
in a convenient way.

 -- Function: char * getpass (const char *PROMPT)

     Preliminary: | MT-Unsafe term | AS-Unsafe heap lock corrupt |
     AC-Unsafe term lock corrupt | *Note POSIX Safety Concepts::.

     'getpass' outputs PROMPT, then reads a string in from the terminal
     without echoing it.  It tries to connect to the real terminal,
     '/dev/tty', if possible, to encourage users not to put plaintext
     passphrases in files; otherwise, it uses 'stdin' and 'stderr'.
     'getpass' also disables the INTR, QUIT, and SUSP characters on the
     terminal using the 'ISIG' terminal attribute (*note Local Modes::).
     The terminal is flushed before and after 'getpass', so that
     characters of a mistyped passphrase are not accidentally visible.

     In other C libraries, 'getpass' may only return the first
     'PASS_MAX' bytes of a passphrase.  The GNU C Library has no limit,
     so 'PASS_MAX' is undefined.

     The prototype for this function is in 'unistd.h'.  'PASS_MAX' would
     be defined in 'limits.h'.

   This precise set of operations may not suit all possible situations.
In this case, it is recommended that users write their own 'getpass'
substitute.  For instance, a very simple substitute is as follows:


     #include <termios.h>
     #include <stdio.h>

     ssize_t
     my_getpass (char **lineptr, size_t *n, FILE *stream)
     {
       struct termios old, new;
       int nread;

       /* Turn echoing off and fail if we can't. */
       if (tcgetattr (fileno (stream), &old) != 0)
         return -1;
       new = old;
       new.c_lflag &= ~ECHO;
       if (tcsetattr (fileno (stream), TCSAFLUSH, &new) != 0)
         return -1;

       /* Read the passphrase */
       nread = getline (lineptr, n, stream);

       /* Restore terminal. */
       (void) tcsetattr (fileno (stream), TCSAFLUSH, &old);

       return nread;
     }

   The substitute takes the same parameters as 'getline' (*note Line
Input::); the user must print any prompt desired.

==============================================================================
File: libc.info,  Node: |Pseudo_Terminals|,  Prev: |getpass|,  Up: |Low_Level_Terminal_Interface|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Pseudo_Terminals*

17.9 Pseudo-Terminals
---------------------

A "pseudo-terminal" is a special interprocess communication channel that
acts like a terminal.  One end of the channel is called the "master"
side or "master pseudo-terminal device", the other side is called the
"slave" side.  Data written to the master side is received by the slave
side as if it was the result of a user typing at an ordinary terminal,
and data written to the slave side is sent to the master side as if it
was written on an ordinary terminal.

   Pseudo terminals are the way programs like 'xterm' and 'emacs'
implement their terminal emulation functionality.

MENU

* |Allocation|::             Allocating a pseudo terminal.
* |Pseudo_Terminal_Pairs|::  How to open both sides of a
                            pseudo-terminal in a single operation.

==============================================================================
File: libc.info,  Node: |Allocation|,  Next: |Pseudo_Terminal_Pairs|,  Up: |Pseudo_Terminals|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *Allocation*

17.9.1 Allocating Pseudo-Terminals
----------------------------------

This subsection describes functions for allocating a pseudo-terminal,
and for making this pseudo-terminal available for actual use.  These
functions are declared in the header file 'stdlib.h'.

 -- Function: int getpt (void)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe fd | *Note POSIX Safety
     Concepts::.

     The 'getpt' function returns a new file descriptor for the next
     available master pseudo-terminal.  The normal return value from
     'getpt' is a non-negative integer file descriptor.  In the case of
     an error, a value of -1 is returned instead.  The following 'errno'
     conditions are defined for this function:

     'ENOENT'
          There are no free master pseudo-terminals available.

     This function is a GNU extension.

 -- Function: int grantpt (int FILEDES)

     Preliminary: | MT-Safe locale | AS-Unsafe dlopen plugin heap lock |
     AC-Unsafe corrupt lock fd mem | *Note POSIX Safety Concepts::.

     The 'grantpt' function changes the ownership and access permission
     of the slave pseudo-terminal device corresponding to the master
     pseudo-terminal device associated with the file descriptor FILEDES.
     The owner is set from the real user ID of the calling process
     (*note Process Persona::), and the group is set to a special group
     (typically "tty") or from the real group ID of the calling process.
     The access permission is set such that the file is both readable
     and writable by the owner and only writable by the group.

     On some systems this function is implemented by invoking a special
     'setuid' root program (*note How Change Persona::).  As a
     consequence, installing a signal handler for the 'SIGCHLD' signal
     (*note Job Control Signals::) may interfere with a call to
     'grantpt'.

     The normal return value from 'grantpt' is 0; a value of -1 is
     returned in case of failure.  The following 'errno' error
     conditions are defined for this function:

     'EBADF'
          The FILEDES argument is not a valid file descriptor.

     'EINVAL'
          The FILEDES argument is not associated with a master
          pseudo-terminal device.

     'EACCES'
          The slave pseudo-terminal device corresponding to the master
          associated with FILEDES could not be accessed.

 -- Function: int unlockpt (int FILEDES)

     Preliminary: | MT-Safe | AS-Unsafe heap/bsd | AC-Unsafe mem fd |
     *Note POSIX Safety Concepts::.

     The 'unlockpt' function unlocks the slave pseudo-terminal device
     corresponding to the master pseudo-terminal device associated with
     the file descriptor FILEDES.  On many systems, the slave can only
     be opened after unlocking, so portable applications should always
     call 'unlockpt' before trying to open the slave.

     The normal return value from 'unlockpt' is 0; a value of -1 is
     returned in case of failure.  The following 'errno' error
     conditions are defined for this function:

     'EBADF'
          The FILEDES argument is not a valid file descriptor.

     'EINVAL'
          The FILEDES argument is not associated with a master
          pseudo-terminal device.

 -- Function: char * ptsname (int FILEDES)

     Preliminary: | MT-Unsafe race:ptsname | AS-Unsafe heap/bsd |
     AC-Unsafe mem fd | *Note POSIX Safety Concepts::.

     If the file descriptor FILEDES is associated with a master
     pseudo-terminal device, the 'ptsname' function returns a pointer to
     a statically-allocated, null-terminated string containing the file
     name of the associated slave pseudo-terminal file.  This string
     might be overwritten by subsequent calls to 'ptsname'.

 -- Function: int ptsname_r (int FILEDES, char *BUF, size_t LEN)

     Preliminary: | MT-Safe | AS-Unsafe heap/bsd | AC-Unsafe mem fd |
     *Note POSIX Safety Concepts::.

     The 'ptsname_r' function is similar to the 'ptsname' function
     except that it places its result into the user-specified buffer
     starting at BUF with length LEN.

     This function is a GNU extension.

   *Portability Note:* On System V derived systems, the file returned by
the 'ptsname' and 'ptsname_r' functions may be STREAMS-based, and
therefore require additional processing after opening before it actually
behaves as a pseudo terminal.

   Typical usage of these functions is illustrated by the following
example:
     int
     open_pty_pair (int *amaster, int *aslave)
     {
       int master, slave;
       char *name;

       master = getpt ();
       if (master < 0)
         return 0;

       if (grantpt (master) < 0 || unlockpt (master) < 0)
         goto close_master;
       name = ptsname (master);
       if (name == NULL)
         goto close_master;

       slave = open (name, O_RDWR);
       if (slave == -1)
         goto close_master;

       if (isastream (slave))
         {
           if (ioctl (slave, I_PUSH, "ptem") < 0
               || ioctl (slave, I_PUSH, "ldterm") < 0)
             goto close_slave;
         }

       *amaster = master;
       *aslave = slave;
       return 1;

     close_slave:
       close (slave);

     close_master:
       close (master);
       return 0;
     }

==============================================================================
File: libc.info,  Node: |Pseudo_Terminal_Pairs|,  Prev: |Allocation|,  Up: |Pseudo_Terminals|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *Pseudo_Terminal_Pairs*

17.9.2 Opening a Pseudo-Terminal Pair
-------------------------------------

These functions, derived from BSD, are available in the separate
'libutil' library, and declared in 'pty.h'.

 -- Function: int openpty (int *AMASTER, int *ASLAVE, char *NAME, const
          struct termios *TERMP, const struct winsize *WINP)

     Preliminary: | MT-Safe locale | AS-Unsafe dlopen plugin heap lock |
     AC-Unsafe corrupt lock fd mem | *Note POSIX Safety Concepts::.

     This function allocates and opens a pseudo-terminal pair, returning
     the file descriptor for the master in *AMASTER, and the file
     descriptor for the slave in *ASLAVE.  If the argument NAME is not a
     null pointer, the file name of the slave pseudo-terminal device is
     stored in '*name'.  If TERMP is not a null pointer, the terminal
     attributes of the slave are set to the ones specified in the
     structure that TERMP points to (*note Terminal Modes::).  Likewise,
     if WINP is not a null pointer, the screen size of the slave is set
     to the values specified in the structure that WINP points to.

     The normal return value from 'openpty' is 0; a value of -1 is
     returned in case of failure.  The following 'errno' conditions are
     defined for this function:

     'ENOENT'
          There are no free pseudo-terminal pairs available.

     Warning: Using the 'openpty' function with NAME not set to 'NULL'
     is *very dangerous* because it provides no protection against
     overflowing the string NAME.  You should use the 'ttyname' function
     on the file descriptor returned in *SLAVE to find out the file name
     of the slave pseudo-terminal device instead.

 -- Function: int forkpty (int *AMASTER, char *NAME, const struct
          termios *TERMP, const struct winsize *WINP)

     Preliminary: | MT-Safe locale | AS-Unsafe dlopen plugin heap lock |
     AC-Unsafe corrupt lock fd mem | *Note POSIX Safety Concepts::.

     This function is similar to the 'openpty' function, but in
     addition, forks a new process (*note Creating a Process::) and
     makes the newly opened slave pseudo-terminal device the controlling
     terminal (*note Controlling Terminal::) for the child process.

     If the operation is successful, there are then both parent and
     child processes and both see 'forkpty' return, but with different
     values: it returns a value of 0 in the child process and returns
     the child's process ID in the parent process.

     If the allocation of a pseudo-terminal pair or the process creation
     failed, 'forkpty' returns a value of -1 in the parent process.

     Warning: The 'forkpty' function has the same problems with
     respect to the NAME argument as 'openpty'.

==============================================================================
File: libc.info,  Node: |Syslog|,  Next: |Mathematics|,  Prev: |Low_Level_Terminal_Interface|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *Syslog*

18 Syslog
=========

This chapter describes facilities for issuing and logging messages of
system administration interest.  This chapter has nothing to do with
programs issuing messages to their own users or keeping private logs
(One would typically do that with the facilities described in *note I/O
on Streams::).

   Most systems have a facility called "Syslog" that allows programs to
submit messages of interest to system administrators and can be
configured to pass these messages on in various ways, such as printing
on the console, mailing to a particular person, or recording in a log
file for future reference.

   A program uses the facilities in this chapter to submit such
messages.

MENU

* |Overview_of_Syslog|::           Overview of a system's Syslog facility
* |Submitting_Syslog_Messages|::   Functions to submit messages to Syslog

==============================================================================
File: libc.info,  Node: |Overview_of_Syslog|,  Next: |Submitting_Syslog_Messages|,  Up: |Syslog|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *Overview_of_Syslog*

18.1 Overview of Syslog
-----------------------

System administrators have to deal with lots of different kinds of
messages from a plethora of subsystems within each system, and usually
lots of systems as well.  For example, an FTP server might report every
connection it gets.  The kernel might report hardware failures on a disk
drive.  A DNS server might report usage statistics at regular intervals.

   Some of these messages need to be brought to a system administrator's
attention immediately.  And it may not be just any system administrator
- there may be a particular system administrator who deals with a
particular kind of message.  Other messages just need to be recorded for
future reference if there is a problem.  Still others may need to have
information extracted from them by an automated process that generates
monthly reports.

   To deal with these messages, most Unix systems have a facility called
"Syslog."  It is generally based on a daemon called "Syslogd" Syslogd
listens for messages on a Unix domain socket named '/dev/log'.  Based on
classification information in the messages and its configuration file
(usually '/etc/syslog.conf'), Syslogd routes them in various ways.  Some
of the popular routings are:

   * Write to the system console
   * Mail to a specific user
   * Write to a log file
   * Pass to another daemon
   * Discard

   Syslogd can also handle messages from other systems.  It listens on
the 'syslog' UDP port as well as the local socket for messages.

   Syslog can handle messages from the kernel itself.  But the kernel
doesn't write to '/dev/log'; rather, another daemon (sometimes called
"Klogd") extracts messages from the kernel and passes them on to Syslog
as any other process would (and it properly identifies them as messages
from the kernel).

   Syslog can even handle messages that the kernel issued before Syslogd
or Klogd was running.  A Linux kernel, for example, stores startup
messages in a kernel message ring and they are normally still there when
Klogd later starts up.  Assuming Syslogd is running by the time Klogd
starts, Klogd then passes everything in the message ring to it.

   In order to classify messages for disposition, Syslog requires any
process that submits a message to it to provide two pieces of
classification information with it:

facility
     This identifies who submitted the message.  There are a small
     number of facilities defined.  The kernel, the mail subsystem, and
     an FTP server are examples of recognized facilities.  For the
     complete list, *Note syslog; vsyslog::.  Keep in mind that these
     are essentially arbitrary classifications.  "Mail subsystem"
     doesn't have any more meaning than the system administrator gives
     to it.

priority
     This tells how important the content of the message is.  Examples
     of defined priority values are: debug, informational, warning and
     critical.  For the complete list, see *note syslog; vsyslog::.
     Except for the fact that the priorities have a defined order, the
     meaning of each of these priorities is entirely determined by the
     system administrator.

   A "facility/priority" is a number that indicates both the facility
and the priority.

   Warning: This terminology is not universal.  Some people use
"level" to refer to the priority and "priority" to refer to the
combination of facility and priority.  A Linux kernel has a concept of a
message "level," which corresponds both to a Syslog priority and to a
Syslog facility/priority (It can be both because the facility code for
the kernel is zero, and that makes priority and facility/priority the
same value).

   The GNU C Library provides functions to submit messages to Syslog.
They do it by writing to the '/dev/log' socket.  *Note Submitting Syslog
Messages::.

   The GNU C Library functions only work to submit messages to the
Syslog facility on the same system.  To submit a message to the Syslog
facility on another system, use the socket I/O functions to write a UDP
datagram to the 'syslog' UDP port on that system.  *Note Sockets::.

==============================================================================
File: libc.info,  Node: |Submitting_Syslog_Messages|,  Prev: |Overview_of_Syslog|,  Up: |Syslog|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *Submitting_Syslog_Messages*

18.2 Submitting Syslog Messages
-------------------------------

The GNU C Library provides functions to submit messages to the Syslog
facility:

MENU

* |openlog|::                      Open connection to Syslog
* |syslog;_vsyslog|::              Submit message to Syslog
* |closelog|::                     Close connection to Syslog
* |setlogmask|::                   Cause certain messages to be ignored
* |Syslog_Example|::               Example of all of the above

   These functions only work to submit messages to the Syslog facility
on the same system.  To submit a message to the Syslog facility on
another system, use the socket I/O functions to write a UDP datagram to
the 'syslog' UDP port on that system.  *Note Sockets::.

==============================================================================
File: libc.info,  Node: |openlog|,  Next: |syslog;_vsyslog|,  Up: |Submitting_Syslog_Messages|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *openlog*

18.2.1 openlog
--------------

The symbols referred to in this section are declared in the file
'syslog.h'.

 -- Function: void openlog (const char *IDENT, int OPTION, int FACILITY)

     Preliminary: | MT-Safe | AS-Unsafe lock | AC-Unsafe lock fd | *Note
     POSIX Safety Concepts::.

     'openlog' opens or reopens a connection to Syslog in preparation
     for submitting messages.

     IDENT is an arbitrary identification string which future 'syslog'
     invocations will prefix to each message.  This is intended to
     identify the source of the message, and people conventionally set
     it to the name of the program that will submit the messages.

     If IDENT is NULL, or if 'openlog' is not called, the default
     identification string used in Syslog messages will be the program
     name, taken from argv[0].

     Please note that the string pointer IDENT will be retained
     internally by the Syslog routines.  You must not free the memory
     that IDENT points to.  It is also dangerous to pass a reference to
     an automatic variable since leaving the scope would mean ending the
     lifetime of the variable.  If you want to change the IDENT string,
     you must call 'openlog' again; overwriting the string pointed to by
     IDENT is not thread-safe.

     You can cause the Syslog routines to drop the reference to IDENT
     and go back to the default string (the program name taken from
     argv[0]), by calling 'closelog': *Note closelog::.

     In particular, if you are writing code for a shared library that
     might get loaded and then unloaded (e.g.  a PAM module), and you
     use 'openlog', you must call 'closelog' before any point where your
     library might get unloaded, as in this example:

          #include <syslog.h>

          void
          shared_library_function (void)
          {
            openlog ("mylibrary", option, priority);

            syslog (LOG_INFO, "shared library has been invoked");

            closelog ();
          }

     Without the call to 'closelog', future invocations of 'syslog' by
     the program using the shared library may crash, if the library gets
     unloaded and the memory containing the string '"mylibrary"' becomes
     unmapped.  This is a limitation of the BSD syslog interface.

     'openlog' may or may not open the '/dev/log' socket, depending on
     OPTION.  If it does, it tries to open it and connect it as a stream
     socket.  If that doesn't work, it tries to open it and connect it
     as a datagram socket.  The socket has the "Close on Exec"
     attribute, so the kernel will close it if the process performs an
     exec.

     You don't have to use 'openlog'.  If you call 'syslog' without
     having called 'openlog', 'syslog' just opens the connection
     implicitly and uses defaults for the information in IDENT and
     OPTIONS.

     OPTIONS is a bit string, with the bits as defined by the following
     single bit masks:

     'LOG_PERROR'
          If on, 'openlog' sets up the connection so that any 'syslog'
          on this connection writes its message to the calling process'
          Standard Error stream in addition to submitting it to Syslog.
          If off, 'syslog' does not write the message to Standard Error.

     'LOG_CONS'
          If on, 'openlog' sets up the connection so that a 'syslog' on
          this connection that fails to submit a message to Syslog
          writes the message instead to system console.  If off,
          'syslog' does not write to the system console (but of course
          Syslog may write messages it receives to the console).

     'LOG_PID'
          When on, 'openlog' sets up the connection so that a 'syslog'
          on this connection inserts the calling process' Process ID
          (PID) into the message.  When off, 'openlog' does not insert
          the PID.

     'LOG_NDELAY'
          When on, 'openlog' opens and connects the '/dev/log' socket.
          When off, a future 'syslog' call must open and connect the
          socket.

          *Portability note:* In early systems, the sense of this bit
          was exactly the opposite.

     'LOG_ODELAY'
          This bit does nothing.  It exists for backward compatibility.

     If any other bit in OPTIONS is on, the result is undefined.

     FACILITY is the default facility code for this connection.  A
     'syslog' on this connection that specifies default facility causes
     this facility to be associated with the message.  See 'syslog' for
     possible values.  A value of zero means the default, which is
     'LOG_USER'.

     If a Syslog connection is already open when you call 'openlog',
     'openlog' "reopens" the connection.  Reopening is like opening
     except that if you specify zero for the default facility code, the
     default facility code simply remains unchanged and if you specify
     LOG_NDELAY and the socket is already open and connected, 'openlog'
     just leaves it that way.

==============================================================================
File: libc.info,  Node: |syslog;_vsyslog|,  Next: |closelog|,  Prev: |openlog|,  Up: |Submitting_Syslog_Messages|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *syslog;_vsyslog*

18.2.2 syslog, vsyslog
----------------------

The symbols referred to in this section are declared in the file
'syslog.h'.

 -- Function: void syslog (int FACILITY_PRIORITY, const char *FORMAT,
          ...)

     Preliminary: | MT-Safe env locale | AS-Unsafe corrupt heap lock
     dlopen | AC-Unsafe corrupt lock mem fd | *Note POSIX Safety
     Concepts::.

     'syslog' submits a message to the Syslog facility.  It does this by
     writing to the Unix domain socket '/dev/log'.

     'syslog' submits the message with the facility and priority
     indicated by FACILITY_PRIORITY.  The macro 'LOG_MAKEPRI' generates
     a facility/priority from a facility and a priority, as in the
     following example:

          LOG_MAKEPRI(LOG_USER, LOG_WARNING)

     The possible values for the facility code are (macros):

     'LOG_USER'
          A miscellaneous user process
     'LOG_MAIL'
          Mail
     'LOG_DAEMON'
          A miscellaneous system daemon
     'LOG_AUTH'
          Security (authorization)
     'LOG_SYSLOG'
          Syslog
     'LOG_LPR'
          Central printer
     'LOG_NEWS'
          Network news (e.g.  Usenet)
     'LOG_UUCP'
          UUCP
     'LOG_CRON'
          Cron and At
     'LOG_AUTHPRIV'
          Private security (authorization)
     'LOG_FTP'
          Ftp server
     'LOG_LOCAL0'
          Locally defined
     'LOG_LOCAL1'
          Locally defined
     'LOG_LOCAL2'
          Locally defined
     'LOG_LOCAL3'
          Locally defined
     'LOG_LOCAL4'
          Locally defined
     'LOG_LOCAL5'
          Locally defined
     'LOG_LOCAL6'
          Locally defined
     'LOG_LOCAL7'
          Locally defined

     Results are undefined if the facility code is anything else.

     NB: 'syslog' recognizes one other facility code: that of the
     kernel.  But you can't specify that facility code with these
     functions.  If you try, it looks the same to 'syslog' as if you are
     requesting the default facility.  But you wouldn't want to anyway,
     because any program that uses the GNU C Library is not the kernel.

     You can use just a priority code as FACILITY_PRIORITY.  In that
     case, 'syslog' assumes the default facility established when the
     Syslog connection was opened.  *Note Syslog Example::.

     The possible values for the priority code are (macros):

     'LOG_EMERG'
          The message says the system is unusable.
     'LOG_ALERT'
          Action on the message must be taken immediately.
     'LOG_CRIT'
          The message states a critical condition.
     'LOG_ERR'
          The message describes an error.
     'LOG_WARNING'
          The message is a warning.
     'LOG_NOTICE'
          The message describes a normal but important event.
     'LOG_INFO'
          The message is purely informational.
     'LOG_DEBUG'
          The message is only for debugging purposes.

     Results are undefined if the priority code is anything else.

     If the process does not presently have a Syslog connection open
     (i.e., it did not call 'openlog'), 'syslog' implicitly opens the
     connection the same as 'openlog' would, with the following defaults
     for information that would otherwise be included in an 'openlog'
     call: The default identification string is the program name.  The
     default default facility is 'LOG_USER'.  The default for all the
     connection options in OPTIONS is as if those bits were off.
     'syslog' leaves the Syslog connection open.

     If the '/dev/log' socket is not open and connected, 'syslog' opens
     and connects it, the same as 'openlog' with the 'LOG_NDELAY' option
     would.

     'syslog' leaves '/dev/log' open and connected unless its attempt to
     send the message failed, in which case 'syslog' closes it (with the
     hope that a future implicit open will restore the Syslog connection
     to a usable state).

     Example:


          #include <syslog.h>
          syslog (LOG_MAKEPRI(LOG_LOCAL1, LOG_ERROR),
                  "Unable to make network connection to %s.  Error=%m", host);


 -- Function: void vsyslog (int FACILITY_PRIORITY, const char *FORMAT,
          va_list ARGLIST)

     Preliminary: | MT-Safe env locale | AS-Unsafe corrupt heap lock
     dlopen | AC-Unsafe corrupt lock mem fd | *Note POSIX Safety
     Concepts::.

     This is functionally identical to 'syslog', with the BSD style
     variable length argument.

==============================================================================
File: libc.info,  Node: |closelog|,  Next: |setlogmask|,  Prev: |syslog;_vsyslog|,  Up: |Submitting_Syslog_Messages|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *closelog*

18.2.3 closelog
---------------

The symbols referred to in this section are declared in the file
'syslog.h'.

 -- Function: void closelog (void)

     Preliminary: | MT-Safe | AS-Unsafe lock | AC-Unsafe lock fd | *Note
     POSIX Safety Concepts::.

     'closelog' closes the current Syslog connection, if there is one.
     This includes closing the '/dev/log' socket, if it is open.
     'closelog' also sets the identification string for Syslog messages
     back to the default, if 'openlog' was called with a non-NULL
     argument to IDENT.  The default identification string is the
     program name taken from argv[0].

     If you are writing shared library code that uses 'openlog' to
     generate custom syslog output, you should use 'closelog' to drop
     the GNU C Library's internal reference to the IDENT pointer when
     you are done.  Please read the section on 'openlog' for more
     information: *Note openlog::.

     'closelog' does not flush any buffers.  You do not have to call
     'closelog' before re-opening a Syslog connection with 'openlog'.
     Syslog connections are automatically closed on exec or exit.

==============================================================================
File: libc.info,  Node: |setlogmask|,  Next: |Syslog_Example|,  Prev: |closelog|,  Up: |Submitting_Syslog_Messages|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *setlogmask*

18.2.4 setlogmask
-----------------

The symbols referred to in this section are declared in the file
'syslog.h'.

 -- Function: int setlogmask (int MASK)

     Preliminary: | MT-Unsafe race:LogMask | AS-Unsafe | AC-Safe | *Note
     POSIX Safety Concepts::.

     'setlogmask' sets a mask (the "logmask") that determines which
     future 'syslog' calls shall be ignored.  If a program has not
     called 'setlogmask', 'syslog' doesn't ignore any calls.  You can
     use 'setlogmask' to specify that messages of particular priorities
     shall be ignored in the future.

     A 'setlogmask' call overrides any previous 'setlogmask' call.

     Note that the logmask exists entirely independently of opening and
     closing of Syslog connections.

     Setting the logmask has a similar effect to, but is not the same
     as, configuring Syslog.  The Syslog configuration may cause Syslog
     to discard certain messages it receives, but the logmask causes
     certain messages never to get submitted to Syslog in the first
     place.

     MASK is a bit string with one bit corresponding to each of the
     possible message priorities.  If the bit is on, 'syslog' handles
     messages of that priority normally.  If it is off, 'syslog'
     discards messages of that priority.  Use the message priority
     macros described in *note syslog; vsyslog:: and the 'LOG_MASK' to
     construct an appropriate MASK value, as in this example:

          LOG_MASK(LOG_EMERG) | LOG_MASK(LOG_ERROR)

     or

          ~(LOG_MASK(LOG_INFO))

     There is also a 'LOG_UPTO' macro, which generates a mask with the
     bits on for a certain priority and all priorities above it:

          LOG_UPTO(LOG_ERROR)

     The unfortunate naming of the macro is due to the fact that
     internally, higher numbers are used for lower message priorities.

==============================================================================
File: libc.info,  Node: |Syslog_Example|,  Prev: |setlogmask|,  Up: |Submitting_Syslog_Messages|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Syslog_Example*

18.2.5 Syslog Example
---------------------

Here is an example of 'openlog', 'syslog', and 'closelog':

   This example sets the logmask so that debug and informational
messages get discarded without ever reaching Syslog.  So the second
'syslog' in the example does nothing.

     #include <syslog.h>

     setlogmask (LOG_UPTO (LOG_NOTICE));

     openlog ("exampleprog", LOG_CONS | LOG_PID | LOG_NDELAY, LOG_LOCAL1);

     syslog (LOG_NOTICE, "Program started by User %d", getuid ());
     syslog (LOG_INFO, "A tree falls in a forest");

     closelog ();


==============================================================================
File: libc.info,  Node: |Mathematics|,  Next: |Arithmetic|,  Prev: |Syslog|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Mathematics*

19 Mathematics
==============

This chapter contains information about functions for performing
mathematical computations, such as trigonometric functions.  Most of
these functions have prototypes declared in the header file 'math.h'.
The complex-valued functions are defined in 'complex.h'.

   All mathematical functions which take a floating-point argument have
three variants, one each for 'double', 'float', and 'long double'
arguments.  The 'double' versions are mostly defined in ISO C89.  The
'float' and 'long double' versions are from the numeric extensions to C
included in ISO C99.

   Which of the three versions of a function should be used depends on
the situation.  For most calculations, the 'float' functions are the
fastest.  On the other hand, the 'long double' functions have the
highest precision.  'double' is somewhere in between.  It is usually
wise to pick the narrowest type that can accommodate your data.  Not all
machines have a distinct 'long double' type; it may be the same as
'double'.

   The GNU C Library also provides '_FloatN' and '_FloatNx' types.
These types are defined in ISO/IEC TS 18661-3, which extends ISO C and
defines floating-point types that are not machine-dependent.  When such
a type, such as '_Float128', is supported by the GNU C Library, extra
variants for most of the mathematical functions provided for 'double',
'float', and 'long double' are also provided for the supported type.
Throughout this manual, the '_FloatN' and '_FloatNx' variants of these
functions are described along with the 'double', 'float', and 'long
double' variants and they come from ISO/IEC TS 18661-3, unless
explicitly stated otherwise.

   Support for '_FloatN' or '_FloatNx' types is provided for '_Float32',
'_Float64' and '_Float32x' on all platforms.  It is also provided for
'_Float128' and '_Float64x' on powerpc64le (PowerPC 64-bits
little-endian), x86_64, x86, ia64, aarch64, alpha, mips64, riscv, s390
and sparc.

MENU

* |Mathematical_Constants|::      Precise numeric values for often-used
                                 constants.
* |Trig_Functions|::              Sine, cosine, tangent, and friends.
* |Inverse_Trig_Functions|::      Arcsine, arccosine, etc.
* |Exponents_and_Logarithms|::    Also pow and sqrt.
* |Hyperbolic_Functions|::        sinh, cosh, tanh, etc.
* |Special_Functions|::           Bessel, gamma, erf.
* |Errors_in_Math_Functions|::    Known Maximum Errors in Math Functions.
* |Pseudo_Random_Numbers|::       Functions for generating pseudo-random
				 numbers.
* |FP_Function_Optimizations|::   Fast code or small code.

==============================================================================
File: libc.info,  Node: |Mathematical_Constants|,  Next: |Trig_Functions|,  Up: |Mathematics|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *Mathematical_Constants*

19.1 Predefined Mathematical Constants
--------------------------------------

The header 'math.h' defines several useful mathematical constants.  All
values are defined as preprocessor macros starting with 'M_'.  The
values provided are:

'M_E'
     The base of natural logarithms.
'M_LOG2E'
     The logarithm to base '2' of 'M_E'.
'M_LOG10E'
     The logarithm to base '10' of 'M_E'.
'M_LN2'
     The natural logarithm of '2'.
'M_LN10'
     The natural logarithm of '10'.
'M_PI'
     Pi, the ratio of a circle's circumference to its diameter.
'M_PI_2'
     Pi divided by two.
'M_PI_4'
     Pi divided by four.
'M_1_PI'
     The reciprocal of pi (1/pi)
'M_2_PI'
     Two times the reciprocal of pi.
'M_2_SQRTPI'
     Two times the reciprocal of the square root of pi.
'M_SQRT2'
     The square root of two.
'M_SQRT1_2'
     The reciprocal of the square root of two (also the square root of
     1/2).

   These constants come from the Unix98 standard and were also available
in 4.4BSD; therefore they are only defined if '_XOPEN_SOURCE=500', or a
more general feature select macro, is defined.  The default set of
features includes these constants.  *Note Feature Test Macros::.

   All values are of type 'double'.  As an extension, the GNU C Library
also defines these constants with type 'long double'.  The 'long double'
macros have a lowercase 'l' appended to their names: 'M_El', 'M_PIl',
and so forth.  These are only available if '_GNU_SOURCE' is defined.

   Likewise, the GNU C Library also defines these constants with the
types '_FloatN' and '_FloatNx' for the machines that have support for
such types enabled (*note Mathematics::) and if '_GNU_SOURCE' is
defined.  When available, the macros names are appended with 'fN' or
'fNx', such as 'f128' for the type '_Float128'.

   _Note:_ Some programs use a constant named 'PI' which has the same
value as 'M_PI'.  This constant is not standard; it may have appeared in
some old AT&T headers, and is mentioned in Stroustrup's book on C++.  It
infringes on the user's name space, so the GNU C Library does not define
it.  Fixing programs written to expect it is simple: replace 'PI' with
'M_PI' throughout, or put '-DPI=M_PI' on the compiler command line.

==============================================================================
File: libc.info,  Node: |Trig_Functions|,  Next: |Inverse_Trig_Functions|,  Prev: |Mathematical_Constants|,  Up: |Mathematics|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Trig_Functions*

19.2 Trigonometric Functions
----------------------------

These are the familiar 'sin', 'cos', and 'tan' functions.  The arguments
to all of these functions are in units of radians; recall that pi
radians equals 180 degrees.

   The math library normally defines 'M_PI' to a 'double' approximation
of pi.  If strict ISO and/or POSIX compliance are requested this
constant is not defined, but you can easily define it yourself:

     #define M_PI 3.14159265358979323846264338327

You can also compute the value of pi with the expression 'acos (-1.0)'.

 -- Function: double sin (double X)
 -- Function: float sinf (float X)
 -- Function: long double sinl (long double X)
 -- Function: _FloatN sinfN (_FloatN X)
 -- Function: _FloatNx sinfNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the sine of X, where X is given in radians.
     The return value is in the range '-1' to '1'.

 -- Function: double cos (double X)
 -- Function: float cosf (float X)
 -- Function: long double cosl (long double X)
 -- Function: _FloatN cosfN (_FloatN X)
 -- Function: _FloatNx cosfNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the cosine of X, where X is given in
     radians.  The return value is in the range '-1' to '1'.

 -- Function: double tan (double X)
 -- Function: float tanf (float X)
 -- Function: long double tanl (long double X)
 -- Function: _FloatN tanfN (_FloatN X)
 -- Function: _FloatNx tanfNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the tangent of X, where X is given in
     radians.

     Mathematically, the tangent function has singularities at odd
     multiples of pi/2.  If the argument X is too close to one of these
     singularities, 'tan' will signal overflow.

   In many applications where 'sin' and 'cos' are used, the sine and
cosine of the same angle are needed at the same time.  It is more
efficient to compute them simultaneously, so the library provides a
function to do that.

 -- Function: void sincos (double X, double *SINX, double *COSX)
 -- Function: void sincosf (float X, float *SINX, float *COSX)
 -- Function: void sincosl (long double X, long double *SINX, long
          double *COSX)
 -- Function: _FloatN sincosfN (_FloatN X, _FloatN *SINX, _FloatN *COSX)
 -- Function: _FloatNx sincosfNx (_FloatNx X, _FloatNx *SINX, _FloatNx
          *COSX)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the sine of X in '*SINX' and the cosine of X
     in '*COSX', where X is given in radians.  Both values, '*SINX' and
     '*COSX', are in the range of '-1' to '1'.

     All these functions, including the '_FloatN' and '_FloatNx'
     variants, are GNU extensions.  Portable programs should be prepared
     to cope with their absence.

   ISO C99 defines variants of the trig functions which work on complex
numbers.  The GNU C Library provides these functions, but they are only
useful if your compiler supports the new complex types defined by the
standard.  (As of this writing GCC supports complex numbers, but there
are bugs in the implementation.)

 -- Function: complex double csin (complex double Z)
 -- Function: complex float csinf (complex float Z)
 -- Function: complex long double csinl (complex long double Z)
 -- Function: complex _FloatN csinfN (complex _FloatN Z)
 -- Function: complex _FloatNx csinfNx (complex _FloatNx Z)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the complex sine of Z.  The mathematical
     definition of the complex sine is

     sin (z) = 1/(2*i) * (exp (z*i) - exp (-z*i)).

 -- Function: complex double ccos (complex double Z)
 -- Function: complex float ccosf (complex float Z)
 -- Function: complex long double ccosl (complex long double Z)
 -- Function: complex _FloatN ccosfN (complex _FloatN Z)
 -- Function: complex _FloatNx ccosfNx (complex _FloatNx Z)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the complex cosine of Z.  The mathematical
     definition of the complex cosine is

     cos (z) = 1/2 * (exp (z*i) + exp (-z*i))

 -- Function: complex double ctan (complex double Z)
 -- Function: complex float ctanf (complex float Z)
 -- Function: complex long double ctanl (complex long double Z)
 -- Function: complex _FloatN ctanfN (complex _FloatN Z)
 -- Function: complex _FloatNx ctanfNx (complex _FloatNx Z)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the complex tangent of Z.  The mathematical
     definition of the complex tangent is

     tan (z) = -i * (exp (z*i) - exp (-z*i)) / (exp (z*i) + exp (-z*i))

     The complex tangent has poles at pi/2 + 2n, where n is an integer.
     'ctan' may signal overflow if Z is too close to a pole.

==============================================================================
File: libc.info,  Node: |Inverse_Trig_Functions|,  Next: |Exponents_and_Logarithms|,  Prev: |Trig_Functions|,  Up: |Mathematics|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *Inverse_Trig_Functions*

19.3 Inverse Trigonometric Functions
------------------------------------

These are the usual arcsine, arccosine and arctangent functions, which
are the inverses of the sine, cosine and tangent functions respectively.

 -- Function: double asin (double X)
 -- Function: float asinf (float X)
 -- Function: long double asinl (long double X)
 -- Function: _FloatN asinfN (_FloatN X)
 -- Function: _FloatNx asinfNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions compute the arcsine of X--that is, the value whose
     sine is X.  The value is in units of radians.  Mathematically,
     there are infinitely many such values; the one actually returned is
     the one between '-pi/2' and 'pi/2' (inclusive).

     The arcsine function is defined mathematically only over the domain
     '-1' to '1'.  If X is outside the domain, 'asin' signals a domain
     error.

 -- Function: double acos (double X)
 -- Function: float acosf (float X)
 -- Function: long double acosl (long double X)
 -- Function: _FloatN acosfN (_FloatN X)
 -- Function: _FloatNx acosfNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions compute the arccosine of X--that is, the value whose
     cosine is X.  The value is in units of radians.  Mathematically,
     there are infinitely many such values; the one actually returned is
     the one between '0' and 'pi' (inclusive).

     The arccosine function is defined mathematically only over the
     domain '-1' to '1'.  If X is outside the domain, 'acos' signals a
     domain error.

 -- Function: double atan (double X)
 -- Function: float atanf (float X)
 -- Function: long double atanl (long double X)
 -- Function: _FloatN atanfN (_FloatN X)
 -- Function: _FloatNx atanfNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions compute the arctangent of X--that is, the value
     whose tangent is X.  The value is in units of radians.
     Mathematically, there are infinitely many such values; the one
     actually returned is the one between '-pi/2' and 'pi/2'
     (inclusive).

 -- Function: double atan2 (double Y, double X)
 -- Function: float atan2f (float Y, float X)
 -- Function: long double atan2l (long double Y, long double X)
 -- Function: _FloatN atan2fN (_FloatN Y, _FloatN X)
 -- Function: _FloatNx atan2fNx (_FloatNx Y, _FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function computes the arctangent of Y/X, but the signs of both
     arguments are used to determine the quadrant of the result, and X
     is permitted to be zero.  The return value is given in radians and
     is in the range '-pi' to 'pi', inclusive.

     If X and Y are coordinates of a point in the plane, 'atan2' returns
     the signed angle between the line from the origin to that point and
     the x-axis.  Thus, 'atan2' is useful for converting Cartesian
     coordinates to polar coordinates.  (To compute the radial
     coordinate, use 'hypot'; see *note Exponents and Logarithms::.)

     If both X and Y are zero, 'atan2' returns zero.

   ISO C99 defines complex versions of the inverse trig functions.

 -- Function: complex double casin (complex double Z)
 -- Function: complex float casinf (complex float Z)
 -- Function: complex long double casinl (complex long double Z)
 -- Function: complex _FloatN casinfN (complex _FloatN Z)
 -- Function: complex _FloatNx casinfNx (complex _FloatNx Z)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions compute the complex arcsine of Z--that is, the value
     whose sine is Z.  The value returned is in radians.

     Unlike the real-valued functions, 'casin' is defined for all values
     of Z.

 -- Function: complex double cacos (complex double Z)
 -- Function: complex float cacosf (complex float Z)
 -- Function: complex long double cacosl (complex long double Z)
 -- Function: complex _FloatN cacosfN (complex _FloatN Z)
 -- Function: complex _FloatNx cacosfNx (complex _FloatNx Z)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions compute the complex arccosine of Z--that is, the
     value whose cosine is Z.  The value returned is in radians.

     Unlike the real-valued functions, 'cacos' is defined for all values
     of Z.

 -- Function: complex double catan (complex double Z)
 -- Function: complex float catanf (complex float Z)
 -- Function: complex long double catanl (complex long double Z)
 -- Function: complex _FloatN catanfN (complex _FloatN Z)
 -- Function: complex _FloatNx catanfNx (complex _FloatNx Z)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions compute the complex arctangent of Z--that is, the
     value whose tangent is Z.  The value is in units of radians.

==============================================================================
File: libc.info,  Node: |Exponents_and_Logarithms|,  Next: |Hyperbolic_Functions|,  Prev: |Inverse_Trig_Functions|,  Up: |Mathematics|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *Exponents_and_Logarithms*

19.4 Exponentiation and Logarithms
----------------------------------

 -- Function: double exp (double X)
 -- Function: float expf (float X)
 -- Function: long double expl (long double X)
 -- Function: _FloatN expfN (_FloatN X)
 -- Function: _FloatNx expfNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions compute 'e' (the base of natural logarithms) raised
     to the power X.

     If the magnitude of the result is too large to be representable,
     'exp' signals overflow.

 -- Function: double exp2 (double X)
 -- Function: float exp2f (float X)
 -- Function: long double exp2l (long double X)
 -- Function: _FloatN exp2fN (_FloatN X)
 -- Function: _FloatNx exp2fNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions compute '2' raised to the power X.  Mathematically,
     'exp2 (x)' is the same as 'exp (x * log (2))'.

 -- Function: double exp10 (double X)
 -- Function: float exp10f (float X)
 -- Function: long double exp10l (long double X)
 -- Function: _FloatN exp10fN (_FloatN X)
 -- Function: _FloatNx exp10fNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions compute '10' raised to the power X.
     Mathematically, 'exp10 (x)' is the same as 'exp (x * log (10))'.

     The 'exp10' functions are from TS 18661-4:2015.

 -- Function: double log (double X)
 -- Function: float logf (float X)
 -- Function: long double logl (long double X)
 -- Function: _FloatN logfN (_FloatN X)
 -- Function: _FloatNx logfNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions compute the natural logarithm of X.  'exp (log
     (X))' equals X, exactly in mathematics and approximately in C.

     If X is negative, 'log' signals a domain error.  If X is zero, it
     returns negative infinity; if X is too close to zero, it may signal
     overflow.

 -- Function: double log10 (double X)
 -- Function: float log10f (float X)
 -- Function: long double log10l (long double X)
 -- Function: _FloatN log10fN (_FloatN X)
 -- Function: _FloatNx log10fNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the base-10 logarithm of X.  'log10 (X)'
     equals 'log (X) / log (10)'.

 -- Function: double log2 (double X)
 -- Function: float log2f (float X)
 -- Function: long double log2l (long double X)
 -- Function: _FloatN log2fN (_FloatN X)
 -- Function: _FloatNx log2fNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the base-2 logarithm of X.  'log2 (X)'
     equals 'log (X) / log (2)'.

 -- Function: double logb (double X)
 -- Function: float logbf (float X)
 -- Function: long double logbl (long double X)
 -- Function: _FloatN logbfN (_FloatN X)
 -- Function: _FloatNx logbfNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions extract the exponent of X and return it as a
     floating-point value.  If 'FLT_RADIX' is two, 'logb' is equal to
     'floor (log2 (x))', except it's probably faster.

     If X is de-normalized, 'logb' returns the exponent X would have if
     it were normalized.  If X is infinity (positive or negative),
     'logb' returns oo.  If X is zero, 'logb' returns oo.  It does not
     signal.

 -- Function: int ilogb (double X)
 -- Function: int ilogbf (float X)
 -- Function: int ilogbl (long double X)
 -- Function: int ilogbfN (_FloatN X)
 -- Function: int ilogbfNx (_FloatNx X)
 -- Function: long int llogb (double X)
 -- Function: long int llogbf (float X)
 -- Function: long int llogbl (long double X)
 -- Function: long int llogbfN (_FloatN X)
 -- Function: long int llogbfNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions are equivalent to the corresponding 'logb'
     functions except that they return signed integer values.  The
     'ilogb', 'ilogbf', and 'ilogbl' functions are from ISO C99; the
     'llogb', 'llogbf', 'llogbl' functions are from TS 18661-1:2014; the
     'ilogbfN', 'ilogbfNx', 'llogbfN', and 'llogbfNx' functions are from
     TS 18661-3:2015.

Since integers cannot represent infinity and NaN, 'ilogb' instead
returns an integer that can't be the exponent of a normal floating-point
number.  'math.h' defines constants so you can check for this.

 -- Macro: int FP_ILOGB0

     'ilogb' returns this value if its argument is '0'.  The numeric
     value is either 'INT_MIN' or '-INT_MAX'.

     This macro is defined in ISO C99.

 -- Macro: long int FP_LLOGB0

     'llogb' returns this value if its argument is '0'.  The numeric
     value is either 'LONG_MIN' or '-LONG_MAX'.

     This macro is defined in TS 18661-1:2014.

 -- Macro: int FP_ILOGBNAN

     'ilogb' returns this value if its argument is 'NaN'.  The numeric
     value is either 'INT_MIN' or 'INT_MAX'.

     This macro is defined in ISO C99.

 -- Macro: long int FP_LLOGBNAN

     'llogb' returns this value if its argument is 'NaN'.  The numeric
     value is either 'LONG_MIN' or 'LONG_MAX'.

     This macro is defined in TS 18661-1:2014.

   These values are system specific.  They might even be the same.  The
proper way to test the result of 'ilogb' is as follows:

     i = ilogb (f);
     if (i == FP_ILOGB0 || i == FP_ILOGBNAN)
       {
         if (isnan (f))
           {
             /* Handle NaN.  */
           }
         else if (f  == 0.0)
           {
             /* Handle 0.0.  */
           }
         else
           {
             /* Some other value with large exponent,
                perhaps +Inf.  */
           }
       }

 -- Function: double pow (double BASE, double POWER)
 -- Function: float powf (float BASE, float POWER)
 -- Function: long double powl (long double BASE, long double POWER)
 -- Function: _FloatN powfN (_FloatN BASE, _FloatN POWER)
 -- Function: _FloatNx powfNx (_FloatNx BASE, _FloatNx POWER)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These are general exponentiation functions, returning BASE raised
     to POWER.

     Mathematically, 'pow' would return a complex number when BASE is
     negative and POWER is not an integral value.  'pow' can't do that,
     so instead it signals a domain error.  'pow' may also underflow or
     overflow the destination type.

 -- Function: double sqrt (double X)
 -- Function: float sqrtf (float X)
 -- Function: long double sqrtl (long double X)
 -- Function: _FloatN sqrtfN (_FloatN X)
 -- Function: _FloatNx sqrtfNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the nonnegative square root of X.

     If X is negative, 'sqrt' signals a domain error.  Mathematically,
     it should return a complex number.

 -- Function: double cbrt (double X)
 -- Function: float cbrtf (float X)
 -- Function: long double cbrtl (long double X)
 -- Function: _FloatN cbrtfN (_FloatN X)
 -- Function: _FloatNx cbrtfNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the cube root of X.  They cannot fail; every
     representable real value has a representable real cube root.

 -- Function: double hypot (double X, double Y)
 -- Function: float hypotf (float X, float Y)
 -- Function: long double hypotl (long double X, long double Y)
 -- Function: _FloatN hypotfN (_FloatN X, _FloatN Y)
 -- Function: _FloatNx hypotfNx (_FloatNx X, _FloatNx Y)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return 'sqrt (X*X + Y*Y)'.  This is the length of
     the hypotenuse of a right triangle with sides of length X and Y, or
     the distance of the point (X, Y) from the origin.  Using this
     function instead of the direct formula is wise, since the error is
     much smaller.  See also the function 'cabs' in *note Absolute
     Value::.

 -- Function: double expm1 (double X)
 -- Function: float expm1f (float X)
 -- Function: long double expm1l (long double X)
 -- Function: _FloatN expm1fN (_FloatN X)
 -- Function: _FloatNx expm1fNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return a value equivalent to 'exp (X) - 1'.  They
     are computed in a way that is accurate even if X is near zero--a
     case where 'exp (X) - 1' would be inaccurate owing to subtraction
     of two numbers that are nearly equal.

 -- Function: double log1p (double X)
 -- Function: float log1pf (float X)
 -- Function: long double log1pl (long double X)
 -- Function: _FloatN log1pfN (_FloatN X)
 -- Function: _FloatNx log1pfNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return a value equivalent to 'log (1 + X)'.  They
     are computed in a way that is accurate even if X is near zero.

   ISO C99 defines complex variants of some of the exponentiation and
logarithm functions.

 -- Function: complex double cexp (complex double Z)
 -- Function: complex float cexpf (complex float Z)
 -- Function: complex long double cexpl (complex long double Z)
 -- Function: complex _FloatN cexpfN (complex _FloatN Z)
 -- Function: complex _FloatNx cexpfNx (complex _FloatNx Z)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return 'e' (the base of natural logarithms) raised
     to the power of Z.  Mathematically, this corresponds to the value

     exp (z) = exp (creal (z)) * (cos (cimag (z)) + I * sin (cimag (z)))

 -- Function: complex double clog (complex double Z)
 -- Function: complex float clogf (complex float Z)
 -- Function: complex long double clogl (complex long double Z)
 -- Function: complex _FloatN clogfN (complex _FloatN Z)
 -- Function: complex _FloatNx clogfNx (complex _FloatNx Z)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the natural logarithm of Z.  Mathematically,
     this corresponds to the value

     log (z) = log (cabs (z)) + I * carg (z)

     'clog' has a pole at 0, and will signal overflow if Z equals or is
     very close to 0.  It is well-defined for all other values of Z.

 -- Function: complex double clog10 (complex double Z)
 -- Function: complex float clog10f (complex float Z)
 -- Function: complex long double clog10l (complex long double Z)
 -- Function: complex _FloatN clog10fN (complex _FloatN Z)
 -- Function: complex _FloatNx clog10fNx (complex _FloatNx Z)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the base 10 logarithm of the complex value
     Z.  Mathematically, this corresponds to the value

     log10 (z) = log10 (cabs (z)) + I * carg (z) / log (10)

     All these functions, including the '_FloatN' and '_FloatNx'
     variants, are GNU extensions.

 -- Function: complex double csqrt (complex double Z)
 -- Function: complex float csqrtf (complex float Z)
 -- Function: complex long double csqrtl (complex long double Z)
 -- Function: complex _FloatN csqrtfN (_FloatN Z)
 -- Function: complex _FloatNx csqrtfNx (complex _FloatNx Z)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the complex square root of the argument Z.
     Unlike the real-valued functions, they are defined for all values
     of Z.

 -- Function: complex double cpow (complex double BASE, complex double
          POWER)
 -- Function: complex float cpowf (complex float BASE, complex float
          POWER)
 -- Function: complex long double cpowl (complex long double BASE,
          complex long double POWER)
 -- Function: complex _FloatN cpowfN (complex _FloatN BASE, complex
          _FloatN POWER)
 -- Function: complex _FloatNx cpowfNx (complex _FloatNx BASE, complex
          _FloatNx POWER)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return BASE raised to the power of POWER.  This is
     equivalent to 'cexp (y * clog (x))'

==============================================================================
File: libc.info,  Node: |Hyperbolic_Functions|,  Next: |Special_Functions|,  Prev: |Exponents_and_Logarithms|,  Up: |Mathematics|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Hyperbolic_Functions*

19.5 Hyperbolic Functions
-------------------------

The functions in this section are related to the exponential functions;
see *note Exponents and Logarithms::.

 -- Function: double sinh (double X)
 -- Function: float sinhf (float X)
 -- Function: long double sinhl (long double X)
 -- Function: _FloatN sinhfN (_FloatN X)
 -- Function: _FloatNx sinhfNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the hyperbolic sine of X, defined
     mathematically as '(exp (X) - exp (-X)) / 2'.  They may signal
     overflow if X is too large.

 -- Function: double cosh (double X)
 -- Function: float coshf (float X)
 -- Function: long double coshl (long double X)
 -- Function: _FloatN coshfN (_FloatN X)
 -- Function: _FloatNx coshfNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the hyperbolic cosine of X, defined
     mathematically as '(exp (X) + exp (-X)) / 2'.  They may signal
     overflow if X is too large.

 -- Function: double tanh (double X)
 -- Function: float tanhf (float X)
 -- Function: long double tanhl (long double X)
 -- Function: _FloatN tanhfN (_FloatN X)
 -- Function: _FloatNx tanhfNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the hyperbolic tangent of X, defined
     mathematically as 'sinh (X) / cosh (X)'.  They may signal overflow
     if X is too large.

   There are counterparts for the hyperbolic functions which take
complex arguments.

 -- Function: complex double csinh (complex double Z)
 -- Function: complex float csinhf (complex float Z)
 -- Function: complex long double csinhl (complex long double Z)
 -- Function: complex _FloatN csinhfN (complex _FloatN Z)
 -- Function: complex _FloatNx csinhfNx (complex _FloatNx Z)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the complex hyperbolic sine of Z, defined
     mathematically as '(exp (Z) - exp (-Z)) / 2'.

 -- Function: complex double ccosh (complex double Z)
 -- Function: complex float ccoshf (complex float Z)
 -- Function: complex long double ccoshl (complex long double Z)
 -- Function: complex _FloatN ccoshfN (complex _FloatN Z)
 -- Function: complex _FloatNx ccoshfNx (complex _FloatNx Z)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the complex hyperbolic cosine of Z, defined
     mathematically as '(exp (Z) + exp (-Z)) / 2'.

 -- Function: complex double ctanh (complex double Z)
 -- Function: complex float ctanhf (complex float Z)
 -- Function: complex long double ctanhl (complex long double Z)
 -- Function: complex _FloatN ctanhfN (complex _FloatN Z)
 -- Function: complex _FloatNx ctanhfNx (complex _FloatNx Z)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the complex hyperbolic tangent of Z, defined
     mathematically as 'csinh (Z) / ccosh (Z)'.

 -- Function: double asinh (double X)
 -- Function: float asinhf (float X)
 -- Function: long double asinhl (long double X)
 -- Function: _FloatN asinhfN (_FloatN X)
 -- Function: _FloatNx asinhfNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the inverse hyperbolic sine of X--the value
     whose hyperbolic sine is X.

 -- Function: double acosh (double X)
 -- Function: float acoshf (float X)
 -- Function: long double acoshl (long double X)
 -- Function: _FloatN acoshfN (_FloatN X)
 -- Function: _FloatNx acoshfNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the inverse hyperbolic cosine of X--the value
     whose hyperbolic cosine is X.  If X is less than '1', 'acosh'
     signals a domain error.

 -- Function: double atanh (double X)
 -- Function: float atanhf (float X)
 -- Function: long double atanhl (long double X)
 -- Function: _FloatN atanhfN (_FloatN X)
 -- Function: _FloatNx atanhfNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the inverse hyperbolic tangent of X--the
     value whose hyperbolic tangent is X.  If the absolute value of X is
     greater than '1', 'atanh' signals a domain error; if it is equal to
     1, 'atanh' returns infinity.

 -- Function: complex double casinh (complex double Z)
 -- Function: complex float casinhf (complex float Z)
 -- Function: complex long double casinhl (complex long double Z)
 -- Function: complex _FloatN casinhfN (complex _FloatN Z)
 -- Function: complex _FloatNx casinhfNx (complex _FloatNx Z)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the inverse complex hyperbolic sine of Z--the
     value whose complex hyperbolic sine is Z.

 -- Function: complex double cacosh (complex double Z)
 -- Function: complex float cacoshf (complex float Z)
 -- Function: complex long double cacoshl (complex long double Z)
 -- Function: complex _FloatN cacoshfN (complex _FloatN Z)
 -- Function: complex _FloatNx cacoshfNx (complex _FloatNx Z)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the inverse complex hyperbolic cosine of
     Z--the value whose complex hyperbolic cosine is Z.  Unlike the
     real-valued functions, there are no restrictions on the value of Z.

 -- Function: complex double catanh (complex double Z)
 -- Function: complex float catanhf (complex float Z)
 -- Function: complex long double catanhl (complex long double Z)
 -- Function: complex _FloatN catanhfN (complex _FloatN Z)
 -- Function: complex _FloatNx catanhfNx (complex _FloatNx Z)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the inverse complex hyperbolic tangent of
     Z--the value whose complex hyperbolic tangent is Z.  Unlike the
     real-valued functions, there are no restrictions on the value of Z.

==============================================================================
File: libc.info,  Node: |Special_Functions|,  Next: |Errors_in_Math_Functions|,  Prev: |Hyperbolic_Functions|,  Up: |Mathematics|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Special_Functions*

19.6 Special Functions
----------------------

These are some more exotic mathematical functions which are sometimes
useful.  Currently they only have real-valued versions.

 -- Function: double erf (double X)
 -- Function: float erff (float X)
 -- Function: long double erfl (long double X)
 -- Function: _FloatN erffN (_FloatN X)
 -- Function: _FloatNx erffNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'erf' returns the error function of X.  The error function is
     defined as
          erf (x) = 2/sqrt(pi) * integral from 0 to x of exp(-t^2) dt

 -- Function: double erfc (double X)
 -- Function: float erfcf (float X)
 -- Function: long double erfcl (long double X)
 -- Function: _FloatN erfcfN (_FloatN X)
 -- Function: _FloatNx erfcfNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'erfc' returns '1.0 - erf(X)', but computed in a fashion that
     avoids round-off error when X is large.

 -- Function: double lgamma (double X)
 -- Function: float lgammaf (float X)
 -- Function: long double lgammal (long double X)
 -- Function: _FloatN lgammafN (_FloatN X)
 -- Function: _FloatNx lgammafNx (_FloatNx X)

     Preliminary: | MT-Unsafe race:signgam | AS-Unsafe | AC-Safe | *Note
     POSIX Safety Concepts::.

     'lgamma' returns the natural logarithm of the absolute value of the
     gamma function of X.  The gamma function is defined as
          gamma (x) = integral from 0 to oo of t^(x-1) e^-t dt

     The sign of the gamma function is stored in the global variable
     SIGNGAM, which is declared in 'math.h'.  It is '1' if the
     intermediate result was positive or zero, or '-1' if it was
     negative.

     To compute the real gamma function you can use the 'tgamma'
     function or you can compute the values as follows:
          lgam = lgamma(x);
          gam  = signgam*exp(lgam);

     The gamma function has singularities at the non-positive integers.
     'lgamma' will raise the zero divide exception if evaluated at a
     singularity.

 -- Function: double lgamma_r (double X, int *SIGNP)
 -- Function: float lgammaf_r (float X, int *SIGNP)
 -- Function: long double lgammal_r (long double X, int *SIGNP)
 -- Function: _FloatN lgammafN_r (_FloatN X, int *SIGNP)
 -- Function: _FloatNx lgammafNx_r (_FloatNx X, int *SIGNP)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'lgamma_r' is just like 'lgamma', but it stores the sign of the
     intermediate result in the variable pointed to by SIGNP instead of
     in the SIGNGAM global.  This means it is reentrant.

     The 'lgammafN_r' and 'lgammafNx_r' functions are GNU extensions.

 -- Function: double gamma (double X)
 -- Function: float gammaf (float X)
 -- Function: long double gammal (long double X)

     Preliminary: | MT-Unsafe race:signgam | AS-Unsafe | AC-Safe | *Note
     POSIX Safety Concepts::.

     These functions exist for compatibility reasons.  They are
     equivalent to 'lgamma' etc.  It is better to use 'lgamma' since for
     one the name reflects better the actual computation, and moreover
     'lgamma' is standardized in ISO C99 while 'gamma' is not.

 -- Function: double tgamma (double X)
 -- Function: float tgammaf (float X)
 -- Function: long double tgammal (long double X)
 -- Function: _FloatN tgammafN (_FloatN X)
 -- Function: _FloatNx tgammafNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'tgamma' applies the gamma function to X.  The gamma function is
     defined as
          gamma (x) = integral from 0 to oo of t^(x-1) e^-t dt

     This function was introduced in ISO C99.  The '_FloatN' and
     '_FloatNx' variants were introduced in ISO/IEC TS 18661-3.

 -- Function: double j0 (double X)
 -- Function: float j0f (float X)
 -- Function: long double j0l (long double X)
 -- Function: _FloatN j0fN (_FloatN X)
 -- Function: _FloatNx j0fNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'j0' returns the Bessel function of the first kind of order 0 of X.
     It may signal underflow if X is too large.

     The '_FloatN' and '_FloatNx' variants are GNU extensions.

 -- Function: double j1 (double X)
 -- Function: float j1f (float X)
 -- Function: long double j1l (long double X)
 -- Function: _FloatN j1fN (_FloatN X)
 -- Function: _FloatNx j1fNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'j1' returns the Bessel function of the first kind of order 1 of X.
     It may signal underflow if X is too large.

     The '_FloatN' and '_FloatNx' variants are GNU extensions.

 -- Function: double jn (int N, double X)
 -- Function: float jnf (int N, float X)
 -- Function: long double jnl (int N, long double X)
 -- Function: _FloatN jnfN (int N, _FloatN X)
 -- Function: _FloatNx jnfNx (int N, _FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'jn' returns the Bessel function of the first kind of order N of X.
     It may signal underflow if X is too large.

     The '_FloatN' and '_FloatNx' variants are GNU extensions.

 -- Function: double y0 (double X)
 -- Function: float y0f (float X)
 -- Function: long double y0l (long double X)
 -- Function: _FloatN y0fN (_FloatN X)
 -- Function: _FloatNx y0fNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'y0' returns the Bessel function of the second kind of order 0 of
     X.  It may signal underflow if X is too large.  If X is negative,
     'y0' signals a domain error; if it is zero, 'y0' signals overflow
     and returns -oo.

     The '_FloatN' and '_FloatNx' variants are GNU extensions.

 -- Function: double y1 (double X)
 -- Function: float y1f (float X)
 -- Function: long double y1l (long double X)
 -- Function: _FloatN y1fN (_FloatN X)
 -- Function: _FloatNx y1fNx (_FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'y1' returns the Bessel function of the second kind of order 1 of
     X.  It may signal underflow if X is too large.  If X is negative,
     'y1' signals a domain error; if it is zero, 'y1' signals overflow
     and returns -oo.

     The '_FloatN' and '_FloatNx' variants are GNU extensions.

 -- Function: double yn (int N, double X)
 -- Function: float ynf (int N, float X)
 -- Function: long double ynl (int N, long double X)
 -- Function: _FloatN ynfN (int N, _FloatN X)
 -- Function: _FloatNx ynfNx (int N, _FloatNx X)

     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'yn' returns the Bessel function of the second kind of order N of
     X.  It may signal underflow if X is too large.  If X is negative,
     'yn' signals a domain error; if it is zero, 'yn' signals overflow
     and returns -oo.

     The '_FloatN' and '_FloatNx' variants are GNU extensions.

==============================================================================
File: libc.info,  Node: |Errors_in_Math_Functions|,  Next: |Pseudo_Random_Numbers|,  Prev: |Special_Functions|,  Up: |Mathematics|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *Errors_in_Math_Functions*

19.7 Known Maximum Errors in Math Functions
-------------------------------------------

This section lists the known errors of the functions in the math
library.  Errors are measured in "units of the last place".  This is a
measure for the relative error.  For a number z with the representation
d.d...d*2^e (we assume IEEE floating-point numbers with base 2) the ULP
is represented by

     |d.d...d - (z / 2^e)| / 2^(p - 1)

where p is the number of bits in the mantissa of the floating-point
number representation.  Ideally the error for all functions is always
less than 0.5ulps in round-to-nearest mode.  Using rounding bits this is
also possible and normally implemented for the basic operations.  Except
for certain functions such as 'sqrt', 'fma' and 'rint' whose results are
fully specified by reference to corresponding IEEE 754 floating-point
operations, and conversions between strings and floating point, the GNU
C Library does not aim for correctly rounded results for functions in
the math library, and does not aim for correctness in whether "inexact"
exceptions are raised.  Instead, the goals for accuracy of functions
without fully specified results are as follows; some functions have bugs
meaning they do not meet these goals in all cases.  In the future, the
GNU C Library may provide some other correctly rounding functions under
the names such as 'crsin' proposed for an extension to ISO C.

   * Each function with a floating-point result behaves as if it
     computes an infinite-precision result that is within a few ulp (in
     both real and complex parts, for functions with complex results) of
     the mathematically correct value of the function (interpreted
     together with ISO C or POSIX semantics for the function in
     question) at the exact value passed as the input.  Exceptions are
     raised appropriately for this value and in accordance with IEEE 754
     / ISO C / POSIX semantics, and it is then rounded according to the
     current rounding direction to the result that is returned to the
     user.  'errno' may also be set (*note Math Error Reporting::).
     (The "inexact" exception may be raised, or not raised, even if this
     is inconsistent with the infinite-precision value.)

   * For the IBM 'long double' format, as used on PowerPC GNU/Linux, the
     accuracy goal is weaker for input values not exactly representable
     in 106 bits of precision; it is as if the input value is some value
     within 0.5ulp of the value actually passed, where "ulp" is
     interpreted in terms of a fixed-precision 106-bit mantissa, but not
     necessarily the exact value actually passed with discontiguous
     mantissa bits.

   * For the IBM 'long double' format, functions whose results are fully
     specified by reference to corresponding IEEE 754 floating-point
     operations have the same accuracy goals as other functions, but
     with the error bound being the same as that for division (3ulp).
     Furthermore, "inexact" and "underflow" exceptions may be raised for
     all functions for any inputs, even where such exceptions are
     inconsistent with the returned value, since the underlying
     floating-point arithmetic has that property.

   * Functions behave as if the infinite-precision result computed is
     zero, infinity or NaN if and only if that is the mathematically
     correct infinite-precision result.  They behave as if the
     infinite-precision result computed always has the same sign as the
     mathematically correct result.

   * If the mathematical result is more than a few ulp above the
     overflow threshold for the current rounding direction, the value
     returned is the appropriate overflow value for the current rounding
     direction, with the overflow exception raised.

   * If the mathematical result has magnitude well below half the least
     subnormal magnitude, the returned value is either zero or the least
     subnormal (in each case, with the correct sign), according to the
     current rounding direction and with the underflow exception raised.

   * Where the mathematical result underflows (before rounding) and is
     not exactly representable as a floating-point value, the function
     does not behave as if the computed infinite-precision result is an
     exact value in the subnormal range.  This means that the underflow
     exception is raised other than possibly for cases where the
     mathematical result is very close to the underflow threshold and
     the function behaves as if it computes an infinite-precision result
     that does not underflow.  (So there may be spurious underflow
     exceptions in cases where the underflowing result is exact, but not
     missing underflow exceptions in cases where it is inexact.)

   * The GNU C Library does not aim for functions to satisfy other
     properties of the underlying mathematical function, such as
     monotonicity, where not implied by the above goals.

   * All the above applies to both real and complex parts, for complex
     functions.

   Therefore many of the functions in the math library have errors.  The
table lists the maximum error for each function which is exposed by one
of the existing tests in the test suite.  The table tries to cover as
much as possible and list the actual maximum error (or at least a
ballpark figure) but this is often not achieved due to the large search
space.

   The table lists the ULP values for different architectures.
Different architectures have different results since their hardware
support for floating-point operations varies and also the existing
hardware support is different.  Only the round-to-nearest rounding mode
is covered by this table, and vector versions of functions are not
covered.  Functions not listed do not have known errors.

Function      AArch64         ARM             Alpha           ColdFire        Generic
acosf         1               1               1               -               -
acos          -               -               -               -               -
acosl         1               -               1               -               -
acosf128      -               -               -               -               -
acoshf        2               2               2               -               -
acosh         2               2               2               -               -
acoshl        2               -               2               -               -
acoshf128     -               -               -               -               -
add_ldoublef  -               -               -               -               -
add_ldouble   -               -               -               -               -
add_ldoublel  -               -               -               -               -
add_ldoublef128-              -               -               -               -
asinf         1               1               1               -               -
asin          -               -               -               -               -
asinl         1               -               1               -               -
asinf128      -               -               -               -               -
asinhf        1               1               1               -               -
asinh         1               1               1               -               -
asinhl        3               -               3               -               -
asinhf128     -               -               -               -               -
atanf         1               1               1               -               -
atan          1               -               -               -               -
atanl         1               -               1               -               -
atanf128      -               -               -               -               -
atan2f        1               1               1               1               -
atan2         -               -               -               -               -
atan2l        1               -               1               -               -
atan2f128     -               -               -               -               -
atanhf        2               2               2               1               -
atanh         2               2               2               -               -
atanhl        3               -               3               -               -
atanhf128     -               -               -               -               -
cabsf         -               -               -               -               -
cabs          1               1               1               -               -
cabsl         1               -               1               -               -
cabsf128      -               -               -               -               -
cacosf        2 + i 2         2 + i 2         2 + i 2         -               -
cacos         1 + i 2         1 + i 2         1 + i 2         -               -
cacosl        2 + i 2         -               2 + i 2         -               -
cacosf128     -               -               -               -               -
cacoshf       2 + i 2         2 + i 2         2 + i 2         0 + i 1         -
cacosh        2 + i 1         2 + i 1         2 + i 1         -               -
cacoshl       2 + i 2         -               2 + i 2         -               -
cacoshf128    -               -               -               -               -
cargf         1               1               1               -               -
carg          1               -               -               -               -
cargl         2               -               2               -               -
cargf128      -               -               -               -               -
casinf        1 + i 2         1 + i 2         1 + i 2         1 + i 0         -
casin         1 + i 2         1 + i 2         1 + i 2         1 + i 0         -
casinl        2 + i 2         -               2 + i 2         -               -
casinf128     -               -               -               -               -
casinhf       2 + i 1         2 + i 1         2 + i 1         1 + i 6         -
casinh        2 + i 1         2 + i 1         2 + i 1         5 + i 3         -
casinhl       2 + i 2         -               2 + i 2         -               -
casinhf128    -               -               -               -               -
catanf        1 + i 1         1 + i 1         1 + i 1         0 + i 1         -
catan         1 + i 1         1 + i 1         1 + i 1         0 + i 1         -
catanl        1 + i 1         -               1 + i 1         -               -
catanf128     -               -               -               -               -
catanhf       1 + i 1         1 + i 1         1 + i 1         -               -
catanh        1 + i 1         1 + i 1         1 + i 1         4 + i 0         -
catanhl       1 + i 1         -               1 + i 1         -               -
catanhf128    -               -               -               -               -
cbrtf         1               1               1               -               -
cbrt          3               3               3               1               -
cbrtl         1               -               1               -               -
cbrtf128      -               -               -               -               -
ccosf         1 + i 1         1 + i 1         1 + i 1         1 + i 1         -
ccos          1 + i 1         1 + i 1         1 + i 1         1 + i 0         -
ccosl         1 + i 1         -               1 + i 1         -               -
ccosf128      -               -               -               -               -
ccoshf        1 + i 1         1 + i 1         1 + i 1         1 + i 1         -
ccosh         1 + i 1         1 + i 1         1 + i 1         1 + i 0         -
ccoshl        1 + i 1         -               1 + i 1         -               -
ccoshf128     -               -               -               -               -
cexpf         1 + i 2         1 + i 2         1 + i 2         1 + i 1         -
cexp          2 + i 1         2 + i 1         2 + i 1         -               -
cexpl         1 + i 1         -               1 + i 1         -               -
cexpf128      -               -               -               -               -
clogf         3 + i 1         3 + i 1         3 + i 1         1 + i 0         -
clog          3 + i 1         3 + i 0         3 + i 0         -               -
clogl         2 + i 1         -               2 + i 1         -               -
clogf128      -               -               -               -               -
clog10f       4 + i 2         4 + i 2         4 + i 2         1 + i 1         -
clog10        3 + i 2         3 + i 2         3 + i 2         0 + i 1         -
clog10l       2 + i 2         -               2 + i 2         -               -
clog10f128    -               -               -               -               -
cosf          1               1               1               1               -
cos           1               1               1               2               -
cosl          1               -               1               -               -
cosf128       -               -               -               -               -
coshf         1               1               1               -               -
cosh          1               1               1               -               -
coshl         1               -               1               -               -
coshf128      -               -               -               -               -
cpowf         5 + i 2         5 + i 2         5 + i 2         4 + i 2         -
cpow          2 + i 0         2 + i 0         2 + i 0         2 + i 2         -
cpowl         4 + i 1         -               4 + i 1         -               -
cpowf128      -               -               -               -               -
csinf         1 + i 0         1 + i 0         1 + i 0         -               -
csin          1 + i 0         1 + i 0         1 + i 0         -               -
csinl         1 + i 1         -               1 + i 1         -               -
csinf128      -               -               -               -               -
csinhf        1 + i 1         1 + i 1         1 + i 1         1 + i 1         -
csinh         0 + i 1         0 + i 1         0 + i 1         0 + i 1         -
csinhl        1 + i 1         -               1 + i 1         -               -
csinhf128     -               -               -               -               -
csqrtf        2 + i 2         2 + i 2         2 + i 2         1 + i 0         -
csqrt         2 + i 2         2 + i 2         2 + i 2         -               -
csqrtl        2 + i 2         -               2 + i 2         -               -
csqrtf128     -               -               -               -               -
ctanf         1 + i 2         1 + i 2         1 + i 2         -               -
ctan          1 + i 2         1 + i 2         1 + i 2         0 + i 1         -
ctanl         3 + i 3         -               3 + i 3         -               -
ctanf128      -               -               -               -               -
ctanhf        2 + i 1         2 + i 2         2 + i 2         2 + i 1         -
ctanh         2 + i 2         2 + i 2         2 + i 2         1 + i 0         -
ctanhl        3 + i 3         -               3 + i 3         -               -
ctanhf128     -               -               -               -               -
div_ldoublef  -               -               -               -               -
div_ldouble   -               -               -               -               -
div_ldoublel  -               -               -               -               -
div_ldoublef128-              -               -               -               -
erff          1               1               1               -               -
erf           1               1               1               1               -
erfl          1               -               1               -               -
erff128       -               -               -               -               -
erfcf         2               2               2               -               -
erfc          2               3               3               1               -
erfcl         2               -               2               -               -
erfcf128      -               -               -               -               -
expf          1               1               1               -               -
exp           -               -               -               -               -
expl          1               -               1               -               -
expf128       -               -               -               -               -
exp10f        -               -               -               2               -
exp10         2               2               2               6               -
exp10l        2               -               2               -               -
exp10f128     -               -               -               -               -
exp2f         1               1               1               -               -
exp2          1               1               1               -               -
exp2l         1               -               1               -               -
exp2f128      -               -               -               -               -
expm1f        1               1               1               1               -
expm1         1               1               1               1               -
expm1l        1               -               1               -               -
expm1f128     -               -               -               -               -
fmaf          -               -               -               -               -
fma           -               -               -               -               -
fmal          -               -               -               -               -
fmaf128       -               -               -               -               -
fmodf         -               -               -               -               -
fmod          -               -               -               -               -
fmodl         -               -               -               -               -
fmodf128      -               -               -               -               -
gammaf        4               4               4               -               -
gamma         3               4               4               -               -
gammal        5               -               5               -               -
gammaf128     -               -               -               -               -
hypotf        -               -               -               1               -
hypot         1               1               1               -               -
hypotl        1               -               1               -               -
hypotf128     -               -               -               -               -
j0f           2               2               2               2               -
j0            2               2               2               2               -
j0l           2               -               2               -               -
j0f128        -               -               -               -               -
j1f           2               2               2               2               -
j1            1               1               1               1               -
j1l           4               -               4               -               -
j1f128        -               -               -               -               -
jnf           4               4               4               4               -
jn            4               4               4               4               -
jnl           7               -               7               -               -
jnf128        -               -               -               -               -
lgammaf       4               4               4               2               -
lgamma        3               4               4               1               -
lgammal       5               -               5               -               -
lgammaf128    -               -               -               -               -
logf          1               1               1               -               -
log           -               -               -               -               -
logl          1               -               1               -               -
logf128       -               -               -               -               -
log10f        2               2               2               2               -
log10         2               2               2               1               -
log10l        1               -               1               -               -
log10f128     -               -               -               -               -
log1pf        1               1               1               1               -
log1p         1               1               1               -               -
log1pl        2               -               2               -               -
log1pf128     -               -               -               -               -
log2f         1               1               1               -               -
log2          1               2               2               -               -
log2l         2               -               2               -               -
log2f128      -               -               -               -               -
mul_ldoublef  -               -               -               -               -
mul_ldouble   -               -               -               -               -
mul_ldoublel  -               -               -               -               -
mul_ldoublef128-              -               -               -               -
powf          1               1               1               -               -
pow           1               1               1               -               -
powl          2               -               2               -               -
powf128       -               -               -               -               -
sinf          1               1               1               -               -
sin           1               1               1               -               -
sinl          1               -               1               -               -
sinf128       -               -               -               -               -
sincosf       1               1               1               1               -
sincos        1               1               1               1               -
sincosl       1               -               1               -               -
sincosf128    -               -               -               -               -
sinhf         2               2               2               -               -
sinh          2               2               2               -               -
sinhl         2               -               2               -               -
sinhf128      -               -               -               -               -
sqrtf         -               -               -               -               -
sqrt          -               -               -               -               -
sqrtl         -               -               -               -               -
sqrtf128      -               -               -               -               -
sub_ldoublef  -               -               -               -               -
sub_ldouble   -               -               -               -               -
sub_ldoublel  -               -               -               -               -
sub_ldoublef128-              -               -               -               -
tanf          1               1               1               -               -
tan           -               -               -               1               -
tanl          1               -               1               -               -
tanf128       -               -               -               -               -
tanhf         2               2               2               -               -
tanh          2               2               2               -               -
tanhl         2               -               2               -               -
tanhf128      -               -               -               -               -
tgammaf       4               4               4               1               -
tgamma        5               5               5               1               -
tgammal       4               -               4               -               -
tgammaf128    -               -               -               -               -
y0f           1               1               1               1               -
y0            2               2               2               2               -
y0l           3               -               3               -               -
y0f128        -               -               -               -               -
y1f           2               2               2               2               -
y1            3               3               3               3               -
y1l           2               -               2               -               -
y1f128        -               -               -               -               -
ynf           3               3               3               2               -
yn            3               3               3               3               -
ynl           5               -               5               -               -
ynf128        -               -               -               -               -
Function      HPPA            IA64            M68k            MIPS 32-bit     MIPS 64-bit
acosf         1               -               -               1               1
acos          -               1               -               -               -
acosl         -               -               -               -               1
acosf128      -               1               -               -               -
acoshf        2               -               1               2               2
acosh         2               1               1               2               2
acoshl        -               1               1               -               2
acoshf128     -               2               -               -               -
add_ldoublef  -               -               -               -               -
add_ldouble   -               -               -               -               -
add_ldoublel  -               -               -               -               -
add_ldoublef128-              -               -               -               -
asinf         1               -               -               1               1
asin          -               -               -               -               -
asinl         -               -               -               -               1
asinf128      -               1               -               -               -
asinhf        1               -               1               1               1
asinh         1               1               1               1               1
asinhl        -               -               1               -               3
asinhf128     -               3               -               -               -
atanf         1               -               -               1               1
atan          -               -               -               -               -
atanl         -               -               -               -               1
atanf128      -               1               -               -               -
atan2f        1               -               1               1               1
atan2         -               -               -               -               -
atan2l        -               -               1               -               1
atan2f128     -               1               -               -               -
atanhf        2               -               -               2               2
atanh         2               -               -               2               2
atanhl        -               -               -               -               3
atanhf128     -               3               -               -               -
cabsf         -               -               -               -               -
cabs          1               -               1               1               1
cabsl         -               -               1               -               1
cabsf128      -               1               -               -               -
cacosf        2 + i 2         2 + i 2         2 + i 1         2 + i 2         2 + i 2
cacos         1 + i 2         1 + i 2         1 + i 1         1 + i 2         1 + i 2
cacosl        -               1 + i 2         1 + i 2         -               2 + i 2
cacosf128     -               2 + i 2         -               -               -
cacoshf       2 + i 2         2 + i 2         1 + i 2         2 + i 2         2 + i 2
cacosh        2 + i 1         2 + i 1         1 + i 1         2 + i 1         2 + i 1
cacoshl       -               2 + i 1         2 + i 1         -               2 + i 2
cacoshf128    -               2 + i 2         -               -               -
cargf         1               -               1               1               1
carg          -               -               -               -               -
cargl         -               -               1               -               2
cargf128      -               2               -               -               -
casinf        1 + i 2         1 + i 2         1 + i 1         1 + i 2         1 + i 2
casin         1 + i 2         1 + i 2         1 + i 1         1 + i 2         1 + i 2
casinl        1 + i 0         1 + i 2         1 + i 2         -               2 + i 2
casinf128     -               2 + i 2         -               -               -
casinhf       2 + i 1         2 + i 1         1 + i 1         2 + i 1         2 + i 1
casinh        5 + i 3         2 + i 1         1 + i 1         2 + i 1         2 + i 1
casinhl       5 + i 3         2 + i 1         2 + i 1         -               2 + i 2
casinhf128    -               2 + i 2         -               -               -
catanf        1 + i 1         0 + i 1         0 + i 1         1 + i 1         1 + i 1
catan         1 + i 1         1 + i 1         0 + i 1         1 + i 1         1 + i 1
catanl        0 + i 1         0 + i 1         1 + i 1         -               1 + i 1
catanf128     -               1 + i 1         -               -               -
catanhf       1 + i 1         1 + i 0         1 + i 0         1 + i 1         1 + i 1
catanh        4 + i 1         1 + i 1         1 + i 0         1 + i 1         1 + i 1
catanhl       4 + i 0         1 + i 0         1 + i 1         -               1 + i 1
catanhf128    -               1 + i 1         -               -               -
cbrtf         1               -               1               1               1
cbrt          3               -               1               3               3
cbrtl         1               -               1               -               1
cbrtf128      -               1               -               -               -
ccosf         1 + i 1         0 + i 1         -               1 + i 1         1 + i 1
ccos          1 + i 1         1 + i 1         -               1 + i 1         1 + i 1
ccosl         1 + i 0         1 + i 1         1 + i 1         -               1 + i 1
ccosf128      -               1 + i 1         -               -               -
ccoshf        1 + i 1         1 + i 1         -               1 + i 1         1 + i 1
ccosh         1 + i 1         1 + i 1         -               1 + i 1         1 + i 1
ccoshl        1 + i 0         0 + i 1         0 + i 1         -               1 + i 1
ccoshf128     -               1 + i 1         -               -               -
cexpf         1 + i 2         1 + i 2         -               1 + i 2         1 + i 2
cexp          2 + i 1         2 + i 1         -               2 + i 1         2 + i 1
cexpl         -               1 + i 1         1 + i 1         -               1 + i 1
cexpf128      -               1 + i 1         -               -               -
clogf         3 + i 1         3 + i 0         2 + i 1         3 + i 1         3 + i 1
clog          3 + i 0         2 + i 1         3 + i 1         3 + i 0         3 + i 0
clogl         -               2 + i 1         3 + i 1         -               2 + i 1
clogf128      -               2 + i 1         -               -               -
clog10f       4 + i 2         4 + i 1         2 + i 1         4 + i 2         4 + i 2
clog10        3 + i 2         3 + i 2         2 + i 1         3 + i 2         3 + i 2
clog10l       0 + i 1         2 + i 1         3 + i 2         -               2 + i 2
clog10f128    -               2 + i 2         -               -               -
cosf          1               -               -               1               1
cos           2               1               1               1               1
cosl          2               -               -               -               1
cosf128       -               1               -               -               -
coshf         1               -               -               1               1
cosh          1               -               -               1               1
coshl         -               -               -               -               1
coshf128      -               1               -               -               -
cpowf         5 + i 2         5 + i 2         3 + i 5         5 + i 2         5 + i 2
cpow          2 + i 2         2 + i 0         1 + i 0         2 + i 0         2 + i 0
cpowl         2 + i 2         3 + i 4         3 + i 1         -               4 + i 1
cpowf128      -               4 + i 1         -               -               -
csinf         1 + i 0         1 + i 1         -               1 + i 0         1 + i 0
csin          1 + i 0         1 + i 0         -               1 + i 0         1 + i 0
csinl         -               1 + i 0         1 + i 0         -               1 + i 1
csinf128      -               1 + i 1         -               -               -
csinhf        1 + i 1         1 + i 1         -               1 + i 1         1 + i 1
csinh         0 + i 1         1 + i 1         -               0 + i 1         0 + i 1
csinhl        0 + i 1         1 + i 1         1 + i 0         -               1 + i 1
csinhf128     -               1 + i 1         -               -               -
csqrtf        2 + i 2         2 + i 2         1 + i 1         2 + i 2         2 + i 2
csqrt         2 + i 2         2 + i 2         1 + i 1         2 + i 2         2 + i 2
csqrtl        -               2 + i 2         2 + i 2         -               2 + i 2
csqrtf128     -               2 + i 2         -               -               -
ctanf         1 + i 2         1 + i 1         1 + i 1         1 + i 2         1 + i 2
ctan          1 + i 2         1 + i 2         1 + i 1         1 + i 2         1 + i 2
ctanl         0 + i 1         2 + i 2         2 + i 2         -               3 + i 3
ctanf128      -               3 + i 3         -               -               -
ctanhf        2 + i 2         1 + i 1         1 + i 2         2 + i 2         2 + i 2
ctanh         2 + i 2         2 + i 2         1 + i 1         2 + i 2         2 + i 2
ctanhl        1 + i 0         1 + i 2         2 + i 2         -               3 + i 3
ctanhf128     -               3 + i 3         -               -               -
div_ldoublef  -               -               -               -               -
div_ldouble   -               -               -               -               -
div_ldoublel  -               -               -               -               -
div_ldoublef128-              -               -               -               -
erff          1               -               1               1               1
erf           1               -               -               1               1
erfl          1               -               1               -               1
erff128       -               1               -               -               -
erfcf         2               -               1               2               2
erfc          3               -               -               3               3
erfcl         1               -               2               -               2
erfcf128      -               2               -               -               -
expf          1               1               -               1               1
exp           -               -               -               -               -
expl          -               -               -               -               1
expf128       -               1               -               -               -
exp10f        2               -               -               -               -
exp10         6               -               -               2               2
exp10l        6               -               -               -               2
exp10f128     -               2               -               -               -
exp2f         1               -               -               1               1
exp2          1               1               1               1               1
exp2l         -               1               -               -               1
exp2f128      -               1               -               -               -
expm1f        1               -               -               1               1
expm1         1               1               -               1               1
expm1l        1               1               -               -               1
expm1f128     -               1               -               -               -
fmaf          -               -               -               -               -
fma           -               -               -               -               -
fmal          -               -               -               -               -
fmaf128       -               -               -               -               -
fmodf         -               -               -               -               -
fmod          -               -               -               -               -
fmodl         -               -               -               -               -
fmodf128      -               -               -               -               -
gammaf        4               1               1               4               4
gamma         4               -               -               4               4
gammal        -               -               2               -               5
gammaf128     -               -               -               -               -
hypotf        1               -               -               -               -
hypot         1               -               1               1               1
hypotl        -               -               1               -               1
hypotf128     -               1               -               -               -
j0f           2               2               2               2               2
j0            2               2               1               2               2
j0l           2               2               2               -               2
j0f128        -               2               -               -               -
j1f           2               2               2               2               2
j1            1               1               -               1               1
j1l           1               1               1               -               4
j1f128        -               4               -               -               -
jnf           5               4               2               4               4
jn            4               4               2               4               4
jnl           4               4               4               -               7
jnf128        -               7               -               -               -
lgammaf       4               1               1               4               4
lgamma        4               -               -               4               4
lgammal       1               -               2               -               5
lgammaf128    -               5               -               -               -
logf          1               -               -               1               1
log           -               -               -               -               -
logl          -               -               -               -               1
logf128       -               1               -               -               -
log10f        2               -               -               2               2
log10         2               -               -               2               2
log10l        1               -               -               -               1
log10f128     -               1               -               -               -
log1pf        1               -               -               1               1
log1p         1               -               -               1               1
log1pl        -               -               -               -               2
log1pf128     -               2               -               -               -
log2f         1               -               -               1               1
log2          2               -               -               2               2
log2l         -               -               -               -               2
log2f128      -               2               -               -               -
mul_ldoublef  -               -               -               -               -
mul_ldouble   -               -               -               -               -
mul_ldoublel  -               -               -               -               -
mul_ldoublef128-              -               -               -               -
powf          1               -               7               1               1
pow           1               -               1               1               1
powl          -               -               9               -               2
powf128       -               2               -               -               -
sinf          1               -               -               1               1
sin           1               1               1               1               1
sinl          -               -               -               -               1
sinf128       -               1               -               -               -
sincosf       1               -               -               1               1
sincos        1               1               -               1               1
sincosl       1               -               -               -               1
sincosf128    -               1               -               -               -
sinhf         2               -               -               2               2
sinh          2               -               -               2               2
sinhl         -               -               -               -               2
sinhf128      -               2               -               -               -
sqrtf         -               -               -               -               -
sqrt          -               -               -               -               -
sqrtl         -               -               -               -               -
sqrtf128      -               -               -               -               -
sub_ldoublef  -               -               -               -               -
sub_ldouble   -               -               -               -               -
sub_ldoublel  -               -               -               -               -
sub_ldoublef128-              -               -               -               -
tanf          1               -               -               1               1
tan           1               -               -               -               -
tanl          1               1               -               -               1
tanf128       -               1               -               -               -
tanhf         2               -               -               2               2
tanh          2               -               -               2               2
tanhl         -               -               -               -               2
tanhf128      -               2               -               -               -
tgammaf       4               -               4               4               4
tgamma        5               -               1               5               5
tgammal       1               1               9               -               4
tgammaf128    -               4               -               -               -
y0f           1               1               1               1               1
y0            2               2               1               2               2
y0l           2               1               1               -               3
y0f128        -               3               -               -               -
y1f           2               2               3               2               2
y1            3               3               1               3               3
y1l           3               2               2               -               2
y1f128        -               2               -               -               -
ynf           3               3               3               3               3
yn            3               3               2               3               3
ynl           3               3               4               -               5
ynf128        -               5               -               -               -
Function      MicroBlaze      Nios II         PowerPC         PowerPC         RISC-V
                                                              soft-float
acosf         1               1               1               1               1
acos          -               -               -               -               -
acosl         -               -               1               1               1
acosf128      -               -               1               -               -
acoshf        2               2               2               2               2
acosh         2               2               2               2               2
acoshl        -               -               2               1               2
acoshf128     -               -               2               -               -
add_ldoublef  -               -               1               1               -
add_ldouble   -               -               1               1               -
add_ldoublel  -               -               -               -               -
add_ldoublef128-              -               -               -               -
asinf         1               1               1               1               1
asin          -               -               -               -               -
asinl         -               -               2               2               1
asinf128      -               -               1               -               -
asinhf        1               1               1               1               1
asinh         1               1               1               1               1
asinhl        -               -               2               2               3
asinhf128     -               -               3               -               -
atanf         1               1               1               1               1
atan          -               -               1               -               -
atanl         -               -               1               1               1
atanf128      -               -               1               -               -
atan2f        1               1               1               1               1
atan2         -               -               -               -               -
atan2l        -               -               2               2               1
atan2f128     -               -               1               -               -
atanhf        2               2               2               2               2
atanh         2               2               2               2               2
atanhl        -               -               2               2               3
atanhf128     -               -               3               -               -
cabsf         -               -               -               -               -
cabs          1               1               1               1               1
cabsl         -               -               1               1               1
cabsf128      -               -               1               -               -
cacosf        2 + i 2         2 + i 2         2 + i 2         2 + i 2         2 + i 2
cacos         1 + i 2         1 + i 2         1 + i 2         1 + i 2         1 + i 2
cacosl        -               -               1 + i 2         2 + i 1         2 + i 2
cacosf128     -               -               2 + i 2         -               -
cacoshf       2 + i 2         2 + i 2         2 + i 2         2 + i 2         2 + i 2
cacosh        2 + i 1         2 + i 1         2 + i 1         2 + i 1         2 + i 1
cacoshl       -               -               2 + i 1         1 + i 2         2 + i 2
cacoshf128    -               -               2 + i 2         -               -
cargf         1               1               1               1               1
carg          -               -               1               -               -
cargl         -               -               2               2               2
cargf128      -               -               2               -               -
casinf        1 + i 2         1 + i 2         1 + i 2         1 + i 2         1 + i 2
casin         1 + i 2         1 + i 2         1 + i 2         1 + i 2         1 + i 2
casinl        -               -               1 + i 2         2 + i 1         2 + i 2
casinf128     -               -               2 + i 2         -               -
casinhf       2 + i 1         2 + i 1         2 + i 1         2 + i 1         2 + i 1
casinh        2 + i 1         2 + i 1         2 + i 1         2 + i 1         2 + i 1
casinhl       -               -               2 + i 1         1 + i 2         2 + i 2
casinhf128    -               -               2 + i 2         -               -
catanf        1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
catan         1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
catanl        -               -               3 + i 2         3 + i 2         1 + i 1
catanf128     -               -               1 + i 1         -               -
catanhf       1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
catanh        1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
catanhl       -               -               2 + i 3         2 + i 3         1 + i 1
catanhf128    -               -               1 + i 1         -               -
cbrtf         1               1               1               1               1
cbrt          3               3               3               3               3
cbrtl         -               -               1               1               1
cbrtf128      -               -               1               -               -
ccosf         1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
ccos          1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
ccosl         -               -               1 + i 2         1 + i 2         1 + i 1
ccosf128      -               -               1 + i 1         -               -
ccoshf        1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
ccosh         1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
ccoshl        -               -               1 + i 2         1 + i 2         1 + i 1
ccoshf128     -               -               1 + i 1         -               -
cexpf         1 + i 2         1 + i 2         1 + i 2         1 + i 2         1 + i 2
cexp          2 + i 1         2 + i 1         2 + i 1         2 + i 1         2 + i 1
cexpl         -               -               2 + i 2         1 + i 1         1 + i 1
cexpf128      -               -               1 + i 1         -               -
clogf         3 + i 1         3 + i 1         3 + i 1         3 + i 1         3 + i 1
clog          3 + i 0         3 + i 0         3 + i 1         3 + i 0         3 + i 0
clogl         -               -               5 + i 2         2 + i 2         2 + i 1
clogf128      -               -               2 + i 1         -               -
clog10f       4 + i 2         4 + i 2         4 + i 2         4 + i 2         4 + i 2
clog10        3 + i 2         3 + i 2         3 + i 2         3 + i 2         3 + i 2
clog10l       -               -               3 + i 2         3 + i 2         2 + i 2
clog10f128    -               -               2 + i 2         -               -
cosf          1               1               3               1               -
cos           -               1               1               1               1
cosl          -               -               4               4               1
cosf128       -               -               1               -               -
coshf         1               1               1               1               1
cosh          1               1               1               1               1
coshl         -               -               3               3               1
coshf128      -               -               1               -               -
cpowf         4 + i 2         5 + i 2         5 + i 2         5 + i 2         5 + i 2
cpow          2 + i 0         2 + i 0         2 + i 0         2 + i 0         2 + i 0
cpowl         -               -               4 + i 2         4 + i 1         4 + i 1
cpowf128      -               -               4 + i 1         -               -
csinf         1 + i 0         1 + i 0         1 + i 0         1 + i 0         1 + i 0
csin          1 + i 0         1 + i 0         1 + i 0         1 + i 0         1 + i 0
csinl         -               -               2 + i 1         2 + i 1         1 + i 1
csinf128      -               -               1 + i 1         -               -
csinhf        1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
csinh         0 + i 1         0 + i 1         0 + i 1         0 + i 1         0 + i 1
csinhl        -               -               1 + i 2         1 + i 2         1 + i 1
csinhf128     -               -               1 + i 1         -               -
csqrtf        2 + i 2         2 + i 2         2 + i 2         2 + i 2         2 + i 2
csqrt         2 + i 2         2 + i 2         2 + i 2         2 + i 2         2 + i 2
csqrtl        -               -               1 + i 1         1 + i 1         2 + i 2
csqrtf128     -               -               2 + i 2         -               -
ctanf         1 + i 1         1 + i 2         1 + i 2         1 + i 2         1 + i 2
ctan          1 + i 2         1 + i 2         1 + i 2         1 + i 2         1 + i 2
ctanl         -               -               3 + i 2         3 + i 2         3 + i 3
ctanf128      -               -               3 + i 3         -               -
ctanhf        1 + i 2         2 + i 2         2 + i 1         2 + i 2         2 + i 1
ctanh         2 + i 2         2 + i 2         2 + i 2         2 + i 2         2 + i 2
ctanhl        -               -               3 + i 3         2 + i 3         3 + i 3
ctanhf128     -               -               3 + i 3         -               -
div_ldoublef  -               -               1               1               -
div_ldouble   -               -               -               -               -
div_ldoublel  -               -               -               -               -
div_ldoublef128-              -               -               -               -
erff          1               1               1               1               1
erf           1               1               1               1               1
erfl          -               -               1               1               1
erff128       -               -               1               -               -
erfcf         2               2               2               2               2
erfc          3               3               2               3               2
erfcl         -               -               3               3               2
erfcf128      -               -               2               -               -
expf          1               1               -               1               -
exp           -               -               1               -               -
expl          -               -               1               1               1
expf128       -               -               1               -               -
exp10f        -               -               -               -               -
exp10         2               2               2               2               2
exp10l        -               -               1               1               2
exp10f128     -               -               2               -               -
exp2f         1               1               -               1               -
exp2          1               1               1               1               1
exp2l         -               -               2               1               1
exp2f128      -               -               1               -               -
expm1f        1               1               1               1               1
expm1         1               1               1               1               1
expm1l        -               -               1               1               1
expm1f128     -               -               1               -               -
fmaf          -               -               -               -               -
fma           -               -               -               -               -
fmal          -               -               1               1               -
fmaf128       -               -               -               -               -
fmodf         -               -               -               -               -
fmod          -               -               -               -               -
fmodl         -               -               1               1               -
fmodf128      -               -               -               -               -
gammaf        4               4               4               4               3
gamma         4               4               3               4               3
gammal        -               -               3               3               5
gammaf128     -               -               -               -               -
hypotf        -               -               -               -               -
hypot         1               1               1               1               1
hypotl        -               -               1               1               1
hypotf128     -               -               1               -               -
j0f           2               2               2               2               2
j0            2               2               2               2               2
j0l           -               -               2               2               2
j0f128        -               -               2               -               -
j1f           2               2               2               2               2
j1            1               1               1               1               1
j1l           -               -               2               1               4
j1f128        -               -               4               -               -
jnf           4               4               4               4               4
jn            4               4               4               4               4
jnl           -               -               4               4               7
jnf128        -               -               7               -               -
lgammaf       4               4               4               4               3
lgamma        4               4               3               4               3
lgammal       -               -               3               3               5
lgammaf128    -               -               5               -               -
logf          1               1               1               1               -
log           -               -               -               -               -
logl          -               -               1               1               1
logf128       -               -               1               -               -
log10f        2               2               2               2               2
log10         2               2               2               2               2
log10l        -               -               1               1               1
log10f128     -               -               1               -               -
log1pf        1               1               1               1               1
log1p         1               1               1               1               1
log1pl        -               -               2               2               2
log1pf128     -               -               2               -               -
log2f         1               1               1               1               1
log2          2               2               1               2               1
log2l         -               -               1               1               2
log2f128      -               -               2               -               -
mul_ldoublef  -               -               1               1               -
mul_ldouble   -               -               1               1               -
mul_ldoublel  -               -               -               -               -
mul_ldoublef128-              -               -               -               -
powf          1               3               1               1               -
pow           -               1               1               1               1
powl          -               -               1               1               2
powf128       -               -               2               -               -
sinf          1               1               1               1               -
sin           -               1               1               1               1
sinl          -               -               1               1               1
sinf128       -               -               1               -               -
sincosf       1               1               1               1               -
sincos        -               1               1               1               1
sincosl       -               -               1               1               1
sincosf128    -               -               1               -               -
sinhf         2               2               2               2               2
sinh          2               2               2               2               2
sinhl         -               -               3               3               2
sinhf128      -               -               2               -               -
sqrtf         -               -               -               -               -
sqrt          -               -               -               -               -
sqrtl         -               -               1               1               -
sqrtf128      -               -               -               -               -
sub_ldoublef  -               -               1               1               -
sub_ldouble   -               -               1               1               -
sub_ldoublel  -               -               -               -               -
sub_ldoublef128-              -               -               -               -
tanf          1               1               3               1               1
tan           -               -               -               -               -
tanl          -               -               2               2               1
tanf128       -               -               1               -               -
tanhf         2               2               2               2               2
tanh          2               2               2               2               2
tanhl         -               -               1               1               2
tanhf128      -               -               2               -               -
tgammaf       4               5               4               4               4
tgamma        5               5               5               5               5
tgammal       -               -               5               3               4
tgammaf128    -               -               4               -               -
y0f           1               1               1               1               1
y0            2               2               2               2               2
y0l           -               -               1               1               3
y0f128        -               -               3               -               -
y1f           2               2               2               2               2
y1            3               3               3               3               3
y1l           -               -               2               2               2
y1f128        -               -               2               -               -
ynf           2               3               3               3               3
yn            3               3               3               3               3
ynl           -               -               2               2               5
ynf128        -               -               5               -               -
Function      RISC-V          S/390           SH              Sparc           i686
              soft-float
acosf         1               1               1               1               -
acos          -               -               -               -               1
acosl         1               1               -               1               1
acosf128      -               -               -               -               1
acoshf        2               2               2               2               -
acosh         2               2               2               2               1
acoshl        2               2               -               2               2
acoshf128     -               -               -               -               2
add_ldoublef  -               -               -               -               -
add_ldouble   -               -               -               -               -
add_ldoublel  -               -               -               -               -
add_ldoublef128-              -               -               -               -
asinf         1               1               1               1               -
asin          -               -               -               -               1
asinl         1               1               -               1               1
asinf128      -               -               -               -               1
asinhf        1               1               1               1               -
asinh         1               1               1               1               1
asinhl        3               3               -               3               3
asinhf128     -               -               -               -               3
atanf         1               1               1               1               -
atan          -               -               -               -               1
atanl         1               1               -               1               1
vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
