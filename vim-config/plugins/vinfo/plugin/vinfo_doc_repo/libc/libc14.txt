     'complex.h' (TS 18661-3:2015): *note Hyperbolic Functions::.

'complex long double catanhl (complex long double Z)'

     'complex.h' (ISO): *note Hyperbolic Functions::.

'complex long double catanl (complex long double Z)'

     'complex.h' (ISO): *note Inverse Trig Functions::.

'nl_catd catopen (const char *CAT_NAME, int FLAG)'

     'nl_types.h' (X/Open): *note The catgets Functions::.

'double cbrt (double X)'

     'math.h' (BSD): *note Exponents and Logarithms::.

'float cbrtf (float X)'

     'math.h' (BSD): *note Exponents and Logarithms::.

'_FloatN cbrtfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'_FloatNx cbrtfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'long double cbrtl (long double X)'

     'math.h' (BSD): *note Exponents and Logarithms::.

'cc_t'

     'termios.h' (POSIX.1): *note Mode Data Types::.

'complex double ccos (complex double Z)'

     'complex.h' (ISO): *note Trig Functions::.

'complex float ccosf (complex float Z)'

     'complex.h' (ISO): *note Trig Functions::.

'complex _FloatN ccosfN (complex _FloatN Z)'

     'complex.h' (TS 18661-3:2015): *note Trig Functions::.

'complex _FloatNx ccosfNx (complex _FloatNx Z)'

     'complex.h' (TS 18661-3:2015): *note Trig Functions::.

'complex double ccosh (complex double Z)'

     'complex.h' (ISO): *note Hyperbolic Functions::.

'complex float ccoshf (complex float Z)'

     'complex.h' (ISO): *note Hyperbolic Functions::.

'complex _FloatN ccoshfN (complex _FloatN Z)'

     'complex.h' (TS 18661-3:2015): *note Hyperbolic Functions::.

'complex _FloatNx ccoshfNx (complex _FloatNx Z)'

     'complex.h' (TS 18661-3:2015): *note Hyperbolic Functions::.

'complex long double ccoshl (complex long double Z)'

     'complex.h' (ISO): *note Hyperbolic Functions::.

'complex long double ccosl (complex long double Z)'

     'complex.h' (ISO): *note Trig Functions::.

'double ceil (double X)'

     'math.h' (ISO): *note Rounding Functions::.

'float ceilf (float X)'

     'math.h' (ISO): *note Rounding Functions::.

'_FloatN ceilfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'_FloatNx ceilfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'long double ceill (long double X)'

     'math.h' (ISO): *note Rounding Functions::.

'complex double cexp (complex double Z)'

     'complex.h' (ISO): *note Exponents and Logarithms::.

'complex float cexpf (complex float Z)'

     'complex.h' (ISO): *note Exponents and Logarithms::.

'complex _FloatN cexpfN (complex _FloatN Z)'

     'complex.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'complex _FloatNx cexpfNx (complex _FloatNx Z)'

     'complex.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'complex long double cexpl (complex long double Z)'

     'complex.h' (ISO): *note Exponents and Logarithms::.

'speed_t cfgetispeed (const struct termios *TERMIOS-P)'

     'termios.h' (POSIX.1): *note Line Speed::.

'speed_t cfgetospeed (const struct termios *TERMIOS-P)'

     'termios.h' (POSIX.1): *note Line Speed::.

'void cfmakeraw (struct termios *TERMIOS-P)'

     'termios.h' (BSD): *note Noncanonical Input::.

'int cfsetispeed (struct termios *TERMIOS-P, speed_t SPEED)'

     'termios.h' (POSIX.1): *note Line Speed::.

'int cfsetospeed (struct termios *TERMIOS-P, speed_t SPEED)'

     'termios.h' (POSIX.1): *note Line Speed::.

'int cfsetspeed (struct termios *TERMIOS-P, speed_t SPEED)'

     'termios.h' (BSD): *note Line Speed::.

'int chdir (const char *FILENAME)'

     'unistd.h' (POSIX.1): *note Working Directory::.

'int chmod (const char *FILENAME, mode_t MODE)'

     'sys/stat.h' (POSIX.1): *note Setting Permissions::.

'int chown (const char *FILENAME, uid_t OWNER, gid_t GROUP)'

     'unistd.h' (POSIX.1): *note File Owner::.

'double cimag (complex double Z)'

     'complex.h' (ISO): *note Operations on Complex::.

'float cimagf (complex float Z)'

     'complex.h' (ISO): *note Operations on Complex::.

'_FloatN cimagfN (complex _FloatN Z)'

     'complex.h' (TS 18661-3:2015): *note Operations on Complex::.

'_FloatNx cimagfNx (complex _FloatNx Z)'

     'complex.h' (TS 18661-3:2015): *note Operations on Complex::.

'long double cimagl (complex long double Z)'

     'complex.h' (ISO): *note Operations on Complex::.

'int clearenv (void)'

     'stdlib.h' (GNU): *note Environment Access::.

'void clearerr (FILE *STREAM)'

     'stdio.h' (ISO): *note Error Recovery::.

'void clearerr_unlocked (FILE *STREAM)'

     'stdio.h' (GNU): *note Error Recovery::.

'clock_t clock (void)'

     'time.h' (ISO): *note CPU Time::.

'clock_t'

     'time.h' (ISO): *note CPU Time::.

'complex double clog (complex double Z)'

     'complex.h' (ISO): *note Exponents and Logarithms::.

'complex double clog10 (complex double Z)'

     'complex.h' (GNU): *note Exponents and Logarithms::.

'complex float clog10f (complex float Z)'

     'complex.h' (GNU): *note Exponents and Logarithms::.

'complex _FloatN clog10fN (complex _FloatN Z)'

     'complex.h' (GNU): *note Exponents and Logarithms::.

'complex _FloatNx clog10fNx (complex _FloatNx Z)'

     'complex.h' (GNU): *note Exponents and Logarithms::.

'complex long double clog10l (complex long double Z)'

     'complex.h' (GNU): *note Exponents and Logarithms::.

'complex float clogf (complex float Z)'

     'complex.h' (ISO): *note Exponents and Logarithms::.

'complex _FloatN clogfN (complex _FloatN Z)'

     'complex.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'complex _FloatNx clogfNx (complex _FloatNx Z)'

     'complex.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'complex long double clogl (complex long double Z)'

     'complex.h' (ISO): *note Exponents and Logarithms::.

'int close (int FILEDES)'

     'unistd.h' (POSIX.1): *note Opening and Closing Files::.

'int closedir (DIR *DIRSTREAM)'

     'dirent.h' (POSIX.1): *note Reading/Closing Directory::.

'void closelog (void)'

     'syslog.h' (BSD): *note closelog::.

'int cnd_broadcast (cnd_t *COND)'

     'threads.h' (C11): *note ISO C Condition Variables::.

'void cnd_destroy (cnd_t *COND)'

     'threads.h' (C11): *note ISO C Condition Variables::.

'int cnd_init (cnd_t *COND)'

     'threads.h' (C11): *note ISO C Condition Variables::.

'int cnd_signal (cnd_t *COND)'

     'threads.h' (C11): *note ISO C Condition Variables::.

'cnd_t'

     'threads.h' (C11): *note ISO C Condition Variables::.

'int cnd_timedwait (cnd_t *restrict COND, mtx_t *restrict MUTEX, const struct timespec *restrict TIME_POINT)'

     'threads.h' (C11): *note ISO C Condition Variables::.

'int cnd_wait (cnd_t *COND, mtx_t *MUTEX)'

     'threads.h' (C11): *note ISO C Condition Variables::.

'size_t confstr (int PARAMETER, char *BUF, size_t LEN)'

     'unistd.h' (POSIX.2): *note String Parameters::.

'complex double conj (complex double Z)'

     'complex.h' (ISO): *note Operations on Complex::.

'complex float conjf (complex float Z)'

     'complex.h' (ISO): *note Operations on Complex::.

'complex _FloatN conjfN (complex _FloatN Z)'

     'complex.h' (TS 18661-3:2015): *note Operations on Complex::.

'complex _FloatNx conjfNx (complex _FloatNx Z)'

     'complex.h' (TS 18661-3:2015): *note Operations on Complex::.

'complex long double conjl (complex long double Z)'

     'complex.h' (ISO): *note Operations on Complex::.

'int connect (int SOCKET, struct sockaddr *ADDR, socklen_t LENGTH)'

     'sys/socket.h' (BSD): *note Connecting::.

'cookie_close_function_t'

     'stdio.h' (GNU): *note Hook Functions::.

'cookie_io_functions_t'

     'stdio.h' (GNU): *note Streams and Cookies::.

'cookie_read_function_t'

     'stdio.h' (GNU): *note Hook Functions::.

'cookie_seek_function_t'

     'stdio.h' (GNU): *note Hook Functions::.

'cookie_write_function_t'

     'stdio.h' (GNU): *note Hook Functions::.

'ssize_t copy_file_range (int INPUTFD, off64_t *INPUTPOS, int OUTPUTFD, off64_t *OUTPUTPOS, ssize_t LENGTH, unsigned int FLAGS)'

     'unistd.h' (GNU): *note Copying File Data::.

'double copysign (double X, double Y)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'float copysignf (float X, float Y)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'_FloatN copysignfN (_FloatN X, _FloatN Y)'

     'math.h' (TS 18661-3:2015): *note FP Bit Twiddling::.

'_FloatNx copysignfNx (_FloatNx X, _FloatNx Y)'

     'math.h' (TS 18661-3:2015): *note FP Bit Twiddling::.

'long double copysignl (long double X, long double Y)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'double cos (double X)'

     'math.h' (ISO): *note Trig Functions::.

'float cosf (float X)'

     'math.h' (ISO): *note Trig Functions::.

'_FloatN cosfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Trig Functions::.

'_FloatNx cosfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Trig Functions::.

'double cosh (double X)'

     'math.h' (ISO): *note Hyperbolic Functions::.

'float coshf (float X)'

     'math.h' (ISO): *note Hyperbolic Functions::.

'_FloatN coshfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Hyperbolic Functions::.

'_FloatNx coshfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Hyperbolic Functions::.

'long double coshl (long double X)'

     'math.h' (ISO): *note Hyperbolic Functions::.

'long double cosl (long double X)'

     'math.h' (ISO): *note Trig Functions::.

'complex double cpow (complex double BASE, complex double POWER)'

     'complex.h' (ISO): *note Exponents and Logarithms::.

'complex float cpowf (complex float BASE, complex float POWER)'

     'complex.h' (ISO): *note Exponents and Logarithms::.

'complex _FloatN cpowfN (complex _FloatN BASE, complex _FloatN POWER)'

     'complex.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'complex _FloatNx cpowfNx (complex _FloatNx BASE, complex _FloatNx POWER)'

     'complex.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'complex long double cpowl (complex long double BASE, complex long double POWER)'

     'complex.h' (ISO): *note Exponents and Logarithms::.

'complex double cproj (complex double Z)'

     'complex.h' (ISO): *note Operations on Complex::.

'complex float cprojf (complex float Z)'

     'complex.h' (ISO): *note Operations on Complex::.

'complex _FloatN cprojfN (complex _FloatN Z)'

     'complex.h' (TS 18661-3:2015): *note Operations on Complex::.

'complex _FloatNx cprojfNx (complex _FloatNx Z)'

     'complex.h' (TS 18661-3:2015): *note Operations on Complex::.

'complex long double cprojl (complex long double Z)'

     'complex.h' (ISO): *note Operations on Complex::.

'cpu_set_t'

     'sched.h' (GNU): *note CPU Affinity::.

'double creal (complex double Z)'

     'complex.h' (ISO): *note Operations on Complex::.

'float crealf (complex float Z)'

     'complex.h' (ISO): *note Operations on Complex::.

'_FloatN crealfN (complex _FloatN Z)'

     'complex.h' (TS 18661-3:2015): *note Operations on Complex::.

'_FloatNx crealfNx (complex _FloatNx Z)'

     'complex.h' (TS 18661-3:2015): *note Operations on Complex::.

'long double creall (complex long double Z)'

     'complex.h' (ISO): *note Operations on Complex::.

'int creat (const char *FILENAME, mode_t MODE)'

     'fcntl.h' (POSIX.1): *note Opening and Closing Files::.

'int creat64 (const char *FILENAME, mode_t MODE)'

     'fcntl.h' (Unix98): *note Opening and Closing Files::.

'char * crypt (const char *PHRASE, const char *SALT)'

     'unistd.h' (X/Open): *note Passphrase Storage::.

     'crypt.h' (GNU): *note Passphrase Storage::.

'char * crypt_r (const char *PHRASE, const char *SALT, struct crypt_data *DATA)'

     'crypt.h' (GNU): *note Passphrase Storage::.

'complex double csin (complex double Z)'

     'complex.h' (ISO): *note Trig Functions::.

'complex float csinf (complex float Z)'

     'complex.h' (ISO): *note Trig Functions::.

'complex _FloatN csinfN (complex _FloatN Z)'

     'complex.h' (TS 18661-3:2015): *note Trig Functions::.

'complex _FloatNx csinfNx (complex _FloatNx Z)'

     'complex.h' (TS 18661-3:2015): *note Trig Functions::.

'complex double csinh (complex double Z)'

     'complex.h' (ISO): *note Hyperbolic Functions::.

'complex float csinhf (complex float Z)'

     'complex.h' (ISO): *note Hyperbolic Functions::.

'complex _FloatN csinhfN (complex _FloatN Z)'

     'complex.h' (TS 18661-3:2015): *note Hyperbolic Functions::.

'complex _FloatNx csinhfNx (complex _FloatNx Z)'

     'complex.h' (TS 18661-3:2015): *note Hyperbolic Functions::.

'complex long double csinhl (complex long double Z)'

     'complex.h' (ISO): *note Hyperbolic Functions::.

'complex long double csinl (complex long double Z)'

     'complex.h' (ISO): *note Trig Functions::.

'complex double csqrt (complex double Z)'

     'complex.h' (ISO): *note Exponents and Logarithms::.

'complex float csqrtf (complex float Z)'

     'complex.h' (ISO): *note Exponents and Logarithms::.

'complex _FloatN csqrtfN (_FloatN Z)'

     'complex.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'complex _FloatNx csqrtfNx (complex _FloatNx Z)'

     'complex.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'complex long double csqrtl (complex long double Z)'

     'complex.h' (ISO): *note Exponents and Logarithms::.

'complex double ctan (complex double Z)'

     'complex.h' (ISO): *note Trig Functions::.

'complex float ctanf (complex float Z)'

     'complex.h' (ISO): *note Trig Functions::.

'complex _FloatN ctanfN (complex _FloatN Z)'

     'complex.h' (TS 18661-3:2015): *note Trig Functions::.

'complex _FloatNx ctanfNx (complex _FloatNx Z)'

     'complex.h' (TS 18661-3:2015): *note Trig Functions::.

'complex double ctanh (complex double Z)'

     'complex.h' (ISO): *note Hyperbolic Functions::.

'complex float ctanhf (complex float Z)'

     'complex.h' (ISO): *note Hyperbolic Functions::.

'complex _FloatN ctanhfN (complex _FloatN Z)'

     'complex.h' (TS 18661-3:2015): *note Hyperbolic Functions::.

'complex _FloatNx ctanhfNx (complex _FloatNx Z)'

     'complex.h' (TS 18661-3:2015): *note Hyperbolic Functions::.

'complex long double ctanhl (complex long double Z)'

     'complex.h' (ISO): *note Hyperbolic Functions::.

'complex long double ctanl (complex long double Z)'

     'complex.h' (ISO): *note Trig Functions::.

'char * ctermid (char *STRING)'

     'stdio.h' (POSIX.1): *note Identifying the Terminal::.

'char * ctime (const time_t *TIME)'

     'time.h' (ISO): *note Formatting Calendar Time::.

'char * ctime_r (const time_t *TIME, char *BUFFER)'

     'time.h' (POSIX.1c): *note Formatting Calendar Time::.

'char * cuserid (char *STRING)'

     'stdio.h' (POSIX.1): *note Who Logged In::.

'double daddl (long double X, long double Y)'

     'math.h' (TS 18661-1:2014): *note Misc FP Arithmetic::.

'int daylight'

     'time.h' (SVID): *note Time Zone Functions::.

'char * dcgettext (const char *DOMAINNAME, const char *MSGID, int CATEGORY)'

     'libintl.h' (GNU): *note Translation with gettext::.

'char * dcngettext (const char *DOMAIN, const char *MSGID1, const char *MSGID2, unsigned long int N, int CATEGORY)'

     'libintl.h' (GNU): *note Advanced gettext functions::.

'double ddivl (long double X, long double Y)'

     'math.h' (TS 18661-1:2014): *note Misc FP Arithmetic::.

'dev_t'

     'sys/types.h' (POSIX.1): *note Attribute Meanings::.

'char * dgettext (const char *DOMAINNAME, const char *MSGID)'

     'libintl.h' (GNU): *note Translation with gettext::.

'double difftime (time_t TIME1, time_t TIME0)'

     'time.h' (ISO): *note Elapsed Time::.

'struct dirent'

     'dirent.h' (POSIX.1): *note Directory Entries::.

'int dirfd (DIR *DIRSTREAM)'

     'dirent.h' (GNU): *note Opening a Directory::.

'char * dirname (char *PATH)'

     'libgen.h' (XPG): *note Finding Tokens in a String::.

'div_t div (int NUMERATOR, int DENOMINATOR)'

     'stdlib.h' (ISO): *note Integer Division::.

'div_t'

     'stdlib.h' (ISO): *note Integer Division::.

'double dmull (long double X, long double Y)'

     'math.h' (TS 18661-1:2014): *note Misc FP Arithmetic::.

'char * dngettext (const char *DOMAIN, const char *MSGID1, const char *MSGID2, unsigned long int N)'

     'libintl.h' (GNU): *note Advanced gettext functions::.

'double drand48 (void)'

     'stdlib.h' (SVID): *note SVID Random::.

'int drand48_r (struct drand48_data *BUFFER, double *RESULT)'

     'stdlib.h' (GNU): *note SVID Random::.

'double drem (double NUMERATOR, double DENOMINATOR)'

     'math.h' (BSD): *note Remainder Functions::.

'float dremf (float NUMERATOR, float DENOMINATOR)'

     'math.h' (BSD): *note Remainder Functions::.

'long double dreml (long double NUMERATOR, long double DENOMINATOR)'

     'math.h' (BSD): *note Remainder Functions::.

'double dsubl (long double X, long double Y)'

     'math.h' (TS 18661-1:2014): *note Misc FP Arithmetic::.

'int dup (int OLD)'

     'unistd.h' (POSIX.1): *note Duplicating Descriptors::.

'int dup2 (int OLD, int NEW)'

     'unistd.h' (POSIX.1): *note Duplicating Descriptors::.

'char * ecvt (double VALUE, int NDIGIT, int *DECPT, int *NEG)'

     'stdlib.h' (SVID): *note System V Number Conversion::.

     'stdlib.h' (Unix98): *note System V Number Conversion::.

'int ecvt_r (double VALUE, int NDIGIT, int *DECPT, int *NEG, char *BUF, size_t LEN)'

     'stdlib.h' (GNU): *note System V Number Conversion::.

'void endfsent (void)'

     'fstab.h' (BSD): *note fstab::.

'void endgrent (void)'

     'grp.h' (SVID): *note Scanning All Groups::.

     'grp.h' (BSD): *note Scanning All Groups::.

'void endhostent (void)'

     'netdb.h' (BSD): *note Host Names::.

'int endmntent (FILE *STREAM)'

     'mntent.h' (BSD): *note mtab::.

'void endnetent (void)'

     'netdb.h' (BSD): *note Networks Database::.

'void endnetgrent (void)'

     'netdb.h' (BSD): *note Lookup Netgroup::.

'void endprotoent (void)'

     'netdb.h' (BSD): *note Protocols Database::.

'void endpwent (void)'

     'pwd.h' (SVID): *note Scanning All Users::.

     'pwd.h' (BSD): *note Scanning All Users::.

'void endservent (void)'

     'netdb.h' (BSD): *note Services Database::.

'void endutent (void)'

     'utmp.h' (SVID): *note Manipulating the Database::.

'void endutxent (void)'

     'utmpx.h' (XPG4.2): *note XPG Functions::.

'char ** environ'

     'unistd.h' (POSIX.1): *note Environment Access::.

'error_t envz_add (char **ENVZ, size_t *ENVZ_LEN, const char *NAME, const char *VALUE)'

     'envz.h' (GNU): *note Envz Functions::.

'char * envz_entry (const char *ENVZ, size_t ENVZ_LEN, const char *NAME)'

     'envz.h' (GNU): *note Envz Functions::.

'char * envz_get (const char *ENVZ, size_t ENVZ_LEN, const char *NAME)'

     'envz.h' (GNU): *note Envz Functions::.

'error_t envz_merge (char **ENVZ, size_t *ENVZ_LEN, const char *ENVZ2, size_t ENVZ2_LEN, int OVERRIDE)'

     'envz.h' (GNU): *note Envz Functions::.

'void envz_remove (char **ENVZ, size_t *ENVZ_LEN, const char *NAME)'

     'envz.h' (GNU): *note Envz Functions::.

'void envz_strip (char **ENVZ, size_t *ENVZ_LEN)'

     'envz.h' (GNU): *note Envz Functions::.

'double erand48 (unsigned short int XSUBI[3])'

     'stdlib.h' (SVID): *note SVID Random::.

'int erand48_r (unsigned short int XSUBI[3], struct drand48_data *BUFFER, double *RESULT)'

     'stdlib.h' (GNU): *note SVID Random::.

'double erf (double X)'

     'math.h' (SVID): *note Special Functions::.

'double erfc (double X)'

     'math.h' (SVID): *note Special Functions::.

'float erfcf (float X)'

     'math.h' (SVID): *note Special Functions::.

'_FloatN erfcfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Special Functions::.

'_FloatNx erfcfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Special Functions::.

'long double erfcl (long double X)'

     'math.h' (SVID): *note Special Functions::.

'float erff (float X)'

     'math.h' (SVID): *note Special Functions::.

'_FloatN erffN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Special Functions::.

'_FloatNx erffNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Special Functions::.

'long double erfl (long double X)'

     'math.h' (SVID): *note Special Functions::.

'void err (int STATUS, const char *FORMAT, ...)'

     'err.h' (BSD): *note Error Messages::.

'volatile int errno'

     'errno.h' (ISO): *note Checking for Errors::.

'void error (int STATUS, int ERRNUM, const char *FORMAT, ...)'

     'error.h' (GNU): *note Error Messages::.

'void error_at_line (int STATUS, int ERRNUM, const char *FNAME, unsigned int LINENO, const char *FORMAT, ...)'

     'error.h' (GNU): *note Error Messages::.

'unsigned int error_message_count'

     'error.h' (GNU): *note Error Messages::.

'int error_one_per_line'

     'error.h' (GNU): *note Error Messages::.

'void (*error_print_progname) (void)'

     'error.h' (GNU): *note Error Messages::.

'void errx (int STATUS, const char *FORMAT, ...)'

     'err.h' (BSD): *note Error Messages::.

'int execl (const char *FILENAME, const char *ARG0, ...)'

     'unistd.h' (POSIX.1): *note Executing a File::.

'int execle (const char *FILENAME, const char *ARG0, ..., char *const ENV[])'

     'unistd.h' (POSIX.1): *note Executing a File::.

'int execlp (const char *FILENAME, const char *ARG0, ...)'

     'unistd.h' (POSIX.1): *note Executing a File::.

'int execv (const char *FILENAME, char *const ARGV[])'

     'unistd.h' (POSIX.1): *note Executing a File::.

'int execve (const char *FILENAME, char *const ARGV[], char *const ENV[])'

     'unistd.h' (POSIX.1): *note Executing a File::.

'int execvp (const char *FILENAME, char *const ARGV[])'

     'unistd.h' (POSIX.1): *note Executing a File::.

'void exit (int STATUS)'

     'stdlib.h' (ISO): *note Normal Termination::.

'struct exit_status'

     'utmp.h' (SVID): *note Manipulating the Database::.

'double exp (double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'double exp10 (double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'float exp10f (float X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'_FloatN exp10fN (_FloatN X)'

     'math.h' (TS 18661-4:2015): *note Exponents and Logarithms::.

'_FloatNx exp10fNx (_FloatNx X)'

     'math.h' (TS 18661-4:2015): *note Exponents and Logarithms::.

'long double exp10l (long double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'double exp2 (double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'float exp2f (float X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'_FloatN exp2fN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'_FloatNx exp2fNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'long double exp2l (long double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'float expf (float X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'_FloatN expfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'_FloatNx expfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'long double expl (long double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'void explicit_bzero (void *BLOCK, size_t LEN)'

     'string.h' (BSD): *note Erasing Sensitive Data::.

'double expm1 (double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'float expm1f (float X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'_FloatN expm1fN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'_FloatNx expm1fNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'long double expm1l (long double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'_FloatM fMaddfN (_FloatN X, _FloatN Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'_FloatM fMaddfNx (_FloatNx X, _FloatNx Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'_FloatM fMdivfN (_FloatN X, _FloatN Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'_FloatM fMdivfNx (_FloatNx X, _FloatNx Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'_FloatM fMmulfN (_FloatN X, _FloatN Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'_FloatM fMmulfNx (_FloatNx X, _FloatNx Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'_FloatM fMsubfN (_FloatN X, _FloatN Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'_FloatM fMsubfNx (_FloatNx X, _FloatNx Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'_FloatMx fMxaddfN (_FloatN X, _FloatN Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'_FloatMx fMxaddfNx (_FloatNx X, _FloatNx Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'_FloatMx fMxdivfN (_FloatN X, _FloatN Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'_FloatMx fMxdivfNx (_FloatNx X, _FloatNx Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'_FloatMx fMxmulfN (_FloatN X, _FloatN Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'_FloatMx fMxmulfNx (_FloatNx X, _FloatNx Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'_FloatMx fMxsubfN (_FloatN X, _FloatN Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'_FloatMx fMxsubfNx (_FloatNx X, _FloatNx Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'double fabs (double NUMBER)'

     'math.h' (ISO): *note Absolute Value::.

'float fabsf (float NUMBER)'

     'math.h' (ISO): *note Absolute Value::.

'_FloatN fabsfN (_FloatN NUMBER)'

     'math.h' (TS 18661-3:2015): *note Absolute Value::.

'_FloatNx fabsfNx (_FloatNx NUMBER)'

     'math.h' (TS 18661-3:2015): *note Absolute Value::.

'long double fabsl (long double NUMBER)'

     'math.h' (ISO): *note Absolute Value::.

'float fadd (double X, double Y)'

     'math.h' (TS 18661-1:2014): *note Misc FP Arithmetic::.

'float faddl (long double X, long double Y)'

     'math.h' (TS 18661-1:2014): *note Misc FP Arithmetic::.

'int fchdir (int FILEDES)'

     'unistd.h' (XPG): *note Working Directory::.

'int fchmod (int FILEDES, mode_t MODE)'

     'sys/stat.h' (BSD): *note Setting Permissions::.

'int fchown (int FILEDES, uid_t OWNER, gid_t GROUP)'

     'unistd.h' (BSD): *note File Owner::.

'int fclose (FILE *STREAM)'

     'stdio.h' (ISO): *note Closing Streams::.

'int fcloseall (void)'

     'stdio.h' (GNU): *note Closing Streams::.

'int fcntl (int FILEDES, int COMMAND, ...)'

     'fcntl.h' (POSIX.1): *note Control Operations::.

'char * fcvt (double VALUE, int NDIGIT, int *DECPT, int *NEG)'

     'stdlib.h' (SVID): *note System V Number Conversion::.

     'stdlib.h' (Unix98): *note System V Number Conversion::.

'int fcvt_r (double VALUE, int NDIGIT, int *DECPT, int *NEG, char *BUF, size_t LEN)'

     'stdlib.h' (SVID): *note System V Number Conversion::.

     'stdlib.h' (Unix98): *note System V Number Conversion::.

'fd_set'

     'sys/types.h' (BSD): *note Waiting for I/O::.

'int fdatasync (int FILDES)'

     'unistd.h' (POSIX): *note Synchronizing I/O::.

'double fdim (double X, double Y)'

     'math.h' (ISO): *note Misc FP Arithmetic::.

'float fdimf (float X, float Y)'

     'math.h' (ISO): *note Misc FP Arithmetic::.

'_FloatN fdimfN (_FloatN X, _FloatN Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'_FloatNx fdimfNx (_FloatNx X, _FloatNx Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'long double fdiml (long double X, long double Y)'

     'math.h' (ISO): *note Misc FP Arithmetic::.

'float fdiv (double X, double Y)'

     'math.h' (TS 18661-1:2014): *note Misc FP Arithmetic::.

'float fdivl (long double X, long double Y)'

     'math.h' (TS 18661-1:2014): *note Misc FP Arithmetic::.

'FILE * fdopen (int FILEDES, const char *OPENTYPE)'

     'stdio.h' (POSIX.1): *note Descriptors and Streams::.

'DIR * fdopendir (int FD)'

     'dirent.h' (GNU): *note Opening a Directory::.

'int feclearexcept (int EXCEPTS)'

     'fenv.h' (ISO): *note Status bit operations::.

'int fedisableexcept (int EXCEPTS)'

     'fenv.h' (GNU): *note Control Functions::.

'int feenableexcept (int EXCEPTS)'

     'fenv.h' (GNU): *note Control Functions::.

'int fegetenv (fenv_t *ENVP)'

     'fenv.h' (ISO): *note Control Functions::.

'int fegetexcept (void)'

     'fenv.h' (GNU): *note Control Functions::.

'int fegetexceptflag (fexcept_t *FLAGP, int EXCEPTS)'

     'fenv.h' (ISO): *note Status bit operations::.

'int fegetmode (femode_t *MODEP)'

     'fenv.h' (ISO): *note Control Functions::.

'int fegetround (void)'

     'fenv.h' (ISO): *note Rounding::.

'int feholdexcept (fenv_t *ENVP)'

     'fenv.h' (ISO): *note Control Functions::.

'int feof (FILE *STREAM)'

     'stdio.h' (ISO): *note EOF and Errors::.

'int feof_unlocked (FILE *STREAM)'

     'stdio.h' (GNU): *note EOF and Errors::.

'int feraiseexcept (int EXCEPTS)'

     'fenv.h' (ISO): *note Status bit operations::.

'int ferror (FILE *STREAM)'

     'stdio.h' (ISO): *note EOF and Errors::.

'int ferror_unlocked (FILE *STREAM)'

     'stdio.h' (GNU): *note EOF and Errors::.

'int fesetenv (const fenv_t *ENVP)'

     'fenv.h' (ISO): *note Control Functions::.

'int fesetexcept (int EXCEPTS)'

     'fenv.h' (ISO): *note Status bit operations::.

'int fesetexceptflag (const fexcept_t *FLAGP, int EXCEPTS)'

     'fenv.h' (ISO): *note Status bit operations::.

'int fesetmode (const femode_t *MODEP)'

     'fenv.h' (ISO): *note Control Functions::.

'int fesetround (int ROUND)'

     'fenv.h' (ISO): *note Rounding::.

'int fetestexcept (int EXCEPTS)'

     'fenv.h' (ISO): *note Status bit operations::.

'int fetestexceptflag (const fexcept_t *FLAGP, int EXCEPTS)'

     'fenv.h' (ISO): *note Status bit operations::.

'int feupdateenv (const fenv_t *ENVP)'

     'fenv.h' (ISO): *note Control Functions::.

'int fflush (FILE *STREAM)'

     'stdio.h' (ISO): *note Flushing Buffers::.

'int fflush_unlocked (FILE *STREAM)'

     'stdio.h' (POSIX): *note Flushing Buffers::.

'int fgetc (FILE *STREAM)'

     'stdio.h' (ISO): *note Character Input::.

'int fgetc_unlocked (FILE *STREAM)'

     'stdio.h' (POSIX): *note Character Input::.

'struct group * fgetgrent (FILE *STREAM)'

     'grp.h' (SVID): *note Scanning All Groups::.

'int fgetgrent_r (FILE *STREAM, struct group *RESULT_BUF, char *BUFFER, size_t BUFLEN, struct group **RESULT)'

     'grp.h' (GNU): *note Scanning All Groups::.

'int fgetpos (FILE *STREAM, fpos_t *POSITION)'

     'stdio.h' (ISO): *note Portable Positioning::.

'int fgetpos64 (FILE *STREAM, fpos64_t *POSITION)'

     'stdio.h' (Unix98): *note Portable Positioning::.

'struct passwd * fgetpwent (FILE *STREAM)'

     'pwd.h' (SVID): *note Scanning All Users::.

'int fgetpwent_r (FILE *STREAM, struct passwd *RESULT_BUF, char *BUFFER, size_t BUFLEN, struct passwd **RESULT)'

     'pwd.h' (GNU): *note Scanning All Users::.

'char * fgets (char *S, int COUNT, FILE *STREAM)'

     'stdio.h' (ISO): *note Line Input::.

'char * fgets_unlocked (char *S, int COUNT, FILE *STREAM)'

     'stdio.h' (GNU): *note Line Input::.

'wint_t fgetwc (FILE *STREAM)'

     'wchar.h' (ISO): *note Character Input::.

'wint_t fgetwc_unlocked (FILE *STREAM)'

     'wchar.h' (GNU): *note Character Input::.

'wchar_t * fgetws (wchar_t *WS, int COUNT, FILE *STREAM)'

     'wchar.h' (ISO): *note Line Input::.

'wchar_t * fgetws_unlocked (wchar_t *WS, int COUNT, FILE *STREAM)'

     'wchar.h' (GNU): *note Line Input::.

'int fileno (FILE *STREAM)'

     'stdio.h' (POSIX.1): *note Descriptors and Streams::.

'int fileno_unlocked (FILE *STREAM)'

     'stdio.h' (GNU): *note Descriptors and Streams::.

'int finite (double X)'

     'math.h' (BSD): *note Floating Point Classes::.

'int finitef (float X)'

     'math.h' (BSD): *note Floating Point Classes::.

'int finitel (long double X)'

     'math.h' (BSD): *note Floating Point Classes::.

'struct flock'

     'fcntl.h' (POSIX.1): *note File Locks::.

'void flockfile (FILE *STREAM)'

     'stdio.h' (POSIX): *note Streams and Threads::.

'double floor (double X)'

     'math.h' (ISO): *note Rounding Functions::.

'float floorf (float X)'

     'math.h' (ISO): *note Rounding Functions::.

'_FloatN floorfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'_FloatNx floorfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'long double floorl (long double X)'

     'math.h' (ISO): *note Rounding Functions::.

'double fma (double X, double Y, double Z)'

     'math.h' (ISO): *note Misc FP Arithmetic::.

'float fmaf (float X, float Y, float Z)'

     'math.h' (ISO): *note Misc FP Arithmetic::.

'_FloatN fmafN (_FloatN X, _FloatN Y, _FloatN Z)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'_FloatNx fmafNx (_FloatNx X, _FloatNx Y, _FloatNx Z)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'long double fmal (long double X, long double Y, long double Z)'

     'math.h' (ISO): *note Misc FP Arithmetic::.

'double fmax (double X, double Y)'

     'math.h' (ISO): *note Misc FP Arithmetic::.

'float fmaxf (float X, float Y)'

     'math.h' (ISO): *note Misc FP Arithmetic::.

'_FloatN fmaxfN (_FloatN X, _FloatN Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'_FloatNx fmaxfNx (_FloatNx X, _FloatNx Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'long double fmaxl (long double X, long double Y)'

     'math.h' (ISO): *note Misc FP Arithmetic::.

'double fmaxmag (double X, double Y)'

     'math.h' (ISO): *note Misc FP Arithmetic::.

'float fmaxmagf (float X, float Y)'

     'math.h' (ISO): *note Misc FP Arithmetic::.

'_FloatN fmaxmagfN (_FloatN X, _FloatN Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'_FloatNx fmaxmagfNx (_FloatNx X, _FloatNx Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'long double fmaxmagl (long double X, long double Y)'

     'math.h' (ISO): *note Misc FP Arithmetic::.

'FILE * fmemopen (void *BUF, size_t SIZE, const char *OPENTYPE)'

     'stdio.h' (GNU): *note String Streams::.

'double fmin (double X, double Y)'

     'math.h' (ISO): *note Misc FP Arithmetic::.

'float fminf (float X, float Y)'

     'math.h' (ISO): *note Misc FP Arithmetic::.

'_FloatN fminfN (_FloatN X, _FloatN Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'_FloatNx fminfNx (_FloatNx X, _FloatNx Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'long double fminl (long double X, long double Y)'

     'math.h' (ISO): *note Misc FP Arithmetic::.

'double fminmag (double X, double Y)'

     'math.h' (ISO): *note Misc FP Arithmetic::.

'float fminmagf (float X, float Y)'

     'math.h' (ISO): *note Misc FP Arithmetic::.

'_FloatN fminmagfN (_FloatN X, _FloatN Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'_FloatNx fminmagfNx (_FloatNx X, _FloatNx Y)'

     'math.h' (TS 18661-3:2015): *note Misc FP Arithmetic::.

'long double fminmagl (long double X, long double Y)'

     'math.h' (ISO): *note Misc FP Arithmetic::.

'double fmod (double NUMERATOR, double DENOMINATOR)'

     'math.h' (ISO): *note Remainder Functions::.

'float fmodf (float NUMERATOR, float DENOMINATOR)'

     'math.h' (ISO): *note Remainder Functions::.

'_FloatN fmodfN (_FloatN NUMERATOR, _FloatN DENOMINATOR)'

     'math.h' (TS 18661-3:2015): *note Remainder Functions::.

'_FloatNx fmodfNx (_FloatNx NUMERATOR, _FloatNx DENOMINATOR)'

     'math.h' (TS 18661-3:2015): *note Remainder Functions::.

'long double fmodl (long double NUMERATOR, long double DENOMINATOR)'

     'math.h' (ISO): *note Remainder Functions::.

'int fmtmsg (long int CLASSIFICATION, const char *LABEL, int SEVERITY, const char *TEXT, const char *ACTION, const char *TAG)'

     'fmtmsg.h' (XPG): *note Printing Formatted Messages::.

'float fmul (double X, double Y)'

     'math.h' (TS 18661-1:2014): *note Misc FP Arithmetic::.

'float fmull (long double X, long double Y)'

     'math.h' (TS 18661-1:2014): *note Misc FP Arithmetic::.

'int fnmatch (const char *PATTERN, const char *STRING, int FLAGS)'

     'fnmatch.h' (POSIX.2): *note Wildcard Matching::.

'FILE * fopen (const char *FILENAME, const char *OPENTYPE)'

     'stdio.h' (ISO): *note Opening Streams::.

'FILE * fopen64 (const char *FILENAME, const char *OPENTYPE)'

     'stdio.h' (Unix98): *note Opening Streams::.

'FILE * fopencookie (void *COOKIE, const char *OPENTYPE, cookie_io_functions_t IO-FUNCTIONS)'

     'stdio.h' (GNU): *note Streams and Cookies::.

'pid_t fork (void)'

     'unistd.h' (POSIX.1): *note Creating a Process::.

'int forkpty (int *AMASTER, char *NAME, const struct termios *TERMP, const struct winsize *WINP)'

     'pty.h' (BSD): *note Pseudo-Terminal Pairs::.

'long int fpathconf (int FILEDES, int PARAMETER)'

     'unistd.h' (POSIX.1): *note Pathconf::.

'int fpclassify (_float-type_ X)'

     'math.h' (ISO): *note Floating Point Classes::.

'fpos64_t'

     'stdio.h' (Unix98): *note Portable Positioning::.

'fpos_t'

     'stdio.h' (ISO): *note Portable Positioning::.

'int fprintf (FILE *STREAM, const char *TEMPLATE, ...)'

     'stdio.h' (ISO): *note Formatted Output Functions::.

'int fputc (int C, FILE *STREAM)'

     'stdio.h' (ISO): *note Simple Output::.

'int fputc_unlocked (int C, FILE *STREAM)'

     'stdio.h' (POSIX): *note Simple Output::.

'int fputs (const char *S, FILE *STREAM)'

     'stdio.h' (ISO): *note Simple Output::.

'int fputs_unlocked (const char *S, FILE *STREAM)'

     'stdio.h' (GNU): *note Simple Output::.

'wint_t fputwc (wchar_t WC, FILE *STREAM)'

     'wchar.h' (ISO): *note Simple Output::.

'wint_t fputwc_unlocked (wchar_t WC, FILE *STREAM)'

     'wchar.h' (POSIX): *note Simple Output::.

'int fputws (const wchar_t *WS, FILE *STREAM)'

     'wchar.h' (ISO): *note Simple Output::.

'int fputws_unlocked (const wchar_t *WS, FILE *STREAM)'

     'wchar.h' (GNU): *note Simple Output::.

'size_t fread (void *DATA, size_t SIZE, size_t COUNT, FILE *STREAM)'

     'stdio.h' (ISO): *note Block Input/Output::.

'size_t fread_unlocked (void *DATA, size_t SIZE, size_t COUNT, FILE *STREAM)'

     'stdio.h' (GNU): *note Block Input/Output::.

'void free (void *PTR)'

     'malloc.h' (ISO): *note Freeing after Malloc::.

     'stdlib.h' (ISO): *note Freeing after Malloc::.

'FILE * freopen (const char *FILENAME, const char *OPENTYPE, FILE *STREAM)'

     'stdio.h' (ISO): *note Opening Streams::.

'FILE * freopen64 (const char *FILENAME, const char *OPENTYPE, FILE *STREAM)'

     'stdio.h' (Unix98): *note Opening Streams::.

'double frexp (double VALUE, int *EXPONENT)'

     'math.h' (ISO): *note Normalization Functions::.

'float frexpf (float VALUE, int *EXPONENT)'

     'math.h' (ISO): *note Normalization Functions::.

'_FloatN frexpfN (_FloatN VALUE, int *EXPONENT)'

     'math.h' (TS 18661-3:2015): *note Normalization Functions::.

'_FloatNx frexpfNx (_FloatNx VALUE, int *EXPONENT)'

     'math.h' (TS 18661-3:2015): *note Normalization Functions::.

'long double frexpl (long double VALUE, int *EXPONENT)'

     'math.h' (ISO): *note Normalization Functions::.

'intmax_t fromfp (double X, int ROUND, unsigned int WIDTH)'

     'math.h' (ISO): *note Rounding Functions::.

'intmax_t fromfpf (float X, int ROUND, unsigned int WIDTH)'

     'math.h' (ISO): *note Rounding Functions::.

'intmax_t fromfpfN (_FloatN X, int ROUND, unsigned int WIDTH)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'intmax_t fromfpfNx (_FloatNx X, int ROUND, unsigned int WIDTH)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'intmax_t fromfpl (long double X, int ROUND, unsigned int WIDTH)'

     'math.h' (ISO): *note Rounding Functions::.

'intmax_t fromfpx (double X, int ROUND, unsigned int WIDTH)'

     'math.h' (ISO): *note Rounding Functions::.

'intmax_t fromfpxf (float X, int ROUND, unsigned int WIDTH)'

     'math.h' (ISO): *note Rounding Functions::.

'intmax_t fromfpxfN (_FloatN X, int ROUND, unsigned int WIDTH)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'intmax_t fromfpxfNx (_FloatNx X, int ROUND, unsigned int WIDTH)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'intmax_t fromfpxl (long double X, int ROUND, unsigned int WIDTH)'

     'math.h' (ISO): *note Rounding Functions::.

'int fscanf (FILE *STREAM, const char *TEMPLATE, ...)'

     'stdio.h' (ISO): *note Formatted Input Functions::.

'int fseek (FILE *STREAM, long int OFFSET, int WHENCE)'

     'stdio.h' (ISO): *note File Positioning::.

'int fseeko (FILE *STREAM, off_t OFFSET, int WHENCE)'

     'stdio.h' (Unix98): *note File Positioning::.

'int fseeko64 (FILE *STREAM, off64_t OFFSET, int WHENCE)'

     'stdio.h' (Unix98): *note File Positioning::.

'int fsetpos (FILE *STREAM, const fpos_t *POSITION)'

     'stdio.h' (ISO): *note Portable Positioning::.

'int fsetpos64 (FILE *STREAM, const fpos64_t *POSITION)'

     'stdio.h' (Unix98): *note Portable Positioning::.

'struct fstab'

     'fstab.h' (BSD): *note fstab::.

'int fstat (int FILEDES, struct stat *BUF)'

     'sys/stat.h' (POSIX.1): *note Reading Attributes::.

'int fstat64 (int FILEDES, struct stat64 *BUF)'

     'sys/stat.h' (Unix98): *note Reading Attributes::.

'float fsub (double X, double Y)'

     'math.h' (TS 18661-1:2014): *note Misc FP Arithmetic::.

'float fsubl (long double X, long double Y)'

     'math.h' (TS 18661-1:2014): *note Misc FP Arithmetic::.

'int fsync (int FILDES)'

     'unistd.h' (POSIX): *note Synchronizing I/O::.

'long int ftell (FILE *STREAM)'

     'stdio.h' (ISO): *note File Positioning::.

'off_t ftello (FILE *STREAM)'

     'stdio.h' (Unix98): *note File Positioning::.

'off64_t ftello64 (FILE *STREAM)'

     'stdio.h' (Unix98): *note File Positioning::.

'int ftruncate (int FD, off_t LENGTH)'

     'unistd.h' (POSIX): *note File Size::.

'int ftruncate64 (int ID, off64_t LENGTH)'

     'unistd.h' (Unix98): *note File Size::.

'int ftrylockfile (FILE *STREAM)'

     'stdio.h' (POSIX): *note Streams and Threads::.

'int ftw (const char *FILENAME, __ftw_func_t FUNC, int DESCRIPTORS)'

     'ftw.h' (SVID): *note Working with Directory Trees::.

'int ftw64 (const char *FILENAME, __ftw64_func_t FUNC, int DESCRIPTORS)'

     'ftw.h' (Unix98): *note Working with Directory Trees::.

'void funlockfile (FILE *STREAM)'

     'stdio.h' (POSIX): *note Streams and Threads::.

'int futimes (int FD, const struct timeval TVP[2])'

     'sys/time.h' (BSD): *note File Times::.

'int fwide (FILE *STREAM, int MODE)'

     'wchar.h' (ISO): *note Streams and I18N::.

'int fwprintf (FILE *STREAM, const wchar_t *TEMPLATE, ...)'

     'wchar.h' (ISO): *note Formatted Output Functions::.

'size_t fwrite (const void *DATA, size_t SIZE, size_t COUNT, FILE *STREAM)'

     'stdio.h' (ISO): *note Block Input/Output::.

'size_t fwrite_unlocked (const void *DATA, size_t SIZE, size_t COUNT, FILE *STREAM)'

     'stdio.h' (GNU): *note Block Input/Output::.

'int fwscanf (FILE *STREAM, const wchar_t *TEMPLATE, ...)'

     'wchar.h' (ISO): *note Formatted Input Functions::.

'double gamma (double X)'

     'math.h' (SVID): *note Special Functions::.

'float gammaf (float X)'

     'math.h' (SVID): *note Special Functions::.

'long double gammal (long double X)'

     'math.h' (SVID): *note Special Functions::.

'char * gcvt (double VALUE, int NDIGIT, char *BUF)'

     'stdlib.h' (SVID): *note System V Number Conversion::.

     'stdlib.h' (Unix98): *note System V Number Conversion::.

'long int get_avphys_pages (void)'

     'sys/sysinfo.h' (GNU): *note Query Memory Parameters::.

'char * get_current_dir_name (void)'

     'unistd.h' (GNU): *note Working Directory::.

'int get_nprocs (void)'

     'sys/sysinfo.h' (GNU): *note Processor Resources::.

'int get_nprocs_conf (void)'

     'sys/sysinfo.h' (GNU): *note Processor Resources::.

'long int get_phys_pages (void)'

     'sys/sysinfo.h' (GNU): *note Query Memory Parameters::.

'unsigned long int getauxval (unsigned long int TYPE)'

     'sys/auxv.h' (???): *note Auxiliary Vector::.

'int getc (FILE *STREAM)'

     'stdio.h' (ISO): *note Character Input::.

'int getc_unlocked (FILE *STREAM)'

     'stdio.h' (POSIX): *note Character Input::.

'int getchar (void)'

     'stdio.h' (ISO): *note Character Input::.

'int getchar_unlocked (void)'

     'stdio.h' (POSIX): *note Character Input::.

'int getcontext (ucontext_t *UCP)'

     'ucontext.h' (SVID): *note System V contexts::.

'char * getcwd (char *BUFFER, size_t SIZE)'

     'unistd.h' (POSIX.1): *note Working Directory::.

'struct tm * getdate (const char *STRING)'

     'time.h' (Unix98): *note General Time String Parsing::.

'getdate_err'

     'time.h' (Unix98): *note General Time String Parsing::.

'int getdate_r (const char *STRING, struct tm *TP)'

     'time.h' (GNU): *note General Time String Parsing::.

'ssize_t getdelim (char **LINEPTR, size_t *N, int DELIMITER, FILE *STREAM)'

     'stdio.h' (GNU): *note Line Input::.

'int getdomainnname (char *NAME, size_t LENGTH)'

     'unistd.h' (???): *note Host Identification::.

'gid_t getegid (void)'

     'unistd.h' (POSIX.1): *note Reading Persona::.

'int getentropy (void *BUFFER, size_t LENGTH)'

     'sys/random.h' (GNU): *note Unpredictable Bytes::.

'char * getenv (const char *NAME)'

     'stdlib.h' (ISO): *note Environment Access::.

'uid_t geteuid (void)'

     'unistd.h' (POSIX.1): *note Reading Persona::.

'struct fstab * getfsent (void)'

     'fstab.h' (BSD): *note fstab::.

'struct fstab * getfsfile (const char *NAME)'

     'fstab.h' (BSD): *note fstab::.

'struct fstab * getfsspec (const char *NAME)'

     'fstab.h' (BSD): *note fstab::.

'gid_t getgid (void)'

     'unistd.h' (POSIX.1): *note Reading Persona::.

'struct group * getgrent (void)'

     'grp.h' (SVID): *note Scanning All Groups::.

     'grp.h' (BSD): *note Scanning All Groups::.

'int getgrent_r (struct group *RESULT_BUF, char *BUFFER, size_t BUFLEN, struct group **RESULT)'

     'grp.h' (GNU): *note Scanning All Groups::.

'struct group * getgrgid (gid_t GID)'

     'grp.h' (POSIX.1): *note Lookup Group::.

'int getgrgid_r (gid_t GID, struct group *RESULT_BUF, char *BUFFER, size_t BUFLEN, struct group **RESULT)'

     'grp.h' (POSIX.1c): *note Lookup Group::.

'struct group * getgrnam (const char *NAME)'

     'grp.h' (SVID): *note Lookup Group::.

     'grp.h' (BSD): *note Lookup Group::.

'int getgrnam_r (const char *NAME, struct group *RESULT_BUF, char *BUFFER, size_t BUFLEN, struct group **RESULT)'

     'grp.h' (POSIX.1c): *note Lookup Group::.

'int getgrouplist (const char *USER, gid_t GROUP, gid_t *GROUPS, int *NGROUPS)'

     'grp.h' (BSD): *note Setting Groups::.

'int getgroups (int COUNT, gid_t *GROUPS)'

     'unistd.h' (POSIX.1): *note Reading Persona::.

'struct hostent * gethostbyaddr (const void *ADDR, socklen_t LENGTH, int FORMAT)'

     'netdb.h' (BSD): *note Host Names::.

'int gethostbyaddr_r (const void *ADDR, socklen_t LENGTH, int FORMAT, struct hostent *restrict RESULT_BUF, char *restrict BUF, size_t BUFLEN, struct hostent **restrict RESULT, int *restrict H_ERRNOP)'

     'netdb.h' (GNU): *note Host Names::.

'struct hostent * gethostbyname (const char *NAME)'

     'netdb.h' (BSD): *note Host Names::.

'struct hostent * gethostbyname2 (const char *NAME, int AF)'

     'netdb.h' (IPv6 Basic API): *note Host Names::.

'int gethostbyname2_r (const char *NAME, int AF, struct hostent *restrict RESULT_BUF, char *restrict BUF, size_t BUFLEN, struct hostent **restrict RESULT, int *restrict H_ERRNOP)'

     'netdb.h' (GNU): *note Host Names::.

'int gethostbyname_r (const char *restrict NAME, struct hostent *restrict RESULT_BUF, char *restrict BUF, size_t BUFLEN, struct hostent **restrict RESULT, int *restrict H_ERRNOP)'

     'netdb.h' (GNU): *note Host Names::.

'struct hostent * gethostent (void)'

     'netdb.h' (BSD): *note Host Names::.

'long int gethostid (void)'

     'unistd.h' (BSD): *note Host Identification::.

'int gethostname (char *NAME, size_t SIZE)'

     'unistd.h' (BSD): *note Host Identification::.

'int getitimer (int WHICH, struct itimerval *OLD)'

     'sys/time.h' (BSD): *note Setting an Alarm::.

'ssize_t getline (char **LINEPTR, size_t *N, FILE *STREAM)'

     'stdio.h' (GNU): *note Line Input::.

'int getloadavg (double LOADAVG[], int NELEM)'

     'stdlib.h' (BSD): *note Processor Resources::.

'char * getlogin (void)'

     'unistd.h' (POSIX.1): *note Who Logged In::.

'struct mntent * getmntent (FILE *STREAM)'

     'mntent.h' (BSD): *note mtab::.

'struct mntent * getmntent_r (FILE *STREAM, struct mntent *RESULT, char *BUFFER, int BUFSIZE)'

     'mntent.h' (BSD): *note mtab::.

'struct netent * getnetbyaddr (uint32_t NET, int TYPE)'

     'netdb.h' (BSD): *note Networks Database::.

'struct netent * getnetbyname (const char *NAME)'

     'netdb.h' (BSD): *note Networks Database::.

'struct netent * getnetent (void)'

     'netdb.h' (BSD): *note Networks Database::.

'int getnetgrent (char **HOSTP, char **USERP, char **DOMAINP)'

     'netdb.h' (BSD): *note Lookup Netgroup::.

'int getnetgrent_r (char **HOSTP, char **USERP, char **DOMAINP, char *BUFFER, size_t BUFLEN)'

     'netdb.h' (GNU): *note Lookup Netgroup::.

'int getopt (int ARGC, char *const *ARGV, const char *OPTIONS)'

     'unistd.h' (POSIX.2): *note Using Getopt::.

'int getopt_long (int ARGC, char *const *ARGV, const char *SHORTOPTS, const struct option *LONGOPTS, int *INDEXPTR)'

     'getopt.h' (GNU): *note Getopt Long Options::.

'int getopt_long_only (int ARGC, char *const *ARGV, const char *SHORTOPTS, const struct option *LONGOPTS, int *INDEXPTR)'

     'getopt.h' (GNU): *note Getopt Long Options::.

'int getpagesize (void)'

     'unistd.h' (BSD): *note Query Memory Parameters::.

'char * getpass (const char *PROMPT)'

     'unistd.h' (BSD): *note getpass::.

'double getpayload (const double *X)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'float getpayloadf (const float *X)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'_FloatN getpayloadfN (const _FloatN *X)'

     'math.h' (TS 18661-3:2015): *note FP Bit Twiddling::.

'_FloatNx getpayloadfNx (const _FloatNx *X)'

     'math.h' (TS 18661-3:2015): *note FP Bit Twiddling::.

'long double getpayloadl (const long double *X)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'int getpeername (int SOCKET, struct sockaddr *ADDR, socklen_t *LENGTH-PTR)'

     'sys/socket.h' (BSD): *note Who is Connected::.

'int getpgid (pid_t PID)'

     'unistd.h' (POSIX.1): *note Process Group Functions::.

'pid_t getpgrp (void)'

     'unistd.h' (POSIX.1): *note Process Group Functions::.

'pid_t getpid (void)'

     'unistd.h' (POSIX.1): *note Process Identification::.

'pid_t getppid (void)'

     'unistd.h' (POSIX.1): *note Process Identification::.

'int getpriority (int CLASS, int ID)'

     'sys/resource.h' (BSD): *note Traditional Scheduling Functions::.

     'sys/resource.h' (POSIX): *note Traditional Scheduling Functions::.

'struct protoent * getprotobyname (const char *NAME)'

     'netdb.h' (BSD): *note Protocols Database::.

'struct protoent * getprotobynumber (int PROTOCOL)'

     'netdb.h' (BSD): *note Protocols Database::.

'struct protoent * getprotoent (void)'

     'netdb.h' (BSD): *note Protocols Database::.

'int getpt (void)'

     'stdlib.h' (GNU): *note Allocation::.

'struct passwd * getpwent (void)'

     'pwd.h' (POSIX.1): *note Scanning All Users::.

'int getpwent_r (struct passwd *RESULT_BUF, char *BUFFER, size_t BUFLEN, struct passwd **RESULT)'

     'pwd.h' (GNU): *note Scanning All Users::.

'struct passwd * getpwnam (const char *NAME)'

     'pwd.h' (POSIX.1): *note Lookup User::.

'int getpwnam_r (const char *NAME, struct passwd *RESULT_BUF, char *BUFFER, size_t BUFLEN, struct passwd **RESULT)'

     'pwd.h' (POSIX.1c): *note Lookup User::.

'struct passwd * getpwuid (uid_t UID)'

     'pwd.h' (POSIX.1): *note Lookup User::.

'int getpwuid_r (uid_t UID, struct passwd *RESULT_BUF, char *BUFFER, size_t BUFLEN, struct passwd **RESULT)'

     'pwd.h' (POSIX.1c): *note Lookup User::.

'ssize_t getrandom (void *BUFFER, size_t LENGTH, unsigned int FLAGS)'

     'sys/random.h' (GNU): *note Unpredictable Bytes::.

'int getrlimit (int RESOURCE, struct rlimit *RLP)'

     'sys/resource.h' (BSD): *note Limits on Resources::.

'int getrlimit64 (int RESOURCE, struct rlimit64 *RLP)'

     'sys/resource.h' (Unix98): *note Limits on Resources::.

'int getrusage (int PROCESSES, struct rusage *RUSAGE)'

     'sys/resource.h' (BSD): *note Resource Usage::.

'char * gets (char *S)'

     'stdio.h' (ISO): *note Line Input::.

'struct servent * getservbyname (const char *NAME, const char *PROTO)'

     'netdb.h' (BSD): *note Services Database::.

'struct servent * getservbyport (int PORT, const char *PROTO)'

     'netdb.h' (BSD): *note Services Database::.

'struct servent * getservent (void)'

     'netdb.h' (BSD): *note Services Database::.

'pid_t getsid (pid_t PID)'

     'unistd.h' (SVID): *note Process Group Functions::.

'int getsockname (int SOCKET, struct sockaddr *ADDR, socklen_t *LENGTH-PTR)'

     'sys/socket.h' (BSD): *note Reading Address::.

'int getsockopt (int SOCKET, int LEVEL, int OPTNAME, void *OPTVAL, socklen_t *OPTLEN-PTR)'

     'sys/socket.h' (BSD): *note Socket Option Functions::.

'int getsubopt (char **OPTIONP, char *const *TOKENS, char **VALUEP)'

     'stdlib.h' (???): *note Suboptions::.

'char * gettext (const char *MSGID)'

     'libintl.h' (GNU): *note Translation with gettext::.

'int gettimeofday (struct timeval *TP, struct timezone *TZP)'

     'sys/time.h' (BSD): *note High-Resolution Calendar::.

'uid_t getuid (void)'

     'unistd.h' (POSIX.1): *note Reading Persona::.

'mode_t getumask (void)'

     'sys/stat.h' (GNU): *note Setting Permissions::.

'struct utmp * getutent (void)'

     'utmp.h' (SVID): *note Manipulating the Database::.

'int getutent_r (struct utmp *BUFFER, struct utmp **RESULT)'

     'utmp.h' (GNU): *note Manipulating the Database::.

'struct utmp * getutid (const struct utmp *ID)'

     'utmp.h' (SVID): *note Manipulating the Database::.

'int getutid_r (const struct utmp *ID, struct utmp *BUFFER, struct utmp **RESULT)'

     'utmp.h' (GNU): *note Manipulating the Database::.

'struct utmp * getutline (const struct utmp *LINE)'

     'utmp.h' (SVID): *note Manipulating the Database::.

'int getutline_r (const struct utmp *LINE, struct utmp *BUFFER, struct utmp **RESULT)'

     'utmp.h' (GNU): *note Manipulating the Database::.

'int getutmp (const struct utmpx *UTMPX, struct utmp *UTMP)'

     'utmp.h' (GNU): *note XPG Functions::.

     'utmpx.h' (GNU): *note XPG Functions::.

'int getutmpx (const struct utmp *UTMP, struct utmpx *UTMPX)'

     'utmp.h' (GNU): *note XPG Functions::.

     'utmpx.h' (GNU): *note XPG Functions::.

'struct utmpx * getutxent (void)'

     'utmpx.h' (XPG4.2): *note XPG Functions::.

'struct utmpx * getutxid (const struct utmpx *ID)'

     'utmpx.h' (XPG4.2): *note XPG Functions::.

'struct utmpx * getutxline (const struct utmpx *LINE)'

     'utmpx.h' (XPG4.2): *note XPG Functions::.

'int getw (FILE *STREAM)'

     'stdio.h' (SVID): *note Character Input::.

'wint_t getwc (FILE *STREAM)'

     'wchar.h' (ISO): *note Character Input::.

'wint_t getwc_unlocked (FILE *STREAM)'

     'wchar.h' (GNU): *note Character Input::.

'wint_t getwchar (void)'

     'wchar.h' (ISO): *note Character Input::.

'wint_t getwchar_unlocked (void)'

     'wchar.h' (GNU): *note Character Input::.

'char * getwd (char *BUFFER)'

     'unistd.h' (BSD): *note Working Directory::.

'gid_t'

     'sys/types.h' (POSIX.1): *note Reading Persona::.

'int glob (const char *PATTERN, int FLAGS, int (*ERRFUNC) (const char *FILENAME, int ERROR-CODE), glob_t *VECTOR-PTR)'

     'glob.h' (POSIX.2): *note Calling Glob::.

'int glob64 (const char *PATTERN, int FLAGS, int (*ERRFUNC) (const char *FILENAME, int ERROR-CODE), glob64_t *VECTOR-PTR)'

     'glob.h' (GNU): *note Calling Glob::.

'glob64_t'

     'glob.h' (GNU): *note Calling Glob::.

'glob_t'

     'glob.h' (POSIX.2): *note Calling Glob::.

'void globfree (glob_t *PGLOB)'

     'glob.h' (POSIX.2): *note More Flags for Globbing::.

'void globfree64 (glob64_t *PGLOB)'

     'glob.h' (GNU): *note More Flags for Globbing::.

'struct tm * gmtime (const time_t *TIME)'

     'time.h' (ISO): *note Broken-down Time::.

'struct tm * gmtime_r (const time_t *TIME, struct tm *RESULTP)'

     'time.h' (POSIX.1c): *note Broken-down Time::.

'int grantpt (int FILEDES)'

     'stdlib.h' (SVID): *note Allocation::.

     'stdlib.h' (XPG4.2): *note Allocation::.

'struct group'

     'grp.h' (POSIX.1): *note Group Data Structure::.

'int gsignal (int SIGNUM)'

     'signal.h' (SVID): *note Signaling Yourself::.

'int gtty (int FILEDES, struct sgttyb *ATTRIBUTES)'

     'sgtty.h' (BSD): *note BSD Terminal Modes::.

'char * hasmntopt (const struct mntent *MNT, const char *OPT)'

     'mntent.h' (BSD): *note mtab::.

'int hcreate (size_t NEL)'

     'search.h' (SVID): *note Hash Search Function::.

'int hcreate_r (size_t NEL, struct hsearch_data *HTAB)'

     'search.h' (GNU): *note Hash Search Function::.

'void hdestroy (void)'

     'search.h' (SVID): *note Hash Search Function::.

'void hdestroy_r (struct hsearch_data *HTAB)'

     'search.h' (GNU): *note Hash Search Function::.

'struct hostent'

     'netdb.h' (BSD): *note Host Names::.

'ENTRY * hsearch (ENTRY ITEM, ACTION ACTION)'

     'search.h' (SVID): *note Hash Search Function::.

'int hsearch_r (ENTRY ITEM, ACTION ACTION, ENTRY **RETVAL, struct hsearch_data *HTAB)'

     'search.h' (GNU): *note Hash Search Function::.

'uint32_t htonl (uint32_t HOSTLONG)'

     'netinet/in.h' (BSD): *note Byte Order::.

'uint16_t htons (uint16_t HOSTSHORT)'

     'netinet/in.h' (BSD): *note Byte Order::.

'double hypot (double X, double Y)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'float hypotf (float X, float Y)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'_FloatN hypotfN (_FloatN X, _FloatN Y)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'_FloatNx hypotfNx (_FloatNx X, _FloatNx Y)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'long double hypotl (long double X, long double Y)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'size_t iconv (iconv_t CD, char **INBUF, size_t *INBYTESLEFT, char **OUTBUF, size_t *OUTBYTESLEFT)'

     'iconv.h' (XPG2): *note Generic Conversion Interface::.

'int iconv_close (iconv_t CD)'

     'iconv.h' (XPG2): *note Generic Conversion Interface::.

'iconv_t iconv_open (const char *TOCODE, const char *FROMCODE)'

     'iconv.h' (XPG2): *note Generic Conversion Interface::.

'iconv_t'

     'iconv.h' (XPG2): *note Generic Conversion Interface::.

'void if_freenameindex (struct if_nameindex *PTR)'

     'net/if.h' (IPv6 basic API): *note Interface Naming::.

'char * if_indextoname (unsigned int IFINDEX, char *IFNAME)'

     'net/if.h' (IPv6 basic API): *note Interface Naming::.

'struct if_nameindex'

     'net/if.h' (IPv6 basic API): *note Interface Naming::.

'struct if_nameindex * if_nameindex (void)'

     'net/if.h' (IPv6 basic API): *note Interface Naming::.

'unsigned int if_nametoindex (const char *IFNAME)'

     'net/if.h' (IPv6 basic API): *note Interface Naming::.

'int ilogb (double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'int ilogbf (float X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'int ilogbfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'int ilogbfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'int ilogbl (long double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'intmax_t imaxabs (intmax_t NUMBER)'

     'inttypes.h' (ISO): *note Absolute Value::.

'imaxdiv_t imaxdiv (intmax_t NUMERATOR, intmax_t DENOMINATOR)'

     'inttypes.h' (ISO): *note Integer Division::.

'imaxdiv_t'

     'inttypes.h' (ISO): *note Integer Division::.

'struct in6_addr'

     'netinet/in.h' (IPv6 basic API): *note Host Address Data Type::.

'struct in6_addr in6addr_any'

     'netinet/in.h' (IPv6 basic API): *note Host Address Data Type::.

'struct in6_addr in6addr_loopback'

     'netinet/in.h' (IPv6 basic API): *note Host Address Data Type::.

'struct in_addr'

     'netinet/in.h' (BSD): *note Host Address Data Type::.

'char * index (const char *STRING, int C)'

     'string.h' (BSD): *note Search Functions::.

'uint32_t inet_addr (const char *NAME)'

     'arpa/inet.h' (BSD): *note Host Address Functions::.

'int inet_aton (const char *NAME, struct in_addr *ADDR)'

     'arpa/inet.h' (BSD): *note Host Address Functions::.

'uint32_t inet_lnaof (struct in_addr ADDR)'

     'arpa/inet.h' (BSD): *note Host Address Functions::.

'struct in_addr inet_makeaddr (uint32_t NET, uint32_t LOCAL)'

     'arpa/inet.h' (BSD): *note Host Address Functions::.

'uint32_t inet_netof (struct in_addr ADDR)'

     'arpa/inet.h' (BSD): *note Host Address Functions::.

'uint32_t inet_network (const char *NAME)'

     'arpa/inet.h' (BSD): *note Host Address Functions::.

'char * inet_ntoa (struct in_addr ADDR)'

     'arpa/inet.h' (BSD): *note Host Address Functions::.

'const char * inet_ntop (int AF, const void *CP, char *BUF, socklen_t LEN)'

     'arpa/inet.h' (IPv6 basic API): *note Host Address Functions::.

'int inet_pton (int AF, const char *CP, void *BUF)'

     'arpa/inet.h' (IPv6 basic API): *note Host Address Functions::.

'int initgroups (const char *USER, gid_t GROUP)'

     'grp.h' (BSD): *note Setting Groups::.

'char * initstate (unsigned int SEED, char *STATE, size_t SIZE)'

     'stdlib.h' (BSD): *note BSD Random::.

'int initstate_r (unsigned int SEED, char *restrict STATEBUF, size_t STATELEN, struct random_data *restrict BUF)'

     'stdlib.h' (GNU): *note BSD Random::.

'int innetgr (const char *NETGROUP, const char *HOST, const char *USER, const char *DOMAIN)'

     'netdb.h' (BSD): *note Netgroup Membership::.

'ino64_t'

     'sys/types.h' (Unix98): *note Attribute Meanings::.

'ino_t'

     'sys/types.h' (POSIX.1): *note Attribute Meanings::.

'int ioctl (int FILEDES, int COMMAND, ...)'

     'sys/ioctl.h' (BSD): *note IOCTLs::.

'struct iovec'

     'sys/uio.h' (BSD): *note Scatter-Gather::.

'int isalnum (int C)'

     'ctype.h' (ISO): *note Classification of Characters::.

'int isalpha (int C)'

     'ctype.h' (ISO): *note Classification of Characters::.

'int isascii (int C)'

     'ctype.h' (SVID): *note Classification of Characters::.

     'ctype.h' (BSD): *note Classification of Characters::.

'int isatty (int FILEDES)'

     'unistd.h' (POSIX.1): *note Is It a Terminal::.

'int isblank (int C)'

     'ctype.h' (ISO): *note Classification of Characters::.

'int iscanonical (_float-type_ X)'

     'math.h' (ISO): *note Floating Point Classes::.

'int iscntrl (int C)'

     'ctype.h' (ISO): *note Classification of Characters::.

'int isdigit (int C)'

     'ctype.h' (ISO): *note Classification of Characters::.

'int iseqsig (_real-floating_ X, _real-floating_ Y)'

     'math.h' (ISO): *note FP Comparison Functions::.

'int isfinite (_float-type_ X)'

     'math.h' (ISO): *note Floating Point Classes::.

'int isgraph (int C)'

     'ctype.h' (ISO): *note Classification of Characters::.

'int isgreater (_real-floating_ X, _real-floating_ Y)'

     'math.h' (ISO): *note FP Comparison Functions::.

'int isgreaterequal (_real-floating_ X, _real-floating_ Y)'

     'math.h' (ISO): *note FP Comparison Functions::.

'int isinf (double X)'

     'math.h' (BSD): *note Floating Point Classes::.

'int isinff (float X)'

     'math.h' (BSD): *note Floating Point Classes::.

'int isinfl (long double X)'

     'math.h' (BSD): *note Floating Point Classes::.

'int isless (_real-floating_ X, _real-floating_ Y)'

     'math.h' (ISO): *note FP Comparison Functions::.

'int islessequal (_real-floating_ X, _real-floating_ Y)'

     'math.h' (ISO): *note FP Comparison Functions::.

'int islessgreater (_real-floating_ X, _real-floating_ Y)'

     'math.h' (ISO): *note FP Comparison Functions::.

'int islower (int C)'

     'ctype.h' (ISO): *note Classification of Characters::.

'int isnan (_float-type_ X)'

     'math.h' (ISO): *note Floating Point Classes::.

'int isnan (double X)'

     'math.h' (BSD): *note Floating Point Classes::.

'int isnanf (float X)'

     'math.h' (BSD): *note Floating Point Classes::.

'int isnanl (long double X)'

     'math.h' (BSD): *note Floating Point Classes::.

'int isnormal (_float-type_ X)'

     'math.h' (ISO): *note Floating Point Classes::.

'int isprint (int C)'

     'ctype.h' (ISO): *note Classification of Characters::.

'int ispunct (int C)'

     'ctype.h' (ISO): *note Classification of Characters::.

'int issignaling (_float-type_ X)'

     'math.h' (ISO): *note Floating Point Classes::.

'int isspace (int C)'

     'ctype.h' (ISO): *note Classification of Characters::.

'int issubnormal (_float-type_ X)'

     'math.h' (ISO): *note Floating Point Classes::.

'int isunordered (_real-floating_ X, _real-floating_ Y)'

     'math.h' (ISO): *note FP Comparison Functions::.

'int isupper (int C)'

     'ctype.h' (ISO): *note Classification of Characters::.

'int iswalnum (wint_t WC)'

     'wctype.h' (ISO): *note Classification of Wide Characters::.

'int iswalpha (wint_t WC)'

     'wctype.h' (ISO): *note Classification of Wide Characters::.

'int iswblank (wint_t WC)'

     'wctype.h' (ISO): *note Classification of Wide Characters::.

'int iswcntrl (wint_t WC)'

     'wctype.h' (ISO): *note Classification of Wide Characters::.

'int iswctype (wint_t WC, wctype_t DESC)'

     'wctype.h' (ISO): *note Classification of Wide Characters::.

'int iswdigit (wint_t WC)'

     'wctype.h' (ISO): *note Classification of Wide Characters::.

'int iswgraph (wint_t WC)'

     'wctype.h' (ISO): *note Classification of Wide Characters::.

'int iswlower (wint_t WC)'

     'ctype.h' (ISO): *note Classification of Wide Characters::.

'int iswprint (wint_t WC)'

     'wctype.h' (ISO): *note Classification of Wide Characters::.

'int iswpunct (wint_t WC)'

     'wctype.h' (ISO): *note Classification of Wide Characters::.

'int iswspace (wint_t WC)'

     'wctype.h' (ISO): *note Classification of Wide Characters::.

'int iswupper (wint_t WC)'

     'wctype.h' (ISO): *note Classification of Wide Characters::.

'int iswxdigit (wint_t WC)'

     'wctype.h' (ISO): *note Classification of Wide Characters::.

'int isxdigit (int C)'

     'ctype.h' (ISO): *note Classification of Characters::.

'int iszero (_float-type_ X)'

     'math.h' (ISO): *note Floating Point Classes::.

'struct itimerval'

     'sys/time.h' (BSD): *note Setting an Alarm::.

'double j0 (double X)'

     'math.h' (SVID): *note Special Functions::.

'float j0f (float X)'

     'math.h' (SVID): *note Special Functions::.

'_FloatN j0fN (_FloatN X)'

     'math.h' (GNU): *note Special Functions::.

'_FloatNx j0fNx (_FloatNx X)'

     'math.h' (GNU): *note Special Functions::.

'long double j0l (long double X)'

     'math.h' (SVID): *note Special Functions::.

'double j1 (double X)'

     'math.h' (SVID): *note Special Functions::.

'float j1f (float X)'

     'math.h' (SVID): *note Special Functions::.

'_FloatN j1fN (_FloatN X)'

     'math.h' (GNU): *note Special Functions::.

'_FloatNx j1fNx (_FloatNx X)'

     'math.h' (GNU): *note Special Functions::.

'long double j1l (long double X)'

     'math.h' (SVID): *note Special Functions::.

'jmp_buf'

     'setjmp.h' (ISO): *note Non-Local Details::.

'double jn (int N, double X)'

     'math.h' (SVID): *note Special Functions::.

'float jnf (int N, float X)'

     'math.h' (SVID): *note Special Functions::.

'_FloatN jnfN (int N, _FloatN X)'

     'math.h' (GNU): *note Special Functions::.

'_FloatNx jnfNx (int N, _FloatNx X)'

     'math.h' (GNU): *note Special Functions::.

'long double jnl (int N, long double X)'

     'math.h' (SVID): *note Special Functions::.

'long int jrand48 (unsigned short int XSUBI[3])'

     'stdlib.h' (SVID): *note SVID Random::.

'int jrand48_r (unsigned short int XSUBI[3], struct drand48_data *BUFFER, long int *RESULT)'

     'stdlib.h' (GNU): *note SVID Random::.

'int kill (pid_t PID, int SIGNUM)'

     'signal.h' (POSIX.1): *note Signaling Another Process::.

'int killpg (int PGID, int SIGNUM)'

     'signal.h' (BSD): *note Signaling Another Process::.

'char * l64a (long int N)'

     'stdlib.h' (XPG): *note Encode Binary Data::.

'long int labs (long int NUMBER)'

     'stdlib.h' (ISO): *note Absolute Value::.

'void lcong48 (unsigned short int PARAM[7])'

     'stdlib.h' (SVID): *note SVID Random::.

'int lcong48_r (unsigned short int PARAM[7], struct drand48_data *BUFFER)'

     'stdlib.h' (GNU): *note SVID Random::.

'struct lconv'

     'locale.h' (ISO): *note The Lame Way to Locale Data::.

'double ldexp (double VALUE, int EXPONENT)'

     'math.h' (ISO): *note Normalization Functions::.

'float ldexpf (float VALUE, int EXPONENT)'

     'math.h' (ISO): *note Normalization Functions::.

'_FloatN ldexpfN (_FloatN VALUE, int EXPONENT)'

     'math.h' (TS 18661-3:2015): *note Normalization Functions::.

'_FloatNx ldexpfNx (_FloatNx VALUE, int EXPONENT)'

     'math.h' (TS 18661-3:2015): *note Normalization Functions::.

'long double ldexpl (long double VALUE, int EXPONENT)'

     'math.h' (ISO): *note Normalization Functions::.

'ldiv_t ldiv (long int NUMERATOR, long int DENOMINATOR)'

     'stdlib.h' (ISO): *note Integer Division::.

'ldiv_t'

     'stdlib.h' (ISO): *note Integer Division::.

'void * lfind (const void *KEY, const void *BASE, size_t *NMEMB, size_t SIZE, comparison_fn_t COMPAR)'

     'search.h' (SVID): *note Array Search Function::.

'double lgamma (double X)'

     'math.h' (SVID): *note Special Functions::.

'double lgamma_r (double X, int *SIGNP)'

     'math.h' (XPG): *note Special Functions::.

'float lgammaf (float X)'

     'math.h' (SVID): *note Special Functions::.

'_FloatN lgammafN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Special Functions::.

'_FloatN lgammafN_r (_FloatN X, int *SIGNP)'

     'math.h' (GNU): *note Special Functions::.

'_FloatNx lgammafNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Special Functions::.

'_FloatNx lgammafNx_r (_FloatNx X, int *SIGNP)'

     'math.h' (GNU): *note Special Functions::.

'float lgammaf_r (float X, int *SIGNP)'

     'math.h' (XPG): *note Special Functions::.

'long double lgammal (long double X)'

     'math.h' (SVID): *note Special Functions::.

'long double lgammal_r (long double X, int *SIGNP)'

     'math.h' (XPG): *note Special Functions::.

'struct linger'

     'sys/socket.h' (BSD): *note Socket-Level Options::.

'int link (const char *OLDNAME, const char *NEWNAME)'

     'unistd.h' (POSIX.1): *note Hard Links::.

'int linkat (int oldfd, const char *OLDNAME, int newfd, const char *NEWNAME, int flags)'

     'unistd.h' (POSIX.1): *note Hard Links::.

'int lio_listio (int MODE, struct aiocb *const LIST[], int NENT, struct sigevent *SIG)'

     'aio.h' (POSIX.1b): *note Asynchronous Reads/Writes::.

'int lio_listio64 (int MODE, struct aiocb64 *const LIST[], int NENT, struct sigevent *SIG)'

     'aio.h' (Unix98): *note Asynchronous Reads/Writes::.

'int listen (int SOCKET, int N)'

     'sys/socket.h' (BSD): *note Listening::.

'long long int llabs (long long int NUMBER)'

     'stdlib.h' (ISO): *note Absolute Value::.

'lldiv_t lldiv (long long int NUMERATOR, long long int DENOMINATOR)'

     'stdlib.h' (ISO): *note Integer Division::.

'lldiv_t'

     'stdlib.h' (ISO): *note Integer Division::.

'long int llogb (double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'long int llogbf (float X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'long int llogbfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'long int llogbfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'long int llogbl (long double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'long long int llrint (double X)'

     'math.h' (ISO): *note Rounding Functions::.

'long long int llrintf (float X)'

     'math.h' (ISO): *note Rounding Functions::.

'long long int llrintfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'long long int llrintfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'long long int llrintl (long double X)'

     'math.h' (ISO): *note Rounding Functions::.

'long long int llround (double X)'

     'math.h' (ISO): *note Rounding Functions::.

'long long int llroundf (float X)'

     'math.h' (ISO): *note Rounding Functions::.

'long long int llroundfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'long long int llroundfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'long long int llroundl (long double X)'

     'math.h' (ISO): *note Rounding Functions::.

'struct lconv * localeconv (void)'

     'locale.h' (ISO): *note The Lame Way to Locale Data::.

'struct tm * localtime (const time_t *TIME)'

     'time.h' (ISO): *note Broken-down Time::.

'struct tm * localtime_r (const time_t *TIME, struct tm *RESULTP)'

     'time.h' (POSIX.1c): *note Broken-down Time::.

'double log (double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'double log10 (double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'float log10f (float X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'_FloatN log10fN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'_FloatNx log10fNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'long double log10l (long double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'double log1p (double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'float log1pf (float X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'_FloatN log1pfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'_FloatNx log1pfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'long double log1pl (long double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'double log2 (double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'float log2f (float X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'_FloatN log2fN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'_FloatNx log2fNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'long double log2l (long double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'double logb (double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'float logbf (float X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'_FloatN logbfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'_FloatNx logbfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'long double logbl (long double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'float logf (float X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'_FloatN logfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'_FloatNx logfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'void login (const struct utmp *ENTRY)'

     'utmp.h' (BSD): *note Logging In and Out::.

'int login_tty (int FILEDES)'

     'utmp.h' (BSD): *note Logging In and Out::.

'long double logl (long double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'int logout (const char *UT_LINE)'

     'utmp.h' (BSD): *note Logging In and Out::.

'void logwtmp (const char *UT_LINE, const char *UT_NAME, const char *UT_HOST)'

     'utmp.h' (BSD): *note Logging In and Out::.

'void longjmp (jmp_buf STATE, int VALUE)'

     'setjmp.h' (ISO): *note Non-Local Details::.

'long int lrand48 (void)'

     'stdlib.h' (SVID): *note SVID Random::.

'int lrand48_r (struct drand48_data *BUFFER, long int *RESULT)'

     'stdlib.h' (GNU): *note SVID Random::.

'long int lrint (double X)'

     'math.h' (ISO): *note Rounding Functions::.

'long int lrintf (float X)'

     'math.h' (ISO): *note Rounding Functions::.

'long int lrintfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'long int lrintfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'long int lrintl (long double X)'

     'math.h' (ISO): *note Rounding Functions::.

'long int lround (double X)'

     'math.h' (ISO): *note Rounding Functions::.

'long int lroundf (float X)'

     'math.h' (ISO): *note Rounding Functions::.

'long int lroundfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'long int lroundfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'long int lroundl (long double X)'

     'math.h' (ISO): *note Rounding Functions::.

'void * lsearch (const void *KEY, void *BASE, size_t *NMEMB, size_t SIZE, comparison_fn_t COMPAR)'

     'search.h' (SVID): *note Array Search Function::.

'off_t lseek (int FILEDES, off_t OFFSET, int WHENCE)'

     'unistd.h' (POSIX.1): *note File Position Primitive::.

'off64_t lseek64 (int FILEDES, off64_t OFFSET, int WHENCE)'

     'unistd.h' (Unix98): *note File Position Primitive::.

'int lstat (const char *FILENAME, struct stat *BUF)'

     'sys/stat.h' (BSD): *note Reading Attributes::.

'int lstat64 (const char *FILENAME, struct stat64 *BUF)'

     'sys/stat.h' (Unix98): *note Reading Attributes::.

'int lutimes (const char *FILENAME, const struct timeval TVP[2])'

     'sys/time.h' (BSD): *note File Times::.

'int madvise (void *ADDR, size_t LENGTH, int ADVICE)'

     'sys/mman.h' (POSIX): *note Memory-mapped I/O::.

'void makecontext (ucontext_t *UCP, void (*FUNC) (void), int ARGC, ...)'

     'ucontext.h' (SVID): *note System V contexts::.

'struct mallinfo'

     'malloc.h' (GNU): *note Statistics of Malloc::.

'struct mallinfo mallinfo (void)'

     'malloc.h' (SVID): *note Statistics of Malloc::.

'void * malloc (size_t SIZE)'

     'malloc.h' (ISO): *note Basic Allocation::.

     'stdlib.h' (ISO): *note Basic Allocation::.

'int mblen (const char *STRING, size_t SIZE)'

     'stdlib.h' (ISO): *note Non-reentrant Character Conversion::.

'size_t mbrlen (const char *restrict S, size_t N, mbstate_t *PS)'

     'wchar.h' (ISO): *note Converting a Character::.

'size_t mbrtowc (wchar_t *restrict PWC, const char *restrict S, size_t N, mbstate_t *restrict PS)'

     'wchar.h' (ISO): *note Converting a Character::.

'int mbsinit (const mbstate_t *PS)'

     'wchar.h' (ISO): *note Keeping the state::.

'size_t mbsnrtowcs (wchar_t *restrict DST, const char **restrict SRC, size_t NMC, size_t LEN, mbstate_t *restrict PS)'

     'wchar.h' (GNU): *note Converting Strings::.

'size_t mbsrtowcs (wchar_t *restrict DST, const char **restrict SRC, size_t LEN, mbstate_t *restrict PS)'

     'wchar.h' (ISO): *note Converting Strings::.

'mbstate_t'

     'wchar.h' (ISO): *note Keeping the state::.

'size_t mbstowcs (wchar_t *WSTRING, const char *STRING, size_t SIZE)'

     'stdlib.h' (ISO): *note Non-reentrant String Conversion::.

'int mbtowc (wchar_t *restrict RESULT, const char *restrict STRING, size_t SIZE)'

     'stdlib.h' (ISO): *note Non-reentrant Character Conversion::.

'int mcheck (void (*ABORTFN) (enum mcheck_status STATUS))'

     'mcheck.h' (GNU): *note Heap Consistency Checking::.

'void * memalign (size_t BOUNDARY, size_t SIZE)'

     'malloc.h' (BSD): *note Aligned Memory Blocks::.

'void * memccpy (void *restrict TO, const void *restrict FROM, int C, size_t SIZE)'

     'string.h' (SVID): *note Copying Strings and Arrays::.

'void * memchr (const void *BLOCK, int C, size_t SIZE)'

     'string.h' (ISO): *note Search Functions::.

'int memcmp (const void *A1, const void *A2, size_t SIZE)'

     'string.h' (ISO): *note String/Array Comparison::.

'void * memcpy (void *restrict TO, const void *restrict FROM, size_t SIZE)'

     'string.h' (ISO): *note Copying Strings and Arrays::.

'int memfd_create (const char *NAME, unsigned int FLAGS)'

     'sys/mman.h' (Linux): *note Memory-mapped I/O::.

'void * memfrob (void *MEM, size_t LENGTH)'

     'string.h' (GNU): *note Obfuscating Data::.

'void * memmem (const void *HAYSTACK, size_t HAYSTACK-LEN,
const void *NEEDLE, size_t NEEDLE-LEN)'

     'string.h' (GNU): *note Search Functions::.

'void * memmove (void *TO, const void *FROM, size_t SIZE)'

     'string.h' (ISO): *note Copying Strings and Arrays::.

'void * mempcpy (void *restrict TO, const void *restrict FROM, size_t SIZE)'

     'string.h' (GNU): *note Copying Strings and Arrays::.

'void * memrchr (const void *BLOCK, int C, size_t SIZE)'

     'string.h' (GNU): *note Search Functions::.

'void * memset (void *BLOCK, int C, size_t SIZE)'

     'string.h' (ISO): *note Copying Strings and Arrays::.

'int mkdir (const char *FILENAME, mode_t MODE)'

     'sys/stat.h' (POSIX.1): *note Creating Directories::.

'char * mkdtemp (char *TEMPLATE)'

     'stdlib.h' (BSD): *note Temporary Files::.

'int mkfifo (const char *FILENAME, mode_t MODE)'

     'sys/stat.h' (POSIX.1): *note FIFO Special Files::.

'int mknod (const char *FILENAME, mode_t MODE, dev_t DEV)'

     'sys/stat.h' (BSD): *note Making Special Files::.

'int mkstemp (char *TEMPLATE)'

     'stdlib.h' (BSD): *note Temporary Files::.

'char * mktemp (char *TEMPLATE)'

     'stdlib.h' (Unix): *note Temporary Files::.

'time_t mktime (struct tm *BROKENTIME)'

     'time.h' (ISO): *note Broken-down Time::.

'int mlock (const void *ADDR, size_t LEN)'

     'sys/mman.h' (POSIX.1b): *note Page Lock Functions::.

'int mlock2 (const void *ADDR, size_t LEN, unsigned int FLAGS)'

     'sys/mman.h' (Linux): *note Page Lock Functions::.

'int mlockall (int FLAGS)'

     'sys/mman.h' (POSIX.1b): *note Page Lock Functions::.

'void * mmap (void *ADDRESS, size_t LENGTH, int PROTECT, int FLAGS, int FILEDES, off_t OFFSET)'

     'sys/mman.h' (POSIX): *note Memory-mapped I/O::.

'void * mmap64 (void *ADDRESS, size_t LENGTH, int PROTECT, int FLAGS, int FILEDES, off64_t OFFSET)'

     'sys/mman.h' (LFS): *note Memory-mapped I/O::.

'struct mntent'

     'mntent.h' (BSD): *note mtab::.

'mode_t'

     'sys/types.h' (POSIX.1): *note Attribute Meanings::.

'double modf (double VALUE, double *INTEGER-PART)'

     'math.h' (ISO): *note Rounding Functions::.

'float modff (float VALUE, float *INTEGER-PART)'

     'math.h' (ISO): *note Rounding Functions::.

'_FloatN modffN (_FloatN VALUE, _FloatN *INTEGER-PART)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'_FloatNx modffNx (_FloatNx VALUE, _FloatNx *INTEGER-PART)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'long double modfl (long double VALUE, long double *INTEGER-PART)'

     'math.h' (ISO): *note Rounding Functions::.

'int mount (const char *SPECIAL_FILE, const char *DIR, const char *FSTYPE, unsigned long int OPTIONS, const void *DATA)'

     'sys/mount.h' (SVID): *note Mount-Unmount-Remount::.

     'sys/mount.h' (BSD): *note Mount-Unmount-Remount::.

'int mprotect (void *ADDRESS, size_t LENGTH, int PROTECTION)'

     'sys/mman.h' (POSIX): *note Memory Protection::.

'long int mrand48 (void)'

     'stdlib.h' (SVID): *note SVID Random::.

'int mrand48_r (struct drand48_data *BUFFER, long int *RESULT)'

     'stdlib.h' (GNU): *note SVID Random::.

'void * mremap (void *ADDRESS, size_t LENGTH, size_t NEW_LENGTH, int FLAG)'

     'sys/mman.h' (GNU): *note Memory-mapped I/O::.

'int msync (void *ADDRESS, size_t LENGTH, int FLAGS)'

     'sys/mman.h' (POSIX): *note Memory-mapped I/O::.

'void mtrace (void)'

     'mcheck.h' (GNU): *note Tracing malloc::.

'void mtx_destroy (mtx_t *MUTEX)'

     'threads.h' (C11): *note ISO C Mutexes::.

'int mtx_init (mtx_t *MUTEX, int TYPE)'

     'threads.h' (C11): *note ISO C Mutexes::.

'int mtx_lock (mtx_t *MUTEX)'

     'threads.h' (C11): *note ISO C Mutexes::.

'mtx_plain'

     'threads.h' (C11): *note ISO C Mutexes::.

'mtx_recursive'

     'threads.h' (C11): *note ISO C Mutexes::.

'mtx_t'

     'threads.h' (C11): *note ISO C Mutexes::.

'mtx_timed'

     'threads.h' (C11): *note ISO C Mutexes::.

'int mtx_timedlock (mtx_t *restrict MUTEX, const struct timespec *restrict TIME_POINT)'

     'threads.h' (C11): *note ISO C Mutexes::.

'int mtx_trylock (mtx_t *MUTEX)'

     'threads.h' (C11): *note ISO C Mutexes::.

'int mtx_unlock (mtx_t *MUTEX)'

     'threads.h' (C11): *note ISO C Mutexes::.

'int munlock (const void *ADDR, size_t LEN)'

     'sys/mman.h' (POSIX.1b): *note Page Lock Functions::.

'int munlockall (void)'

     'sys/mman.h' (POSIX.1b): *note Page Lock Functions::.

'int munmap (void *ADDR, size_t LENGTH)'

     'sys/mman.h' (POSIX): *note Memory-mapped I/O::.

'void muntrace (void)'

     'mcheck.h' (GNU): *note Tracing malloc::.

'double nan (const char *TAGP)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'float nanf (const char *TAGP)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'_FloatN nanfN (const char *TAGP)'

     'math.h' (TS 18661-3:2015): *note FP Bit Twiddling::.

'_FloatNx nanfNx (const char *TAGP)'

     'math.h' (TS 18661-3:2015): *note FP Bit Twiddling::.

'long double nanl (const char *TAGP)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'int nanosleep (const struct timespec *REQUESTED_TIME, struct timespec *REMAINING)'

     'time.h' (POSIX.1): *note Sleeping::.

'double nearbyint (double X)'

     'math.h' (ISO): *note Rounding Functions::.

'float nearbyintf (float X)'

     'math.h' (ISO): *note Rounding Functions::.

'_FloatN nearbyintfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'_FloatNx nearbyintfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'long double nearbyintl (long double X)'

     'math.h' (ISO): *note Rounding Functions::.

'struct netent'

     'netdb.h' (BSD): *note Networks Database::.

'double nextafter (double X, double Y)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'float nextafterf (float X, float Y)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'_FloatN nextafterfN (_FloatN X, _FloatN Y)'

     'math.h' (TS 18661-3:2015): *note FP Bit Twiddling::.

'_FloatNx nextafterfNx (_FloatNx X, _FloatNx Y)'

     'math.h' (TS 18661-3:2015): *note FP Bit Twiddling::.

'long double nextafterl (long double X, long double Y)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'double nextdown (double X)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'float nextdownf (float X)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'_FloatN nextdownfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note FP Bit Twiddling::.

'_FloatNx nextdownfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note FP Bit Twiddling::.

'long double nextdownl (long double X)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'double nexttoward (double X, long double Y)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'float nexttowardf (float X, long double Y)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'long double nexttowardl (long double X, long double Y)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'double nextup (double X)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'float nextupf (float X)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'_FloatN nextupfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note FP Bit Twiddling::.

'_FloatNx nextupfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note FP Bit Twiddling::.

'long double nextupl (long double X)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'int nftw (const char *FILENAME, __nftw_func_t FUNC, int DESCRIPTORS, int FLAG)'

     'ftw.h' (XPG4.2): *note Working with Directory Trees::.

'int nftw64 (const char *FILENAME, __nftw64_func_t FUNC, int DESCRIPTORS, int FLAG)'

     'ftw.h' (Unix98): *note Working with Directory Trees::.

'char * ngettext (const char *MSGID1, const char *MSGID2, unsigned long int N)'

     'libintl.h' (GNU): *note Advanced gettext functions::.

'int nice (int INCREMENT)'

     'unistd.h' (BSD): *note Traditional Scheduling Functions::.

'char * nl_langinfo (nl_item ITEM)'

     'langinfo.h' (XOPEN): *note The Elegant and Fast Way::.

'nlink_t'

     'sys/types.h' (POSIX.1): *note Attribute Meanings::.

'long int nrand48 (unsigned short int XSUBI[3])'

     'stdlib.h' (SVID): *note SVID Random::.

'int nrand48_r (unsigned short int XSUBI[3], struct drand48_data *BUFFER, long int *RESULT)'

     'stdlib.h' (GNU): *note SVID Random::.

'uint32_t ntohl (uint32_t NETLONG)'

     'netinet/in.h' (BSD): *note Byte Order::.

'uint16_t ntohs (uint16_t NETSHORT)'

     'netinet/in.h' (BSD): *note Byte Order::.

'int ntp_adjtime (struct timex *TPTR)'

     'sys/timex.h' (GNU): *note High Accuracy Clock::.

'int ntp_gettime (struct ntptimeval *TPTR)'

     'sys/timex.h' (GNU): *note High Accuracy Clock::.

'struct obstack'

     'obstack.h' (GNU): *note Creating Obstacks::.

'void obstack_1grow (struct obstack *OBSTACK-PTR, char C)'

     'obstack.h' (GNU): *note Growing Objects::.

'void obstack_1grow_fast (struct obstack *OBSTACK-PTR, char C)'

     'obstack.h' (GNU): *note Extra Fast Growing::.

'int obstack_alignment_mask (struct obstack *OBSTACK-PTR)'

     'obstack.h' (GNU): *note Obstacks Data Alignment::.

'void * obstack_alloc (struct obstack *OBSTACK-PTR, int SIZE)'

     'obstack.h' (GNU): *note Allocation in an Obstack::.

'obstack_alloc_failed_handler'

     'obstack.h' (GNU): *note Preparing for Obstacks::.

'void * obstack_base (struct obstack *OBSTACK-PTR)'

     'obstack.h' (GNU): *note Status of an Obstack::.

'void obstack_blank (struct obstack *OBSTACK-PTR, int SIZE)'

     'obstack.h' (GNU): *note Growing Objects::.

'void obstack_blank_fast (struct obstack *OBSTACK-PTR, int SIZE)'

     'obstack.h' (GNU): *note Extra Fast Growing::.

'int obstack_chunk_size (struct obstack *OBSTACK-PTR)'

     'obstack.h' (GNU): *note Obstack Chunks::.

'void * obstack_copy (struct obstack *OBSTACK-PTR, void *ADDRESS, int SIZE)'

     'obstack.h' (GNU): *note Allocation in an Obstack::.

'void * obstack_copy0 (struct obstack *OBSTACK-PTR, void *ADDRESS, int SIZE)'

     'obstack.h' (GNU): *note Allocation in an Obstack::.

'void * obstack_finish (struct obstack *OBSTACK-PTR)'

     'obstack.h' (GNU): *note Growing Objects::.

'void obstack_free (struct obstack *OBSTACK-PTR, void *OBJECT)'

     'obstack.h' (GNU): *note Freeing Obstack Objects::.

'void obstack_grow (struct obstack *OBSTACK-PTR, void *DATA, int SIZE)'

     'obstack.h' (GNU): *note Growing Objects::.

'void obstack_grow0 (struct obstack *OBSTACK-PTR, void *DATA, int SIZE)'

     'obstack.h' (GNU): *note Growing Objects::.

'int obstack_init (struct obstack *OBSTACK-PTR)'

     'obstack.h' (GNU): *note Preparing for Obstacks::.

'void obstack_int_grow (struct obstack *OBSTACK-PTR, int DATA)'

     'obstack.h' (GNU): *note Growing Objects::.

'void obstack_int_grow_fast (struct obstack *OBSTACK-PTR, int DATA)'

     'obstack.h' (GNU): *note Extra Fast Growing::.

'void * obstack_next_free (struct obstack *OBSTACK-PTR)'

     'obstack.h' (GNU): *note Status of an Obstack::.

'int obstack_object_size (struct obstack *OBSTACK-PTR)'

     'obstack.h' (GNU): *note Growing Objects::.

     'obstack.h' (GNU): *note Status of an Obstack::.

'int obstack_printf (struct obstack *OBSTACK, const char *TEMPLATE, ...)'

     'stdio.h' (GNU): *note Dynamic Output::.

'void obstack_ptr_grow (struct obstack *OBSTACK-PTR, void *DATA)'

     'obstack.h' (GNU): *note Growing Objects::.

'void obstack_ptr_grow_fast (struct obstack *OBSTACK-PTR, void *DATA)'

     'obstack.h' (GNU): *note Extra Fast Growing::.

'int obstack_room (struct obstack *OBSTACK-PTR)'

     'obstack.h' (GNU): *note Extra Fast Growing::.

'int obstack_vprintf (struct obstack *OBSTACK, const char *TEMPLATE, va_list AP)'

     'stdio.h' (GNU): *note Variable Arguments Output::.

'off64_t'

     'sys/types.h' (Unix98): *note File Position Primitive::.

'off_t'

     'sys/types.h' (POSIX.1): *note File Position Primitive::.

'size_t offsetof (TYPE, MEMBER)'

     'stddef.h' (ISO): *note Structure Measurement::.

'int on_exit (void (*FUNCTION)(int STATUS, void *ARG), void *ARG)'

     'stdlib.h' (SunOS): *note Cleanups on Exit::.

'once_flag'

     'threads.h' (C11): *note Call Once::.

'int open (const char *FILENAME, int FLAGS[, mode_t MODE])'

     'fcntl.h' (POSIX.1): *note Opening and Closing Files::.

'int open64 (const char *FILENAME, int FLAGS[, mode_t MODE])'

     'fcntl.h' (Unix98): *note Opening and Closing Files::.

'FILE * open_memstream (char **PTR, size_t *SIZELOC)'

     'stdio.h' (GNU): *note String Streams::.

'DIR * opendir (const char *DIRNAME)'

     'dirent.h' (POSIX.1): *note Opening a Directory::.

'void openlog (const char *IDENT, int OPTION, int FACILITY)'

     'syslog.h' (BSD): *note openlog::.

'int openpty (int *AMASTER, int *ASLAVE, char *NAME, const struct termios *TERMP, const struct winsize *WINP)'

     'pty.h' (BSD): *note Pseudo-Terminal Pairs::.

'char * optarg'

     'unistd.h' (POSIX.2): *note Using Getopt::.

'int opterr'

     'unistd.h' (POSIX.2): *note Using Getopt::.

'int optind'

     'unistd.h' (POSIX.2): *note Using Getopt::.

'struct option'

     'getopt.h' (GNU): *note Getopt Long Options::.

'int optopt'

     'unistd.h' (POSIX.2): *note Using Getopt::.

'size_t parse_printf_format (const char *TEMPLATE, size_t N, int *ARGTYPES)'

     'printf.h' (GNU): *note Parsing a Template String::.

'struct passwd'

     'pwd.h' (POSIX.1): *note User Data Structure::.

'long int pathconf (const char *FILENAME, int PARAMETER)'

     'unistd.h' (POSIX.1): *note Pathconf::.

'int pause (void)'

     'unistd.h' (POSIX.1): *note Using Pause::.

'int pclose (FILE *STREAM)'

     'stdio.h' (POSIX.2): *note Pipe to a Subprocess::.

     'stdio.h' (SVID): *note Pipe to a Subprocess::.

     'stdio.h' (BSD): *note Pipe to a Subprocess::.

'void perror (const char *MESSAGE)'

     'stdio.h' (ISO): *note Error Messages::.

'pid_t'

     'sys/types.h' (POSIX.1): *note Process Identification::.

'int pipe (int FILEDES[2])'

     'unistd.h' (POSIX.1): *note Creating a Pipe::.

'int pkey_alloc (unsigned int FLAGS, unsigned int RESTRICTIONS)'

     'sys/mman.h' (Linux): *note Memory Protection::.

'int pkey_free (int KEY)'

     'sys/mman.h' (Linux): *note Memory Protection::.

'int pkey_get (int KEY)'

     'sys/mman.h' (Linux): *note Memory Protection::.

'int pkey_mprotect (void *ADDRESS, size_t LENGTH, int PROTECTION, int KEY)'

     'sys/mman.h' (Linux): *note Memory Protection::.

'int pkey_set (int KEY, unsigned int RIGHTS)'

     'sys/mman.h' (Linux): *note Memory Protection::.

'FILE * popen (const char *COMMAND, const char *MODE)'

     'stdio.h' (POSIX.2): *note Pipe to a Subprocess::.

     'stdio.h' (SVID): *note Pipe to a Subprocess::.

     'stdio.h' (BSD): *note Pipe to a Subprocess::.

'int posix_memalign (void **MEMPTR, size_t ALIGNMENT, size_t SIZE)'

     'stdlib.h' (POSIX): *note Aligned Memory Blocks::.

'double pow (double BASE, double POWER)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'float powf (float BASE, float POWER)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'_FloatN powfN (_FloatN BASE, _FloatN POWER)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'_FloatNx powfNx (_FloatNx BASE, _FloatNx POWER)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'long double powl (long double BASE, long double POWER)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'ssize_t pread (int FILEDES, void *BUFFER, size_t SIZE, off_t OFFSET)'

     'unistd.h' (Unix98): *note I/O Primitives::.

'ssize_t pread64 (int FILEDES, void *BUFFER, size_t SIZE, off64_t OFFSET)'

     'unistd.h' (Unix98): *note I/O Primitives::.

'ssize_t preadv (int FD, const struct iovec *IOV, int IOVCNT, off_t OFFSET)'

     'sys/uio.h' (BSD): *note Scatter-Gather::.

'ssize_t preadv2 (int FD, const struct iovec *IOV, int IOVCNT, off_t OFFSET, int FLAGS)'

     'sys/uio.h' (GNU): *note Scatter-Gather::.

'ssize_t preadv64 (int FD, const struct iovec *IOV, int IOVCNT, off64_t OFFSET)'

     'unistd.h' (BSD): *note Scatter-Gather::.

'ssize_t preadv64v2 (int FD, const struct iovec *IOV, int IOVCNT, off64_t OFFSET, int FLAGS)'

     'unistd.h' (GNU): *note Scatter-Gather::.

'int printf (const char *TEMPLATE, ...)'

     'stdio.h' (ISO): *note Formatted Output Functions::.

'printf_arginfo_function'

     'printf.h' (GNU): *note Defining the Output Handler::.

'printf_function'

     'printf.h' (GNU): *note Defining the Output Handler::.

'struct printf_info'

     'printf.h' (GNU): *note Conversion Specifier Options::.

'int printf_size (FILE *FP, const struct printf_info *INFO, const void *const *ARGS)'

     'printf.h' (GNU): *note Predefined Printf Handlers::.

'int printf_size_info (const struct printf_info *INFO, size_t N, int *ARGTYPES)'

     'printf.h' (GNU): *note Predefined Printf Handlers::.

'char * program_invocation_name'

     'errno.h' (GNU): *note Error Messages::.

'char * program_invocation_short_name'

     'errno.h' (GNU): *note Error Messages::.

'struct protoent'

     'netdb.h' (BSD): *note Protocols Database::.

'void psignal (int SIGNUM, const char *MESSAGE)'

     'signal.h' (BSD): *note Signal Messages::.

'int pthread_getattr_default_np (pthread_attr_t *ATTR)'

     'pthread.h' (GNU): *note Default Thread Attributes::.

'void *pthread_getspecific (pthread_key_t KEY)'

     'pthread.h' (POSIX): *note Thread-specific Data::.

'int pthread_key_create (pthread_key_t KEY, void (DESTRUCTOR)(void*))'

     'pthread.h' (POSIX): *note Thread-specific Data::.

'int pthread_key_delete (pthread_key_t KEY)'

     'pthread.h' (POSIX): *note Thread-specific Data::.

'int pthread_setattr_default_np (pthread_attr_t *ATTR)'

     'pthread.h' (GNU): *note Default Thread Attributes::.

'int pthread_setspecific (pthread_key_t KEY, const void *VALUE)'

     'pthread.h' (POSIX): *note Thread-specific Data::.

'ptrdiff_t'

     'stddef.h' (ISO): *note Important Data Types::.

'char * ptsname (int FILEDES)'

     'stdlib.h' (SVID): *note Allocation::.

     'stdlib.h' (XPG4.2): *note Allocation::.

'int ptsname_r (int FILEDES, char *BUF, size_t LEN)'

     'stdlib.h' (GNU): *note Allocation::.

'int putc (int C, FILE *STREAM)'

     'stdio.h' (ISO): *note Simple Output::.

'int putc_unlocked (int C, FILE *STREAM)'

     'stdio.h' (POSIX): *note Simple Output::.

'int putchar (int C)'

     'stdio.h' (ISO): *note Simple Output::.

'int putchar_unlocked (int C)'

     'stdio.h' (POSIX): *note Simple Output::.

'int putenv (char *STRING)'

     'stdlib.h' (SVID): *note Environment Access::.

'int putpwent (const struct passwd *P, FILE *STREAM)'

     'pwd.h' (SVID): *note Writing a User Entry::.

'int puts (const char *S)'

     'stdio.h' (ISO): *note Simple Output::.

'struct utmp * pututline (const struct utmp *UTMP)'

     'utmp.h' (SVID): *note Manipulating the Database::.

'struct utmpx * pututxline (const struct utmpx *UTMP)'

     'utmpx.h' (XPG4.2): *note XPG Functions::.

'int putw (int W, FILE *STREAM)'

     'stdio.h' (SVID): *note Simple Output::.

'wint_t putwc (wchar_t WC, FILE *STREAM)'

     'wchar.h' (ISO): *note Simple Output::.

'wint_t putwc_unlocked (wchar_t WC, FILE *STREAM)'

     'wchar.h' (GNU): *note Simple Output::.

'wint_t putwchar (wchar_t WC)'

     'wchar.h' (ISO): *note Simple Output::.

'wint_t putwchar_unlocked (wchar_t WC)'

     'wchar.h' (GNU): *note Simple Output::.

'ssize_t pwrite (int FILEDES, const void *BUFFER, size_t SIZE, off_t OFFSET)'

     'unistd.h' (Unix98): *note I/O Primitives::.

'ssize_t pwrite64 (int FILEDES, const void *BUFFER, size_t SIZE, off64_t OFFSET)'

     'unistd.h' (Unix98): *note I/O Primitives::.

'ssize_t pwritev (int FD, const struct iovec *IOV, int IOVCNT, off_t OFFSET)'

     'sys/uio.h' (BSD): *note Scatter-Gather::.

'ssize_t pwritev2 (int FD, const struct iovec *IOV, int IOVCNT, off_t OFFSET, int FLAGS)'

     'sys/uio.h' (GNU): *note Scatter-Gather::.

'ssize_t pwritev64 (int FD, const struct iovec *IOV, int IOVCNT, off64_t OFFSET)'

     'unistd.h' (BSD): *note Scatter-Gather::.

'ssize_t pwritev64v2 (int FD, const struct iovec *IOV, int IOVCNT, off64_t OFFSET, int FLAGS)'

     'unistd.h' (GNU): *note Scatter-Gather::.

'char * qecvt (long double VALUE, int NDIGIT, int *DECPT, int *NEG)'

     'stdlib.h' (GNU): *note System V Number Conversion::.

'int qecvt_r (long double VALUE, int NDIGIT, int *DECPT, int *NEG, char *BUF, size_t LEN)'

     'stdlib.h' (GNU): *note System V Number Conversion::.

'char * qfcvt (long double VALUE, int NDIGIT, int *DECPT, int *NEG)'

     'stdlib.h' (GNU): *note System V Number Conversion::.

'int qfcvt_r (long double VALUE, int NDIGIT, int *DECPT, int *NEG, char *BUF, size_t LEN)'

     'stdlib.h' (GNU): *note System V Number Conversion::.

'char * qgcvt (long double VALUE, int NDIGIT, char *BUF)'

     'stdlib.h' (GNU): *note System V Number Conversion::.

'void qsort (void *ARRAY, size_t COUNT, size_t SIZE, comparison_fn_t COMPARE)'

     'stdlib.h' (ISO): *note Array Sort Function::.

'int raise (int SIGNUM)'

     'signal.h' (ISO): *note Signaling Yourself::.

'int rand (void)'

     'stdlib.h' (ISO): *note ISO Random::.

'int rand_r (unsigned int *SEED)'

     'stdlib.h' (POSIX.1): *note ISO Random::.

'long int random (void)'

     'stdlib.h' (BSD): *note BSD Random::.

'struct random_data'

     'stdlib.h' (GNU): *note BSD Random::.

'int random_r (struct random_data *restrict BUF, int32_t *restrict RESULT)'

     'stdlib.h' (GNU): *note BSD Random::.

'void * rawmemchr (const void *BLOCK, int C)'

     'string.h' (GNU): *note Search Functions::.

'ssize_t read (int FILEDES, void *BUFFER, size_t SIZE)'

     'unistd.h' (POSIX.1): *note I/O Primitives::.

'struct dirent * readdir (DIR *DIRSTREAM)'

     'dirent.h' (POSIX.1): *note Reading/Closing Directory::.

'struct dirent64 * readdir64 (DIR *DIRSTREAM)'

     'dirent.h' (LFS): *note Reading/Closing Directory::.

'int readdir64_r (DIR *DIRSTREAM, struct dirent64 *ENTRY, struct dirent64 **RESULT)'

     'dirent.h' (LFS): *note Reading/Closing Directory::.

'int readdir_r (DIR *DIRSTREAM, struct dirent *ENTRY, struct dirent **RESULT)'

     'dirent.h' (GNU): *note Reading/Closing Directory::.

'ssize_t readlink (const char *FILENAME, char *BUFFER, size_t SIZE)'

     'unistd.h' (BSD): *note Symbolic Links::.

'ssize_t readv (int FILEDES, const struct iovec *VECTOR, int COUNT)'

     'sys/uio.h' (BSD): *note Scatter-Gather::.

'void * realloc (void *PTR, size_t NEWSIZE)'

     'malloc.h' (ISO): *note Changing Block Size::.

     'stdlib.h' (ISO): *note Changing Block Size::.

'void * reallocarray (void *PTR, size_t NMEMB, size_t SIZE)'

     'malloc.h' (BSD): *note Changing Block Size::.

     'stdlib.h' (BSD): *note Changing Block Size::.

'char * realpath (const char *restrict NAME, char *restrict RESOLVED)'

     'stdlib.h' (XPG): *note Symbolic Links::.

'ssize_t recv (int SOCKET, void *BUFFER, size_t SIZE, int FLAGS)'

     'sys/socket.h' (BSD): *note Receiving Data::.

'ssize_t recvfrom (int SOCKET, void *BUFFER, size_t SIZE, int FLAGS, struct sockaddr *ADDR, socklen_t *LENGTH-PTR)'

     'sys/socket.h' (BSD): *note Receiving Datagrams::.

'int regcomp (regex_t *restrict COMPILED, const char *restrict PATTERN, int CFLAGS)'

     'regex.h' (POSIX.2): *note POSIX Regexp Compilation::.

'size_t regerror (int ERRCODE, const regex_t *restrict COMPILED, char *restrict BUFFER, size_t LENGTH)'

     'regex.h' (POSIX.2): *note Regexp Cleanup::.

'regex_t'

     'regex.h' (POSIX.2): *note POSIX Regexp Compilation::.

'int regexec (const regex_t *restrict COMPILED, const char *restrict STRING, size_t NMATCH, regmatch_t MATCHPTR[restrict], int EFLAGS)'

     'regex.h' (POSIX.2): *note Matching POSIX Regexps::.

'void regfree (regex_t *COMPILED)'

     'regex.h' (POSIX.2): *note Regexp Cleanup::.

'int register_printf_function (int SPEC, printf_function HANDLER-FUNCTION, printf_arginfo_function ARGINFO-FUNCTION)'

     'printf.h' (GNU): *note Registering New Conversions::.

'regmatch_t'

     'regex.h' (POSIX.2): *note Regexp Subexpressions::.

'regoff_t'

     'regex.h' (POSIX.2): *note Regexp Subexpressions::.

'double remainder (double NUMERATOR, double DENOMINATOR)'

     'math.h' (ISO): *note Remainder Functions::.

'float remainderf (float NUMERATOR, float DENOMINATOR)'

     'math.h' (ISO): *note Remainder Functions::.

'_FloatN remainderfN (_FloatN NUMERATOR, _FloatN DENOMINATOR)'

     'math.h' (TS 18661-3:2015): *note Remainder Functions::.

'_FloatNx remainderfNx (_FloatNx NUMERATOR, _FloatNx DENOMINATOR)'

     'math.h' (TS 18661-3:2015): *note Remainder Functions::.

'long double remainderl (long double NUMERATOR, long double DENOMINATOR)'

     'math.h' (ISO): *note Remainder Functions::.

'int remove (const char *FILENAME)'

     'stdio.h' (ISO): *note Deleting Files::.

'int rename (const char *OLDNAME, const char *NEWNAME)'

     'stdio.h' (ISO): *note Renaming Files::.

'void rewind (FILE *STREAM)'

     'stdio.h' (ISO): *note File Positioning::.

'void rewinddir (DIR *DIRSTREAM)'

     'dirent.h' (POSIX.1): *note Random Access Directory::.

'char * rindex (const char *STRING, int C)'

     'string.h' (BSD): *note Search Functions::.

'double rint (double X)'

     'math.h' (ISO): *note Rounding Functions::.

'float rintf (float X)'

     'math.h' (ISO): *note Rounding Functions::.

'_FloatN rintfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'_FloatNx rintfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'long double rintl (long double X)'

     'math.h' (ISO): *note Rounding Functions::.

'struct rlimit'

     'sys/resource.h' (BSD): *note Limits on Resources::.

'struct rlimit64'

     'sys/resource.h' (Unix98): *note Limits on Resources::.

'int rmdir (const char *FILENAME)'

     'unistd.h' (POSIX.1): *note Deleting Files::.

'double round (double X)'

     'math.h' (ISO): *note Rounding Functions::.

'double roundeven (double X)'

     'math.h' (ISO): *note Rounding Functions::.

'float roundevenf (float X)'

     'math.h' (ISO): *note Rounding Functions::.

'_FloatN roundevenfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'_FloatNx roundevenfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'long double roundevenl (long double X)'

     'math.h' (ISO): *note Rounding Functions::.

'float roundf (float X)'

     'math.h' (ISO): *note Rounding Functions::.

'_FloatN roundfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'_FloatNx roundfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Rounding Functions::.

'long double roundl (long double X)'

     'math.h' (ISO): *note Rounding Functions::.

'int rpmatch (const char *RESPONSE)'

     'stdlib.h' (GNU): *note Yes-or-No Questions::.

'struct rusage'

     'sys/resource.h' (BSD): *note Resource Usage::.

'void *sbrk (ptrdiff_t DELTA)'

     'unistd.h' (BSD): *note Resizing the Data Segment::.

'double scalb (double VALUE, double EXPONENT)'

     'math.h' (BSD): *note Normalization Functions::.

'float scalbf (float VALUE, float EXPONENT)'

     'math.h' (BSD): *note Normalization Functions::.

'long double scalbl (long double VALUE, long double EXPONENT)'

     'math.h' (BSD): *note Normalization Functions::.

'double scalbln (double X, long int N)'

     'math.h' (BSD): *note Normalization Functions::.

'float scalblnf (float X, long int N)'

     'math.h' (BSD): *note Normalization Functions::.

'_FloatN scalblnfN (_FloatN X, long int N)'

     'math.h' (TS 18661-3:2015): *note Normalization Functions::.

'_FloatNx scalblnfNx (_FloatNx X, long int N)'

     'math.h' (TS 18661-3:2015): *note Normalization Functions::.

'long double scalblnl (long double X, long int N)'

     'math.h' (BSD): *note Normalization Functions::.

'double scalbn (double X, int N)'

     'math.h' (BSD): *note Normalization Functions::.

'float scalbnf (float X, int N)'

     'math.h' (BSD): *note Normalization Functions::.

'_FloatN scalbnfN (_FloatN X, int N)'

     'math.h' (TS 18661-3:2015): *note Normalization Functions::.

'_FloatNx scalbnfNx (_FloatNx X, int N)'

     'math.h' (TS 18661-3:2015): *note Normalization Functions::.

'long double scalbnl (long double X, int N)'

     'math.h' (BSD): *note Normalization Functions::.

'int scandir (const char *DIR, struct dirent ***NAMELIST, int (*SELECTOR) (const struct dirent *), int (*CMP) (const struct dirent **, const struct dirent **))'

     'dirent.h' (BSD): *note Scanning Directory Content::.

     'dirent.h' (SVID): *note Scanning Directory Content::.

'int scandir64 (const char *DIR, struct dirent64 ***NAMELIST, int (*SELECTOR) (const struct dirent64 *), int (*CMP) (const struct dirent64 **, const struct dirent64 **))'

     'dirent.h' (GNU): *note Scanning Directory Content::.

'int scanf (const char *TEMPLATE, ...)'

     'stdio.h' (ISO): *note Formatted Input Functions::.

'int sched_get_priority_max (int POLICY)'

     'sched.h' (POSIX): *note Basic Scheduling Functions::.

'int sched_get_priority_min (int POLICY)'

     'sched.h' (POSIX): *note Basic Scheduling Functions::.

'int sched_getaffinity (pid_t PID, size_t CPUSETSIZE, cpu_set_t *CPUSET)'

     'sched.h' (GNU): *note CPU Affinity::.

'int sched_getparam (pid_t PID, struct sched_param *PARAM)'

     'sched.h' (POSIX): *note Basic Scheduling Functions::.

'int sched_getscheduler (pid_t PID)'

     'sched.h' (POSIX): *note Basic Scheduling Functions::.

'struct sched_param'

     'sched.h' (POSIX): *note Basic Scheduling Functions::.

'int sched_rr_get_interval (pid_t PID, struct timespec *INTERVAL)'

     'sched.h' (POSIX): *note Basic Scheduling Functions::.

'int sched_setaffinity (pid_t PID, size_t CPUSETSIZE, const cpu_set_t *CPUSET)'

     'sched.h' (GNU): *note CPU Affinity::.

'int sched_setparam (pid_t PID, const struct sched_param *PARAM)'

     'sched.h' (POSIX): *note Basic Scheduling Functions::.

'int sched_setscheduler (pid_t PID, int POLICY, const struct sched_param *PARAM)'

     'sched.h' (POSIX): *note Basic Scheduling Functions::.

'int sched_yield (void)'

     'sched.h' (POSIX): *note Basic Scheduling Functions::.

'char * secure_getenv (const char *NAME)'

     'stdlib.h' (GNU): *note Environment Access::.

'unsigned short int * seed48 (unsigned short int SEED16V[3])'

     'stdlib.h' (SVID): *note SVID Random::.

'int seed48_r (unsigned short int SEED16V[3], struct drand48_data *BUFFER)'

     'stdlib.h' (GNU): *note SVID Random::.

'void seekdir (DIR *DIRSTREAM, long int POS)'

     'dirent.h' (BSD): *note Random Access Directory::.

'int select (int NFDS, fd_set *READ-FDS, fd_set *WRITE-FDS, fd_set *EXCEPT-FDS, struct timeval *TIMEOUT)'

     'sys/types.h' (BSD): *note Waiting for I/O::.

'ssize_t send (int SOCKET, const void *BUFFER, size_t SIZE, int FLAGS)'

     'sys/socket.h' (BSD): *note Sending Data::.

'ssize_t sendto (int SOCKET, const void *BUFFER, size_t SIZE, int FLAGS, struct sockaddr *ADDR, socklen_t LENGTH)'

     'sys/socket.h' (BSD): *note Sending Datagrams::.

'struct servent'

     'netdb.h' (BSD): *note Services Database::.

'void setbuf (FILE *STREAM, char *BUF)'

     'stdio.h' (ISO): *note Controlling Buffering::.

'void setbuffer (FILE *STREAM, char *BUF, size_t SIZE)'

     'stdio.h' (BSD): *note Controlling Buffering::.

'int setcontext (const ucontext_t *UCP)'

     'ucontext.h' (SVID): *note System V contexts::.

'int setdomainname (const char *NAME, size_t LENGTH)'

     'unistd.h' (???): *note Host Identification::.

'int setegid (gid_t NEWGID)'

     'unistd.h' (POSIX.1): *note Setting Groups::.

'int setenv (const char *NAME, const char *VALUE, int REPLACE)'

     'stdlib.h' (BSD): *note Environment Access::.

'int seteuid (uid_t NEWEUID)'

     'unistd.h' (POSIX.1): *note Setting User ID::.

'int setfsent (void)'

     'fstab.h' (BSD): *note fstab::.

'int setgid (gid_t NEWGID)'

     'unistd.h' (POSIX.1): *note Setting Groups::.

'void setgrent (void)'

     'grp.h' (SVID): *note Scanning All Groups::.

     'grp.h' (BSD): *note Scanning All Groups::.

'int setgroups (size_t COUNT, const gid_t *GROUPS)'

     'grp.h' (BSD): *note Setting Groups::.

'void sethostent (int STAYOPEN)'

     'netdb.h' (BSD): *note Host Names::.

'int sethostid (long int ID)'

     'unistd.h' (BSD): *note Host Identification::.

'int sethostname (const char *NAME, size_t LENGTH)'

     'unistd.h' (BSD): *note Host Identification::.

'int setitimer (int WHICH, const struct itimerval *NEW, struct itimerval *OLD)'

     'sys/time.h' (BSD): *note Setting an Alarm::.

'int setjmp (jmp_buf STATE)'

     'setjmp.h' (ISO): *note Non-Local Details::.

'void setlinebuf (FILE *STREAM)'

     'stdio.h' (BSD): *note Controlling Buffering::.

'char * setlocale (int CATEGORY, const char *LOCALE)'

     'locale.h' (ISO): *note Setting the Locale::.

'int setlogmask (int MASK)'

     'syslog.h' (BSD): *note setlogmask::.

'FILE * setmntent (const char *FILE, const char *MODE)'

     'mntent.h' (BSD): *note mtab::.

'void setnetent (int STAYOPEN)'

     'netdb.h' (BSD): *note Networks Database::.

'int setnetgrent (const char *NETGROUP)'

     'netdb.h' (BSD): *note Lookup Netgroup::.

'int setpayload (double *X, double PAYLOAD)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'int setpayloadf (float *X, float PAYLOAD)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'int setpayloadfN (_FloatN *X, _FloatN PAYLOAD)'

     'math.h' (TS 18661-3:2015): *note FP Bit Twiddling::.

'int setpayloadfNx (_FloatNx *X, _FloatNx PAYLOAD)'

     'math.h' (TS 18661-3:2015): *note FP Bit Twiddling::.

'int setpayloadl (long double *X, long double PAYLOAD)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'int setpayloadsig (double *X, double PAYLOAD)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'int setpayloadsigf (float *X, float PAYLOAD)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'int setpayloadsigfN (_FloatN *X, _FloatN PAYLOAD)'

     'math.h' (TS 18661-3:2015): *note FP Bit Twiddling::.

'int setpayloadsigfNx (_FloatNx *X, _FloatNx PAYLOAD)'

     'math.h' (TS 18661-3:2015): *note FP Bit Twiddling::.

'int setpayloadsigl (long double *X, long double PAYLOAD)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'int setpgid (pid_t PID, pid_t PGID)'

     'unistd.h' (POSIX.1): *note Process Group Functions::.

'int setpgrp (pid_t PID, pid_t PGID)'

     'unistd.h' (BSD): *note Process Group Functions::.

'int setpriority (int CLASS, int ID, int NICEVAL)'

     'sys/resource.h' (BSD): *note Traditional Scheduling Functions::.

     'sys/resource.h' (POSIX): *note Traditional Scheduling Functions::.

'void setprotoent (int STAYOPEN)'

     'netdb.h' (BSD): *note Protocols Database::.

'void setpwent (void)'

     'pwd.h' (SVID): *note Scanning All Users::.

     'pwd.h' (BSD): *note Scanning All Users::.

'int setregid (gid_t RGID, gid_t EGID)'

     'unistd.h' (BSD): *note Setting Groups::.

'int setreuid (uid_t RUID, uid_t EUID)'

     'unistd.h' (BSD): *note Setting User ID::.

'int setrlimit (int RESOURCE, const struct rlimit *RLP)'

     'sys/resource.h' (BSD): *note Limits on Resources::.

'int setrlimit64 (int RESOURCE, const struct rlimit64 *RLP)'

     'sys/resource.h' (Unix98): *note Limits on Resources::.

'void setservent (int STAYOPEN)'

     'netdb.h' (BSD): *note Services Database::.

'pid_t setsid (void)'

     'unistd.h' (POSIX.1): *note Process Group Functions::.

'int setsockopt (int SOCKET, int LEVEL, int OPTNAME, const void *OPTVAL, socklen_t OPTLEN)'

     'sys/socket.h' (BSD): *note Socket Option Functions::.

'char * setstate (char *STATE)'

     'stdlib.h' (BSD): *note BSD Random::.

'int setstate_r (char *restrict STATEBUF, struct random_data *restrict BUF)'

     'stdlib.h' (GNU): *note BSD Random::.

'int settimeofday (const struct timeval *TP, const struct timezone *TZP)'

     'sys/time.h' (BSD): *note High-Resolution Calendar::.

'int setuid (uid_t NEWUID)'

     'unistd.h' (POSIX.1): *note Setting User ID::.

'void setutent (void)'

     'utmp.h' (SVID): *note Manipulating the Database::.

'void setutxent (void)'

     'utmpx.h' (XPG4.2): *note XPG Functions::.

'int setvbuf (FILE *STREAM, char *BUF, int MODE, size_t SIZE)'

     'stdio.h' (ISO): *note Controlling Buffering::.

'struct sgttyb'

     'termios.h' (BSD): *note BSD Terminal Modes::.

'int shm_open (const char *NAME, int OFLAG, mode_t MODE)'

     'sys/mman.h' (POSIX): *note Memory-mapped I/O::.

'int shutdown (int SOCKET, int HOW)'

     'sys/socket.h' (BSD): *note Closing a Socket::.

'sig_atomic_t'

     'signal.h' (ISO): *note Atomic Types::.

'int sigaction (int SIGNUM, const struct sigaction *restrict ACTION, struct sigaction *restrict OLD-ACTION)'

     'signal.h' (POSIX.1): *note Advanced Signal Handling::.

'struct sigaction'

     'signal.h' (POSIX.1): *note Advanced Signal Handling::.

'int sigaddset (sigset_t *SET, int SIGNUM)'

     'signal.h' (POSIX.1): *note Signal Sets::.

'int sigaltstack (const stack_t *restrict STACK, stack_t *restrict OLDSTACK)'

     'signal.h' (XPG): *note Signal Stack::.

'int sigblock (int MASK)'

     'signal.h' (BSD): *note BSD Signal Handling::.

'int sigdelset (sigset_t *SET, int SIGNUM)'

     'signal.h' (POSIX.1): *note Signal Sets::.

'int sigemptyset (sigset_t *SET)'

     'signal.h' (POSIX.1): *note Signal Sets::.

'int sigfillset (sigset_t *SET)'

     'signal.h' (POSIX.1): *note Signal Sets::.

'sighandler_t'

     'signal.h' (GNU): *note Basic Signal Handling::.

'int siginterrupt (int SIGNUM, int FAILFLAG)'

     'signal.h' (XPG): *note BSD Signal Handling::.

'int sigismember (const sigset_t *SET, int SIGNUM)'

     'signal.h' (POSIX.1): *note Signal Sets::.

'sigjmp_buf'

     'setjmp.h' (POSIX.1): *note Non-Local Exits and Signals::.

'void siglongjmp (sigjmp_buf STATE, int VALUE)'

     'setjmp.h' (POSIX.1): *note Non-Local Exits and Signals::.

'int sigmask (int SIGNUM)'

     'signal.h' (BSD): *note BSD Signal Handling::.

'sighandler_t signal (int SIGNUM, sighandler_t ACTION)'

     'signal.h' (ISO): *note Basic Signal Handling::.

'int signbit (_float-type_ X)'

     'math.h' (ISO): *note FP Bit Twiddling::.

'double significand (double X)'

     'math.h' (BSD): *note Normalization Functions::.

'float significandf (float X)'

     'math.h' (BSD): *note Normalization Functions::.

'long double significandl (long double X)'

     'math.h' (BSD): *note Normalization Functions::.

'int sigpause (int MASK)'

     'signal.h' (BSD): *note BSD Signal Handling::.

'int sigpending (sigset_t *SET)'

     'signal.h' (POSIX.1): *note Checking for Pending Signals::.

'int sigprocmask (int HOW, const sigset_t *restrict SET, sigset_t *restrict OLDSET)'

     'signal.h' (POSIX.1): *note Process Signal Mask::.

'sigset_t'

     'signal.h' (POSIX.1): *note Signal Sets::.

'int sigsetjmp (sigjmp_buf STATE, int SAVESIGS)'

     'setjmp.h' (POSIX.1): *note Non-Local Exits and Signals::.

'int sigsetmask (int MASK)'

     'signal.h' (BSD): *note BSD Signal Handling::.

'int sigstack (struct sigstack *STACK, struct sigstack *OLDSTACK)'

     'signal.h' (BSD): *note Signal Stack::.

'struct sigstack'

     'signal.h' (BSD): *note Signal Stack::.

'int sigsuspend (const sigset_t *SET)'

     'signal.h' (POSIX.1): *note Sigsuspend::.

'double sin (double X)'

     'math.h' (ISO): *note Trig Functions::.

'void sincos (double X, double *SINX, double *COSX)'

     'math.h' (GNU): *note Trig Functions::.

'void sincosf (float X, float *SINX, float *COSX)'

     'math.h' (GNU): *note Trig Functions::.

'_FloatN sincosfN (_FloatN X, _FloatN *SINX, _FloatN *COSX)'

     'math.h' (GNU): *note Trig Functions::.

'_FloatNx sincosfNx (_FloatNx X, _FloatNx *SINX, _FloatNx *COSX)'

     'math.h' (GNU): *note Trig Functions::.

'void sincosl (long double X, long double *SINX, long double *COSX)'

     'math.h' (GNU): *note Trig Functions::.

'float sinf (float X)'

     'math.h' (ISO): *note Trig Functions::.

'_FloatN sinfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Trig Functions::.

'_FloatNx sinfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Trig Functions::.

'double sinh (double X)'

     'math.h' (ISO): *note Hyperbolic Functions::.

'float sinhf (float X)'

     'math.h' (ISO): *note Hyperbolic Functions::.

'_FloatN sinhfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Hyperbolic Functions::.

'_FloatNx sinhfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Hyperbolic Functions::.

'long double sinhl (long double X)'

     'math.h' (ISO): *note Hyperbolic Functions::.

'long double sinl (long double X)'

     'math.h' (ISO): *note Trig Functions::.

'size_t'

     'stddef.h' (ISO): *note Important Data Types::.

'unsigned int sleep (unsigned int SECONDS)'

     'unistd.h' (POSIX.1): *note Sleeping::.

'int snprintf (char *S, size_t SIZE, const char *TEMPLATE, ...)'

     'stdio.h' (GNU): *note Formatted Output Functions::.

'struct sockaddr'

     'sys/socket.h' (BSD): *note Address Formats::.

'struct sockaddr_in'

     'netinet/in.h' (BSD): *note Internet Address Formats::.

'struct sockaddr_un'

     'sys/un.h' (BSD): *note Local Namespace Details::.

'int socket (int NAMESPACE, int STYLE, int PROTOCOL)'

     'sys/socket.h' (BSD): *note Creating a Socket::.

'int socketpair (int NAMESPACE, int STYLE, int PROTOCOL, int FILEDES[2])'

     'sys/socket.h' (BSD): *note Socket Pairs::.

'speed_t'

     'termios.h' (POSIX.1): *note Line Speed::.

'int sprintf (char *S, const char *TEMPLATE, ...)'

     'stdio.h' (ISO): *note Formatted Output Functions::.

'double sqrt (double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'float sqrtf (float X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'_FloatN sqrtfN (_FloatN X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'_FloatNx sqrtfNx (_FloatNx X)'

     'math.h' (TS 18661-3:2015): *note Exponents and Logarithms::.

'long double sqrtl (long double X)'

     'math.h' (ISO): *note Exponents and Logarithms::.

'void srand (unsigned int SEED)'

     'stdlib.h' (ISO): *note ISO Random::.

'void srand48 (long int SEEDVAL)'

     'stdlib.h' (SVID): *note SVID Random::.

'int srand48_r (long int SEEDVAL, struct drand48_data *BUFFER)'

     'stdlib.h' (GNU): *note SVID Random::.

'void srandom (unsigned int SEED)'

     'stdlib.h' (BSD): *note BSD Random::.

'int srandom_r (unsigned int SEED, struct random_data *BUF)'

     'stdlib.h' (GNU): *note BSD Random::.

'int sscanf (const char *S, const char *TEMPLATE, ...)'

     'stdio.h' (ISO): *note Formatted Input Functions::.

'sighandler_t ssignal (int SIGNUM, sighandler_t ACTION)'

     'signal.h' (SVID): *note Basic Signal Handling::.

'ssize_t'

     'unistd.h' (POSIX.1): *note I/O Primitives::.

'stack_t'

     'signal.h' (XPG): *note Signal Stack::.

'int stat (const char *FILENAME, struct stat *BUF)'

     'sys/stat.h' (POSIX.1): *note Reading Attributes::.

'struct stat'

     'sys/stat.h' (POSIX.1): *note Attribute Meanings::.

'int stat64 (const char *FILENAME, struct stat64 *BUF)'

     'sys/stat.h' (Unix98): *note Reading Attributes::.

'struct stat64'

     'sys/stat.h' (LFS): *note Attribute Meanings::.

'FILE * stderr'

     'stdio.h' (ISO): *note Standard Streams::.

'FILE * stdin'

     'stdio.h' (ISO): *note Standard Streams::.

'FILE * stdout'

     'stdio.h' (ISO): *note Standard Streams::.

'int stime (const time_t *NEWTIME)'

     'time.h' (SVID): *note Simple Calendar Time::.

     'time.h' (XPG): *note Simple Calendar Time::.

'char * stpcpy (char *restrict TO, const char *restrict FROM)'

     'string.h' (Unknown origin): *note Copying Strings and Arrays::.

'char * stpncpy (char *restrict TO, const char *restrict FROM, size_t SIZE)'

     'string.h' (GNU): *note Truncating Strings::.

'int strcasecmp (const char *S1, const char *S2)'

     'string.h' (BSD): *note String/Array Comparison::.

'char * strcasestr (const char *HAYSTACK, const char *NEEDLE)'

     'string.h' (GNU): *note Search Functions::.

'char * strcat (char *restrict TO, const char *restrict FROM)'

     'string.h' (ISO): *note Concatenating Strings::.

'char * strchr (const char *STRING, int C)'

     'string.h' (ISO): *note Search Functions::.

'char * strchrnul (const char *STRING, int C)'

     'string.h' (GNU): *note Search Functions::.

'int strcmp (const char *S1, const char *S2)'

     'string.h' (ISO): *note String/Array Comparison::.

'int strcoll (const char *S1, const char *S2)'

     'string.h' (ISO): *note Collation Functions::.

'char * strcpy (char *restrict TO, const char *restrict FROM)'

     'string.h' (ISO): *note Copying Strings and Arrays::.

'size_t strcspn (const char *STRING, const char *STOPSET)'

     'string.h' (ISO): *note Search Functions::.

'char * strdup (const char *S)'
vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
