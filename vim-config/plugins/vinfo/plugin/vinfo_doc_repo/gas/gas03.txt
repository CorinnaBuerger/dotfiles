     the assembler will both warn about missing NOP instructions and
     then insert them automatically.

'-mY'
     disables warnings about missing NOP instructions.

'-md'
     mark the object file as one that requires data to copied from ROM
     to RAM at execution startup.  Disabled by default.

'-mdata-region=REGION'
     Select the region data will be placed in.  Region placement is
     performed by the compiler and linker.  The only effect this option
     will have on the assembler is that if UPPER or EITHER is selected,
     then the symbols to initialise high data and bss will be defined.
     Valid REGION values are:
     'none'
     'lower'
     'upper'
     'either'

==============================================================================
File: as.info,  Node: |MSP430_Syntax|,  Next: |MSP430_Floating_Point|,  Prev: |MSP430_Options|,  Up: |MSP430_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *MSP430_Syntax*

9.27.2 Syntax
-------------

MENU

* |MSP430_Macros|::		Macros
* |MSP430_Chars|::                Special Characters
* |MSP430_Regs|::                 Register Names
* |MSP430_Ext|::			Assembler Extensions

==============================================================================
File: as.info,  Node: |MSP430_Macros|,  Next: |MSP430_Chars|,  Up: |MSP430_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *MSP430_Macros*

9.27.2.1 Macros
.....----------

The macro syntax used on the MSP 430 is like that described in the MSP
430 Family Assembler Specification.  Normal 'as' macros should still
work.

   Additional built-in macros are:

'llo(exp)'
     Extracts least significant word from 32-bit expression 'exp'.

'lhi(exp)'
     Extracts most significant word from 32-bit expression 'exp'.

'hlo(exp)'
     Extracts 3rd word from 64-bit expression 'exp'.

'hhi(exp)'
     Extracts 4rd word from 64-bit expression 'exp'.

   They normally being used as an immediate source operand.
         mov	#llo(1), r10	;	== mov	#1, r10
         mov	#lhi(1), r10	;	== mov	#0, r10

==============================================================================
File: as.info,  Node: |MSP430_Chars|,  Next: |MSP430_Regs|,  Prev: |MSP430_Macros|,  Up: |MSP430_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *MSP430_Chars*

9.27.2.2 Special Characters
.....----------------------

A semicolon (';') appearing anywhere on a line starts a comment that
extends to the end of that line.

   If a '#' appears as the first character of a line then the whole line
is treated as a comment, but it can also be a logical line number
directive (*note Comments::) or a preprocessor control command (*note
Preprocessing::).

   Multiple statements can appear on the same line provided that they
are separated by the '{' character.

   The character '$' in jump instructions indicates current location and
implemented only for TI syntax compatibility.

==============================================================================
File: as.info,  Node: |MSP430_Regs|,  Next: |MSP430_Ext|,  Prev: |MSP430_Chars|,  Up: |MSP430_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *MSP430_Regs*

9.27.2.3 Register Names
.....------------------

General-purpose registers are represented by predefined symbols of the
form 'rN' (for global registers), where N represents a number between
'0' and '15'.  The leading letters may be in either upper or lower case;
for example, 'r13' and 'R7' are both valid register names.

   Register names 'PC', 'SP' and 'SR' cannot be used as register names
and will be treated as variables.  Use 'r0', 'r1', and 'r2' instead.

==============================================================================
File: as.info,  Node: |MSP430_Ext|,  Prev: |MSP430_Regs|,  Up: |MSP430_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *MSP430_Ext*

9.27.2.4 Assembler Extensions
.....------------------------

'@rN'
     As destination operand being treated as '0(rn)'

'0(rN)'
     As source operand being treated as '@rn'

'jCOND +N'
     Skips next N bytes followed by jump instruction and equivalent to
     'jCOND $+N+2'

   Also, there are some instructions, which cannot be found in other
assemblers.  These are branch instructions, which has different opcodes
upon jump distance.  They all got PC relative addressing mode.

'beq label'
     A polymorph instruction which is 'jeq label' in case if jump
     distance within allowed range for cpu's jump instruction.  If not,
     this unrolls into a sequence of
            jne $+6
            br  label

'bne label'
     A polymorph instruction which is 'jne label' or 'jeq +4; br label'

'blt label'
     A polymorph instruction which is 'jl label' or 'jge +4; br label'

'bltn label'
     A polymorph instruction which is 'jn label' or 'jn +2; jmp +4; br
     label'

'bltu label'
     A polymorph instruction which is 'jlo label' or 'jhs +2; br label'

'bge label'
     A polymorph instruction which is 'jge label' or 'jl +4; br label'

'bgeu label'
     A polymorph instruction which is 'jhs label' or 'jlo +4; br label'

'bgt label'
     A polymorph instruction which is 'jeq +2; jge label' or 'jeq +6; jl
     +4; br label'

'bgtu label'
     A polymorph instruction which is 'jeq +2; jhs label' or 'jeq +6;
     jlo +4; br label'

'bleu label'
     A polymorph instruction which is 'jeq label; jlo label' or 'jeq +2;
     jhs +4; br label'

'ble label'
     A polymorph instruction which is 'jeq label; jl label' or 'jeq +2;
     jge +4; br label'

'jump label'
     A polymorph instruction which is 'jmp label' or 'br label'

==============================================================================
File: as.info,  Node: |MSP430_Floating_Point|,  Next: |MSP430_Directives|,  Prev: |MSP430_Syntax|,  Up: |MSP430_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *MSP430_Floating_Point*

9.27.3 Floating Point
---------------------

The MSP 430 family uses IEEE 32-bit floating-point numbers.

==============================================================================
File: as.info,  Node: |MSP430_Directives|,  Next: |MSP430_Opcodes|,  Prev: |MSP430_Floating_Point|,  Up: |MSP430_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *MSP430_Directives*

9.27.4 MSP 430 Machine Directives
---------------------------------

'.file'
     This directive is ignored; it is accepted for compatibility with
     other MSP 430 assemblers.

          _Warning:_ in other versions of the GNU assembler, '.file' is
          used for the directive called '.app-file' in the MSP 430
          support.

'.line'
     This directive is ignored; it is accepted for compatibility with
     other MSP 430 assemblers.

'.arch'
     Sets the target microcontroller in the same way as the '-mmcu'
     command line option.

'.cpu'
     Sets the target architecture in the same way as the '-mcpu' command
     line option.

'.profiler'
     This directive instructs assembler to add new profile entry to the
     object file.

'.refsym'
     This directive instructs assembler to add an undefined reference to
     the symbol following the directive.  The maximum symbol name length
     is 1023 characters.  No relocation is created for this symbol; it
     will exist purely for pulling in object files from archives.  Note
     that this reloc is not sufficient to prevent garbage collection;
     use a KEEP() directive in the linker file to preserve such objects.

==============================================================================
File: as.info,  Node: |MSP430_Opcodes|,  Next: |MSP430_Profiling_Capability|,  Prev: |MSP430_Directives|,  Up: |MSP430_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *MSP430_Opcodes*

9.27.5 Opcodes
--------------

'as' implements all the standard MSP 430 opcodes.  No additional
pseudo-instructions are needed on this family.

   For information on the 430 machine instruction set, see 'MSP430
User's Manual, document slau049d', Texas Instrument, Inc.

==============================================================================
File: as.info,  Node: |MSP430_Profiling_Capability|,  Prev: |MSP430_Opcodes|,  Up: |MSP430_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *MSP430_Profiling_Capability*

9.27.6 Profiling Capability
---------------------------

It is a performance hit to use gcc's profiling approach for this tiny
target.  Even more - jtag hardware facility does not perform any
profiling functions.  However we've got gdb's built-in simulator where
we can do anything.

   We define new section '.profiler' which holds all profiling
information.  We define new pseudo operation '.profiler' which will
instruct assembler to add new profile entry to the object file.  Profile
should take place at the present address.

   Pseudo operation format:

   '.profiler flags,function_to_profile [, cycle_corrector, extra]'

   where:

          'flags' is a combination of the following characters:

     's'
          function entry
     'x'
          function exit
     'i'
          function is in init section
     'f'
          function is in fini section
     'l'
          library call
     'c'
          libc standard call
     'd'
          stack value demand
     'I'
          interrupt service routine
     'P'
          prologue start
     'p'
          prologue end
     'E'
          epilogue start
     'e'
          epilogue end
     'j'
          long jump / sjlj unwind
     'a'
          an arbitrary code fragment
     't'
          extra parameter saved (a constant value like frame size)

'function_to_profile'
     a function address
'cycle_corrector'
     a value which should be added to the cycle counter, zero if
     omitted.
'extra'
     any extra parameter, zero if omitted.

   For example:
     .global fxx
     .type fxx,@function
     fxx:
     .LFrameOffset_fxx=0x08
     .profiler "scdP", fxx     ; function entry.
     			  ; we also demand stack value to be saved
       push r11
       push r10
       push r9
       push r8
     .profiler "cdpt",fxx,0, .LFrameOffset_fxx  ; check stack value at this point
     					  ; (this is a prologue end)
     					  ; note, that spare var filled with
     					  ; the farme size
       mov r15,r8
     ...
     .profiler cdE,fxx         ; check stack
       pop r8
       pop r9
       pop r10
       pop r11
     .profiler xcde,fxx,3      ; exit adds 3 to the cycle counter
       ret                     ; cause 'ret' insn takes 3 cycles

==============================================================================
File: as.info,  Node: |NDS32_Dependent|,  Next: |NiosII_Dependent|,  Prev: |MSP430_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *NDS32_Dependent*

9.28 NDS32 Dependent Features
=====------------------------

The NDS32 processors family includes high-performance and low-power
32-bit processors for high-end to low-end.  GNU 'as' for NDS32
architectures supports NDS32 ISA version 3.  For detail about NDS32
instruction set, please see the AndeStar ISA User Manual which is
available at http://www.andestech.com/en/index/index.htm

MENU

* |NDS32_Options|::         Assembler options
* |NDS32_Syntax|::          High-level assembly macros

==============================================================================
File: as.info,  Node: |NDS32_Options|,  Next: |NDS32_Syntax|,  Up: |NDS32_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *NDS32_Options*

9.28.1 NDS32 Options
--------------------

The NDS32 configurations of GNU 'as' support these special options:

'-O1'
     Optimize for performance.

'-Os'
     Optimize for space.

'-EL'
     Produce little endian data output.

'-EB'
     Produce little endian data output.

'-mpic'
     Generate PIC.

'-mno-fp-as-gp-relax'
     Suppress fp-as-gp relaxation for this file.

'-mb2bb-relax'
     Back-to-back branch optimization.

'-mno-all-relax'
     Suppress all relaxation for this file.

'-march=<arch name>'
     Assemble for architecture <arch name> which could be v3, v3j, v3m,
     v3f, v3s, v2, v2j, v2f, v2s.

'-mbaseline=<baseline>'
     Assemble for baseline <baseline> which could be v2, v3, v3m.

'-mfpu-freg=FREG'
     Specify a FPU configuration.
     '0 8 SP / 4 DP registers'
     '1 16 SP / 8 DP registers'
     '2 32 SP / 16 DP registers'
     '3 32 SP / 32 DP registers'

'-mabi=ABI'
     Specify a abi version <abi> could be v1, v2, v2fp, v2fpp.

'-m[no-]mac'
     Enable/Disable Multiply instructions support.

'-m[no-]div'
     Enable/Disable Divide instructions support.

'-m[no-]16bit-ext'
     Enable/Disable 16-bit extension

'-m[no-]dx-regs'
     Enable/Disable d0/d1 registers

'-m[no-]perf-ext'
     Enable/Disable Performance extension

'-m[no-]perf2-ext'
     Enable/Disable Performance extension 2

'-m[no-]string-ext'
     Enable/Disable String extension

'-m[no-]reduced-regs'
     Enable/Disable Reduced Register configuration (GPR16) option

'-m[no-]audio-isa-ext'
     Enable/Disable AUDIO ISA extension

'-m[no-]fpu-sp-ext'
     Enable/Disable FPU SP extension

'-m[no-]fpu-dp-ext'
     Enable/Disable FPU DP extension

'-m[no-]fpu-fma'
     Enable/Disable FPU fused-multiply-add instructions

'-mall-ext'
     Turn on all extensions and instructions support

==============================================================================
File: as.info,  Node: |NDS32_Syntax|,  Prev: |NDS32_Options|,  Up: |NDS32_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *NDS32_Syntax*

9.28.2 Syntax
-------------

MENU

* |NDS32_Chars|::                Special Characters
* |NDS32_Regs|::                 Register Names
* |NDS32_Ops|::                  Pseudo Instructions

==============================================================================
File: as.info,  Node: |NDS32_Chars|,  Next: |NDS32_Regs|,  Up: |NDS32_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *NDS32_Chars*

9.28.2.1 Special Characters
.....----------------------

Use '#' at column 1 and '!' anywhere in the line except inside quotes.

   Multiple instructions in a line are allowed though not recommended
and should be separated by ';'.

   Assembler is not case-sensitive in general except user defined label.
For example, 'jral F1' is different from 'jral f1' while it is the same
as 'JRAL F1'.

==============================================================================
File: as.info,  Node: |NDS32_Regs|,  Next: |NDS32_Ops|,  Prev: |NDS32_Chars|,  Up: |NDS32_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *NDS32_Regs*

9.28.2.2 Register Names
.....------------------

'General purpose registers (GPR)'
     There are 32 32-bit general purpose registers $r0 to $r31.

'Accumulators d0 and d1'
     64-bit accumulators: $d0.hi, $d0.lo, $d1.hi, and $d1.lo.

'Assembler reserved register $ta'
     Register $ta ($r15) is reserved for assembler using.

'Operating system reserved registers $p0 and $p1'
     Registers $p0 ($r26) and $p1 ($r27) are used by operating system as
     scratch registers.

'Frame pointer $fp'
     Register $r28 is regarded as the frame pointer.

'Global pointer'
     Register $r29 is regarded as the global pointer.

'Link pointer'
     Register $r30 is regarded as the link pointer.

'Stack pointer'
     Register $r31 is regarded as the stack pointer.

==============================================================================
File: as.info,  Node: |NDS32_Ops|,  Prev: |NDS32_Regs|,  Up: |NDS32_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *NDS32_Ops*

9.28.2.3 Pseudo Instructions
.....-----------------------

'li rt5,imm32'
     load 32-bit integer into register rt5.  'sethi rt5,hi20(imm32)' and
     then 'ori rt5,reg,lo12(imm32)'.

'la rt5,var'
     Load 32-bit address of var into register rt5.  'sethi
     rt5,hi20(var)' and then 'ori reg,rt5,lo12(var)'

'l.[bhw] rt5,var'
     Load value of var into register rt5.  'sethi $ta,hi20(var)' and
     then 'l[bhw]i rt5,[$ta+lo12(var)]'

'l.[bh]s rt5,var'
     Load value of var into register rt5.  'sethi $ta,hi20(var)' and
     then 'l[bh]si rt5,[$ta+lo12(var)]'

'l.[bhw]p rt5,var,inc'
     Load value of var into register rt5 and increment $ta by amount
     inc.  'la $ta,var' and then 'l[bhw]i.bi rt5,[$ta],inc'

'l.[bhw]pc rt5,inc'
     Continue loading value of var into register rt5 and increment $ta
     by amount inc.  'l[bhw]i.bi rt5,[$ta],inc.'

'l.[bh]sp rt5,var,inc'
     Load value of var into register rt5 and increment $ta by amount
     inc.  'la $ta,var' and then 'l[bh]si.bi rt5,[$ta],inc'

'l.[bh]spc rt5,inc'
     Continue loading value of var into register rt5 and increment $ta
     by amount inc.  'l[bh]si.bi rt5,[$ta],inc.'

's.[bhw] rt5,var'
     Store register rt5 to var.  'sethi $ta,hi20(var)' and then 's[bhw]i
     rt5,[$ta+lo12(var)]'

's.[bhw]p rt5,var,inc'
     Store register rt5 to var and increment $ta by amount inc.  'la
     $ta,var' and then 's[bhw]i.bi rt5,[$ta],inc'

's.[bhw]pc rt5,inc'
     Continue storing register rt5 to var and increment $ta by amount
     inc.  's[bhw]i.bi rt5,[$ta],inc.'

'not rt5,ra5'
     Alias of 'nor rt5,ra5,ra5'.

'neg rt5,ra5'
     Alias of 'subri rt5,ra5,0'.

'br rb5'
     Depending on how it is assembled, it is translated into 'r5 rb5' or
     'jr rb5'.

'b label'
     Branch to label depending on how it is assembled, it is translated
     into 'j8 label', 'j label', or "'la $ta,label' 'br $ta'".

'bral rb5'
     Alias of jral br5 depending on how it is assembled, it is
     translated into 'jral5 rb5' or 'jral rb5'.

'bal fname'
     Alias of jal fname depending on how it is assembled, it is
     translated into 'jal fname' or "'la $ta,fname' 'bral $ta'".

'call fname'
     Call function fname same as 'jal fname'.

'move rt5,ra5'
     For 16-bit, this is 'mov55 rt5,ra5'.  For no 16-bit, this is 'ori
     rt5,ra5,0'.

'move rt5,var'
     This is the same as 'l.w rt5,var'.

'move rt5,imm32'
     This is the same as 'li rt5,imm32'.

'pushm ra5,rb5'
     Push contents of registers from ra5 to rb5 into stack.

'push ra5'
     Push content of register ra5 into stack.  (same 'pushm ra5,ra5').

'push.d var'
     Push value of double-word variable var into stack.

'push.w var'
     Push value of word variable var into stack.

'push.h var'
     Push value of half-word variable var into stack.

'push.b var'
     Push value of byte variable var into stack.

'pusha var'
     Push 32-bit address of variable var into stack.

'pushi imm32'
     Push 32-bit immediate value into stack.

'popm ra5,rb5'
     Pop top of stack values into registers ra5 to rb5.

'pop rt5'
     Pop top of stack value into register.  (same as 'popm rt5,rt5'.)

'pop.d var,ra5'
     Pop value of double-word variable var from stack using register ra5
     as 2nd scratch register.  (1st is $ta)

'pop.w var,ra5'
     Pop value of word variable var from stack using register ra5.

'pop.h var,ra5'
     Pop value of half-word variable var from stack using register ra5.

'pop.b var,ra5'
     Pop value of byte variable var from stack using register ra5.

==============================================================================
File: as.info,  Node: |NiosII_Dependent|,  Next: |NS32K_Dependent|,  Prev: |NDS32_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *NiosII_Dependent*

9.29 Nios II Dependent Features
=====--------------------------

MENU

* |Nios_II_Options|::              Options
* |Nios_II_Syntax|::               Syntax
* |Nios_II_Relocations|::          Relocations
* |Nios_II_Directives|::           Nios II Machine Directives
* |Nios_II_Opcodes|::              Opcodes

==============================================================================
File: as.info,  Node: |Nios_II_Options|,  Next: |Nios_II_Syntax|,  Up: |NiosII_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *Nios_II_Options*

9.29.1 Options
--------------

'-relax-section'
     Replace identified out-of-range branches with PC-relative 'jmp'
     sequences when possible.  The generated code sequences are suitable
     for use in position-independent code, but there is a practical
     limit on the extended branch range because of the length of the
     sequences.  This option is the default.

'-relax-all'
     Replace branch instructions not determinable to be in range and all
     call instructions with 'jmp' and 'callr' sequences (respectively).
     This option generates absolute relocations against the target
     symbols and is not appropriate for position-independent code.

'-no-relax'
     Do not replace any branches or calls.

'-EB'
     Generate big-endian output.

'-EL'
     Generate little-endian output.  This is the default.

'-march=ARCHITECTURE'
     This option specifies the target architecture.  The assembler
     issues an error message if an attempt is made to assemble an
     instruction which will not execute on the target architecture.  The
     following architecture names are recognized: 'r1', 'r2'.  The
     default is 'r1'.

==============================================================================
File: as.info,  Node: |Nios_II_Syntax|,  Next: |Nios_II_Relocations|,  Prev: |Nios_II_Options|,  Up: |NiosII_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Nios_II_Syntax*

9.29.2 Syntax
-------------

MENU

* |Nios_II_Chars|::                Special Characters

==============================================================================
File: as.info,  Node: |Nios_II_Chars|,  Up: |Nios_II_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Nios_II_Chars*

9.29.2.1 Special Characters
.....----------------------

'#' is the line comment character.  ';' is the line separator character.

==============================================================================
File: as.info,  Node: |Nios_II_Relocations|,  Next: |Nios_II_Directives|,  Prev: |Nios_II_Syntax|,  Up: |NiosII_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *Nios_II_Relocations*

9.29.3 Nios II Machine Relocations
----------------------------------

'%hiadj(EXPRESSION)'
     Extract the upper 16 bits of EXPRESSION and add one if the 15th bit
     is set.

     The value of '%hiadj(EXPRESSION)' is:
          ((EXPRESSION >> 16) & 0xffff) + ((EXPRESSION >> 15) & 0x01)

     The '%hiadj' relocation is intended to be used with the 'addi',
     'ld' or 'st' instructions along with a '%lo', in order to load a
     32-bit constant.

          movhi r2, %hiadj(symbol)
          addi r2, r2, %lo(symbol)

'%hi(EXPRESSION)'
     Extract the upper 16 bits of EXPRESSION.

'%lo(EXPRESSION)'
     Extract the lower 16 bits of EXPRESSION.

'%gprel(EXPRESSION)'
     Subtract the value of the symbol '_gp' from EXPRESSION.

     The intention of the '%gprel' relocation is to have a fast small
     area of memory which only takes a 16-bit immediate to access.

          	.section .sdata
          fastint:
          	.int 123
          	.section .text
          	ldw r4, %gprel(fastint)(gp)

'%call(EXPRESSION)'
'%call_lo(EXPRESSION)'
'%call_hiadj(EXPRESSION)'
'%got(EXPRESSION)'
'%got_lo(EXPRESSION)'
'%got_hiadj(EXPRESSION)'
'%gotoff(EXPRESSION)'
'%gotoff_lo(EXPRESSION)'
'%gotoff_hiadj(EXPRESSION)'
'%tls_gd(EXPRESSION)'
'%tls_ie(EXPRESSION)'
'%tls_le(EXPRESSION)'
'%tls_ldm(EXPRESSION)'
'%tls_ldo(EXPRESSION)'

     These relocations support the ABI for Linux Systems documented in
     the 'Nios II Processor Reference Handbook'.

==============================================================================
File: as.info,  Node: |Nios_II_Directives|,  Next: |Nios_II_Opcodes|,  Prev: |Nios_II_Relocations|,  Up: |NiosII_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *Nios_II_Directives*

9.29.4 Nios II Machine Directives
---------------------------------

'.align EXPRESSION [, EXPRESSION]'
     This is the generic '.align' directive, however this aligns to a
     power of two.

'.half EXPRESSION'
     Create an aligned constant 2 bytes in size.

'.word EXPRESSION'
     Create an aligned constant 4 bytes in size.

'.dword EXPRESSION'
     Create an aligned constant 8 bytes in size.

'.2byte EXPRESSION'
     Create an unaligned constant 2 bytes in size.

'.4byte EXPRESSION'
     Create an unaligned constant 4 bytes in size.

'.8byte EXPRESSION'
     Create an unaligned constant 8 bytes in size.

'.16byte EXPRESSION'
     Create an unaligned constant 16 bytes in size.

'.set noat'
     Allows assembly code to use 'at' register without warning.  Macro
     or relaxation expansions generate warnings.

'.set at'
     Assembly code using 'at' register generates warnings, and macro
     expansion and relaxation are enabled.

'.set nobreak'
     Allows assembly code to use 'ba' and 'bt' registers without
     warning.

'.set break'
     Turns warnings back on for using 'ba' and 'bt' registers.

'.set norelax'
     Do not replace any branches or calls.

'.set relaxsection'
     Replace identified out-of-range branches with 'jmp' sequences
     (default).

'.set relaxsection'
     Replace all branch and call instructions with 'jmp' and 'callr'
     sequences.

'.set ...'
     All other '.set' are the normal use.

==============================================================================
File: as.info,  Node: |Nios_II_Opcodes|,  Prev: |Nios_II_Directives|,  Up: |NiosII_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *Nios_II_Opcodes*

9.29.5 Opcodes
--------------

'as' implements all the standard Nios II opcodes documented in the 'Nios
II Processor Reference Handbook', including the assembler
pseudo-instructions.

==============================================================================
File: as.info,  Node: |NS32K_Dependent|,  Next: |PDP_11_Dependent|,  Prev: |NiosII_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *NS32K_Dependent*

9.30 NS32K Dependent Features
=====------------------------

MENU

* |NS32K_Syntax|::               Syntax

==============================================================================
File: as.info,  Node: |NS32K_Syntax|,  Up: |NS32K_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *NS32K_Syntax*

9.30.1 Syntax
-------------

MENU

* |NS32K_Chars|::                Special Characters

==============================================================================
File: as.info,  Node: |NS32K_Chars|,  Up: NS32K Syntax
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *NS32K_Chars*

9.30.1.1 Special Characters
.....----------------------

The presence of a '#' appearing anywhere on a line indicates the start
of a comment that extends to the end of that line.

   If a '#' appears as the first character of a line then the whole line
is treated as a comment, but in this case the line can also be a logical
line number directive (*note Comments::) or a preprocessor control
command (*note Preprocessing::).

   If Sequent compatibility has been configured into the assembler then
the '|' character appearing as the first character on a line will also
indicate the start of a line comment.

   The ';' character can be used to separate statements on the same
line.

==============================================================================
File: as.info,  Node: |PDP_11_Dependent|,  Next: |PJ_Dependent|,  Prev: |NS32K_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *PDP_11_Dependent*

9.31 PDP-11 Dependent Features
=====-------------------------

MENU

* |PDP_11_Options|::		Options
* |PDP_11_Pseudos|::		Assembler Directives
* |PDP_11_Syntax|::		DEC Syntax versus BSD Syntax
* |PDP_11_Mnemonics|::		Instruction Naming
* |PDP_11_Synthetic|::		Synthetic Instructions

==============================================================================
File: as.info,  Node: |PDP_11_Options|,  Next: |PDP_11_Pseudos|,  Up: |PDP_11_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *PDP_11_Options*

9.31.1 Options
--------------

The PDP-11 version of 'as' has a rich set of machine dependent options.

9.31.1.1 Code Generation Options
.....---------------------------

'-mpic | -mno-pic'
     Generate position-independent (or position-dependent) code.

     The default is to generate position-independent code.

9.31.1.2 Instruction Set Extension Options
.....-------------------------------------

These options enables or disables the use of extensions over the base
line instruction set as introduced by the first PDP-11 CPU: the KA11.
Most options come in two variants: a '-m'EXTENSION that enables
EXTENSION, and a '-mno-'EXTENSION that disables EXTENSION.

   The default is to enable all extensions.

'-mall | -mall-extensions'
     Enable all instruction set extensions.

'-mno-extensions'
     Disable all instruction set extensions.

'-mcis | -mno-cis'
     Enable (or disable) the use of the commercial instruction set,
     which consists of these instructions: 'ADDNI', 'ADDN', 'ADDPI',
     'ADDP', 'ASHNI', 'ASHN', 'ASHPI', 'ASHP', 'CMPCI', 'CMPC', 'CMPNI',
     'CMPN', 'CMPPI', 'CMPP', 'CVTLNI', 'CVTLN', 'CVTLPI', 'CVTLP',
     'CVTNLI', 'CVTNL', 'CVTNPI', 'CVTNP', 'CVTPLI', 'CVTPL', 'CVTPNI',
     'CVTPN', 'DIVPI', 'DIVP', 'L2DR', 'L3DR', 'LOCCI', 'LOCC', 'MATCI',
     'MATC', 'MOVCI', 'MOVC', 'MOVRCI', 'MOVRC', 'MOVTCI', 'MOVTC',
     'MULPI', 'MULP', 'SCANCI', 'SCANC', 'SKPCI', 'SKPC', 'SPANCI',
     'SPANC', 'SUBNI', 'SUBN', 'SUBPI', and 'SUBP'.

'-mcsm | -mno-csm'
     Enable (or disable) the use of the 'CSM' instruction.

'-meis | -mno-eis'
     Enable (or disable) the use of the extended instruction set, which
     consists of these instructions: 'ASHC', 'ASH', 'DIV', 'MARK',
     'MUL', 'RTT', 'SOB' 'SXT', and 'XOR'.

'-mfis | -mkev11'
'-mno-fis | -mno-kev11'
     Enable (or disable) the use of the KEV11 floating-point
     instructions: 'FADD', 'FDIV', 'FMUL', and 'FSUB'.

'-mfpp | -mfpu | -mfp-11'
'-mno-fpp | -mno-fpu | -mno-fp-11'
     Enable (or disable) the use of FP-11 floating-point instructions:
     'ABSF', 'ADDF', 'CFCC', 'CLRF', 'CMPF', 'DIVF', 'LDCFF', 'LDCIF',
     'LDEXP', 'LDF', 'LDFPS', 'MODF', 'MULF', 'NEGF', 'SETD', 'SETF',
     'SETI', 'SETL', 'STCFF', 'STCFI', 'STEXP', 'STF', 'STFPS', 'STST',
     'SUBF', and 'TSTF'.

'-mlimited-eis | -mno-limited-eis'
     Enable (or disable) the use of the limited extended instruction
     set: 'MARK', 'RTT', 'SOB', 'SXT', and 'XOR'.

     The -mno-limited-eis options also implies -mno-eis.

'-mmfpt | -mno-mfpt'
     Enable (or disable) the use of the 'MFPT' instruction.

'-mmultiproc | -mno-multiproc'
     Enable (or disable) the use of multiprocessor instructions:
     'TSTSET' and 'WRTLCK'.

'-mmxps | -mno-mxps'
     Enable (or disable) the use of the 'MFPS' and 'MTPS' instructions.

'-mspl | -mno-spl'
     Enable (or disable) the use of the 'SPL' instruction.

     Enable (or disable) the use of the microcode instructions: 'LDUB',
     'MED', and 'XFC'.

9.31.1.3 CPU Model Options
.....---------------------

These options enable the instruction set extensions supported by a
particular CPU, and disables all other extensions.

'-mka11'
     KA11 CPU. Base line instruction set only.

'-mkb11'
     KB11 CPU. Enable extended instruction set and 'SPL'.

'-mkd11a'
     KD11-A CPU. Enable limited extended instruction set.

'-mkd11b'
     KD11-B CPU. Base line instruction set only.

'-mkd11d'
     KD11-D CPU. Base line instruction set only.

'-mkd11e'
     KD11-E CPU. Enable extended instruction set, 'MFPS', and 'MTPS'.

'-mkd11f | -mkd11h | -mkd11q'
     KD11-F, KD11-H, or KD11-Q CPU. Enable limited extended instruction
     set, 'MFPS', and 'MTPS'.

'-mkd11k'
     KD11-K CPU. Enable extended instruction set, 'LDUB', 'MED', 'MFPS',
     'MFPT', 'MTPS', and 'XFC'.

'-mkd11z'
     KD11-Z CPU. Enable extended instruction set, 'CSM', 'MFPS', 'MFPT',
     'MTPS', and 'SPL'.

'-mf11'
     F11 CPU. Enable extended instruction set, 'MFPS', 'MFPT', and
     'MTPS'.

'-mj11'
     J11 CPU. Enable extended instruction set, 'CSM', 'MFPS', 'MFPT',
     'MTPS', 'SPL', 'TSTSET', and 'WRTLCK'.

'-mt11'
     T11 CPU. Enable limited extended instruction set, 'MFPS', and
     'MTPS'.

9.31.1.4 Machine Model Options
.....-------------------------

These options enable the instruction set extensions supported by a
particular machine model, and disables all other extensions.

'-m11/03'
     Same as '-mkd11f'.

'-m11/04'
     Same as '-mkd11d'.

'-m11/05 | -m11/10'
     Same as '-mkd11b'.

'-m11/15 | -m11/20'
     Same as '-mka11'.

'-m11/21'
     Same as '-mt11'.

'-m11/23 | -m11/24'
     Same as '-mf11'.

'-m11/34'
     Same as '-mkd11e'.

'-m11/34a'
     Ame as '-mkd11e' '-mfpp'.

'-m11/35 | -m11/40'
     Same as '-mkd11a'.

'-m11/44'
     Same as '-mkd11z'.

'-m11/45 | -m11/50 | -m11/55 | -m11/70'
     Same as '-mkb11'.

'-m11/53 | -m11/73 | -m11/83 | -m11/84 | -m11/93 | -m11/94'
     Same as '-mj11'.

'-m11/60'
     Same as '-mkd11k'.

==============================================================================
File: as.info,  Node: |PDP_11_Pseudos|,  Next: |PDP_11_Syntax|,  Prev: |PDP_11_Options|,  Up: |PDP_11_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *PDP_11_Pseudos*

9.31.2 Assembler Directives
---------------------------

The PDP-11 version of 'as' has a few machine dependent assembler
directives.

'.bss'
     Switch to the 'bss' section.

'.even'
     Align the location counter to an even number.

==============================================================================
File: as.info,  Node: |PDP_11_Syntax|,  Next: |PDP_11_Mnemonics|,  Prev: |PDP_11_Pseudos|,  Up: |PDP_11_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *PDP_11_Syntax*

9.31.3 PDP-11 Assembly Language Syntax
--------------------------------------

'as' supports both DEC syntax and BSD syntax.  The only difference is
that in DEC syntax, a '#' character is used to denote an immediate
constants, while in BSD syntax the character for this purpose is '$'.

   general-purpose registers are named 'r0' through 'r7'.  Mnemonic
alternatives for 'r6' and 'r7' are 'sp' and 'pc', respectively.

   Floating-point registers are named 'ac0' through 'ac3', or
alternatively 'fr0' through 'fr3'.

   Comments are started with a '#' or a '/' character, and extend to the
end of the line.  (FIXME: clash with immediates?)

   Multiple statements on the same line can be separated by the ';'
character.

==============================================================================
File: as.info,  Node: |PDP_11_Mnemonics|,  Next: |PDP_11_Synthetic|,  Prev: |PDP_11_Syntax|,  Up: |PDP_11_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *PDP_11_Mnemonics*

9.31.4 Instruction Naming
-------------------------

Some instructions have alternative names.

'BCC'
     'BHIS'

'BCS'
     'BLO'

'L2DR'
     'L2D'

'L3DR'
     'L3D'

'SYS'
     'TRAP'

==============================================================================
File: as.info,  Node: |PDP_11_Synthetic|,  Prev: |PDP_11_Mnemonics|,  Up: |PDP_11_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *PDP_11_Synthetic*

9.31.5 Synthetic Instructions
-----------------------------

The 'JBR' and 'J'CC synthetic instructions are not supported yet.

==============================================================================
File: as.info,  Node: |PJ_Dependent|,  Next: |PPC_Dependent|,  Prev: |PDP_11_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *PJ_Dependent*

9.32 picoJava Dependent Features
=====---------------------------

MENU

* |PJ_Options|::              Options
* |PJ_Syntax|::               PJ Syntax

==============================================================================
File: as.info,  Node: |PJ_Options|,  Next: |PJ_Syntax|,  Up: |PJ_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *PJ_Options*

9.32.1 Options
--------------

'as' has two additional command-line options for the picoJava
architecture.
'-ml'
     This option selects little endian data output.

'-mb'
     This option selects big endian data output.

==============================================================================
File: as.info,  Node: |PJ_Syntax|,  Prev: |PJ_Options|,  Up: |PJ_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *PJ_Syntax*

9.32.2 PJ Syntax
----------------

MENU

* |PJ_Chars|::                Special Characters

==============================================================================
File: as.info,  Node: |PJ_Chars|,  Up: |PJ_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *PJ_Chars*

9.32.2.1 Special Characters
.....----------------------

The presence of a '!' or '/' on a line indicates the start of a comment
that extends to the end of the current line.

   If a '#' appears as the first character of a line then the whole line
is treated as a comment, but in this case the line could also be a
logical line number directive (*note Comments::) or a preprocessor
control command (*note Preprocessing::).

   The ';' character can be used to separate statements on the same
line.

==============================================================================
File: as.info,  Node: |PPC_Dependent|,  Next: |PRU_Dependent|,  Prev: |PJ_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *PPC_Dependent*

9.33 PowerPC Dependent Features
=====--------------------------

MENU

* |PowerPC_Opts|::                Options
* |PowerPC_Pseudo|::              PowerPC Assembler Directives
* |PowerPC_Syntax|::              PowerPC Syntax

==============================================================================
File: as.info,  Node: |PowerPC_Opts|,  Next: |PowerPC_Pseudo|,  Up: |PPC_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *PowerPC_Opts*

9.33.1 Options
--------------

The PowerPC chip family includes several successive levels, using the
same core instruction set, but including a few additional instructions
at each level.  There are exceptions to this however.  For details on
what instructions each variant supports, please see the chip's
architecture reference manual.

   The following table lists all available PowerPC options.

'-a32'
     Generate ELF32 or XCOFF32.

'-a64'
     Generate ELF64 or XCOFF64.

'-K PIC'
     Set EF_PPC_RELOCATABLE_LIB in ELF flags.

'-mpwrx | -mpwr2'
     Generate code for POWER/2 (RIOS2).

'-mpwr'
     Generate code for POWER (RIOS1)

'-m601'
     Generate code for PowerPC 601.

'-mppc, -mppc32, -m603, -m604'
     Generate code for PowerPC 603/604.

'-m403, -m405'
     Generate code for PowerPC 403/405.

'-m440'
     Generate code for PowerPC 440.  BookE and some 405 instructions.

'-m464'
     Generate code for PowerPC 464.

'-m476'
     Generate code for PowerPC 476.

'-m7400, -m7410, -m7450, -m7455'
     Generate code for PowerPC 7400/7410/7450/7455.

'-m750cl'
     Generate code for PowerPC 750CL.

'-m821, -m850, -m860'
     Generate code for PowerPC 821/850/860.

'-mppc64, -m620'
     Generate code for PowerPC 620/625/630.

'-me500, -me500x2'
     Generate code for Motorola e500 core complex.

'-me500mc'
     Generate code for Freescale e500mc core complex.

'-me500mc64'
     Generate code for Freescale e500mc64 core complex.

'-me5500'
     Generate code for Freescale e5500 core complex.

'-me6500'
     Generate code for Freescale e6500 core complex.

'-mspe'
     Generate code for Motorola SPE instructions.

'-mspe2'
     Generate code for Freescale SPE2 instructions.

'-mtitan'
     Generate code for AppliedMicro Titan core complex.

'-mppc64bridge'
     Generate code for PowerPC 64, including bridge insns.

'-mbooke'
     Generate code for 32-bit BookE.

'-ma2'
     Generate code for A2 architecture.

'-me300'
     Generate code for PowerPC e300 family.

'-maltivec'
     Generate code for processors with AltiVec instructions.

'-mvle'
     Generate code for Freescale PowerPC VLE instructions.

'-mvsx'
     Generate code for processors with Vector-Scalar (VSX) instructions.

'-mhtm'
     Generate code for processors with Hardware Transactional Memory
     instructions.

'-mpower4, -mpwr4'
     Generate code for Power4 architecture.

'-mpower5, -mpwr5, -mpwr5x'
     Generate code for Power5 architecture.

'-mpower6, -mpwr6'
     Generate code for Power6 architecture.

'-mpower7, -mpwr7'
     Generate code for Power7 architecture.

'-mpower8, -mpwr8'
     Generate code for Power8 architecture.

'-mpower9, -mpwr9'
     Generate code for Power9 architecture.

'-mcell'
'-mcell'
     Generate code for Cell Broadband Engine architecture.

'-mcom'
     Generate code Power/PowerPC common instructions.

'-many'
     Generate code for any architecture (PWR/PWRX/PPC).

'-mregnames'
     Allow symbolic names for registers.

'-mno-regnames'
     Do not allow symbolic names for registers.

'-mrelocatable'
     Support for GCC's -mrelocatable option.

'-mrelocatable-lib'
     Support for GCC's -mrelocatable-lib option.

'-memb'
     Set PPC_EMB bit in ELF flags.

'-mlittle, -mlittle-endian, -le'
     Generate code for a little endian machine.

'-mbig, -mbig-endian, -be'
     Generate code for a big endian machine.

'-msolaris'
     Generate code for Solaris.

'-mno-solaris'
     Do not generate code for Solaris.

'-nops=COUNT'
     If an alignment directive inserts more than COUNT nops, put a
     branch at the beginning to skip execution of the nops.

==============================================================================
File: as.info,  Node: |PowerPC_Pseudo|,  Next: |PowerPC_Syntax|,  Prev: |PowerPC_Opts|,  Up: |PPC_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *PowerPC_Pseudo*

9.33.2 PowerPC Assembler Directives
-----------------------------------

A number of assembler directives are available for PowerPC. The
following table is far from complete.

'.machine "string"'
     This directive allows you to change the machine for which code is
     generated.  '"string"' may be any of the -m cpu selection options
     (without the -m) enclosed in double quotes, '"push"', or '"pop"'.
     '.machine "push"' saves the currently selected cpu, which may be
     restored with '.machine "pop"'.

==============================================================================
File: as.info,  Node: |PowerPC_Syntax|,  Prev: |PowerPC_Pseudo|,  Up: |PPC_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *PowerPC_Syntax*

9.33.3 PowerPC Syntax
---------------------

MENU

* |PowerPC_Chars|::                Special Characters

==============================================================================
File: as.info,  Node: |PowerPC_Chars|,  Up: |PowerPC_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *PowerPC_Chars*

9.33.3.1 Special Characters
.....----------------------

The presence of a '#' on a line indicates the start of a comment that
extends to the end of the current line.

   If a '#' appears as the first character of a line then the whole line
is treated as a comment, but in this case the line could also be a
logical line number directive (*note Comments::) or a preprocessor
control command (*note Preprocessing::).

   If the assembler has been configured for the ppc--solaris target
then the '!' character also acts as a line comment character.  This can
be disabled via the '-mno-solaris' command line option.

   The ';' character can be used to separate statements on the same
line.

==============================================================================
File: as.info,  Node: |PRU_Dependent|,  Next: |RISC_V_Dependent|,  Prev: |PPC_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *PRU_Dependent*

9.34 PRU Dependent Features
=====----------------------

MENU

* |PRU_Options|::              Options
* |PRU_Syntax|::               Syntax
* |PRU_Relocations|::          Relocations
* |PRU_Directives|::           PRU Machine Directives
* |PRU_Opcodes|::              Opcodes

==============================================================================
File: as.info,  Node: |PRU_Options|,  Next: |PRU_Syntax|,  Up: |PRU_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *PRU_Options*

9.34.1 Options
--------------

'-mlink-relax'
     Assume that LD would optimize LDI32 instructions by checking the
     upper 16 bits of the EXPRESSION.  If they are all zeros, then LD
     would shorten the LDI32 instruction to a single LDI. In such case
     'as' will output DIFF relocations for diff expressions.

'-mno-link-relax'
     Assume that LD would not optimize LDI32 instructions.  As a
     consequence, DIFF relocations will not be emitted.

'-mno-warn-regname-label'
     Do not warn if a label name matches a register name.  Usually
     assembler programmers will want this warning to be emitted.  C
     compilers may want to turn this off.

==============================================================================
File: as.info,  Node: |PRU_Syntax|,  Next: |PRU_Relocations|,  Prev: |PRU_Options|,  Up: |PRU_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *PRU_Syntax*

9.34.2 Syntax
-------------

MENU

* |PRU_Chars|::                Special Characters

==============================================================================
File: as.info,  Node: |PRU_Chars|,  Up: |PRU_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *PRU_Chars*

9.34.2.1 Special Characters
.....----------------------

'#' and ';' are the line comment characters.

==============================================================================
File: as.info,  Node: |PRU_Relocations|,  Next: |PRU_Directives|,  Prev: |PRU_Syntax|,  Up: |PRU_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *PRU_Relocations*

9.34.3 PRU Machine Relocations
------------------------------

'%pmem(EXPRESSION)'
     Convert EXPRESSION from byte-address to a word-address.  In other
     words, shift right by two.

'%label(EXPRESSION)'
     Mark the given operand as a label.  This is useful if you need to
     jump to a label that matches a register name.

          r1:
              jmp r1		; Will jump to register R1
              jmp %label(r1)	; Will jump to label r1

==============================================================================
File: as.info,  Node: |PRU_Directives|,  Next: |PRU_Opcodes|,  Prev: |PRU_Relocations|,  Up: |PRU_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *PRU_Directives*

9.34.4 PRU Machine Directives
-----------------------------

'.align EXPRESSION [, EXPRESSION]'
     This is the generic '.align' directive, however this aligns to a
     power of two.

'.word EXPRESSION'
     Create an aligned constant 4 bytes in size.

'.dword EXPRESSION'
     Create an aligned constant 8 bytes in size.

'.2byte EXPRESSION'
     Create an unaligned constant 2 bytes in size.

'.4byte EXPRESSION'
     Create an unaligned constant 4 bytes in size.

'.8byte EXPRESSION'
     Create an unaligned constant 8 bytes in size.

'.16byte EXPRESSION'
     Create an unaligned constant 16 bytes in size.

'.set no_warn_regname_label'
     Do not output warnings when a label name matches a register name.
     Equivalent to passing the '-mno-warn-regname-label' command line
     option.

==============================================================================
File: as.info,  Node: |PRU_Opcodes|,  Prev: |PRU_Directives|,  Up: |PRU_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *PRU_Opcodes*

9.34.5 Opcodes
--------------

'as' implements all the standard PRU core V3 opcodes in the original
pasm assembler.  Older cores are not supported by 'as'.

   GAS also implements the LDI32 pseudo instruction for loading a 32-bit
immediate value into a register.

            ldi32   sp, __stack_top
            ldi32   r14, 0x12345678

==============================================================================
File: as.info,  Node: |RISC_V_Dependent|,  Next: |RL78_Dependent|,  Prev: |PRU_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *RISC_V_Dependent*

9.35 RISC-V Dependent Features
=====-------------------------

MENU

* |RISC_V_Options|::        RISC-V Options
* |RISC_V_Directives|::     RISC-V Directives
* |RISC_V_Formats|::        RISC-V Instruction Formats

==============================================================================
File: as.info,  Node: |RISC_V_Options|,  Next: |RISC_V_Directives|,  Up: |RISC_V_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *RISC_V_Options*

9.35.1 RISC-V Options
---------------------

The following table lists all available RISC-V specific options.

'-fpic'
'-fPIC'
     Generate position-independent code

'-fno-pic'
     Don't generate position-independent code (default)

'-march=ISA'
     Select the base isa, as specified by ISA. For example
     -march=rv32ima.

'-mabi=ABI'
     Selects the ABI, which is either "ilp32" or "lp64", optionally
     followed by "f", "d", or "q" to indicate single-precision,
     double-precision, or quad-precision floating-point calling
     convention, or none to indicate the soft-float calling convention.
     Also, "ilp32" can optionally be followed by "e" to indicate the RVE
     ABI, which is always soft-float.

'-mrelax'
     Take advantage of linker relaxations to reduce the number of
     instructions required to materialize symbol addresses.  (default)

'-mno-relax'
     Don't do linker relaxations.

==============================================================================
File: as.info,  Node: |RISC_V_Directives|,  Next: |RISC_V_Formats|,  Prev: |RISC_V_Options|,  Up: |RISC_V_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *RISC_V_Directives*

9.35.2 RISC-V Directives
------------------------

The following table lists all available RISC-V specific directives.

'.align SIZE-LOG-2'
     Align to the given boundary, with the size given as log2 the number
     of bytes to align to.

'.half VALUE'
'.word VALUE'
'.dword VALUE'
     Emits a half-word, word, or double-word value at the current
     position.

'.dtprelword VALUE'
'.dtpreldword VALUE'
     Emits a DTP-relative word (or double-word) at the current position.
     This is meant to be used by the compiler in shared libraries for
     DWARF debug info for thread local variables.

'.bss'
     Sets the current section to the BSS section.

'.uleb128 VALUE'
'.sleb128 VALUE'
     Emits a signed or unsigned LEB128 value at the current position.
     This only accepts constant expressions, because symbol addresses
     can change with relaxation, and we don't support relocations to
     modify LEB128 values at link time.

'.option ARGUMENT'
     Modifies RISC-V specific assembler options inline with the assembly
     code.  This is used when particular instruction sequences must be
     assembled with a specific set of options.  For example, since we
     relax addressing sequences to shorter GP-relative sequences when
     possible the initial load of GP must not be relaxed and should be
     emitted as something like

          	.option push
          	.option norelax
          	la gp, __global_pointer$
          	.option pop

     in order to produce after linker relaxation the expected

          	auipc gp, %pcrel_hi(__global_pointer$)
          	addi gp, gp, %pcrel_lo(__global_pointer$)

     instead of just

          	addi gp, gp, 0

     It's not expected that options are changed in this manner during
     regular use, but there are a handful of esoteric cases like the one
     above where users need to disable particular features of the
     assembler for particular code sequences.  The complete list of
     option arguments is shown below:

     'push'
     'pop'
          Pushes or pops the current option stack.  These should be used
          whenever changing an option in line with assembly code in
          order to ensure the user's command-line options are respected
          for the bulk of the file being assembled.

     'rvc'
     'norvc'
          Enables or disables the generation of compressed instructions.
          Instructions are opportunistically compressed by the RISC-V
          assembler when possible, but sometimes this behavior is not
          desirable.

     'pic'
     'nopic'
          Enables or disables position-independent code generation.
          Unless you really know what you're doing, this should only be
          at the top of a file.

     'relax'
     'norelax'
          Enables or disables relaxation.  The RISC-V assembler and
          linker opportunistically relax some code sequences, but
          sometimes this behavior is not desirable.

'.insn VALUE'
'.insn VALUE'
     This directive permits the numeric representation of an
     instructions and makes the assembler insert the operands according
     to one of the instruction formats for '.insn' (*note
     RISC-V-Formats::).  For example, the instruction 'add a0, a1, a2'
     could be written as '.insn r 0x33, 0, 0, a0, a1, a2'.

==============================================================================
File: as.info,  Node: |RISC_V_Formats|,  Prev: |RISC_V_Directives|,  Up: |RISC_V_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *RISC_V_Formats*

9.35.3 Instruction Formats
--------------------------

The RISC-V Instruction Set Manual Volume I: User-Level ISA lists 12
instruction formats where some of the formats have multiple variants.
For the '.insn' pseudo directive the assembler recognizes some of the
formats.  Typically, the most general variant of the instruction format
is used by the '.insn' directive.

   The following table lists the abbreviations used in the table of
instruction formats:

     opcode      Unsigned immediate or opcode name for 7-bits opcode.
     opcode2     Unsigned immediate or opcode name for 2-bits opcode.
     func7       Unsigned immediate for 7-bits function code.
     func4       Unsigned immediate for 4-bits function code.
     func3       Unsigned immediate for 3-bits function code.
     func2       Unsigned immediate for 2-bits function code.
     rd          Destination register number for operand x, can be GPR or FPR.
     rd'         Destination register number for operand x,
                 only accept s0-s1, a0-a5, fs0-fs1 and fa0-fa5.
     rs1         First source register number for operand x, can be GPR or FPR.
     rs1'        First source register number for operand x,
                 only accept s0-s1, a0-a5, fs0-fs1 and fa0-fa5.
     rs2         Second source register number for operand x, can be GPR or FPR.
     rs2'        Second source register number for operand x,
                 only accept s0-s1, a0-a5, fs0-fs1 and fa0-fa5.
     simm12      Sign-extended 12-bit immediate for operand x.
     simm20      Sign-extended 20-bit immediate for operand x.
     simm6       Sign-extended 6-bit immediate for operand x.
     uimm8       Unsigned 8-bit immediate for operand x.
     symbol      Symbol or lable reference for operand x.

   The following table lists all available opcode name:

'C0'
'C1'
'C2'
     Opcode space for compressed instructions.

'LOAD'
     Opcode space for load instructions.

'LOAD_FP'
     Opcode space for floating-point load instructions.

'STORE'
     Opcode space for store instructions.

'STORE_FP'
     Opcode space for floating-point store instructions.

'AUIPC'
     Opcode space for auipc instruction.

'LUI'
     Opcode space for lui instruction.

'BRANCH'
     Opcode space for branch instructions.

'JAL'
     Opcode space for jal instruction.

'JALR'
     Opcode space for jalr instruction.

'OP'
     Opcode space for ALU instructions.

'OP_32'
     Opcode space for 32-bits ALU instructions.

'OP_IMM'
     Opcode space for ALU with immediate instructions.

'OP_IMM_32'
     Opcode space for 32-bits ALU with immediate instructions.

'OP_FP'
     Opcode space for floating-point operation instructions.

'MADD'
     Opcode space for madd instruction.

'MSUB'
     Opcode space for msub instruction.

'NMADD'
     Opcode space for nmadd instruction.

'NMSUB'
     Opcode space for msub instruction.

'AMO'
     Opcode space for atomic memory operation instructions.

'MISC_IMM'
     Opcode space for misc instructions.

'SYSTEM'
     Opcode space for system instructions.

'CUSTOM_0'
'CUSTOM_1'
'CUSTOM_2'
'CUSTOM_3'
     Opcode space for customize instructions.

   An instruction is two or four bytes in length and must be aligned on
a 2 byte boundary.  The first two bits of the instruction specify the
length of the instruction, 00, 01 and 10 indicates a two byte
instruction, 11 indicates a four byte instruction.

   The following table lists the RISC-V instruction formats that are
available with the '.insn' pseudo directive:

'R type: .insn r opcode, func3, func7, rd, rs1, rs2'
     +-------+-----+-----+-------+----+-------------+
     | func7 | rs2 | rs1 | func3 | rd |      opcode |
     +-------+-----+-----+-------+----+-------------+
     31      25    20    15      12   7             0

'R type with 4 register operands: .insn r opcode, func3, func2, rd, rs1, rs2, rs3'
     +-----+-------+-----+-----+-------+----+-------------+
     | rs3 | func2 | rs2 | rs1 | func3 | rd |      opcode |
     +-----+-------+-----+-----+-------+----+-------------+
     31    27      25    20    15      12   7             0

'I type: .insn i opcode, func3, rd, rs1, simm12'
     +-------------+-----+-------+----+-------------+
     |      simm12 | rs1 | func3 | rd |      opcode |
     +-------------+-----+-------+----+-------------+
     31            20    15      12   7             0

'S type: .insn s opcode, func3, rd, rs1, simm12'
     +--------------+-----+-----+-------+-------------+-------------+
     | simm12[11:5] | rs2 | rs1 | func3 | simm12[4:0] |      opcode |
     +--------------+-----+-----+-------+-------------+-------------+
     31             25    20    15      12            7             0

'SB type: .insn sb opcode, func3, rd, rs1, symbol'
'SB type: .insn sb opcode, func3, rd, simm12(rs1)'
     +--------------+-----+-----+-------+-------------+-------------+
     | simm21[11:5] | rs2 | rs1 | func3 | simm12[4:0] |      opcode |
     +--------------+-----+-----+-------+-------------+-------------+
     31             25    20    15      12            7             0

'U type: .insn u opcode, rd, simm20'
     +---------------------------+----+-------------+
     |                    simm20 | rd |      opcode |
     +---------------------------+----+-------------+
     31                          12   7             0

'UJ type: .insn uj opcode, rd, symbol'
     +------------+--------------+------------+---------------+----+-------------+
     | simm20[20] | simm20[10:1] | simm20[11] | simm20[19:12] | rd |      opcode |
     +------------+--------------+------------+---------------+----+-------------+
     31           30             21           20              12   7             0

'CR type: .insn cr opcode2, func4, rd, rs1'
     +---------+--------+-----+---------+
     |   func4 | rd/rs1 | rs2 | opcode2 |
     +---------+--------+-----+---------+
     15        12       7     2        0

'CI type: .insn ci opcode2, func3, rd, simm6'
     +---------+-----+--------+-----+---------+
     |   func3 | imm | rd/rs1 | imm | opcode2 |
     +---------+-----+--------+-----+---------+
     15        13    12       7     2         0

'CIW type: .insn ciw opcode2, func3, rd, uimm8'
     +---------+--------------+-----+---------+
     |   func3 |          imm | rd' | opcode2 |
     +---------+--------------+-----+---------+
     15        13             7     2         0

'CB type: .insn cb opcode2, func3, rs1, symbol'
     +---------+--------+------+--------+---------+
     |   func3 | offset | rs1' | offset | opcode2 |
     +---------+--------+------+--------+---------+
     15        13       10     7        2         0

'CJ type: .insn cj opcode2, symbol'
     +---------+--------------------+---------+
     |   func3 |        jump target | opcode2 |
     +---------+--------------------+---------+
     15        13             7     2         0

   For the complete list of all instruction format variants see The
RISC-V Instruction Set Manual Volume I: User-Level ISA.

==============================================================================
File: as.info,  Node: |RL78_Dependent|,  Next: |RX_Dependent|,  Prev: |RISC_V_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *RL78_Dependent*

9.36 RL78 Dependent Features
=====-----------------------

MENU

* |RL78_Opts|::                   RL78 Assembler Command Line Options
* |RL78_Modifiers|::              Symbolic Operand Modifiers
* |RL78_Directives|::             Assembler Directives
* |RL78_Syntax|::                 Syntax

==============================================================================
File: as.info,  Node: |RL78_Opts|,  Next: |RL78_Modifiers|,  Up: |RL78_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *RL78_Opts*

9.36.1 RL78 Options
-------------------

'relax'
     Enable support for link-time relaxation.

'norelax'
     Disable support for link-time relaxation (default).

'mg10'
     Mark the generated binary as targeting the G10 variant of the RL78
     architecture.

'mg13'
     Mark the generated binary as targeting the G13 variant of the RL78
     architecture.

'mg14'
'mrl78'
     Mark the generated binary as targeting the G14 variant of the RL78
     architecture.  This is the default.

'm32bit-doubles'
     Mark the generated binary as one that uses 32-bits to hold the
     'double' floating point type.  This is the default.

'm64bit-doubles'
     Mark the generated binary as one that uses 64-bits to hold the
     'double' floating point type.

==============================================================================
File: as.info,  Node: |RL78_Modifiers|,  Next: |RL78_Directives|,  Prev: |RL78_Opts|,  Up: |RL78_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *RL78_Modifiers*

9.36.2 Symbolic Operand Modifiers
---------------------------------

The RL78 has three modifiers that adjust the relocations used by the
linker:

'%lo16()'

     When loading a 20-bit (or wider) address into registers, this
     modifier selects the 16 least significant bits.

            movw ax,#%lo16(_sym)

'%hi16()'

     When loading a 20-bit (or wider) address into registers, this
     modifier selects the 16 most significant bits.

            movw ax,#%hi16(_sym)

'%hi8()'

     When loading a 20-bit (or wider) address into registers, this
     modifier selects the 8 bits that would go into CS or ES (i.e.  bits
     23..16).

            mov es, #%hi8(_sym)

==============================================================================
File: as.info,  Node: |RL78_Directives|,  Next: |RL78_Syntax|,  Prev: |RL78_Modifiers|,  Up: |RL78_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *RL78_Directives*

9.36.3 Assembler Directives
---------------------------

In addition to the common directives, the RL78 adds these:

'.double'
     Output a constant in "double" format, which is either a 32-bit or a
     64-bit floating point value, depending upon the setting of the
     '-m32bit-doubles'|'-m64bit-doubles' command line option.

'.bss'
     Select the BSS section.

'.3byte'
     Output a constant value in a three byte format.

'.int'
'.word'
     Output a constant value in a four byte format.

==============================================================================
File: as.info,  Node: |RL78_Syntax|,  Prev: |RL78_Directives|,  Up: |RL78_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *RL78_Syntax*

9.36.4 Syntax for the RL78
--------------------------

MENU

* |RL78_Chars|::                Special Characters

==============================================================================
File: as.info,  Node: |RL78_Chars|,  Up: |RL78_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *RL78_Chars*

9.36.4.1 Special Characters
.....----------------------

The presence of a ';' appearing anywhere on a line indicates the start
of a comment that extends to the end of that line.

   If a '#' appears as the first character of a line then the whole line
is treated as a comment, but in this case the line can also be a logical
line number directive (*note Comments::) or a preprocessor control
command (*note Preprocessing::).

   The '|' character can be used to separate statements on the same
line.

==============================================================================
File: as.info,  Node: |RX_Dependent|,  Next: |S/390_Dependent|,  Prev: |RL78_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *RX_Dependent*

9.37 RX Dependent Features
=====---------------------

MENU

* |RX_Opts|::                   RX Assembler Command Line Options
* |RX_Modifiers|::              Symbolic Operand Modifiers
* |RX_Directives|::             Assembler Directives
* |RX_Float|::                  Floating Point
* |RX_Syntax|::                 Syntax

==============================================================================
File: as.info,  Node: |RX_Opts|,  Next: |RX_Modifiers|,  Up: |RX_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *RX_Opts*

9.37.1 RX Options
-----------------

The Renesas RX port of 'as' has a few target specific command line
options:

'-m32bit-doubles'
     This option controls the ABI and indicates to use a 32-bit float
     ABI. It has no effect on the assembled instructions, but it does
     influence the behaviour of the '.double' pseudo-op.  This is the
     default.

'-m64bit-doubles'
     This option controls the ABI and indicates to use a 64-bit float
     ABI. It has no effect on the assembled instructions, but it does
     influence the behaviour of the '.double' pseudo-op.

'-mbig-endian'
     This option controls the ABI and indicates to use a big-endian data
     ABI. It has no effect on the assembled instructions, but it does
     influence the behaviour of the '.short', '.hword', '.int', '.word',
     '.long', '.quad' and '.octa' pseudo-ops.

'-mlittle-endian'
     This option controls the ABI and indicates to use a little-endian
     data ABI. It has no effect on the assembled instructions, but it
     does influence the behaviour of the '.short', '.hword', '.int',
     '.word', '.long', '.quad' and '.octa' pseudo-ops.  This is the
     default.

'-muse-conventional-section-names'
     This option controls the default names given to the code (.text),
     initialised data (.data) and uninitialised data sections (.bss).

'-muse-renesas-section-names'
     This option controls the default names given to the code (.P),
     initialised data (.D_1) and uninitialised data sections (.B_1).
     This is the default.

'-msmall-data-limit'
     This option tells the assembler that the small data limit feature
     of the RX port of GCC is being used.  This results in the assembler
     generating an undefined reference to a symbol called '__gp' for use
     by the relocations that are needed to support the small data limit
     feature.  This option is not enabled by default as it would
     otherwise pollute the symbol table.

'-mpid'
     This option tells the assembler that the position independent data
     of the RX port of GCC is being used.  This results in the assembler
     generating an undefined reference to a symbol called '__pid_base',
     and also setting the RX_PID flag bit in the e_flags field of the
     ELF header of the object file.

'-mint-register=NUM'
     This option tells the assembler how many registers have been
     reserved for use by interrupt handlers.  This is needed in order to
     compute the correct values for the '%gpreg' and '%pidreg' meta
     registers.

'-mgcc-abi'
     This option tells the assembler that the old GCC ABI is being used
     by the assembled code.  With this version of the ABI function
     arguments that are passed on the stack are aligned to a 32-bit
     boundary.

'-mrx-abi'
     This option tells the assembler that the official RX ABI is being
     used by the assembled code.  With this version of the ABI function
     arguments that are passed on the stack are aligned to their natural
     alignments.  This option is the default.

'-mcpu=NAME'
     This option tells the assembler the target CPU type.  Currently the
     'rx100', 'rx200', 'rx600', 'rx610' and 'rxv2' are recognised as
     valid cpu names.  Attempting to assemble an instruction not
     supported by the indicated cpu type will result in an error message
     being generated.

'-mno-allow-string-insns'
     This option tells the assembler to mark the object file that it is
     building as one that does not use the string instructions 'SMOVF',
     'SCMPU', 'SMOVB', 'SMOVU', 'SUNTIL' 'SWHILE' or the 'RMPA'
     instruction.  In addition the mark tells the linker to complain if
     an attempt is made to link the binary with another one that does
     use any of these instructions.

     Note - the inverse of this option, '-mallow-string-insns', is not
     needed.  The assembler automatically detects the use of the the
     instructions in the source code and labels the resulting object
     file appropriately.  If no string instructions are detected then
     the object file is labelled as being one that can be linked with
     either string-using or string-banned object files.

==============================================================================
File: as.info,  Node: |RX_Modifiers|,  Next: |RX_Directives|,  Prev: |RX_Opts|,  Up: |RX_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *RX_Modifiers*

9.37.2 Symbolic Operand Modifiers
---------------------------------

The assembler supports one modifier when using symbol addresses in RX
instruction operands.  The general syntax is the following:

     %gp(symbol)

   The modifier returns the offset from the __GP symbol to the specified
symbol as a 16-bit value.  The intent is that this offset should be used
in a register+offset move instruction when generating references to
small data.  Ie, like this:

       mov.W	 %gp(_foo)[%gpreg], r1

   The assembler also supports two meta register names which can be used
to refer to registers whose values may not be known to the programmer.
These meta register names are:

'%gpreg'
     The small data address register.

'%pidreg'
     The PID base address register.

   Both registers normally have the value r13, but this can change if
some registers have been reserved for use by interrupt handlers or if
both the small data limit and position independent data features are
being used at the same time.

==============================================================================
File: as.info,  Node: |RX_Directives|,  Next: |RX_Float|,  Prev: |RX_Modifiers|,  Up: |RX_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *RX_Directives*

9.37.3 Assembler Directives
---------------------------

The RX version of 'as' has the following specific assembler directives:

'.3byte'
     Inserts a 3-byte value into the output file at the current
     location.

'.fetchalign'
     If the next opcode following this directive spans a fetch line
     boundary (8 byte boundary), the opcode is aligned to that boundary.
     If the next opcode does not span a fetch line, this directive has
     no effect.  Note that one or more labels may be between this
     directive and the opcode; those labels are aligned as well.  Any
     inserted bytes due to alignment will form a NOP opcode.

==============================================================================
File: as.info,  Node: |RX_Float|,  Next: |RX_Syntax|,  Prev: |RX_Directives|,  Up: |RX_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *RX_Float*

9.37.4 Floating Point
---------------------

The floating point formats generated by directives are these.

'.float'
     'Single' precision (32-bit) floating point constants.

'.double'
     If the '-m64bit-doubles' command line option has been specified
     then then 'double' directive generates 'double' precision (64-bit)
     floating point constants, otherwise it generates 'single' precision
     (32-bit) floating point constants.  To force the generation of
     64-bit floating point constants used the 'dc.d' directive instead.

==============================================================================
File: as.info,  Node: |RX_Syntax|,  Prev: |RX_Float|,  Up: |RX_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *RX_Syntax*

9.37.5 Syntax for the RX
------------------------

MENU

* |RX_Chars|::                Special Characters

==============================================================================
File: as.info,  Node: |RX_Chars|,  Up: |RX_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *RX_Chars*

9.37.5.1 Special Characters
.....----------------------

The presence of a ';' appearing anywhere on a line indicates the start
of a comment that extends to the end of that line.

   If a '#' appears as the first character of a line then the whole line
is treated as a comment, but in this case the line can also be a logical
line number directive (*note Comments::) or a preprocessor control
command (*note Preprocessing::).

   The '!' character can be used to separate statements on the same
line.

==============================================================================
File: as.info,  Node: |S/390_Dependent|,  Next: |SCORE_Dependent|,  Prev: |RX_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *S/390_Dependent*

9.38 IBM S/390 Dependent Features
=====----------------------------

The s390 version of 'as' supports two architectures modes and eleven
chip levels.  The architecture modes are the Enterprise System
Architecture (ESA) and the newer z/Architecture mode.  The chip levels
are g5 (or arch3), g6, z900 (or arch5), z990 (or arch6), z9-109, z9-ec
(or arch7), z10 (or arch8), z196 (or arch9), zEC12 (or arch10), z13 (or
arch11), and z14 (or arch12).

MENU

* |s390_Options|::                Command-line Options.
* |s390_Characters|::		Special Characters.
* |s390_Syntax|::                 Assembler Instruction syntax.
* |s390_Directives|::             Assembler Directives.
* |s390_Floating_Point|::         Floating Point.

==============================================================================
File: as.info,  Node: |s390_Options|,  Next: |s390_Characters|,  Up: |S/390_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *s390_Options*

9.38.1 Options
--------------

The following table lists all available s390 specific options:

'-m31 | -m64'
     Select 31- or 64-bit ABI implying a word size of 32- or 64-bit.

     These options are only available with the ELF object file format,
     and require that the necessary BFD support has been included (on a
     31-bit platform you must add -enable-64-bit-bfd on the call to the
     configure script to enable 64-bit usage and use s390x as target
     platform).

'-mesa | -mzarch'
     Select the architecture mode, either the Enterprise System
     Architecture (esa) mode or the z/Architecture mode (zarch).

     The 64-bit instructions are only available with the z/Architecture
     mode.  The combination of '-m64' and '-mesa' results in a warning
     message.

'-march=CPU'
     This option specifies the target processor.  The following
     processor names are recognized: 'g5' (or 'arch3'), 'g6', 'z900' (or
     'arch5'), 'z990' (or 'arch6'), 'z9-109', 'z9-ec' (or 'arch7'),
     'z10' (or 'arch8'), 'z196' (or 'arch9'), 'zEC12' (or 'arch10') and
     'z13' (or 'arch11').

     Assembling an instruction that is not supported on the target
     processor results in an error message.

     The processor names starting with 'arch' refer to the edition
     number in the Principle of Operations manual.  They can be used as
     alternate processor names and have been added for compatibility
     with the IBM XL compiler.

     'arch3', 'g5' and 'g6' cannot be used with the '-mzarch' option
     since the z/Architecture mode is not supported on these processor
     levels.

     There is no 'arch4' option supported.  'arch4' matches
     '-march=arch5 -mesa'.

'-mregnames'
     Allow symbolic names for registers.

'-mno-regnames'
     Do not allow symbolic names for registers.

'-mwarn-areg-zero'
     Warn whenever the operand for a base or index register has been
     specified but evaluates to zero.  This can indicate the misuse of
     general purpose register 0 as an address register.

==============================================================================
File: as.info,  Node: |s390_Characters|,  Next: |s390_Syntax|,  Prev: |s390_Options|,  Up: |S/390_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *s390_Characters*

9.38.2 Special Characters
-------------------------

'#' is the line comment character.

   If a '#' appears as the first character of a line then the whole line
is treated as a comment, but in this case the line could also be a
logical line number directive (*note Comments::) or a preprocessor
control command (*note Preprocessing::).

   The ';' character can be used instead of a newline to separate
statements.

==============================================================================
File: as.info,  Node: |s390_Syntax|,  Next: |s390_Directives|,  Prev: |s390_Characters|,  Up: |S/390_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *s390_Syntax*

9.38.3 Instruction syntax
-------------------------

The assembler syntax closely follows the syntax outlined in Enterprise
Systems Architecture/390 Principles of Operation (SA22-7201) and the
z/Architecture Principles of Operation (SA22-7832).

   Each instruction has two major parts, the instruction mnemonic and
the instruction operands.  The instruction format varies.

MENU

* |s390_Register|::               Register Naming
* |s390_Mnemonics|::              Instruction Mnemonics
* |s390_Operands|::               Instruction Operands
* |s390_Formats|::                Instruction Formats
* |s390_Aliases|::		Instruction Aliases
* |s390_Operand_Modifier|::       Instruction Operand Modifier
* |s390_Instruction_Marker|::     Instruction Marker
* |s390_Literal_Pool_Entries|::   Literal Pool Entries

==============================================================================
File: as.info,  Node: |s390_Register|,  Next: |s390_Mnemonics|,  Up: |s390_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *s390_Register*

9.38.3.1 Register naming
.....-------------------

The 'as' recognizes a number of predefined symbols for the various
processor registers.  A register specification in one of the instruction
formats is an unsigned integer between 0 and 15.  The specific
instruction and the position of the register in the instruction format
denotes the type of the register.  The register symbols are prefixed
with '%':

     %rN   the 16 general purpose registers, 0 <= N <= 15
     %fN   the 16 floating point registers, 0 <= N <= 15
     %aN   the 16 access registers, 0 <= N <= 15
     %cN   the 16 control registers, 0 <= N <= 15
     %lit  an alias for the general purpose register %r13
     %sp   an alias for the general purpose register %r15

==============================================================================
File: as.info,  Node: |s390_Mnemonics|,  Next: |s390_Operands|,  Prev: |s390_Register|,  Up: |s390_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *s390_Mnemonics*

9.38.3.2 Instruction Mnemonics
.....-------------------------

All instructions documented in the Principles of Operation are supported
with the mnemonic and order of operands as described.  The instruction
mnemonic identifies the instruction format (*note s390 Formats::) and
the specific operation code for the instruction.  For example, the 'lr'
mnemonic denotes the instruction format 'RR' with the operation code
'0x18'.

   The definition of the various mnemonics follows a scheme, where the
first character usually hint at the type of the instruction:

     a          add instruction, for example 'al' for add logical 32-bit
     b          branch instruction, for example 'bc' for branch on condition
     c          compare or convert instruction, for example 'cr' for compare
                register 32-bit
     d          divide instruction, for example 'dlr' devide logical register
                64-bit to 32-bit
     i          insert instruction, for example 'ic' insert character
     l          load instruction, for example 'ltr' load and test register
     mv         move instruction, for example 'mvc' move character
     m          multiply instruction, for example 'mh' multiply halfword
     n          and instruction, for example 'ni' and immediate
     o          or instruction, for example 'oc' or character
     sla, sll   shift left single instruction
     sra, srl   shift right single instruction
     st         store instruction, for example 'stm' store multiple
     s          subtract instruction, for example 'slr' subtract
                logical 32-bit
     t          test or translate instruction, of example 'tm' test under mask
     x          exclusive or instruction, for example 'xc' exclusive or
                character

   Certain characters at the end of the mnemonic may describe a property
of the instruction:

     c   the instruction uses a 8-bit character operand
     f   the instruction extends a 32-bit operand to 64 bit
     g   the operands are treated as 64-bit values
     h   the operand uses a 16-bit halfword operand
     i   the instruction uses an immediate operand
     l   the instruction uses unsigned, logical operands
     m   the instruction uses a mask or operates on multiple values
     r   if r is the last character, the instruction operates on registers
     y   the instruction uses 20-bit displacements

   There are many exceptions to the scheme outlined in the above lists,
in particular for the privileged instructions.  For non-privileged
instruction it works quite well, for example the instruction 'clgfr' c:
compare instruction, l: unsigned operands, g: 64-bit operands, f: 32- to
64-bit extension, r: register operands.  The instruction compares an
64-bit value in a register with the zero extended 32-bit value from a
second register.  For a complete list of all mnemonics see appendix B in
the Principles of Operation.

==============================================================================
File: as.info,  Node: |s390_Operands|,  Next: |s390_Formats|,  Prev: |s390_Mnemonics|,  Up: |s390_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *s390_Operands*

9.38.3.3 Instruction Operands
.....------------------------

Instruction operands can be grouped into three classes, operands located
in registers, immediate operands, and operands in storage.

   A register operand can be located in general, floating-point, access,
or control register.  The register is identified by a four-bit field.
The field containing the register operand is called the R field.

   Immediate operands are contained within the instruction and can have
8, 16 or 32 bits.  The field containing the immediate operand is called
the I field.  Dependent on the instruction the I field is either signed
or unsigned.

   A storage operand consists of an address and a length.  The address
of a storage operands can be specified in any of these ways:

   * The content of a single general R
   * The sum of the content of a general register called the base
     register B plus the content of a displacement field D
   * The sum of the contents of two general registers called the index
     register X and the base register B plus the content of a
     displacement field
   * The sum of the current instruction address and a 32-bit signed
     immediate field multiplied by two.

   The length of a storage operand can be:

   * Implied by the instruction
   * Specified by a bitmask
   * Specified by a four-bit or eight-bit length field L
   * Specified by the content of a general register

   The notation for storage operand addresses formed from multiple
fields is as follows:

'Dn(Bn)'
     the address for operand number n is formed from the content of
     general register Bn called the base register and the displacement
     field Dn.
'Dn(Xn,Bn)'
     the address for operand number n is formed from the content of
     general register Xn called the index register, general register Bn
     called the base register and the displacement field Dn.
'Dn(Ln,Bn)'
     the address for operand number n is formed from the content of
     general register Bn called the base register and the displacement
     field Dn.  The length of the operand n is specified by the field
     Ln.

   The base registers Bn and the index registers Xn of a storage operand
can be skipped.  If Bn and Xn are skipped, a zero will be stored to the
operand field.  The notation changes as follows:

     full notation          short notation
     ----------------------------------------------
     Dn(0,Bn)               Dn(Bn)
     Dn(0,0)                Dn
     Dn(0)                  Dn
     Dn(Ln,0)               Dn(Ln)

==============================================================================
File: as.info,  Node: |s390_Formats|,  Next: |s390_Aliases|,  Prev: |s390_Operands|,  Up: |s390_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *s390_Formats*

9.38.3.4 Instruction Formats
.....-----------------------

The Principles of Operation manuals lists 26 instruction formats where
some of the formats have multiple variants.  For the '.insn' pseudo
directive the assembler recognizes some of the formats.  Typically, the
most general variant of the instruction format is used by the '.insn'
directive.

   The following table lists the abbreviations used in the table of
instruction formats:

     OpCode / OpCd   Part of the op code.
     Bx              Base register number for operand x.
     Dx              Displacement for operand x.
     DLx             Displacement lower 12 bits for operand x.
     DHx             Displacement higher 8-bits for operand x.
     Rx              Register number for operand x.
     Xx              Index register number for operand x.
     Ix              Signed immediate for operand x.
     Ux              Unsigned immediate for operand x.

   An instruction is two, four, or six bytes in length and must be
aligned on a 2 byte boundary.  The first two bits of the instruction
specify the length of the instruction, 00 indicates a two byte
instruction, 01 and 10 indicates a four byte instruction, and 11
indicates a six byte instruction.

   The following table lists the s390 instruction formats that are
available with the '.insn' pseudo directive:

'E format'
     +-------------+
     |    OpCode   |
     +-------------+
     0            15

'RI format: <insn> R1,I2'
     +--------+----+----+------------------+
     | OpCode | R1 |OpCd|        I2        |
     +--------+----+----+------------------+
     0        8    12   16                31

'RIE format: <insn> R1,R3,I2'
     +--------+----+----+------------------+--------+--------+
     | OpCode | R1 | R3 |        I2        |////////| OpCode |
     +--------+----+----+------------------+--------+--------+
     0        8    12   16                 32       40      47

'RIL format: <insn> R1,I2'
     +--------+----+----+------------------------------------+
     | OpCode | R1 |OpCd|                  I2                |
     +--------+----+----+------------------------------------+
     0        8    12   16                                  47

'RILU format: <insn> R1,U2'
     +--------+----+----+------------------------------------+
     | OpCode | R1 |OpCd|                  U2                |
     +--------+----+----+------------------------------------+
     0        8    12   16                                  47

'RIS format: <insn> R1,I2,M3,D4(B4)'
     +--------+----+----+----+-------------+--------+--------+
     | OpCode | R1 | M3 | B4 |     D4      |   I2   | Opcode |
     +--------+----+----+----+-------------+--------+--------+
     0        8    12   16   20            32       36      47

'RR format: <insn> R1,R2'
     +--------+----+----+
     | OpCode | R1 | R2 |
     +--------+----+----+
     0        8    12  15

'RRE format: <insn> R1,R2'
     +------------------+--------+----+----+
     |      OpCode      |////////| R1 | R2 |
     +------------------+--------+----+----+
     0                  16       24   28  31

'RRF format: <insn> R1,R2,R3,M4'
     +------------------+----+----+----+----+
     |      OpCode      | R3 | M4 | R1 | R2 |
     +------------------+----+----+----+----+
     0                  16   20   24   28  31

'RRS format: <insn> R1,R2,M3,D4(B4)'
     +--------+----+----+----+-------------+----+----+--------+
     | OpCode | R1 | R3 | B4 |     D4      | M3 |////| OpCode |
     +--------+----+----+----+-------------+----+----+--------+
     0        8    12   16   20            32   36   40      47

'RS format: <insn> R1,R3,D2(B2)'
     +--------+----+----+----+-------------+
     | OpCode | R1 | R3 | B2 |     D2      |
     +--------+----+----+----+-------------+
     0        8    12   16   20           31

'RSE format: <insn> R1,R3,D2(B2)'
     +--------+----+----+----+-------------+--------+--------+
     | OpCode | R1 | R3 | B2 |     D2      |////////| OpCode |
     +--------+----+----+----+-------------+--------+--------+
     0        8    12   16   20            32       40      47

'RSI format: <insn> R1,R3,I2'
     +--------+----+----+------------------------------------+
     | OpCode | R1 | R3 |                  I2                |
     +--------+----+----+------------------------------------+
     0        8    12   16                                  47

'RSY format: <insn> R1,R3,D2(B2)'
     +--------+----+----+----+-------------+--------+--------+
     | OpCode | R1 | R3 | B2 |    DL2      |  DH2   | OpCode |
     +--------+----+----+----+-------------+--------+--------+
     0        8    12   16   20            32       40      47

'RX format: <insn> R1,D2(X2,B2)'
     +--------+----+----+----+-------------+
     | OpCode | R1 | X2 | B2 |     D2      |
     +--------+----+----+----+-------------+
     0        8    12   16   20           31

'RXE format: <insn> R1,D2(X2,B2)'
     +--------+----+----+----+-------------+--------+--------+
     | OpCode | R1 | X2 | B2 |     D2      |////////| OpCode |
     +--------+----+----+----+-------------+--------+--------+
     0        8    12   16   20            32       40      47

'RXF format: <insn> R1,R3,D2(X2,B2)'
     +--------+----+----+----+-------------+----+---+--------+
     | OpCode | R3 | X2 | B2 |     D2      | R1 |///| OpCode |
     +--------+----+----+----+-------------+----+---+--------+
     0        8    12   16   20            32   36  40      47

'RXY format: <insn> R1,D2(X2,B2)'
     +--------+----+----+----+-------------+--------+--------+
     | OpCode | R1 | X2 | B2 |     DL2     |   DH2  | OpCode |
     +--------+----+----+----+-------------+--------+--------+
     0        8    12   16   20            32   36   40      47

'S format: <insn> D2(B2)'
     +------------------+----+-------------+
     |      OpCode      | B2 |     D2      |
     +------------------+----+-------------+
     0                  16   20           31

'SI format: <insn> D1(B1),I2'
     +--------+---------+----+-------------+
     | OpCode |   I2    | B1 |     D1      |
     +--------+---------+----+-------------+
     0        8         16   20           31

'SIY format: <insn> D1(B1),U2'
     +--------+---------+----+-------------+--------+--------+
     | OpCode |   I2    | B1 |     DL1     |  DH1   | OpCode |
     +--------+---------+----+-------------+--------+--------+
     0        8         16   20            32   36   40      47

'SIL format: <insn> D1(B1),I2'
     +------------------+----+-------------+-----------------+
     |      OpCode      | B1 |      D1     |       I2        |
     +------------------+----+-------------+-----------------+
     0                  16   20            32               47

'SS format: <insn> D1(R1,B1),D2(B3),R3'
     +--------+----+----+----+-------------+----+------------+
     | OpCode | R1 | R3 | B1 |     D1      | B2 |     D2     |
     +--------+----+----+----+-------------+----+------------+
     0        8    12   16   20            32   36          47

'SSE format: <insn> D1(B1),D2(B2)'
     +------------------+----+-------------+----+------------+
     |      OpCode      | B1 |     D1      | B2 |     D2     |
     +------------------+----+-------------+----+------------+
     0        8    12   16   20            32   36           47

'SSF format: <insn> D1(B1),D2(B2),R3'
     +--------+----+----+----+-------------+----+------------+
     | OpCode | R3 |OpCd| B1 |     D1      | B2 |     D2     |
     +--------+----+----+----+-------------+----+------------+
     0        8    12   16   20            32   36           47

   For the complete list of all instruction format variants see the
Principles of Operation manuals.

==============================================================================
File: as.info,  Node: |s390_Aliases|,  Next: |s390_Operand_Modifier|,  Prev: |s390_Formats|,  Up: |s390_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *s390_Aliases*

9.38.3.5 Instruction Aliases
.....-----------------------

A specific bit pattern can have multiple mnemonics, for example the bit
pattern '0xa7000000' has the mnemonics 'tmh' and 'tmlh'.  In addition,
there are a number of mnemonics recognized by 'as' that are not present
in the Principles of Operation.  These are the short forms of the branch
instructions, where the condition code mask operand is encoded in the
mnemonic.  This is relevant for the branch instructions, the compare and
branch instructions, and the compare and trap instructions.

   For the branch instructions there are 20 condition code strings that
can be used as part of the mnemonic in place of a mask operand in the
instruction format:

     instruction            short form
     ----------------------------------------------
     bcr   M1,R2            b<m>r  R2
     bc    M1,D2(X2,B2)     b<m>   D2(X2,B2)
     brc   M1,I2            j<m>   I2
     brcl  M1,I2            jg<m>  I2

   In the mnemonic for a branch instruction the condition code string
<m> can be any of the following:

     o     jump on overflow / if ones
     h     jump on A high
     p     jump on plus
     nle   jump on not low or equal
     l     jump on A low
     m     jump on minus
     nhe   jump on not high or equal
     lh    jump on low or high
     ne    jump on A not equal B
     nz    jump on not zero / if not zeros
     e     jump on A equal B
     z     jump on zero / if zeroes
     nlh   jump on not low or high
     he    jump on high or equal
     nl    jump on A not low
     nm    jump on not minus / if not mixed
     le    jump on low or equal
     nh    jump on A not high
     np    jump on not plus
     no    jump on not overflow / if not ones

   For the compare and branch, and compare and trap instructions there
are 12 condition code strings that can be used as part of the mnemonic
in place of a mask operand in the instruction format:

     instruction                   short form
     ------------------------------------------------------------
     crb    R1,R2,M3,D4(B4)        crb<m>    R1,R2,D4(B4)
     cgrb   R1,R2,M3,D4(B4)        cgrb<m>   R1,R2,D4(B4)
     crj    R1,R2,M3,I4            crj<m>    R1,R2,I4
     cgrj   R1,R2,M3,I4            cgrj<m>   R1,R2,I4
     cib    R1,I2,M3,D4(B4)        cib<m>    R1,I2,D4(B4)
     cgib   R1,I2,M3,D4(B4)        cgib<m>   R1,I2,D4(B4)
     cij    R1,I2,M3,I4            cij<m>    R1,I2,I4
     cgij   R1,I2,M3,I4            cgij<m>   R1,I2,I4
     crt    R1,R2,M3               crt<m>    R1,R2
     cgrt   R1,R2,M3               cgrt<m>   R1,R2
     cit    R1,I2,M3               cit<m>    R1,I2
     cgit   R1,I2,M3               cgit<m>   R1,I2
     clrb   R1,R2,M3,D4(B4)        clrb<m>   R1,R2,D4(B4)
     clgrb  R1,R2,M3,D4(B4)        clgrb<m>  R1,R2,D4(B4)
     clrj   R1,R2,M3,I4            clrj<m>   R1,R2,I4
     clgrj  R1,R2,M3,I4            clgrj<m>  R1,R2,I4
     clib   R1,I2,M3,D4(B4)        clib<m>   R1,I2,D4(B4)
     clgib  R1,I2,M3,D4(B4)        clgib<m>  R1,I2,D4(B4)
     clij   R1,I2,M3,I4            clij<m>   R1,I2,I4
     clgij  R1,I2,M3,I4            clgij<m>  R1,I2,I4
     clrt   R1,R2,M3               clrt<m>   R1,R2
     clgrt  R1,R2,M3               clgrt<m>  R1,R2
     clfit  R1,I2,M3               clfit<m>  R1,I2
     clgit  R1,I2,M3               clgit<m>  R1,I2

   In the mnemonic for a compare and branch and compare and trap
instruction the condition code string <m> can be any of the following:

     h     jump on A high
     nle   jump on not low or equal
     l     jump on A low
     nhe   jump on not high or equal
     ne    jump on A not equal B
     lh    jump on low or high
     e     jump on A equal B
     nlh   jump on not low or high
     nl    jump on A not low
     he    jump on high or equal
     nh    jump on A not high
     le    jump on low or equal

==============================================================================
File: as.info,  Node: |s390_Operand_Modifier|,  Next: |s390_Instruction_Marker|,  Prev: |s390_Aliases|,  Up: |s390_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *s390_Operand_Modifier*

9.38.3.6 Instruction Operand Modifier
.....--------------------------------

If a symbol modifier is attached to a symbol in an expression for an
instruction operand field, the symbol term is replaced with a reference
to an object in the global offset table (GOT) or the procedure linkage
table (PLT). The following expressions are allowed: 'symbol@modifier +
constant', 'symbol@modifier + label + constant', and 'symbol@modifier -
label + constant'.  The term 'symbol' is the symbol that will be entered
into the GOT or PLT, 'label' is a local label, and 'constant' is an
arbitrary expression that the assembler can evaluate to a constant
value.

   The term '(symbol + constant1)@modifier +/- label + constant2' is
also accepted but a warning message is printed and the term is converted
to 'symbol@modifier +/- label + constant1 + constant2'.

'@got'
'@got12'
     The @got modifier can be used for displacement fields, 16-bit
     immediate fields and 32-bit pc-relative immediate fields.  The
     @got12 modifier is synonym to @got.  The symbol is added to the
     GOT. For displacement fields and 16-bit immediate fields the symbol
     term is replaced with the offset from the start of the GOT to the
     GOT slot for the symbol.  For a 32-bit pc-relative field the
     pc-relative offset to the GOT slot from the current instruction
     address is used.
'@gotent'
     The @gotent modifier can be used for 32-bit pc-relative immediate
     fields.  The symbol is added to the GOT and the symbol term is
     replaced with the pc-relative offset from the current instruction
     to the GOT slot for the symbol.
'@gotoff'
     The @gotoff modifier can be used for 16-bit immediate fields.  The
     symbol term is replaced with the offset from the start of the GOT
     to the address of the symbol.
'@gotplt'
     The @gotplt modifier can be used for displacement fields, 16-bit
     immediate fields, and 32-bit pc-relative immediate fields.  A
     procedure linkage table entry is generated for the symbol and a
     jump slot for the symbol is added to the GOT. For displacement
     fields and 16-bit immediate fields the symbol term is replaced with
     the offset from the start of the GOT to the jump slot for the
     symbol.  For a 32-bit pc-relative field the pc-relative offset to
     the jump slot from the current instruction address is used.
'@plt'
     The @plt modifier can be used for 16-bit and 32-bit pc-relative
     immediate fields.  A procedure linkage table entry is generated for
     the symbol.  The symbol term is replaced with the relative offset
     from the current instruction to the PLT entry for the symbol.
'@pltoff'
     The @pltoff modifier can be used for 16-bit immediate fields.  The
     symbol term is replaced with the offset from the start of the PLT
     to the address of the symbol.
'@gotntpoff'
     The @gotntpoff modifier can be used for displacement fields.  The
     symbol is added to the static TLS block and the negated offset to
     the symbol in the static TLS block is added to the GOT. The symbol
     term is replaced with the offset to the GOT slot from the start of
     the GOT.
'@indntpoff'
     The @indntpoff modifier can be used for 32-bit pc-relative
     immediate fields.  The symbol is added to the static TLS block and
     the negated offset to the symbol in the static TLS block is added
     to the GOT. The symbol term is replaced with the pc-relative offset
     to the GOT slot from the current instruction address.

   For more information about the thread local storage modifiers
'gotntpoff' and 'indntpoff' see the ELF extension documentation 'ELF
Handling For Thread-Local Storage'.

==============================================================================
File: as.info,  Node: |s390_Instruction_Marker|,  Next: |s390_Literal_Pool_Entries|,  Prev: |s390_Operand_Modifier|,  Up: |s390_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *s390_Instruction_Marker*

9.38.3.7 Instruction Marker
.....----------------------

The thread local storage instruction markers are used by the linker to
perform code optimization.

':tls_load'
     The :tls_load marker is used to flag the load instruction in the
     initial exec TLS model that retrieves the offset from the thread
     pointer to a thread local storage variable from the GOT.
':tls_gdcall'
     The :tls_gdcall marker is used to flag the branch-and-save
     instruction to the __tls_get_offset function in the global dynamic
     TLS model.
':tls_ldcall'
     The :tls_ldcall marker is used to flag the branch-and-save
     instruction to the __tls_get_offset function in the local dynamic
     TLS model.

   For more information about the thread local storage instruction
marker and the linker optimizations see the ELF extension documentation
'ELF Handling For Thread-Local Storage'.

==============================================================================
File: as.info,  Node: |s390_Literal_Pool_Entries|,  Prev: |s390_Instruction_Marker|,  Up: |s390_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *s390_Literal_Pool_Entries*

9.38.3.8 Literal Pool Entries
.....------------------------

A literal pool is a collection of values.  To access the values a
pointer to the literal pool is loaded to a register, the literal pool
register.  Usually, register %r13 is used as the literal pool register
(*note s390 Register::).  Literal pool entries are created by adding the
suffix :lit1, :lit2, :lit4, or :lit8 to the end of an expression for an
instruction operand.  The expression is added to the literal pool and
the operand is replaced with the offset to the literal in the literal
pool.

':lit1'
     The literal pool entry is created as an 8-bit value.  An operand
     modifier must not be used for the original expression.
':lit2'
     The literal pool entry is created as a 16 bit value.  The operand
     modifier @got may be used in the original expression.  The term
     'x@got:lit2' will put the got offset for the global symbol x to the
     literal pool as 16 bit value.
':lit4'
     The literal pool entry is created as a 32-bit value.  The operand
     modifier @got and @plt may be used in the original expression.  The
     term 'x@got:lit4' will put the got offset for the global symbol x
     to the literal pool as a 32-bit value.  The term 'x@plt:lit4' will
     put the plt offset for the global symbol x to the literal pool as a
     32-bit value.
':lit8'
     The literal pool entry is created as a 64-bit value.  The operand
     modifier @got and @plt may be used in the original expression.  The
     term 'x@got:lit8' will put the got offset for the global symbol x
     to the literal pool as a 64-bit value.  The term 'x@plt:lit8' will
     put the plt offset for the global symbol x to the literal pool as a
     64-bit value.

   The assembler directive '.ltorg' is used to emit all literal pool
entries to the current position.

==============================================================================
File: as.info,  Node: |s390_Directives|,  Next: |s390_Floating_Point|,  Prev: |s390_Syntax|,  Up: |S/390_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *s390_Directives*

9.38.4 Assembler Directives
---------------------------

'as' for s390 supports all of the standard ELF assembler directives as
outlined in the main part of this document.  Some directives have been
extended and there are some additional directives, which are only
available for the s390 'as'.

'.insn'
     This directive permits the numeric representation of an
     instructions and makes the assembler insert the operands according
     to one of the instructions formats for '.insn' (*note s390
     Formats::).  For example, the instruction 'l %r1,24(%r15)' could be
     written as '.insn rx,0x58000000,%r1,24(%r15)'.
'.short'
'.long'
'.quad'
     This directive places one or more 16-bit (.short), 32-bit (.long),
     or 64-bit (.quad) values into the current section.  If an ELF or
     TLS modifier is used only the following expressions are allowed:
     'symbol@modifier + constant', 'symbol@modifier + label + constant',
     and 'symbol@modifier - label + constant'.  The following modifiers
     are available:
     '@got'
     '@got12'
          The @got modifier can be used for .short, .long and .quad.
          The @got12 modifier is synonym to @got.  The symbol is added
          to the GOT. The symbol term is replaced with offset from the
          start of the GOT to the GOT slot for the symbol.
     '@gotoff'
          The @gotoff modifier can be used for .short, .long and .quad.
          The symbol term is replaced with the offset from the start of
          the GOT to the address of the symbol.
     '@gotplt'
          The @gotplt modifier can be used for .long and .quad.  A
          procedure linkage table entry is generated for the symbol and
          a jump slot for the symbol is added to the GOT. The symbol
          term is replaced with the offset from the start of the GOT to
          the jump slot for the symbol.
     '@plt'
          The @plt modifier can be used for .long and .quad.  A
          procedure linkage table entry us generated for the symbol.
          The symbol term is replaced with the address of the PLT entry
          for the symbol.
     '@pltoff'
          The @pltoff modifier can be used for .short, .long and .quad.
          The symbol term is replaced with the offset from the start of
          the PLT to the address of the symbol.
     '@tlsgd'
     '@tlsldm'
          The @tlsgd and @tlsldm modifier can be used for .long and
          .quad.  A tls_index structure for the symbol is added to the
          GOT. The symbol term is replaced with the offset from the
          start of the GOT to the tls_index structure.
     '@gotntpoff'
     '@indntpoff'
          The @gotntpoff and @indntpoff modifier can be used for .long
          and .quad.  The symbol is added to the static TLS block and
          the negated offset to the symbol in the static TLS block is
          added to the GOT. For @gotntpoff the symbol term is replaced
          with the offset from the start of the GOT to the GOT slot, for
          @indntpoff the symbol term is replaced with the address of the
          GOT slot.
     '@dtpoff'
          The @dtpoff modifier can be used for .long and .quad.  The
          symbol term is replaced with the offset of the symbol relative
          to the start of the TLS block it is contained in.
     '@ntpoff'
          The @ntpoff modifier can be used for .long and .quad.  The
          symbol term is replaced with the offset of the symbol relative
          to the TCB pointer.

     For more information about the thread local storage modifiers see
     the ELF extension documentation 'ELF Handling For Thread-Local
     Storage'.

'.ltorg'
     This directive causes the current contents of the literal pool to
     be dumped to the current location (*note s390 Literal Pool
     Entries::).

'.machine STRING[+EXTENSION]...'

     This directive allows changing the machine for which code is
     generated.  'string' may be any of the '-march=' selection options,
     or 'push', or 'pop'.  '.machine push' saves the currently selected
     cpu, which may be restored with '.machine pop'.  Be aware that the
     cpu string has to be put into double quotes in case it contains
     characters not appropriate for identifiers.  So you have to write
     '"z9-109"' instead of just 'z9-109'.  Extensions can be specified
     after the cpu name, separated by plus characters.  Valid extensions
     are: 'htm', 'nohtm', 'vx', 'novx'.  They extend the basic
     instruction set with features from a higher cpu level, or remove
     support for a feature from the given cpu level.

     Example: 'z13+nohtm' allows all instructions of the z13 cpu except
     instructions from the HTM facility.

'.machinemode string'
     This directive allows to change the architecture mode for which
     code is being generated.  'string' may be 'esa', 'zarch',
     'zarch_nohighgprs', 'push', or 'pop'.  '.machinemode
     zarch_nohighgprs' can be used to prevent the 'highgprs' flag from
     being set in the ELF header of the output file.  This is useful in
     situations where the code is gated with a runtime check which makes
     sure that the code is only executed on kernels providing the
     'highgprs' feature.  '.machinemode push' saves the currently
     selected mode, which may be restored with '.machinemode pop'.

==============================================================================
File: as.info,  Node: |s390_Floating_Point|,  Prev: |s390_Directives|,  Up: |S/390_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *s390_Floating_Point*

9.38.5 Floating Point
---------------------

The assembler recognizes both the IEEE floating-point instruction and
the hexadecimal floating-point instructions.  The floating-point
constructors '.float', '.single', and '.double' always emit the IEEE
format.  To assemble hexadecimal floating-point constants the '.long'
and '.quad' directives must be used.

==============================================================================
File: as.info,  Node: |SCORE_Dependent|,  Next: |SH_Dependent|,  Prev: |S/390_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *SCORE_Dependent*

9.39 SCORE Dependent Features
=====------------------------

MENU

* |SCORE_Opts|::   	Assembler options
* |SCORE_Pseudo|::        SCORE Assembler Directives
* |SCORE_Syntax|::        Syntax

==============================================================================
File: as.info,  Node: |SCORE_Opts|,  Next: |SCORE_Pseudo|,  Up: |SCORE_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *SCORE_Opts*

9.39.1 Options
--------------

The following table lists all available SCORE options.

'-G NUM'
     This option sets the largest size of an object that can be
     referenced implicitly with the 'gp' register.  The default value is
     8.

'-EB'
     Assemble code for a big-endian cpu

'-EL'
     Assemble code for a little-endian cpu

'-FIXDD'
     Assemble code for fix data dependency

'-NWARN'
     Assemble code for no warning message for fix data dependency

'-SCORE5'
     Assemble code for target is SCORE5

'-SCORE5U'
     Assemble code for target is SCORE5U

'-SCORE7'
     Assemble code for target is SCORE7, this is default setting

'-SCORE3'
     Assemble code for target is SCORE3

'-march=score7'
     Assemble code for target is SCORE7, this is default setting

'-march=score3'
     Assemble code for target is SCORE3

'-USE_R1'
     Assemble code for no warning message when using temp register r1

'-KPIC'
     Generate code for PIC. This option tells the assembler to generate
     score position-independent macro expansions.  It also tells the
     assembler to mark the output file as PIC.

'-O0'
     Assembler will not perform any optimizations

'-V'
     Sunplus release version

==============================================================================
File: as.info,  Node: |SCORE_Pseudo|,  Next: |SCORE_Syntax|,  Prev: |SCORE_Opts|,  Up: |SCORE_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *SCORE_Pseudo*

9.39.2 SCORE Assembler Directives
---------------------------------

A number of assembler directives are available for SCORE. The following
table is far from complete.

'.set nwarn'
     Let the assembler not to generate warnings if the source machine
     language instructions happen data dependency.

'.set fixdd'
     Let the assembler to insert bubbles (32 bit nop instruction / 16
     bit nop!  Instruction) if the source machine language instructions
     happen data dependency.

'.set nofixdd'
     Let the assembler to generate warnings if the source machine
     language instructions happen data dependency.  (Default)

'.set r1'
     Let the assembler not to generate warnings if the source program
     uses r1.  allow user to use r1

'set nor1'
     Let the assembler to generate warnings if the source program uses
     r1.  (Default)

'.sdata'
     Tell the assembler to add subsequent data into the sdata section

'.rdata'
     Tell the assembler to add subsequent data into the rdata section

'.frame "frame-register", "offset", "return-pc-register"'
     Describe a stack frame.  "frame-register" is the frame register,
     "offset" is the distance from the frame register to the virtual
     frame pointer, "return-pc-register" is the return program register.
     You must use ".ent" before ".frame" and only one ".frame" can be
     used per ".ent".

'.mask "bitmask", "frameoffset"'
     Indicate which of the integer registers are saved in the current
     function's stack frame, this is for the debugger to explain the
     frame chain.

'.ent "proc-name"'
     Set the beginning of the procedure "proc_name".  Use this directive
     when you want to generate information for the debugger.

'.end proc-name'
     Set the end of a procedure.  Use this directive to generate
     information for the debugger.

'.bss'
     Switch the destination of following statements into the bss
     section, which is used for data that is uninitialized anywhere.

==============================================================================
File: as.info,  Node: |SCORE_Syntax|,  Prev: |SCORE_Pseudo|,  Up: |SCORE_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *SCORE_Syntax*

9.39.3 SCORE Syntax
-------------------

MENU

* |SCORE_Chars|::                Special Characters

==============================================================================
File: as.info,  Node: |SCORE_Chars|,  Up: |SCORE_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *SCORE_Chars*

9.39.3.1 Special Characters
.....----------------------

The presence of a '#' appearing anywhere on a line indicates the start
of a comment that extends to the end of that line.

   If a '#' appears as the first character of a line then the whole line
is treated as a comment, but in this case the line can also be a logical
line number directive (*note Comments::) or a preprocessor control
command (*note Preprocessing::).

   The ';' character can be used to separate statements on the same
line.

==============================================================================
File: as.info,  Node: |SH_Dependent|,  Next: |Sparc_Dependent|,  Prev: |SCORE_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *SH_Dependent*

9.40 Renesas / SuperH SH Dependent Features
=====--------------------------------------

MENU

* |SH_Options|::              Options
* |SH_Syntax|::               Syntax
* |SH_Floating_Point|::       Floating Point
* |SH_Directives|::           SH Machine Directives
* |SH_Opcodes|::              Opcodes

==============================================================================
File: as.info,  Node: |SH_Options|,  Next: |SH_Syntax|,  Up: |SH_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *SH_Options*

9.40.1 Options
--------------

'as' has following command-line options for the Renesas (formerly
Hitachi) / SuperH SH family.

'--little'
     Generate little endian code.

'--big'
     Generate big endian code.

'--relax'
     Alter jump instructions for long displacements.

'--small'
     Align sections to 4 byte boundaries, not 16.

'--dsp'
     Enable sh-dsp insns, and disable sh3e / sh4 insns.

'--renesas'
     Disable optimization with section symbol for compatibility with
     Renesas assembler.

'--allow-reg-prefix'
     Allow '$' as a register name prefix.

'--fdpic'
     Generate an FDPIC object file.

'--isa=sh4 | sh4a'
     Specify the sh4 or sh4a instruction set.
'--isa=dsp'
     Enable sh-dsp insns, and disable sh3e / sh4 insns.
'--isa=fp'
     Enable sh2e, sh3e, sh4, and sh4a insn sets.
'--isa=all'
     Enable sh1, sh2, sh2e, sh3, sh3e, sh4, sh4a, and sh-dsp insn sets.

'-h-tick-hex'
     Support H'00 style hex constants in addition to 0x00 style.

==============================================================================
File: as.info,  Node: |SH_Syntax|,  Next: |SH_Floating_Point|,  Prev: |SH_Options|,  Up: |SH_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *SH_Syntax*

9.40.2 Syntax
-------------

MENU

* |SH_Chars|::                Special Characters
* |SH_Regs|::                 Register Names
* |SH_Addressing|::           Addressing Modes

==============================================================================
File: as.info,  Node: |SH_Chars|,  Next: |SH_Regs|,  Up: |SH_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *SH_Chars*

9.40.2.1 Special Characters
.....----------------------

'!' is the line comment character.

   You can use ';' instead of a newline to separate statements.

   If a '#' appears as the first character of a line then the whole line
is treated as a comment, but in this case the line could also be a
logical line number directive (*note Comments::) or a preprocessor
control command (*note Preprocessing::).

   Since '$' has no special meaning, you may use it in symbol names.

==============================================================================
File: as.info,  Node: |SH_Regs|,  Next: |SH_Addressing|,  Prev: |SH_Chars|,  Up: |SH_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *SH_Regs*

9.40.2.2 Register Names
.....------------------

You can use the predefined symbols 'r0', 'r1', 'r2', 'r3', 'r4', 'r5',
'r6', 'r7', 'r8', 'r9', 'r10', 'r11', 'r12', 'r13', 'r14', and 'r15' to
refer to the SH registers.

   The SH also has these control registers:

'pr'
     procedure register (holds return address)

'pc'
     program counter

'mach'
'macl'
     high and low multiply accumulator registers

'sr'
     status register

'gbr'
     global base register

'vbr'
     vector base register (for interrupt vectors)

==============================================================================
File: as.info,  Node: |SH_Addressing|,  Prev: |SH_Regs|,  Up: |SH_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *SH_Addressing*

9.40.2.3 Addressing Modes
.....--------------------

'as' understands the following addressing modes for the SH. 'RN' in the
following refers to any of the numbered registers, but _not_ the control
registers.

'RN'
     Register direct

'@RN'
     Register indirect

'@-RN'
     Register indirect with pre-decrement

'@RN+'
     Register indirect with post-increment

'@(DISP, RN)'
     Register indirect with displacement

'@(R0, RN)'
     Register indexed

'@(DISP, GBR)'
     'GBR' offset

'@(R0, GBR)'
     GBR indexed

'ADDR'
'@(DISP, PC)'
     PC relative address (for branch or for addressing memory).  The
     'as' implementation allows you to use the simpler form ADDR
     anywhere a PC relative address is called for; the alternate form is
     supported for compatibility with other assemblers.

'#IMM'
     Immediate data

==============================================================================
File: as.info,  Node: |SH_Floating_Point|,  Next: |SH_Directives|,  Prev: |SH_Syntax|,  Up: |SH_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *SH_Floating_Point*

9.40.3 Floating Point
---------------------

SH2E, SH3E and SH4 groups have on-chip floating-point unit (FPU). Other
SH groups can use '.float' directive to generate IEEE floating-point
numbers.

   SH2E and SH3E support single-precision floating point calculations as
well as entirely PCAPI compatible emulation of double-precision floating
point calculations.  SH2E and SH3E instructions are a subset of the
floating point calculations conforming to the IEEE754 standard.

   In addition to single-precision and double-precision floating-point
operation capability, the on-chip FPU of SH4 has a 128-bit graphic
engine that enables 32-bit floating-point data to be processed 128 bits
at a time.  It also supports 4 * 4 array operations and inner product
operations.  Also, a superscalar architecture is employed that enables
simultaneous execution of two instructions (including FPU instructions),
providing performance of up to twice that of conventional architectures
at the same frequency.

==============================================================================
File: as.info,  Node: |SH_Directives|,  Next: |SH_Opcodes|,  Prev: |SH_Floating_Point|,  Up: |SH_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *SH_Directives*

9.40.4 SH Machine Directives
----------------------------

'uaword'
'ualong'
'uaquad'
     'as' will issue a warning when a misaligned '.word', '.long', or
     '.quad' directive is used.  You may use '.uaword', '.ualong', or
     '.uaquad' to indicate that the value is intentionally misaligned.

==============================================================================
File: as.info,  Node: |SH_Opcodes|,  Prev: |SH_Directives|,  Up: |SH_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *SH_Opcodes*

9.40.5 Opcodes
--------------

For detailed information on the SH machine instruction set, see
'SH-Microcomputer User's Manual' (Renesas) or 'SH-4 32-bit CPU Core
Architecture' (SuperH) and 'SuperH (SH) 64-Bit RISC Series' (SuperH).

   'as' implements all the standard SH opcodes.  No additional
pseudo-instructions are needed on this family.  Note, however, that
because 'as' supports a simpler form of PC-relative addressing, you may
simply write (for example)

     mov.l  bar,r0

where other assemblers might require an explicit displacement to 'bar'
from the program counter:

     mov.l  @(DISP, PC)

   Here is a summary of SH opcodes:

     Legend:
     Rn        a numbered register
     Rm        another numbered register
     #imm      immediate data
     disp      displacement
     disp8     8-bit displacement
     disp12    12-bit displacement

     add #imm,Rn                    lds.l @Rn+,PR
     add Rm,Rn                      mac.w @Rm+,@Rn+
     addc Rm,Rn                     mov #imm,Rn
     addv Rm,Rn                     mov Rm,Rn
     and #imm,R0                    mov.b Rm,@(R0,Rn)
     and Rm,Rn                      mov.b Rm,@-Rn
     and.b #imm,@(R0,GBR)           mov.b Rm,@Rn
     bf disp8                       mov.b @(disp,Rm),R0
     bra disp12                     mov.b @(disp,GBR),R0
     bsr disp12                     mov.b @(R0,Rm),Rn
     bt disp8                       mov.b @Rm+,Rn
     clrmac                         mov.b @Rm,Rn
     clrt                           mov.b R0,@(disp,Rm)
     cmp/eq #imm,R0                 mov.b R0,@(disp,GBR)
     cmp/eq Rm,Rn                   mov.l Rm,@(disp,Rn)
     cmp/ge Rm,Rn                   mov.l Rm,@(R0,Rn)
     cmp/gt Rm,Rn                   mov.l Rm,@-Rn
     cmp/hi Rm,Rn                   mov.l Rm,@Rn
     cmp/hs Rm,Rn                   mov.l @(disp,Rn),Rm
     cmp/pl Rn                      mov.l @(disp,GBR),R0
     cmp/pz Rn                      mov.l @(disp,PC),Rn
     cmp/str Rm,Rn                  mov.l @(R0,Rm),Rn
     div0s Rm,Rn                    mov.l @Rm+,Rn
     div0u                          mov.l @Rm,Rn
     div1 Rm,Rn                     mov.l R0,@(disp,GBR)
     exts.b Rm,Rn                   mov.w Rm,@(R0,Rn)
     exts.w Rm,Rn                   mov.w Rm,@-Rn
     extu.b Rm,Rn                   mov.w Rm,@Rn
     extu.w Rm,Rn                   mov.w @(disp,Rm),R0
     jmp @Rn                        mov.w @(disp,GBR),R0
     jsr @Rn                        mov.w @(disp,PC),Rn
     ldc Rn,GBR                     mov.w @(R0,Rm),Rn
     ldc Rn,SR                      mov.w @Rm+,Rn
     ldc Rn,VBR                     mov.w @Rm,Rn
     ldc.l @Rn+,GBR                 mov.w R0,@(disp,Rm)
     ldc.l @Rn+,SR                  mov.w R0,@(disp,GBR)
     ldc.l @Rn+,VBR                 mova @(disp,PC),R0
     lds Rn,MACH                    movt Rn
     lds Rn,MACL                    muls Rm,Rn
     lds Rn,PR                      mulu Rm,Rn
     lds.l @Rn+,MACH                neg Rm,Rn
     lds.l @Rn+,MACL                negc Rm,Rn
     nop                            stc VBR,Rn
     not Rm,Rn                      stc.l GBR,@-Rn
     or #imm,R0                     stc.l SR,@-Rn
     or Rm,Rn                       stc.l VBR,@-Rn
     or.b #imm,@(R0,GBR)            sts MACH,Rn
     rotcl Rn                       sts MACL,Rn
     rotcr Rn                       sts PR,Rn
     rotl Rn                        sts.l MACH,@-Rn
     rotr Rn                        sts.l MACL,@-Rn
     rte                            sts.l PR,@-Rn
     rts                            sub Rm,Rn
     sett                           subc Rm,Rn
     shal Rn                        subv Rm,Rn
     shar Rn                        swap.b Rm,Rn
     shll Rn                        swap.w Rm,Rn
     shll16 Rn                      tas.b @Rn
     shll2 Rn                       trapa #imm
     shll8 Rn                       tst #imm,R0
     shlr Rn                        tst Rm,Rn
     shlr16 Rn                      tst.b #imm,@(R0,GBR)
     shlr2 Rn                       xor #imm,R0
     shlr8 Rn                       xor Rm,Rn
     sleep                          xor.b #imm,@(R0,GBR)
     stc GBR,Rn                     xtrct Rm,Rn
     stc SR,Rn

==============================================================================
File: as.info,  Node: |Sparc_Dependent|,  Next: |TIC54X_Dependent|,  Prev: |SH_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *Sparc_Dependent*

9.41 SPARC Dependent Features
=====------------------------

MENU

* |Sparc_Opts|::                  Options
* |Sparc_Aligned_Data|::		Option to enforce aligned data
* |Sparc_Syntax|::		Syntax
* |Sparc_Float|::                 Floating Point
* |Sparc_Directives|::            Sparc Machine Directives

==============================================================================
File: as.info,  Node: |Sparc_Opts|,  Next: |Sparc_Aligned_Data|,  Up: |Sparc_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *Sparc_Opts*

9.41.1 Options
--------------

The SPARC chip family includes several successive versions, using the
same core instruction set, but including a few additional instructions
at each version.  There are exceptions to this however.  For details on
what instructions each variant supports, please see the chip's
architecture reference manual.

   By default, 'as' assumes the core instruction set (SPARC v6), but
"bumps" the architecture level as needed: it switches to successively
higher architectures as it encounters instructions that only exist in
the higher levels.

   If not configured for SPARC v9 ('sparc64--') GAS will not bump past
sparclite by default, an option must be passed to enable the v9
instructions.

   GAS treats sparclite as being compatible with v8, unless an
architecture is explicitly requested.  SPARC v9 is always incompatible
with sparclite.

'-Av6 | -Av7 | -Av8 | -Aleon | -Asparclet | -Asparclite'
'-Av8plus | -Av8plusa | -Av8plusb | -Av8plusc | -Av8plusd |'
'-Av8plusv | -Av8plusm | -Av8plusm8'
'-Av9 | -Av9a | -Av9b | -Av9c | -Av9d | -Av9e | -Av9v | -Av9m | -Av9m8'
'-Asparc | -Asparcvis | -Asparcvis2 | -Asparcfmaf | -Asparcima'
'-Asparcvis3 | -Asparcvis3r | -Asparc5 | -Asparc6'
     Use one of the '-A' options to select one of the SPARC
     architectures explicitly.  If you select an architecture
     explicitly, 'as' reports a fatal error if it encounters an
     instruction or feature requiring an incompatible or higher level.

     '-Av8plus', '-Av8plusa', '-Av8plusb', '-Av8plusc', '-Av8plusd', and
     '-Av8plusv' select a 32 bit environment.

     '-Av9', '-Av9a', '-Av9b', '-Av9c', '-Av9d', '-Av9e', '-Av9v' and
     '-Av9m' select a 64 bit environment and are not available unless
     GAS is explicitly configured with 64 bit environment support.

     '-Av8plusa' and '-Av9a' enable the SPARC V9 instruction set with
     UltraSPARC VIS 1.0 extensions.

     '-Av8plusb' and '-Av9b' enable the UltraSPARC VIS 2.0 instructions,
     as well as the instructions enabled by '-Av8plusa' and '-Av9a'.

     '-Av8plusc' and '-Av9c' enable the UltraSPARC Niagara instructions,
     as well as the instructions enabled by '-Av8plusb' and '-Av9b'.

     '-Av8plusd' and '-Av9d' enable the floating point fused
     multiply-add, VIS 3.0, and HPC extension instructions, as well as
     the instructions enabled by '-Av8plusc' and '-Av9c'.

     '-Av8pluse' and '-Av9e' enable the cryptographic instructions, as
     well as the instructions enabled by '-Av8plusd' and '-Av9d'.

     '-Av8plusv' and '-Av9v' enable floating point unfused multiply-add,
     and integer multiply-add, as well as the instructions enabled by
     '-Av8pluse' and '-Av9e'.

     '-Av8plusm' and '-Av9m' enable the VIS 4.0, subtract extended,
     xmpmul, xmontmul and xmontsqr instructions, as well as the
     instructions enabled by '-Av8plusv' and '-Av9v'.

     '-Av8plusm8' and '-Av9m8' enable the instructions introduced in the
     Oracle SPARC Architecture 2017 and the M8 processor, as well as the
     instructions enabled by '-Av8plusm' and '-Av9m'.

     '-Asparc' specifies a v9 environment.  It is equivalent to '-Av9'
     if the word size is 64-bit, and '-Av8plus' otherwise.

     '-Asparcvis' specifies a v9a environment.  It is equivalent to
     '-Av9a' if the word size is 64-bit, and '-Av8plusa' otherwise.

     '-Asparcvis2' specifies a v9b environment.  It is equivalent to
     '-Av9b' if the word size is 64-bit, and '-Av8plusb' otherwise.

     '-Asparcfmaf' specifies a v9b environment with the floating point
     fused multiply-add instructions enabled.

     '-Asparcima' specifies a v9b environment with the integer
     multiply-add instructions enabled.

     '-Asparcvis3' specifies a v9b environment with the VIS 3.0, HPC ,
     and floating point fused multiply-add instructions enabled.

     '-Asparcvis3r' specifies a v9b environment with the VIS 3.0, HPC,
     and floating point unfused multiply-add instructions enabled.

     '-Asparc5' is equivalent to '-Av9m'.

     '-Asparc6' is equivalent to '-Av9m8'.

'-xarch=v8plus | -xarch=v8plusa | -xarch=v8plusb | -xarch=v8plusc'
'-xarch=v8plusd | -xarch=v8plusv | -xarch=v8plusm |'
'-xarch=v8plusm8 | -xarch=v9 | -xarch=v9a | -xarch=v9b'
'-xarch=v9c | -xarch=v9d | -xarch=v9e | -xarch=v9v'
'-xarch=v9m | -xarch=v9m8'
'-xarch=sparc | -xarch=sparcvis | -xarch=sparcvis2'
'-xarch=sparcfmaf | -xarch=sparcima | -xarch=sparcvis3'
'-xarch=sparcvis3r | -xarch=sparc5 | -xarch=sparc6'
     For compatibility with the SunOS v9 assembler.  These options are
     equivalent to -Av8plus, -Av8plusa, -Av8plusb, -Av8plusc, -Av8plusd,
     -Av8plusv, -Av8plusm, -Av8plusm8, -Av9, -Av9a, -Av9b, -Av9c, -Av9d,
     -Av9e, -Av9v, -Av9m, -Av9m8, -Asparc, -Asparcvis, -Asparcvis2,
     -Asparcfmaf, -Asparcima, -Asparcvis3, -Asparcvis3r, -Asparc5 and
     -Asparc6 respectively.

'-bump'
     Warn whenever it is necessary to switch to another level.  If an
     architecture level is explicitly requested, GAS will not issue
     warnings until that level is reached, and will then bump the level
     as required (except between incompatible levels).

'-32 | -64'
     Select the word size, either 32 bits or 64 bits.  These options are
     only available with the ELF object file format, and require that
     the necessary BFD support has been included.

'--dcti-couples-detect'
     Warn if a DCTI (delayed control transfer instruction) couple is
     found when generating code for a variant of the SPARC architecture
     in which the execution of the couple is unpredictable, or very
     slow.  This is disabled by default.

==============================================================================
File: as.info,  Node: |Sparc_Aligned_Data|,  Next: |Sparc_Syntax|,  Prev: |Sparc_Opts|,  Up: |Sparc_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *Sparc_Aligned_Data*

9.41.2 Enforcing aligned data
-----------------------------

SPARC GAS normally permits data to be misaligned.  For example, it
permits the '.long' pseudo-op to be used on a byte boundary.  However,
the native SunOS assemblers issue an error when they see misaligned
data.

   You can use the '--enforce-aligned-data' option to make SPARC GAS
also issue an error about misaligned data, just as the SunOS assemblers
do.

   The '--enforce-aligned-data' option is not the default because gcc
issues misaligned data pseudo-ops when it initializes certain packed
data structures (structures defined using the 'packed' attribute).  You
may have to assemble with GAS in order to initialize packed data
structures in your own code.

==============================================================================
File: as.info,  Node: |Sparc_Syntax|,  Next: |Sparc_Float|,  Prev: |Sparc_Aligned_Data|,  Up: |Sparc_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Sparc_Syntax*

9.41.3 Sparc Syntax
-------------------

The assembler syntax closely follows The Sparc Architecture Manual,
versions 8 and 9, as well as most extensions defined by Sun for their
UltraSPARC and Niagara line of processors.

MENU

* |Sparc_Chars|::                Special Characters
* |Sparc_Regs|::                 Register Names
* |Sparc_Constants|::            Constant Names
* |Sparc_Relocs|::               Relocations
* |Sparc_Size_Translations|::    Size Translations

==============================================================================
File: as.info,  Node: |Sparc_Chars|,  Next: |Sparc_Regs|,  Up: |Sparc_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Sparc_Chars*

9.41.3.1 Special Characters
.....----------------------

A '!' character appearing anywhere on a line indicates the start of a
comment that extends to the end of that line.

   If a '#' appears as the first character of a line then the whole line
is treated as a comment, but in this case the line could also be a
logical line number directive (*note Comments::) or a preprocessor
control command (*note Preprocessing::).

   ';' can be used instead of a newline to separate statements.

==============================================================================
File: as.info,  Node: |Sparc_Regs|,  Next: |Sparc_Constants|,  Prev: |Sparc_Chars|,  Up: |Sparc_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *Sparc_Regs*

9.41.3.2 Register Names
.....------------------

The Sparc integer register file is broken down into global, outgoing,
local, and incoming.

   * The 8 global registers are referred to as '%gN'.

   * The 8 outgoing registers are referred to as '%oN'.

   * The 8 local registers are referred to as '%lN'.

   * The 8 incoming registers are referred to as '%iN'.

   * The frame pointer register '%i6' can be referenced using the alias
     '%fp'.

   * The stack pointer register '%o6' can be referenced using the alias
     '%sp'.

   Floating point registers are simply referred to as '%fN'.  When
assembling for pre-V9, only 32 floating point registers are available.
For V9 and later there are 64, but there are restrictions when
referencing the upper 32 registers.  They can only be accessed as double
or quad, and thus only even or quad numbered accesses are allowed.  For
example, '%f34' is a legal floating point register, but '%f35' is not.

   Floating point registers accessed as double can also be referred
using the '%dN' notation, where N is even.  Similarly, floating point
registers accessed as quad can be referred using the '%qN' notation,
where N is a multiple of 4.  For example, '%f4' can be denoted as both
'%d4' and '%q4'.  On the other hand, '%f2' can be denoted as '%d2' but
not as '%q2'.

   Certain V9 instructions allow access to ancillary state registers.
Most simply they can be referred to as '%asrN' where N can be from 16 to
31.  However, there are some aliases defined to reference ASR registers
defined for various UltraSPARC processors:

   * The tick compare register is referred to as '%tick_cmpr'.

   * The system tick register is referred to as '%stick'.  An alias,
     '%sys_tick', exists but is deprecated and should not be used by new
     software.

   * The system tick compare register is referred to as '%stick_cmpr'.
     An alias, '%sys_tick_cmpr', exists but is deprecated and should not
     be used by new software.

   * The software interrupt register is referred to as '%softint'.

   * The set software interrupt register is referred to as
     '%set_softint'.  The mnemonic '%softint_set' is provided as an
     alias.

   * The clear software interrupt register is referred to as
     '%clear_softint'.  The mnemonic '%softint_clear' is provided as an
     alias.

   * The performance instrumentation counters register is referred to as
     '%pic'.

   * The performance control register is referred to as '%pcr'.

   * The graphics status register is referred to as '%gsr'.

   * The V9 dispatch control register is referred to as '%dcr'.

   Various V9 branch and conditional move instructions allow
specification of which set of integer condition codes to test.  These
are referred to as '%xcc' and '%icc'.

   Additionally, GAS supports the so-called "natural" condition codes;
these are referred to as '%ncc' and reference to '%icc' if the word size
is 32, '%xcc' if the word size is 64.

   In V9, there are 4 sets of floating point condition codes which are
referred to as '%fccN'.

   Several special privileged and non-privileged registers exist:

   * The V9 address space identifier register is referred to as '%asi'.

   * The V9 restorable windows register is referred to as '%canrestore'.

   * The V9 savable windows register is referred to as '%cansave'.

   * The V9 clean windows register is referred to as '%cleanwin'.

   * The V9 current window pointer register is referred to as '%cwp'.

   * The floating-point queue register is referred to as '%fq'.

   * The V8 co-processor queue register is referred to as '%cq'.

   * The floating point status register is referred to as '%fsr'.

   * The other windows register is referred to as '%otherwin'.

   * The V9 program counter register is referred to as '%pc'.

   * The V9 next program counter register is referred to as '%npc'.

   * The V9 processor interrupt level register is referred to as '%pil'.

   * The V9 processor state register is referred to as '%pstate'.

   * The trap base address register is referred to as '%tba'.

   * The V9 tick register is referred to as '%tick'.

   * The V9 trap level is referred to as '%tl'.

   * The V9 trap program counter is referred to as '%tpc'.

   * The V9 trap next program counter is referred to as '%tnpc'.

   * The V9 trap state is referred to as '%tstate'.

   * The V9 trap type is referred to as '%tt'.

   * The V9 condition codes is referred to as '%ccr'.

   * The V9 floating-point registers state is referred to as '%fprs'.

   * The V9 version register is referred to as '%ver'.

   * The V9 window state register is referred to as '%wstate'.

   * The Y register is referred to as '%y'.

   * The V8 window invalid mask register is referred to as '%wim'.

   * The V8 processor state register is referred to as '%psr'.

   * The V9 global register level register is referred to as '%gl'.

   Several special register names exist for hypervisor mode code:

   * The hyperprivileged processor state register is referred to as
     '%hpstate'.

   * The hyperprivileged trap state register is referred to as
     '%htstate'.

   * The hyperprivileged interrupt pending register is referred to as
     '%hintp'.

   * The hyperprivileged trap base address register is referred to as
     '%htba'.

   * The hyperprivileged implementation version register is referred to
     as '%hver'.

   * The hyperprivileged system tick offset register is referred to as
     '%hstick_offset'.  Note that there is no '%hstick' register, the
     normal '%stick' is used.

   * The hyperprivileged system tick enable register is referred to as
     '%hstick_enable'.

   * The hyperprivileged system tick compare register is referred to as
     '%hstick_cmpr'.

==============================================================================
File: as.info,  Node: |Sparc_Constants|,  Next: |Sparc_Relocs|,  Prev: |Sparc_Regs|,  Up: |Sparc_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *Sparc_Constants*

9.41.3.3 Constants
.....-------------

Several Sparc instructions take an immediate operand field for which
mnemonic names exist.  Two such examples are 'membar' and 'prefetch'.
Another example are the set of V9 memory access instruction that allow
specification of an address space identifier.

   The 'membar' instruction specifies a memory barrier that is the
defined by the operand which is a bitmask.  The supported mask mnemonics
are:

   * '#Sync' requests that all operations (including nonmemory reference
     operations) appearing prior to the 'membar' must have been
     performed and the effects of any exceptions become visible before
     any instructions after the 'membar' may be initiated.  This
     corresponds to 'membar' cmask field bit 2.

   * '#MemIssue' requests that all memory reference operations appearing
     prior to the 'membar' must have been performed before any memory
     operation after the 'membar' may be initiated.  This corresponds to
     'membar' cmask field bit 1.

   * '#Lookaside' requests that a store appearing prior to the 'membar'
     must complete before any load following the 'membar' referencing
     the same address can be initiated.  This corresponds to 'membar'
     cmask field bit 0.

   * '#StoreStore' defines that the effects of all stores appearing
     prior to the 'membar' instruction must be visible to all processors
     before the effect of any stores following the 'membar'.  Equivalent
     to the deprecated 'stbar' instruction.  This corresponds to
     'membar' mmask field bit 3.

   * '#LoadStore' defines all loads appearing prior to the 'membar'
     instruction must have been performed before the effect of any
     stores following the 'membar' is visible to any other processor.
     This corresponds to 'membar' mmask field bit 2.

   * '#StoreLoad' defines that the effects of all stores appearing prior
     to the 'membar' instruction must be visible to all processors
     before loads following the 'membar' may be performed.  This
     corresponds to 'membar' mmask field bit 1.

   * '#LoadLoad' defines that all loads appearing prior to the 'membar'
     instruction must have been performed before any loads following the
     'membar' may be performed.  This corresponds to 'membar' mmask
     field bit 0.

   These values can be ored together, for example:

     membar #Sync
     membar #StoreLoad | #LoadLoad
     membar #StoreLoad | #StoreStore

   The 'prefetch' and 'prefetcha' instructions take a prefetch function
code.  The following prefetch function code constant mnemonics are
available:

   * '#n_reads' requests a prefetch for several reads, and corresponds
     to a prefetch function code of 0.

     '#one_read' requests a prefetch for one read, and corresponds to a
     prefetch function code of 1.

     '#n_writes' requests a prefetch for several writes (and possibly
     reads), and corresponds to a prefetch function code of 2.

     '#one_write' requests a prefetch for one write, and corresponds to
     a prefetch function code of 3.

     '#page' requests a prefetch page, and corresponds to a prefetch
     function code of 4.

     '#invalidate' requests a prefetch invalidate, and corresponds to a
     prefetch function code of 16.

     '#unified' requests a prefetch to the nearest unified cache, and
     corresponds to a prefetch function code of 17.

     '#n_reads_strong' requests a strong prefetch for several reads, and
     corresponds to a prefetch function code of 20.

     '#one_read_strong' requests a strong prefetch for one read, and
     corresponds to a prefetch function code of 21.

     '#n_writes_strong' requests a strong prefetch for several writes,
     and corresponds to a prefetch function code of 22.

     '#one_write_strong' requests a strong prefetch for one write, and
     corresponds to a prefetch function code of 23.

     Onle one prefetch code may be specified.  Here are some examples:

          prefetch  [%l0 + %l2], #one_read
          prefetch  [%g2 + 8], #n_writes
          prefetcha [%g1] 0x8, #unified
          prefetcha [%o0 + 0x10] %asi, #n_reads

     The actual behavior of a given prefetch function code is processor
     specific.  If a processor does not implement a given prefetch
     function code, it will treat the prefetch instruction as a nop.

     For instructions that accept an immediate address space identifier,
     'as' provides many mnemonics corresponding to V9 defined as well as
     UltraSPARC and Niagara extended values.  For example, '#ASI_P' and
     '#ASI_BLK_INIT_QUAD_LDD_AIUS'.  See the V9 and processor specific
     manuals for details.

==============================================================================
File: as.info,  Node: |Sparc_Relocs|,  Next: |Sparc_Size_Translations|,  Prev: |Sparc_Constants|,  Up: |Sparc_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Sparc_Relocs*

9.41.3.4 Relocations
.....---------------

ELF relocations are available as defined in the 32-bit and 64-bit Sparc
ELF specifications.

   'R_SPARC_HI22' is obtained using '%hi' and 'R_SPARC_LO10' is obtained
using '%lo'.  Likewise 'R_SPARC_HIX22' is obtained from '%hix' and
'R_SPARC_LOX10' is obtained using '%lox'.  For example:

     sethi %hi(symbol), %g1
     or    %g1, %lo(symbol), %g1

     sethi %hix(symbol), %g1
     xor   %g1, %lox(symbol), %g1

   These "high" mnemonics extract bits 31:10 of their operand, and the
"low" mnemonics extract bits 9:0 of their operand.

   V9 code model relocations can be requested as follows:

   * 'R_SPARC_HH22' is requested using '%hh'.  It can also be generated
     using '%uhi'.
   * 'R_SPARC_HM10' is requested using '%hm'.  It can also be generated
     using '%ulo'.
   * 'R_SPARC_LM22' is requested using '%lm'.

   * 'R_SPARC_H44' is requested using '%h44'.
   * 'R_SPARC_M44' is requested using '%m44'.
   * 'R_SPARC_L44' is requested using '%l44' or '%l34'.
   * 'R_SPARC_H34' is requested using '%h34'.

   The '%l34' generates a 'R_SPARC_L44' relocation because it calculates
the necessary value, and therefore no explicit 'R_SPARC_L34' relocation
needed to be created for this purpose.

   The '%h34' and '%l34' relocations are used for the abs34 code model.
Here is an example abs34 address generation sequence:

     sethi %h34(symbol), %g1
     sllx  %g1, 2, %g1
     or    %g1, %l34(symbol), %g1

   The PC relative relocation 'R_SPARC_PC22' can be obtained by
enclosing an operand inside of '%pc22'.  Likewise, the 'R_SPARC_PC10'
relocation can be obtained using '%pc10'.  These are mostly used when
assembling PIC code.  For example, the standard PIC sequence on Sparc to
get the base of the global offset table, PC relative, into a register,
can be performed as:

     sethi %pc22(_GLOBAL_OFFSET_TABLE_-4), %l7
     add   %l7, %pc10(_GLOBAL_OFFSET_TABLE_+4), %l7

   Several relocations exist to allow the link editor to potentially
optimize GOT data references.  The 'R_SPARC_GOTDATA_OP_HIX22' relocation
can obtained by enclosing an operand inside of '%gdop_hix22'.  The
'R_SPARC_GOTDATA_OP_LOX10' relocation can obtained by enclosing an
operand inside of '%gdop_lox10'.  Likewise, 'R_SPARC_GOTDATA_OP' can be
obtained by enclosing an operand inside of '%gdop'.  For example,
assuming the GOT base is in register '%l7':

     sethi %gdop_hix22(symbol), %l1
     xor   %l1, %gdop_lox10(symbol), %l1
     ld    [%l7 + %l1], %l2, %gdop(symbol)

   There are many relocations that can be requested for access to thread
local storage variables.  All of the Sparc TLS mnemonics are supported:

   * 'R_SPARC_TLS_GD_HI22' is requested using '%tgd_hi22'.
   * 'R_SPARC_TLS_GD_LO10' is requested using '%tgd_lo10'.
   * 'R_SPARC_TLS_GD_ADD' is requested using '%tgd_add'.
   * 'R_SPARC_TLS_GD_CALL' is requested using '%tgd_call'.

   * 'R_SPARC_TLS_LDM_HI22' is requested using '%tldm_hi22'.
   * 'R_SPARC_TLS_LDM_LO10' is requested using '%tldm_lo10'.
   * 'R_SPARC_TLS_LDM_ADD' is requested using '%tldm_add'.
   * 'R_SPARC_TLS_LDM_CALL' is requested using '%tldm_call'.

   * 'R_SPARC_TLS_LDO_HIX22' is requested using '%tldo_hix22'.
   * 'R_SPARC_TLS_LDO_LOX10' is requested using '%tldo_lox10'.
   * 'R_SPARC_TLS_LDO_ADD' is requested using '%tldo_add'.

   * 'R_SPARC_TLS_IE_HI22' is requested using '%tie_hi22'.
   * 'R_SPARC_TLS_IE_LO10' is requested using '%tie_lo10'.
   * 'R_SPARC_TLS_IE_LD' is requested using '%tie_ld'.
   * 'R_SPARC_TLS_IE_LDX' is requested using '%tie_ldx'.
   * 'R_SPARC_TLS_IE_ADD' is requested using '%tie_add'.

   * 'R_SPARC_TLS_LE_HIX22' is requested using '%tle_hix22'.
   * 'R_SPARC_TLS_LE_LOX10' is requested using '%tle_lox10'.

   Here are some example TLS model sequences.

   First, General Dynamic:

     sethi  %tgd_hi22(symbol), %l1
     add    %l1, %tgd_lo10(symbol), %l1
     add    %l7, %l1, %o0, %tgd_add(symbol)
     call   __tls_get_addr, %tgd_call(symbol)
     nop

   Local Dynamic:

     sethi  %tldm_hi22(symbol), %l1
     add    %l1, %tldm_lo10(symbol), %l1
     add    %l7, %l1, %o0, %tldm_add(symbol)
     call   __tls_get_addr, %tldm_call(symbol)
     nop

     sethi  %tldo_hix22(symbol), %l1
     xor    %l1, %tldo_lox10(symbol), %l1
     add    %o0, %l1, %l1, %tldo_add(symbol)

   Initial Exec:

     sethi  %tie_hi22(symbol), %l1
     add    %l1, %tie_lo10(symbol), %l1
     ld     [%l7 + %l1], %o0, %tie_ld(symbol)
     add    %g7, %o0, %o0, %tie_add(symbol)

     sethi  %tie_hi22(symbol), %l1
     add    %l1, %tie_lo10(symbol), %l1
     ldx    [%l7 + %l1], %o0, %tie_ldx(symbol)
     add    %g7, %o0, %o0, %tie_add(symbol)

   And finally, Local Exec:

     sethi  %tle_hix22(symbol), %l1
     add    %l1, %tle_lox10(symbol), %l1
     add    %g7, %l1, %l1

   When assembling for 64-bit, and a secondary constant addend is
specified in an address expression that would normally generate an
'R_SPARC_LO10' relocation, the assembler will emit an 'R_SPARC_OLO10'
instead.

==============================================================================
File: as.info,  Node: |Sparc_Size_Translations|,  Prev: |Sparc_Relocs|,  Up: |Sparc_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *Sparc_Size_Translations*

9.41.3.5 Size Translations
.....---------------------

Often it is desirable to write code in an operand size agnostic manner.
'as' provides support for this via operand size opcode translations.
Translations are supported for loads, stores, shifts, compare-and-swap
atomics, and the 'clr' synthetic instruction.

   If generating 32-bit code, 'as' will generate the 32-bit opcode.
Whereas if 64-bit code is being generated, the 64-bit opcode will be
emitted.  For example 'ldn' will be transformed into 'ld' for 32-bit
code and 'ldx' for 64-bit code.

   Here is an example meant to demonstrate all the supported opcode
translations:

     ldn   [%o0], %o1
     ldna  [%o0] %asi, %o2
     stn   %o1, [%o0]
     stna  %o2, [%o0] %asi
     slln  %o3, 3, %o3
     srln  %o4, 8, %o4
     sran  %o5, 12, %o5
     casn  [%o0], %o1, %o2
     casna [%o0] %asi, %o1, %o2
     clrn  %g1

   In 32-bit mode 'as' will emit:

     ld   [%o0], %o1
     lda  [%o0] %asi, %o2
     st   %o1, [%o0]
     sta  %o2, [%o0] %asi
     sll  %o3, 3, %o3
     srl  %o4, 8, %o4
     sra  %o5, 12, %o5
     cas  [%o0], %o1, %o2
     casa [%o0] %asi, %o1, %o2
     clr  %g1

   And in 64-bit mode 'as' will emit:

     ldx   [%o0], %o1
     ldxa  [%o0] %asi, %o2
     stx   %o1, [%o0]
     stxa  %o2, [%o0] %asi
     sllx  %o3, 3, %o3
     srlx  %o4, 8, %o4
     srax  %o5, 12, %o5
     casx  [%o0], %o1, %o2
     casxa [%o0] %asi, %o1, %o2
     clrx  %g1

   Finally, the '.nword' translating directive is supported as well.  It
is documented in the section on Sparc machine directives.

==============================================================================
File: as.info,  Node: |Sparc_Float|,  Next: |Sparc_Directives|,  Prev: |Sparc_Syntax|,  Up: |Sparc_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Sparc_Float*

9.41.4 Floating Point
---------------------

The Sparc uses IEEE floating-point numbers.

==============================================================================
File: as.info,  Node: |Sparc_Directives|,  Prev: |Sparc_Float|,  Up: |Sparc_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Sparc_Directives*

9.41.5 Sparc Machine Directives
-------------------------------

The Sparc version of 'as' supports the following additional machine
directives:

'.align'
     This must be followed by the desired alignment in bytes.

'.common'
     This must be followed by a symbol name, a positive number, and
     '"bss"'.  This behaves somewhat like '.comm', but the syntax is
     different.

'.half'
     This is functionally identical to '.short'.

'.nword'
     On the Sparc, the '.nword' directive produces native word sized
     value, ie.  if assembling with -32 it is equivalent to '.word', if
     assembling with -64 it is equivalent to '.xword'.

'.proc'
     This directive is ignored.  Any text following it on the same line
     is also ignored.

'.register'
     This directive declares use of a global application or system
     register.  It must be followed by a register name %g2, %g3, %g6 or
     %g7, comma and the symbol name for that register.  If symbol name
     is '#scratch', it is a scratch register, if it is '#ignore', it
     just suppresses any errors about using undeclared global register,
     but does not emit any information about it into the object file.
     This can be useful e.g.  if you save the register before use and
     restore it after.

'.reserve'
     This must be followed by a symbol name, a positive number, and
     '"bss"'.  This behaves somewhat like '.lcomm', but the syntax is
     different.

'.seg'
     This must be followed by '"text"', '"data"', or '"data1"'.  It
     behaves like '.text', '.data', or '.data 1'.

'.skip'
     This is functionally identical to the '.space' directive.

'.word'
     On the Sparc, the '.word' directive produces 32 bit values, instead
     of the 16 bit values it produces on many other machines.

'.xword'
     On the Sparc V9 processor, the '.xword' directive produces 64 bit
     values.

==============================================================================
File: as.info,  Node: |TIC54X_Dependent|,  Next: |TIC6X_Dependent|,  Prev: |Sparc_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *TIC54X_Dependent*

9.42 TIC54X Dependent Features
=====-------------------------

MENU

* |TIC54X_Opts|::              Command-line Options
* |TIC54X_Block|::             Blocking
* |TIC54X_Env|::               Environment Settings
* |TIC54X_Constants|::         Constants Syntax
* |TIC54X_Subsyms|::           String Substitution
* |TIC54X_Locals|::            Local Label Syntax
* |TIC54X_Builtins|::          Builtin Assembler Math Functions
* |TIC54X_Ext|::               Extended Addressing Support
* |TIC54X_Directives|::        Directives
* |TIC54X_Macros|::            Macro Features
* |TIC54X_MMRegs|::            Memory-mapped Registers
* |TIC54X_Syntax|::            Syntax

==============================================================================
File: as.info,  Node: |TIC54X_Opts|,  Next: |TIC54X_Block|,  Up: |TIC54X_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *TIC54X_Opts*

9.42.1 Options
--------------

The TMS320C54X version of 'as' has a few machine-dependent options.

   You can use the '-mfar-mode' option to enable extended addressing
mode.  All addresses will be assumed to be > 16 bits, and the
appropriate relocation types will be used.  This option is equivalent to
using the '.far_mode' directive in the assembly code.  If you do not use
the '-mfar-mode' option, all references will be assumed to be 16 bits.
This option may be abbreviated to '-mf'.

   You can use the '-mcpu' option to specify a particular CPU. This
option is equivalent to using the '.version' directive in the assembly
code.  For recognized CPU codes, see *Note '.version':
TIC54X-Directives.  The default CPU version is '542'.

   You can use the '-merrors-to-file' option to redirect error output to
a file (this provided for those deficient environments which don't
provide adequate output redirection).  This option may be abbreviated to
'-me'.

==============================================================================
File: as.info,  Node: |TIC54X_Block|,  Next: |TIC54X_Env|,  Prev: |TIC54X_Opts|,  Up: |TIC54X_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *TIC54X_Block*

9.42.2 Blocking
---------------

A blocked section or memory block is guaranteed not to cross the
blocking boundary (usually a page, or 128 words) if it is smaller than
the blocking size, or to start on a page boundary if it is larger than
the blocking size.

==============================================================================
File: as.info,  Node: |TIC54X_Env|,  Next: |TIC54X_Constants|,  Prev: |TIC54X_Block|,  Up: |TIC54X_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *TIC54X_Env*

9.42.3 Environment Settings
---------------------------

'C54XDSP_DIR' and 'A_DIR' are semicolon-separated paths which are added
to the list of directories normally searched for source and include
files.  'C54XDSP_DIR' will override 'A_DIR'.

==============================================================================
File: as.info,  Node: |TIC54X_Constants|,  Next: |TIC54X_Subsyms|,  Prev: |TIC54X_Env|,  Up: |TIC54X_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *TIC54X_Constants*

9.42.4 Constants Syntax
-----------------------

The TIC54X version of 'as' allows the following additional constant
formats, using a suffix to indicate the radix:

     Binary                  000000B, 011000b
     Octal                   10Q, 224q
     Hexadecimal             45h, 0FH


==============================================================================
File: as.info,  Node: |TIC54X_Subsyms|,  Next: |TIC54X_Locals|,  Prev: |TIC54X_Constants|,  Up: |TIC54X_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *TIC54X_Subsyms*

9.42.5 String Substitution
--------------------------

A subset of allowable symbols (which we'll call subsyms) may be assigned
arbitrary string values.  This is roughly equivalent to C preprocessor
#define macros.  When 'as' encounters one of these symbols, the symbol
is replaced in the input stream by its string value.  Subsym names
*must begin with a letter.

   Subsyms may be defined using the '.asg' and '.eval' directives (*Note
'.asg': TIC54X-Directives, *Note '.eval': TIC54X-Directives.

   Expansion is recursive until a previously encountered symbol is seen,
at which point substitution stops.

   In this example, x is replaced with SYM2; SYM2 is replaced with SYM1,
and SYM1 is replaced with x.  At this point, x has already been
encountered and the substitution stops.

      .asg   "x",SYM1
      .asg   "SYM1",SYM2
      .asg   "SYM2",x
      add    x,a             ; final code assembled is "add  x, a"

   Macro parameters are converted to subsyms; a side effect of this is
the normal 'as' '\ARG' dereferencing syntax is unnecessary.  Subsyms
defined within a macro will have global scope, unless the '.var'
directive is used to identify the subsym as a local macro variable *note
'.var': TIC54X-Directives.

   Substitution may be forced in situations where replacement might be
ambiguous by placing colons on either side of the subsym.  The following
code:

      .eval  "10",x
     LAB:X:  add     #x, a

   When assembled becomes:

     LAB10  add     #10, a

   Smaller parts of the string assigned to a subsym may be accessed with
the following syntax:

':SYMBOL(CHAR_INDEX):'
     Evaluates to a single-character string, the character at
     CHAR_INDEX.
':SYMBOL(START,LENGTH):'
     Evaluates to a substring of SYMBOL beginning at START with length
     LENGTH.

==============================================================================
File: as.info,  Node: |TIC54X_Locals|,  Next: |TIC54X_Builtins|,  Prev: |TIC54X_Subsyms|,  Up: |TIC54X_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *TIC54X_Locals*

9.42.6 Local Labels
-------------------

Local labels may be defined in two ways:

   * $N, where N is a decimal number between 0 and 9
   * LABEL?, where LABEL is any legal symbol name.

   Local labels thus defined may be redefined or automatically
generated.  The scope of a local label is based on when it may be
undefined or reset.  This happens when one of the following situations
is encountered:

   * .newblock directive *note '.newblock': TIC54X-Directives.
   * The current section is changed (.sect, .text, or .data)
   * Entering or leaving an included file
   * The macro scope where the label was defined is exited

==============================================================================
File: as.info,  Node: |TIC54X_Builtins|,  Next: |TIC54X_Ext|,  Prev: |TIC54X_Locals|,  Up: |TIC54X_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *TIC54X_Builtins*

9.42.7 Math Builtins
--------------------

The following built-in functions may be used to generate a
floating-point value.  All return a floating-point value except '$cvi',
'$int', and '$sgn', which return an integer value.

'$acos(EXPR)'
     Returns the floating point arccosine of EXPR.

'$asin(EXPR)'
     Returns the floating point arcsine of EXPR.

'$atan(EXPR)'
     Returns the floating point arctangent of EXPR.

'$atan2(EXPR1,EXPR2)'
     Returns the floating point arctangent of EXPR1 / EXPR2.

'$ceil(EXPR)'
     Returns the smallest integer not less than EXPR as floating point.

'$cosh(EXPR)'
     Returns the floating point hyperbolic cosine of EXPR.

'$cos(EXPR)'
     Returns the floating point cosine of EXPR.

'$cvf(EXPR)'
     Returns the integer value EXPR converted to floating-point.

'$cvi(EXPR)'
     Returns the floating point value EXPR converted to integer.

'$exp(EXPR)'
     Returns the floating point value e ^ EXPR.

'$fabs(EXPR)'
     Returns the floating point absolute value of EXPR.

'$floor(EXPR)'
     Returns the largest integer that is not greater than EXPR as
     floating point.

'$fmod(EXPR1,EXPR2)'
     Returns the floating point remainder of EXPR1 / EXPR2.

'$int(EXPR)'
     Returns 1 if EXPR evaluates to an integer, zero otherwise.

'$ldexp(EXPR1,EXPR2)'
     Returns the floating point value EXPR1 * 2 ^ EXPR2.

'$log10(EXPR)'
     Returns the base 10 logarithm of EXPR.

'$log(EXPR)'
     Returns the natural logarithm of EXPR.

'$max(EXPR1,EXPR2)'
     Returns the floating point maximum of EXPR1 and EXPR2.

'$min(EXPR1,EXPR2)'
     Returns the floating point minimum of EXPR1 and EXPR2.

'$pow(EXPR1,EXPR2)'
     Returns the floating point value EXPR1 ^ EXPR2.

'$round(EXPR)'
     Returns the nearest integer to EXPR as a floating point number.

'$sgn(EXPR)'
     Returns -1, 0, or 1 based on the sign of EXPR.

'$sin(EXPR)'
     Returns the floating point sine of EXPR.

'$sinh(EXPR)'
     Returns the floating point hyperbolic sine of EXPR.

'$sqrt(EXPR)'
     Returns the floating point square root of EXPR.

'$tan(EXPR)'
     Returns the floating point tangent of EXPR.

'$tanh(EXPR)'
     Returns the floating point hyperbolic tangent of EXPR.

'$trunc(EXPR)'
     Returns the integer value of EXPR truncated towards zero as
     floating point.

==============================================================================
File: as.info,  Node: |TIC54X_Ext|,  Next: |TIC54X_Directives|,  Prev: |TIC54X_Builtins|,  Up: |TIC54X_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *TIC54X_Ext*

9.42.8 Extended Addressing
--------------------------

The 'LDX' pseudo-op is provided for loading the extended addressing bits
of a label or address.  For example, if an address '_label' resides in
extended program memory, the value of '_label' may be loaded as follows:
      ldx     #_label,16,a    ; loads extended bits of _label
      or      #_label,a       ; loads lower 16 bits of _label
      bacc    a               ; full address is in accumulator A

==============================================================================
File: as.info,  Node: |TIC54X_Directives|,  Next: |TIC54X_Macros|,  Prev: |TIC54X_Ext|,  Up: |TIC54X_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *TIC54X_Directives*

9.42.9 Directives
-----------------

'.align [SIZE]'
'.even'
     Align the section program counter on the next boundary, based on
     SIZE.  SIZE may be any power of 2.  '.even' is equivalent to
     '.align' with a SIZE of 2.
     '1'
          Align SPC to word boundary
     '2'
          Align SPC to longword boundary (same as .even)
     '128'
          Align SPC to page boundary

'.asg STRING, NAME'
     Assign NAME the string STRING.  String replacement is performed on
     STRING before assignment.

'.eval STRING, NAME'
     Evaluate the contents of string STRING and assign the result as a
     string to the subsym NAME.  String replacement is performed on
     STRING before assignment.

'.bss SYMBOL, SIZE [, [BLOCKING_FLAG] [,ALIGNMENT_FLAG]]'
     Reserve space for SYMBOL in the .bss section.  SIZE is in words.
     If present, BLOCKING_FLAG indicates the allocated space should be
     aligned on a page boundary if it would otherwise cross a page
     boundary.  If present, ALIGNMENT_FLAG causes the assembler to
     allocate SIZE on a long word boundary.

'.byte VALUE [,...,VALUE_N]'
'.ubyte VALUE [,...,VALUE_N]'
'.char VALUE [,...,VALUE_N]'
'.uchar VALUE [,...,VALUE_N]'
     Place one or more bytes into consecutive words of the current
     section.  The upper 8 bits of each word is zero-filled.  If a label
     is used, it points to the word allocated for the first byte
     encountered.

'.clink ["SECTION_NAME"]'
     Set STYP_CLINK flag for this section, which indicates to the linker
     that if no symbols from this section are referenced, the section
     should not be included in the link.  If SECTION_NAME is omitted,
     the current section is used.

'.c_mode'
     TBD.

'.copy "FILENAME" | FILENAME'
'.include "FILENAME" | FILENAME'
     Read source statements from FILENAME.  The normal include search
     path is used.  Normally .copy will cause statements from the
     included file to be printed in the assembly listing and .include
     will not, but this distinction is not currently implemented.

'.data'
     Begin assembling code into the .data section.

'.double VALUE [,...,VALUE_N]'
'.ldouble VALUE [,...,VALUE_N]'
'.float VALUE [,...,VALUE_N]'
'.xfloat VALUE [,...,VALUE_N]'
     Place an IEEE single-precision floating-point representation of one
     or more floating-point values into the current section.  All but
     '.xfloat' align the result on a longword boundary.  Values are
     stored most-significant word first.

'.drlist'
'.drnolist'
     Control printing of directives to the listing file.  Ignored.

'.emsg STRING'
'.mmsg STRING'
'.wmsg STRING'
     Emit a user-defined error, message, or warning, respectively.

'.far_mode'
     Use extended addressing when assembling statements.  This should
     appear only once per file, and is equivalent to the -mfar-mode
     option *note '-mfar-mode': TIC54X-Opts.

'.fclist'
'.fcnolist'
     Control printing of false conditional blocks to the listing file.

'.field VALUE [,SIZE]'
     Initialize a bitfield of SIZE bits in the current section.  If
     VALUE is relocatable, then SIZE must be 16.  SIZE defaults to 16
     bits.  If VALUE does not fit into SIZE bits, the value will be
     truncated.  Successive '.field' directives will pack starting at
     the current word, filling the most significant bits first, and
     aligning to the start of the next word if the field size does not
     fit into the space remaining in the current word.  A '.align'
     directive with an operand of 1 will force the next '.field'
     directive to begin packing into a new word.  If a label is used, it
     points to the word that contains the specified field.

'.global SYMBOL [,...,SYMBOL_N]'
'.def SYMBOL [,...,SYMBOL_N]'
'.ref SYMBOL [,...,SYMBOL_N]'
     '.def' nominally identifies a symbol defined in the current file
     and available to other files.  '.ref' identifies a symbol used in
     the current file but defined elsewhere.  Both map to the standard
     '.global' directive.

'.half VALUE [,...,VALUE_N]'
'.uhalf VALUE [,...,VALUE_N]'
'.short VALUE [,...,VALUE_N]'
'.ushort VALUE [,...,VALUE_N]'
'.int VALUE [,...,VALUE_N]'
'.uint VALUE [,...,VALUE_N]'
'.word VALUE [,...,VALUE_N]'
'.uword VALUE [,...,VALUE_N]'
     Place one or more values into consecutive words of the current
     section.  If a label is used, it points to the word allocated for
     the first value encountered.

'.label SYMBOL'
     Define a special SYMBOL to refer to the load time address of the
     current section program counter.

'.length'
'.width'
     Set the page length and width of the output listing file.  Ignored.

'.list'
'.nolist'
     Control whether the source listing is printed.  Ignored.

'.long VALUE [,...,VALUE_N]'
'.ulong VALUE [,...,VALUE_N]'
'.xlong VALUE [,...,VALUE_N]'
     Place one or more 32-bit values into consecutive words in the
     current section.  The most significant word is stored first.
     '.long' and '.ulong' align the result on a longword boundary;
     'xlong' does not.

'.loop [COUNT]'
'.break [CONDITION]'
'.endloop'
     Repeatedly assemble a block of code.  '.loop' begins the block, and
     '.endloop' marks its termination.  COUNT defaults to 1024, and
     indicates the number of times the block should be repeated.
     '.break' terminates the loop so that assembly begins after the
     '.endloop' directive.  The optional CONDITION will cause the loop
     to terminate only if it evaluates to zero.

'MACRO_NAME .macro [PARAM1][,...PARAM_N]'
'[.mexit]'
'.endm'
     See the section on macros for more explanation (*Note
     TIC54X-Macros::.

'.mlib "FILENAME" | FILENAME'
     Load the macro library FILENAME.  FILENAME must be an archived
     library (BFD ar-compatible) of text files, expected to contain only
     macro definitions.  The standard include search path is used.

'.mlist'
'.mnolist'
     Control whether to include macro and loop block expansions in the
     listing output.  Ignored.

'.mmregs'
     Define global symbolic names for the 'c54x registers.  Supposedly
     equivalent to executing '.set' directives for each register with
     its memory-mapped value, but in reality is provided only for
     compatibility and does nothing.

'.newblock'
     This directive resets any TIC54X local labels currently defined.
     Normal 'as' local labels are unaffected.

'.option OPTION_LIST'
     Set listing options.  Ignored.

'.sblock "SECTION_NAME" | SECTION_NAME [,"NAME_N" | NAME_N]'
     Designate SECTION_NAME for blocking.  Blocking guarantees that a
     section will start on a page boundary (128 words) if it would
     otherwise cross a page boundary.  Only initialized sections may be
     designated with this directive.  See also *Note TIC54X-Block::.

'.sect "SECTION_NAME"'
     Define a named initialized section and make it the current section.

'SYMBOL .set "VALUE"'
'SYMBOL .equ "VALUE"'
     Equate a constant VALUE to a SYMBOL, which is placed in the symbol
     table.  SYMBOL may not be previously defined.

'.space SIZE_IN_BITS'
'.bes SIZE_IN_BITS'
     Reserve the given number of bits in the current section and
     zero-fill them.  If a label is used with '.space', it points to the
     first word reserved.  With '.bes', the label points to the *last*
     word reserved.

'.sslist'
'.ssnolist'
     Controls the inclusion of subsym replacement in the listing output.
     Ignored.

'.string "STRING" [,...,"STRING_N"]'
'.pstring "STRING" [,...,"STRING_N"]'
     Place 8-bit characters from STRING into the current section.
     '.string' zero-fills the upper 8 bits of each word, while
     '.pstring' puts two characters into each word, filling the
     most-significant bits first.  Unused space is zero-filled.  If a
     label is used, it points to the first word initialized.

'[STAG] .struct [OFFSET]'
'[NAME_1] element [COUNT_1]'
'[NAME_2] element [COUNT_2]'
'[TNAME] .tag STAGX [TCOUNT]'
'...'
'[NAME_N] element [COUNT_N]'
'[SSIZE] .endstruct'
'LABEL .tag [STAG]'
     Assign symbolic offsets to the elements of a structure.  STAG
     defines a symbol to use to reference the structure.  OFFSET
     indicates a starting value to use for the first element
     encountered; otherwise it defaults to zero.  Each element can have
     a named offset, NAME, which is a symbol assigned the value of the
     element's offset into the structure.  If STAG is missing, these
     become global symbols.  COUNT adjusts the offset that many times,
     as if 'element' were an array.  'element' may be one of '.byte',
     '.word', '.long', '.float', or any equivalent of those, and the
     structure offset is adjusted accordingly.  '.field' and '.string'
     are also allowed; the size of '.field' is one bit, and '.string' is
     considered to be one word in size.  Only element descriptors,
     structure/union tags, '.align' and conditional assembly directives
     are allowed within '.struct'/'.endstruct'.  '.align' aligns member
     offsets to word boundaries only.  SSIZE, if provided, will always
     be assigned the size of the structure.

     The '.tag' directive, in addition to being used to define a
     structure/union element within a structure, may be used to apply a
     structure to a symbol.  Once applied to LABEL, the individual
     structure elements may be applied to LABEL to produce the desired
     offsets using LABEL as the structure base.

'.tab'
     Set the tab size in the output listing.  Ignored.

'[UTAG] .union'
'[NAME_1] element [COUNT_1]'
'[NAME_2] element [COUNT_2]'
'[TNAME] .tag UTAGX[,TCOUNT]'
'...'
'[NAME_N] element [COUNT_N]'
'[USIZE] .endstruct'
'LABEL .tag [UTAG]'
     Similar to '.struct', but the offset after each element is reset to
     zero, and the USIZE is set to the maximum of all defined elements.
     Starting offset for the union is always zero.

'[SYMBOL] .usect "SECTION_NAME", SIZE, [,[BLOCKING_FLAG] [,ALIGNMENT_FLAG]]'
     Reserve space for variables in a named, uninitialized section
     (similar to .bss).  '.usect' allows definitions sections
     independent of .bss.  SYMBOL points to the first location reserved
     by this allocation.  The symbol may be used as a variable name.
     SIZE is the allocated size in words.  BLOCKING_FLAG indicates
     whether to block this section on a page boundary (128 words) (*note
     TIC54X-Block::).  ALIGNMENT FLAG indicates whether the section
     should be longword-aligned.

'.var SYM[,..., SYM_N]'
     Define a subsym to be a local variable within a macro.  See *Note
     TIC54X-Macros::.

'.version VERSION'
     Set which processor to build instructions for.  Though the
     following values are accepted, the op is ignored.
     '541'
     '542'
     '543'
     '545'
     '545LP'
     '546LP'
     '548'
     '549'

==============================================================================
File: as.info,  Node: |TIC54X_Macros|,  Next: |TIC54X_MMRegs|,  Prev: |TIC54X_Directives|,  Up: |TIC54X_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *TIC54X_Macros*

9.42.10 Macros
--------------

Macros do not require explicit dereferencing of arguments (i.e., \ARG).

   During macro expansion, the macro parameters are converted to
subsyms.  If the number of arguments passed the macro invocation exceeds
the number of parameters defined, the last parameter is assigned the
string equivalent of all remaining arguments.  If fewer arguments are
given than parameters, the missing parameters are assigned empty
strings.  To include a comma in an argument, you must enclose the
argument in quotes.

   The following built-in subsym functions allow examination of the
string value of subsyms (or ordinary strings).  The arguments are
strings unless otherwise indicated (subsyms passed as args will be
replaced by the strings they represent).
'$symlen(STR)'
     Returns the length of STR.

'$symcmp(STR1,STR2)'
     Returns 0 if STR1 == STR2, non-zero otherwise.

'$firstch(STR,CH)'
     Returns index of the first occurrence of character constant CH in
     STR.

'$lastch(STR,CH)'
     Returns index of the last occurrence of character constant CH in
     STR.

'$isdefed(SYMBOL)'
     Returns zero if the symbol SYMBOL is not in the symbol table,
     non-zero otherwise.

'$ismember(SYMBOL,LIST)'
     Assign the first member of comma-separated string LIST to SYMBOL;
     LIST is reassigned the remainder of the list.  Returns zero if LIST
     is a null string.  Both arguments must be subsyms.

'$iscons(EXPR)'
     Returns 1 if string EXPR is binary, 2 if octal, 3 if hexadecimal, 4
     if a character, 5 if decimal, and zero if not an integer.

'$isname(NAME)'
     Returns 1 if NAME is a valid symbol name, zero otherwise.

'$isreg(REG)'
     Returns 1 if REG is a valid predefined register name (AR0-AR7
     only).

'$structsz(STAG)'
     Returns the size of the structure or union represented by STAG.

'$structacc(STAG)'
     Returns the reference point of the structure or union represented
     by STAG.  Always returns zero.

==============================================================================
File: as.info,  Node: |TIC54X_MMRegs|,  Next: |TIC54X_Syntax|,  Prev: |TIC54X_Macros|,  Up: |TIC54X_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *TIC54X_MMRegs*

9.42.11 Memory-mapped Registers
-------------------------------

The following symbols are recognized as memory-mapped registers:

==============================================================================
File: as.info,  Node: |TIC54X_Syntax|,  Prev: |TIC54X_MMRegs|,  Up: |TIC54X_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *TIC54X_Syntax*

9.42.12 TIC54X Syntax
---------------------

MENU

* |TIC54X_Chars|::                Special Characters

==============================================================================
File: as.info,  Node: |TIC54X_Chars|,  Up: |TIC54X_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *TIC54X_Chars*

9.42.12.1 Special Characters
.....-----------------------

The presence of a ';' appearing anywhere on a line indicates the start
of a comment that extends to the end of that line.

   If a '#' appears as the first character of a line then the whole line
is treated as a comment, but in this case the line can also be a logical
line number directive (*note Comments::) or a preprocessor control
command (*note Preprocessing::).

   The presence of an asterisk ('*') at the start of a line also
indicates a comment that extends to the end of that line.

   The TIC54X assembler does not currently support a line separator
character.

==============================================================================
File: as.info,  Node: |TIC6X_Dependent|,  Next: |TILE_Gx_Dependent|,  Prev: |TIC54X_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *TIC6X_Dependent*

9.43 TIC6X Dependent Features
=====------------------------

MENU

* |TIC6X_Options|::            Options
* |TIC6X_Syntax|::             Syntax
* |TIC6X_Directives|::         Directives

==============================================================================
File: as.info,  Node: |TIC6X_Options|,  Next: |TIC6X_Syntax|,  Up: |TIC6X_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *TIC6X_Options*

9.43.1 TIC6X Options
--------------------

'-march=ARCH'
     Enable (only) instructions from architecture ARCH.  By default, all
     instructions are permitted.

     The following values of ARCH are accepted: 'c62x', 'c64x', 'c64x+',
     'c67x', 'c67x+', 'c674x'.

'-mdsbt'
'-mno-dsbt'
     The '-mdsbt' option causes the assembler to generate the
     'Tag_ABI_DSBT' attribute with a value of 1, indicating that the
     code is using DSBT addressing.  The '-mno-dsbt' option, the
     default, causes the tag to have a value of 0, indicating that the
     code does not use DSBT addressing.  The linker will emit a warning
     if objects of different type (DSBT and non-DSBT) are linked
     together.

'-mpid=no'
'-mpid=near'
'-mpid=far'
     The '-mpid=' option causes the assembler to generate the
     'Tag_ABI_PID' attribute with a value indicating the form of data
     addressing used by the code.  '-mpid=no', the default, indicates
     position-dependent data addressing, '-mpid=near' indicates
     position-independent addressing with GOT accesses using near DP
     addressing, and '-mpid=far' indicates position-independent
     addressing with GOT accesses using far DP addressing.  The linker
     will emit a warning if objects built with different settings of
     this option are linked together.

'-mpic'
'-mno-pic'
     The '-mpic' option causes the assembler to generate the
     'Tag_ABI_PIC' attribute with a value of 1, indicating that the code
     is using position-independent code addressing, The '-mno-pic'
     option, the default, causes the tag to have a value of 0,
     indicating position-dependent code addressing.  The linker will
     emit a warning if objects of different type (position-dependent and
     position-independent) are linked together.

'-mbig-endian'
'-mlittle-endian'
     Generate code for the specified endianness.  The default is
     little-endian.

==============================================================================
File: as.info,  Node: |TIC6X_Syntax|,  Next: |TIC6X_Directives|,  Prev: |TIC6X_Options|,  Up: |TIC6X_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *TIC6X_Syntax*

9.43.2 TIC6X Syntax
-------------------

The presence of a ';' on a line indicates the start of a comment that
extends to the end of the current line.  If a '#' or '*' appears as the
first character of a line, the whole line is treated as a comment.  Note
that if a line starts with a '#' character then it can also be a logical
line number directive (*note Comments::) or a preprocessor control
command (*note Preprocessing::).

   The '@' character can be used instead of a newline to separate
statements.

   Instruction, register and functional unit names are case-insensitive.
'as' requires fully-specified functional unit names, such as '.S1',
'.L1X' or '.D1T2', on all instructions using a functional unit.

   For some instructions, there may be syntactic ambiguity between
register or functional unit names and the names of labels or other
symbols.  To avoid this, enclose the ambiguous symbol name in
parentheses; register and functional unit names may not be enclosed in
parentheses.

==============================================================================
File: as.info,  Node: |TIC6X_Directives|,  Prev: |TIC6X_Syntax|,  Up: |TIC6X_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *TIC6X_Directives*

9.43.3 TIC6X Directives
-----------------------

Directives controlling the set of instructions accepted by the assembler
have effect for instructions between the directive and any subsequent
directive overriding it.

'.arch ARCH'
     This has the same effect as '-march=ARCH'.

'.cantunwind'
     Prevents unwinding through the current function.  No personality
     routine or exception table data is required or permitted.

     If this is not specified then frame unwinding information will be
     constructed from CFI directives.  *note CFI directives::.

'.c6xabi_attribute TAG, VALUE'
     Set the C6000 EABI build attribute TAG to VALUE.

     The TAG is either an attribute number or one of 'Tag_ISA',
     'Tag_ABI_wchar_t', 'Tag_ABI_stack_align_needed',
     'Tag_ABI_stack_align_preserved', 'Tag_ABI_DSBT', 'Tag_ABI_PID',
     'Tag_ABI_PIC', 'TAG_ABI_array_object_alignment',
     'TAG_ABI_array_object_align_expected', 'Tag_ABI_compatibility' and
     'Tag_ABI_conformance'.  The VALUE is either a 'number', '"string"',
     or 'number, "string"' depending on the tag.

'.ehtype SYMBOL'
     Output an exception type table reference to SYMBOL.

'.endp'
     Marks the end of and exception table or function.  If preceded by a
     '.handlerdata' directive then this also switched back to the
     previous text section.

'.handlerdata'
     Marks the end of the current function, and the start of the
     exception table entry for that function.  Anything between this
     directive and the '.endp' directive will be added to the exception
     table entry.

     Must be preceded by a CFI block containing a '.cfi_lsda' directive.

'.nocmp'
     Disallow use of C64x+ compact instructions in the current text
     section.

'.personalityindex INDEX'
     Sets the personality routine for the current function to the ABI
     specified compact routine number INDEX

'.personality NAME'
     Sets the personality routine for the current function to NAME.

'.scomm SYMBOL, SIZE, ALIGN'
     Like '.comm', creating a common symbol SYMBOL with size SIZE and
     alignment ALIGN, but unlike when using '.comm', this symbol will be
     placed into the small BSS section by the linker.

==============================================================================
File: as.info,  Node: |TILE_Gx_Dependent|,  Next: |TILEPro_Dependent|,  Prev: |TIC6X_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *TILE_Gx_Dependent*

9.44 TILE-Gx Dependent Features
=====--------------------------

MENU

* |TILE_Gx_Options|::		TILE-Gx Options
* |TILE_Gx_Syntax|::		TILE-Gx Syntax
* |TILE_Gx_Directives|::		TILE-Gx Directives

==============================================================================
File: as.info,  Node: |TILE_Gx_Options|,  Next: |TILE_Gx_Syntax|,  Up: |TILE_Gx_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *TILE_Gx_Options*

9.44.1 Options
--------------

The following table lists all available TILE-Gx specific options:

'-m32 | -m64'
     Select the word size, either 32 bits or 64 bits.

'-EB | -EL'
     Select the endianness, either big-endian (-EB) or little-endian
     (-EL).

==============================================================================
File: as.info,  Node: |TILE_Gx_Syntax|,  Next: |TILE_Gx_Directives|,  Prev: |TILE_Gx_Options|,  Up: |TILE_Gx_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *TILE_Gx_Syntax*

9.44.2 Syntax
-------------

Block comments are delimited by '/*' and '*/'.  End of line comments may
be introduced by '#'.

   Instructions consist of a leading opcode or macro name followed by
whitespace and an optional comma-separated list of operands:

     OPCODE [OPERAND, ...]

   Instructions must be separated by a newline or semicolon.

   There are two ways to write code: either write naked instructions,
which the assembler is free to combine into VLIW bundles, or specify the
VLIW bundles explicitly.

   Bundles are specified using curly braces:

     { ADD r3,r4,r5 ; ADD r7,r8,r9 ; LW r10,r11 }

   A bundle can span multiple lines.  If you want to put multiple
instructions on a line, whether in a bundle or not, you need to separate
them with semicolons as in this example.

   A bundle may contain one or more instructions, up to the limit
specified by the ISA (currently three).  If fewer instructions are
specified than the hardware supports in a bundle, the assembler inserts
'fnop' instructions automatically.

   The assembler will prefer to preserve the ordering of instructions
within the bundle, putting the first instruction in a lower-numbered
pipeline than the next one, etc.  This fact, combined with the optional
use of explicit 'fnop' or 'nop' instructions, allows precise control
over which pipeline executes each instruction.

   If the instructions cannot be bundled in the listed order, the
assembler will automatically try to find a valid pipeline assignment.
If there is no way to bundle the instructions together, the assembler
reports an error.

   The assembler does not yet auto-bundle (automatically combine
multiple instructions into one bundle), but it reserves the right to do
so in the future.  If you want to force an instruction to run by itself,
put it in a bundle explicitly with curly braces and use 'nop'
instructions (not 'fnop') to fill the remaining pipeline slots in that
bundle.

MENU

* |TILE_Gx_Opcodes|::              Opcode Naming Conventions.
* |TILE_Gx_Registers|::            Register Naming.
* |TILE_Gx_Modifiers|::            Symbolic Operand Modifiers.

==============================================================================
File: as.info,  Node: |TILE_Gx_Opcodes|,  Next: |TILE_Gx_Registers|,  Up: |TILE_Gx_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *TILE_Gx_Opcodes*

9.44.2.1 Opcode Names
.....----------------

For a complete list of opcodes and descriptions of their semantics, see
'TILE-Gx Instruction Set Architecture', available upon request at
www.tilera.com.

==============================================================================
File: as.info,  Node: |TILE_Gx_Registers|,  Next: |TILE_Gx_Modifiers|,  Prev: |TILE_Gx_Opcodes|,  Up: |TILE_Gx_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *TILE_Gx_Registers*

9.44.2.2 Register Names
.....------------------

General-purpose registers are represented by predefined symbols of the
form 'rN', where N represents a number between '0' and '63'.  However,
the following registers have canonical names that must be used instead:

'r54'
     sp

'r55'
     lr

'r56'
     sn

'r57'
     idn0

'r58'
     idn1

'r59'
     udn0

'r60'
     udn1

'r61'
     udn2

'r62'
     udn3

'r63'
     zero

   The assembler will emit a warning if a numeric name is used instead
of the non-numeric name.  The '.no_require_canonical_reg_names'
assembler pseudo-op turns off this warning.
'.require_canonical_reg_names' turns it back on.

==============================================================================
File: as.info,  Node: |TILE_Gx_Modifiers|,  Prev: TILE-Gx Registers,  Up: TILE-Gx Syntax
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *TILE_Gx_Modifiers*

9.44.2.3 Symbolic Operand Modifiers
.....------------------------------

The assembler supports several modifiers when using symbol addresses in
TILE-Gx instruction operands.  The general syntax is the following:

     modifier(symbol)

   The following modifiers are supported:

vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
