macros just for that purpose.

   The optional FLAGS argument is a quoted string which may contain any
combination of the following characters:

'a'
     section is allocatable
'd'
     section is a GNU_MBIND section
'e'
     section is excluded from executable and shared library.
'w'
     section is writable
'x'
     section is executable
'M'
     section is mergeable
'S'
     section contains zero terminated strings
'G'
     section is a member of a section group
'T'
     section is used for thread-local-storage
'?'
     section is a member of the previously-current section's group, if
     any
'<number>'
     a numeric value indicating the bits to be set in the ELF section
     header's flags field.  Note - if one or more of the alphabetic
     characters described above is also included in the flags field,
     their bit values will be ORed into the resulting value.
'<target specific>'
     some targets extend this list with their own flag characters

   Note - once a section's flags have been set they cannot be changed.
There are a few exceptions to this rule however.  Processor and
application specific flags can be added to an already defined section.
The '.interp', '.strtab' and '.symtab' sections can have the allocate
flag ('a') set after they are initially defined, and the
'.note-GNU-stack' section may have the executable ('x') flag added.

   The optional TYPE argument may contain one of the following
constants:

'@progbits'
     section contains data
'@nobits'
     section does not contain data (i.e., section only occupies space)
'@note'
     section contains data which is used by things other than the
     program
'@init_array'
     section contains an array of pointers to init functions
'@fini_array'
     section contains an array of pointers to finish functions
'@preinit_array'
     section contains an array of pointers to pre-init functions
'@<number>'
     a numeric value to be set as the ELF section header's type field.
'@<target specific>'
     some targets extend this list with their own types

   Many targets only support the first three section types.  The type
may be enclosed in double quotes if necessary.

   Note on targets where the '@' character is the start of a comment (eg
ARM) then another character is used instead.  For example the ARM port
uses the '%' character.

   Note - some sections, eg '.text' and '.data' are considered to be
special and have fixed types.  Any attempt to declare them with a
different type will generate an error from the assembler.

   If FLAGS contains the 'M' symbol then the TYPE argument must be
specified as well as an extra argument--ENTSIZE--like this:

     .section NAME , "FLAGS"M, @TYPE, ENTSIZE

   Sections with the 'M' flag but not 'S' flag must contain fixed size
constants, each ENTSIZE octets long.  Sections with both 'M' and 'S'
must contain zero terminated strings where each character is ENTSIZE
bytes long.  The linker may remove duplicates within sections with the
same name, same entity size and same flags.  ENTSIZE must be an absolute
expression.  For sections with both 'M' and 'S', a string which is a
suffix of a larger string is considered a duplicate.  Thus '"def"' will
be merged with '"abcdef"'; A reference to the first '"def"' will be
changed to a reference to '"abcdef"+3'.

   If FLAGS contains the 'G' symbol then the TYPE argument must be
present along with an additional field like this:

     .section NAME , "FLAGS"G, @TYPE, GROUPNAME[, LINKAGE]

   The GROUPNAME field specifies the name of the section group to which
this particular section belongs.  The optional linkage field can
contain:

'comdat'
     indicates that only one copy of this section should be retained
'.gnu.linkonce'
     an alias for comdat

   Note: if both the M and G flags are present then the fields for the
Merge flag should come first, like this:

     .section NAME , "FLAGS"MG, @TYPE, ENTSIZE, GROUPNAME[, LINKAGE]

   If FLAGS contains the '?' symbol then it may not also contain the 'G'
symbol and the GROUPNAME or LINKAGE fields should not be present.
Instead, '?' says to consider the section that's current before this
directive.  If that section used 'G', then the new section will use 'G'
with those same GROUPNAME and LINKAGE fields implicitly.  If not, then
the '?' symbol has no effect.

   If no flags are specified, the default flags depend upon the section
name.  If the section name is not recognized, the default will be for
the section to have none of the above flags: it will not be allocated in
memory, nor writable, nor executable.  The section will contain data.

   For ELF targets, the assembler supports another type of '.section'
directive for compatibility with the Solaris assembler:

     .section "NAME"[, FLAGS...]

   Note that the section name is quoted.  There may be a sequence of
comma separated flags:

'#alloc'
     section is allocatable
'#write'
     section is writable
'#execinstr'
     section is executable
'#exclude'
     section is excluded from executable and shared library.
'#tls'
     section is used for thread local storage

   This directive replaces the current section and subsection.  See the
contents of the gas testsuite directory 'gas/testsuite/gas/elf' for some
examples of how this directive and the other section stack directives
work.

==============================================================================
File: as.info,  Node: |Set|,  Next: |Short|,  Prev: |Section|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *Set*

7.84 '.set SYMBOL, EXPRESSION'
------------------------------

Set the value of SYMBOL to EXPRESSION.  This changes SYMBOL's value and
type to conform to EXPRESSION.  If SYMBOL was flagged as external, it
remains flagged (*note Symbol Attributes::).

   You may '.set' a symbol many times in the same assembly provided that
the values given to the symbol are constants.  Values that are based on
expressions involving other symbols are allowed, but some targets may
restrict this to only being done once per assembly.  This is because
those targets do not set the addresses of symbols at assembly time, but
rather delay the assignment until a final link is performed.  This
allows the linker a chance to change the code in the files, changing the
location of, and the relative distance between, various different
symbols.

   If you '.set' a global symbol, the value stored in the object file is
the last value stored into it.

   On Z80 'set' is a real instruction, use 'SYMBOL defl EXPRESSION'
instead.

==============================================================================
File: as.info,  Node: |Short|,  Next: |Single|,  Prev: |Set|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *Short*

7.85 '.short EXPRESSIONS'
-------------------------

'.short' is normally the same as '.word'.  *Note '.word': Word.

   In some configurations, however, '.short' and '.word' generate
numbers of different lengths.  *Note Machine Dependencies::.

==============================================================================
File: as.info,  Node: |Single|,  Next: |Size|,  Prev: |Short|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *Single*

7.86 '.single FLONUMS'
----------------------

This directive assembles zero or more flonums, separated by commas.  It
has the same effect as '.float'.  The exact kind of floating point
numbers emitted depends on how 'as' is configured.  *Note Machine
Dependencies::.

==============================================================================
File: as.info,  Node: |Size|,  Next: |Skip|,  Prev: |Single|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Size*

7.87 '.size'
------------

This directive is used to set the size associated with a symbol.

COFF Version
------------

For COFF targets, the '.size' directive is only permitted inside
'.def'/'.endef' pairs.  It is used like this:

     .size EXPRESSION

ELF Version
-----------

For ELF targets, the '.size' directive is used like this:

     .size NAME , EXPRESSION

   This directive sets the size associated with a symbol NAME.  The size
in bytes is computed from EXPRESSION which can make use of label
arithmetic.  This directive is typically used to set the size of
function symbols.

==============================================================================
File: as.info,  Node: |Skip|,  Next: |Sleb128|,  Prev: |Size|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Skip*

7.88 '.skip SIZE [,FILL]'
-------------------------

This directive emits SIZE bytes, each of value FILL.  Both SIZE and FILL
are absolute expressions.  If the comma and FILL are omitted, FILL is
assumed to be zero.  This is the same as '.space'.

==============================================================================
File: as.info,  Node: |Sleb128|,  Next: |Space|,  Prev: |Skip|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *Sleb128*

7.89 '.sleb128 EXPRESSIONS'
---------------------------

SLEB128 stands for "signed little endian base 128."  This is a compact,
variable length representation of numbers used by the DWARF symbolic
debugging format.  *Note '.uleb128': Uleb128.

==============================================================================
File: as.info,  Node: |Space|,  Next: |Stab|,  Prev: |Sleb128|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *Space*

7.90 '.space SIZE [,FILL]'
--------------------------

This directive emits SIZE bytes, each of value FILL.  Both SIZE and FILL
are absolute expressions.  If the comma and FILL are omitted, FILL is
assumed to be zero.  This is the same as '.skip'.

     _Warning:_ '.space' has a completely different meaning for HPPA
     targets; use '.block' as a substitute.  See 'HP9000 Series 800
     Assembly Language Reference Manual' (HP 92432-90001) for the
     meaning of the '.space' directive.  *Note HPPA Assembler
     Directives: HPPA Directives, for a summary.

==============================================================================
File: as.info,  Node: |Stab|,  Next: |String|,  Prev: |Space|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Stab*

7.91 '.stabd, .stabn, .stabs'
-----------------------------

There are three directives that begin '.stab'.  All emit symbols (*note
Symbols::), for use by symbolic debuggers.  The symbols are not entered
in the 'as' hash table: they cannot be referenced elsewhere in the
source file.  Up to five fields are required:

STRING
     This is the symbol's name.  It may contain any character except
     '\000', so is more general than ordinary symbol names.  Some
     debuggers used to code arbitrarily complex structures into symbol
     names using this field.

TYPE
     An absolute expression.  The symbol's type is set to the low 8 bits
     of this expression.  Any bit pattern is permitted, but 'ld' and
     debuggers choke on silly bit patterns.

OTHER
     An absolute expression.  The symbol's "other" attribute is set to
     the low 8 bits of this expression.

DESC
     An absolute expression.  The symbol's descriptor is set to the low
     16 bits of this expression.

VALUE
     An absolute expression which becomes the symbol's value.

   If a warning is detected while reading a '.stabd', '.stabn', or
'.stabs' statement, the symbol has probably already been created; you
get a half-formed symbol in your object file.  This is compatible with
earlier assemblers!

'.stabd TYPE , OTHER , DESC'

     The "name" of the symbol generated is not even an empty string.  It
     is a null pointer, for compatibility.  Older assemblers used a null
     pointer so they didn't waste space in object files with empty
     strings.

     The symbol's value is set to the location counter, relocatably.
     When your program is linked, the value of this symbol is the
     address of the location counter when the '.stabd' was assembled.

'.stabn TYPE , OTHER , DESC , VALUE'
     The name of the symbol is set to the empty string '""'.

'.stabs STRING , TYPE , OTHER , DESC , VALUE'
     All five fields are specified.

==============================================================================
File: as.info,  Node: |String|,  Next: |Struct|,  Prev: |Stab|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *String*

7.92 '.string' "STR", '.string8' "STR", '.string16'
---------------------------------------------------

"STR", '.string32' "STR", '.string64' "STR"

   Copy the characters in STR to the object file.  You may specify more
than one string to copy, separated by commas.  Unless otherwise
specified for a particular machine, the assembler marks the end of each
string with a 0 byte.  You can use any of the escape sequences described
in *note Strings: Strings.

   The variants 'string16', 'string32' and 'string64' differ from the
'string' pseudo opcode in that each 8-bit character from STR is copied
and expanded to 16, 32 or 64 bits respectively.  The expanded characters
are stored in target endianness byte order.

   Example:
     	.string32 "BYE"
     expands to:
     	.string   "B\0\0\0Y\0\0\0E\0\0\0"  /* On little endian targets.  */
     	.string   "\0\0\0B\0\0\0Y\0\0\0E"  /* On big endian targets.  */

==============================================================================
File: as.info,  Node: |Struct|,  Next: |SubSection|,  Prev: |String|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *Struct*

7.93 '.struct EXPRESSION'
-------------------------

Switch to the absolute section, and set the section offset to
EXPRESSION, which must be an absolute expression.  You might use this as
follows:
             .struct 0
     field1:
             .struct field1 + 4
     field2:
             .struct field2 + 4
     field3:
   This would define the symbol 'field1' to have the value 0, the symbol
'field2' to have the value 4, and the symbol 'field3' to have the value
8.  Assembly would be left in the absolute section, and you would need
to use a '.section' directive of some sort to change to some other
section before further assembly.

==============================================================================
File: as.info,  Node: |SubSection|,  Next: |Symver|,  Prev: |Struct|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *SubSection*

7.94 '.subsection NAME'
-----------------------

This is one of the ELF section stack manipulation directives.  The
others are '.section' (*note Section::), '.pushsection' (*note
PushSection::), '.popsection' (*note PopSection::), and '.previous'
(*note Previous::).

   This directive replaces the current subsection with 'name'.  The
current section is not changed.  The replaced subsection is put onto the
section stack in place of the then current top of stack subsection.

==============================================================================
File: as.info,  Node: |Symver|,  Next: |Tag|,  Prev: |SubSection|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *Symver*

7.95 '.symver'
--------------

Use the '.symver' directive to bind symbols to specific version nodes
within a source file.  This is only supported on ELF platforms, and is
typically used when assembling files to be linked into a shared library.
There are cases where it may make sense to use this in objects to be
bound into an application itself so as to override a versioned symbol
from a shared library.

   For ELF targets, the '.symver' directive can be used like this:
     .symver NAME, NAME2@NODENAME
   If the symbol NAME is defined within the file being assembled, the
'.symver' directive effectively creates a symbol alias with the name
NAME2@NODENAME, and in fact the main reason that we just don't try and
create a regular alias is that the @ character isn't permitted in symbol
names.  The NAME2 part of the name is the actual name of the symbol by
which it will be externally referenced.  The name NAME itself is merely
a name of convenience that is used so that it is possible to have
definitions for multiple versions of a function within a single source
file, and so that the compiler can unambiguously know which version of a
function is being mentioned.  The NODENAME portion of the alias should
be the name of a node specified in the version script supplied to the
linker when building a shared library.  If you are attempting to
override a versioned symbol from a shared library, then NODENAME should
correspond to the nodename of the symbol you are trying to override.

   If the symbol NAME is not defined within the file being assembled,
all references to NAME will be changed to NAME2@NODENAME.  If no
reference to NAME is made, NAME2@NODENAME will be removed from the
symbol table.

   Another usage of the '.symver' directive is:
     .symver NAME, NAME2@@NODENAME
   In this case, the symbol NAME must exist and be defined within the
file being assembled.  It is similar to NAME2@NODENAME.  The difference
is NAME2@@NODENAME will also be used to resolve references to NAME2 by
the linker.

   The third usage of the '.symver' directive is:
     .symver NAME, NAME2@@@NODENAME
   When NAME is not defined within the file being assembled, it is
treated as NAME2@NODENAME.  When NAME is defined within the file being
assembled, the symbol name, NAME, will be changed to NAME2@@NODENAME.

==============================================================================
File: as.info,  Node: |Tag|,  Next: |Text|,  Prev: |Symver|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *Tag*

7.96 '.tag STRUCTNAME'
----------------------

This directive is generated by compilers to include auxiliary debugging
information in the symbol table.  It is only permitted inside
'.def'/'.endef' pairs.  Tags are used to link structure definitions in
the symbol table with instances of those structures.

==============================================================================
File: as.info,  Node: |Text|,  Next: |Title|,  Prev: |Tag|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Text*

7.97 '.text SUBSECTION'
-----------------------

Tells 'as' to assemble the following statements onto the end of the text
subsection numbered SUBSECTION, which is an absolute expression.  If
SUBSECTION is omitted, subsection number zero is used.

==============================================================================
File: as.info,  Node: |Title|,  Next: |Type|,  Prev: |Text|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *Title*

7.98 '.title "HEADING"'
-----------------------

Use HEADING as the title (second line, immediately after the source file
name and pagenumber) when generating assembly listings.

   This directive affects subsequent pages, as well as the current page
if it appears within ten lines of the top of a page.

==============================================================================
File: as.info,  Node: |Type|,  Next: |Uleb128|,  Prev: |Title|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Type*

7.99 '.type'
------------

This directive is used to set the type of a symbol.

COFF Version
------------

For COFF targets, this directive is permitted only within
'.def'/'.endef' pairs.  It is used like this:

     .type INT

   This records the integer INT as the type attribute of a symbol table
entry.

ELF Version
-----------

For ELF targets, the '.type' directive is used like this:

     .type NAME , TYPE DESCRIPTION

   This sets the type of symbol NAME to be either a function symbol or
an object symbol.  There are five different syntaxes supported for the
TYPE DESCRIPTION field, in order to provide compatibility with various
other assemblers.

   Because some of the characters used in these syntaxes (such as '@'
and '#') are comment characters for some architectures, some of the
syntaxes below do not work on all architectures.  The first variant will
be accepted by the GNU assembler on all architectures so that variant
should be used for maximum portability, if you do not need to assemble
your code with other assemblers.

   The syntaxes supported are:

       .type <name> STT_<TYPE_IN_UPPER_CASE>
       .type <name>,#<type>
       .type <name>,@<type>
       .type <name>,%<type>
       .type <name>,"<type>"

   The types supported are:

'STT_FUNC'
'function'
     Mark the symbol as being a function name.

'STT_GNU_IFUNC'
'gnu_indirect_function'
     Mark the symbol as an indirect function when evaluated during reloc
     processing.  (This is only supported on assemblers targeting GNU
     systems).

'STT_OBJECT'
'object'
     Mark the symbol as being a data object.

'STT_TLS'
'tls_object'
     Mark the symbol as being a thread-local data object.

'STT_COMMON'
'common'
     Mark the symbol as being a common data object.

'STT_NOTYPE'
'notype'
     Does not mark the symbol in any way.  It is supported just for
     completeness.

'gnu_unique_object'
     Marks the symbol as being a globally unique data object.  The
     dynamic linker will make sure that in the entire process there is
     just one symbol with this name and type in use.  (This is only
     supported on assemblers targeting GNU systems).

   Note: Some targets support extra types in addition to those listed
above.

==============================================================================
File: as.info,  Node: |Uleb128|,  Next: |Val|,  Prev: |Type|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *Uleb128*

7.100 '.uleb128 EXPRESSIONS'
----------------------------

ULEB128 stands for "unsigned little endian base 128."  This is a
compact, variable length representation of numbers used by the DWARF
symbolic debugging format.  *Note '.sleb128': Sleb128.

==============================================================================
File: as.info,  Node: |Val|,  Next: |Version|,  Prev: |Uleb128|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *Val*

7.101 '.val ADDR'
-----------------

This directive, permitted only within '.def'/'.endef' pairs, records the
address ADDR as the value attribute of a symbol table entry.

==============================================================================
File: as.info,  Node: |Version|,  Next: |VTableEntry|,  Prev: |Val|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *Version*

7.102 '.version "STRING"'
-------------------------

This directive creates a '.note' section and places into it an ELF
formatted note of type NT_VERSION. The note's name is set to 'string'.

==============================================================================
File: as.info,  Node: |VTableEntry|,  Next: |VTableInherit|,  Prev: |Version|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *VTableEntry*

7.103 '.vtable_entry TABLE, OFFSET'
-----------------------------------

This directive finds or creates a symbol 'table' and creates a
'VTABLE_ENTRY' relocation for it with an addend of 'offset'.

==============================================================================
File: as.info,  Node: |VTableInherit|,  Next: |Warning|,  Prev: |VTableEntry|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *VTableInherit*

7.104 '.vtable_inherit CHILD, PARENT'
-------------------------------------

This directive finds the symbol 'child' and finds or creates the symbol
'parent' and then creates a 'VTABLE_INHERIT' relocation for the parent
whose addend is the value of the child symbol.  As a special case the
parent name of '0' is treated as referring to the 'ABS' section.

==============================================================================
File: as.info,  Node: |Warning|,  Next: |Weak|,  Prev: |VTableInherit|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *Warning*

7.105 '.warning "STRING"'
-------------------------

Similar to the directive '.error' (*note '.error "STRING"': Error.), but
just emits a warning.

==============================================================================
File: as.info,  Node: |Weak|,  Next: |Weakref|,  Prev: |Warning|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Weak*

7.106 '.weak NAMES'
-------------------

This directive sets the weak attribute on the comma separated list of
symbol 'names'.  If the symbols do not already exist, they will be
created.

   On COFF targets other than PE, weak symbols are a GNU extension.
This directive sets the weak attribute on the comma separated list of
symbol 'names'.  If the symbols do not already exist, they will be
created.

   On the PE target, weak symbols are supported natively as weak
aliases.  When a weak symbol is created that is not an alias, GAS
creates an alternate symbol to hold the default value.

==============================================================================
File: as.info,  Node: |Weakref|,  Next: |Word|,  Prev: |Weak|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *Weakref*

7.107 '.weakref ALIAS, TARGET'
------------------------------

This directive creates an alias to the target symbol that enables the
symbol to be referenced with weak-symbol semantics, but without actually
making it weak.  If direct references or definitions of the symbol are
present, then the symbol will not be weak, but if all references to it
are through weak references, the symbol will be marked as weak in the
symbol table.

   The effect is equivalent to moving all references to the alias to a
separate assembly source file, renaming the alias to the symbol in it,
declaring the symbol as weak there, and running a reloadable link to
merge the object files resulting from the assembly of the new source
file and the old source file that had the references to the alias
removed.

   The alias itself never makes to the symbol table, and is entirely
handled within the assembler.

==============================================================================
File: as.info,  Node: |Word|,  Next: |Zero|,  Prev: |Weakref|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Word*

7.108 '.word EXPRESSIONS'
-------------------------

This directive expects zero or more EXPRESSIONS, of any section,
separated by commas.

   The size of the number emitted, and its byte order, depend on what
target computer the assembly is for.

     _Warning: Special Treatment to support Compilers_

   Machines with a 32-bit address space, but that do less than 32-bit
addressing, require the following special treatment.  If the machine of
interest to you does 32-bit addressing (or doesn't require it; *note
Machine Dependencies::), you can ignore this issue.

   In order to assemble compiler output into something that works, 'as'
occasionally does strange things to '.word' directives.  Directives of
the form '.word sym1-sym2' are often emitted by compilers as part of
jump tables.  Therefore, when 'as' assembles a directive of the form
'.word sym1-sym2', and the difference between 'sym1' and 'sym2' does not
fit in 16 bits, 'as' creates a "secondary jump table", immediately
before the next label.  This secondary jump table is preceded by a
short-jump to the first byte after the secondary table.  This short-jump
prevents the flow of control from accidentally falling into the new
table.  Inside the table is a long-jump to 'sym2'.  The original '.word'
contains 'sym1' minus the address of the long-jump to 'sym2'.

   If there were several occurrences of '.word sym1-sym2' before the
secondary jump table, all of them are adjusted.  If there was a '.word
sym3-sym4', that also did not fit in sixteen bits, a long-jump to 'sym4'
is included in the secondary jump table, and the '.word' directives are
adjusted to contain 'sym3' minus the address of the long-jump to 'sym4';
and so on, for as many entries in the original jump table as necessary.

==============================================================================
File: as.info,  Node: |Zero|,  Next: |2byte|,  Prev: |Word|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Zero*

7.109 '.zero SIZE'
------------------

This directive emits SIZE 0-valued bytes.  SIZE must be an absolute
expression.  This directive is actually an alias for the '.skip'
directive so in can take an optional second argument of the value to
store in the bytes instead of zero.  Using '.zero' in this way would be
confusing however.

==============================================================================
File: as.info,  Node: |2byte|,  Next: |4byte|,  Prev: |Zero|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *2byte*

7.110 '.2byte EXPRESSION [, EXPRESSION]*'
-----------------------------------------

This directive expects zero or more expressions, separated by commas.
If there are no expressions then the directive does nothing.  Otherwise
each expression is evaluated in turn and placed in the next two bytes of
the current output section, using the endian model of the target.  If an
expression will not fit in two bytes, a warning message is displayed and
the least significant two bytes of the expression's value are used.  If
an expression cannot be evaluated at assembly time then relocations will
be generated in order to compute the value at link time.

   This directive does not apply any alignment before or after inserting
the values.  As a result of this, if relocations are generated, they may
be different from those used for inserting values with a guaranteed
alignment.

   This directive is only available for ELF targets,

==============================================================================
File: as.info,  Node: |4byte|,  Next: |8byte|,  Prev: |2byte|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *4byte*

7.111 '.4byte EXPRESSION [, EXPRESSION]*'
-----------------------------------------

Like the '.2byte' directive, except that it inserts unaligned, four byte
long values into the output.

==============================================================================
File: as.info,  Node: |8byte|,  Next: |Deprecated|,  Prev: |4byte|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *8byte*

7.112 '.8byte EXPRESSION [, EXPRESSION]*'
-----------------------------------------

Like the '.2byte' directive, except that it inserts unaligned, eight
byte long bignum values into the output.

==============================================================================
File: as.info,  Node: |Deprecated|,  Prev: |8byte|,  Up: |Pseudo_Ops|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *Deprecated*

7.113 Deprecated Directives
---------------------------

One day these directives won't work.  They are included for
compatibility with older assemblers.
.abort
.line

==============================================================================
File: as.info,  Node: |Object_Attributes|,  Next: |Machine_Dependencies|,  Prev: |Pseudo_Ops|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Object_Attributes*

8 Object Attributes
===================

'as' assembles source files written for a specific architecture into
object files for that architecture.  But not all object files are alike.
Many architectures support incompatible variations.  For instance,
floating point arguments might be passed in floating point registers if
the object file requires hardware floating point support--or floating
point arguments might be passed in integer registers if the object file
supports processors with no hardware floating point unit.  Or, if two
objects are built for different generations of the same architecture,
the combination may require the newer generation at run-time.

   This information is useful during and after linking.  At link time,
'ld' can warn about incompatible object files.  After link time, tools
like 'gdb' can use it to process the linked file correctly.

   Compatibility information is recorded as a series of object
attributes.  Each attribute has a "vendor", "tag", and "value".  The
vendor is a string, and indicates who sets the meaning of the tag.  The
tag is an integer, and indicates what property the attribute describes.
The value may be a string or an integer, and indicates how the property
affects this object.  Missing attributes are the same as attributes with
a zero value or empty string value.

   Object attributes were developed as part of the ABI for the ARM
Architecture.  The file format is documented in 'ELF for the ARM
Architecture'.

MENU

* |GNU_Object_Attributes|::               GNU Object Attributes
* |Defining_New_Object_Attributes|::      Defining New Object Attributes

==============================================================================
File: as.info,  Node: |GNU_Object_Attributes|,  Next: |Defining_New_Object_Attributes|,  Up: |Object_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *GNU_Object_Attributes*

8.1 GNU Object Attributes
-------------------------

The '.gnu_attribute' directive records an object attribute with vendor
'gnu'.

   Except for 'Tag_compatibility', which has both an integer and a
string for its value, GNU attributes have a string value if the tag
number is odd and an integer value if the tag number is even.  The
second bit ('TAG & 2' is set for architecture-independent attributes and
clear for architecture-dependent ones.

8.1.1 Common GNU attributes
---------------------------

These attributes are valid on all architectures.

Tag_compatibility (32)
     The compatibility attribute takes an integer flag value and a
     vendor name.  If the flag value is 0, the file is compatible with
     other toolchains.  If it is 1, then the file is only compatible
     with the named toolchain.  If it is greater than 1, the file can
     only be processed by other toolchains under some private
     arrangement indicated by the flag value and the vendor name.

8.1.2 MIPS Attributes
---------------------

Tag_GNU_MIPS_ABI_FP (4)
     The floating-point ABI used by this object file.  The value will
     be:

        * 0 for files not affected by the floating-point ABI.
        * 1 for files using the hardware floating-point ABI with a
          standard double-precision FPU.
        * 2 for files using the hardware floating-point ABI with a
          single-precision FPU.
        * 3 for files using the software floating-point ABI.
        * 4 for files using the deprecated hardware floating-point ABI
          which used 64-bit floating-point registers, 32-bit
          general-purpose registers and increased the number of
          callee-saved floating-point registers.
        * 5 for files using the hardware floating-point ABI with a
          double-precision FPU with either 32-bit or 64-bit
          floating-point registers and 32-bit general-purpose registers.
        * 6 for files using the hardware floating-point ABI with 64-bit
          floating-point registers and 32-bit general-purpose registers.
        * 7 for files using the hardware floating-point ABI with 64-bit
          floating-point registers, 32-bit general-purpose registers and
          a rule that forbids the direct use of odd-numbered
          single-precision floating-point registers.

8.1.3 PowerPC Attributes
------------------------

Tag_GNU_Power_ABI_FP (4)
     The floating-point ABI used by this object file.  The value will
     be:

        * 0 for files not affected by the floating-point ABI.
        * 1 for files using double-precision hardware floating-point
          ABI.
        * 2 for files using the software floating-point ABI.
        * 3 for files using single-precision hardware floating-point
          ABI.

Tag_GNU_Power_ABI_Vector (8)
     The vector ABI used by this object file.  The value will be:

        * 0 for files not affected by the vector ABI.
        * 1 for files using general purpose registers to pass vectors.
        * 2 for files using AltiVec registers to pass vectors.
        * 3 for files using SPE registers to pass vectors.

8.1.4 IBM z Systems Attributes
------------------------------

Tag_GNU_S390_ABI_Vector (8)
     The vector ABI used by this object file.  The value will be:

        * 0 for files not affected by the vector ABI.
        * 1 for files using software vector ABI.
        * 2 for files using hardware vector ABI.

==============================================================================
File: as.info,  Node: |Defining_New_Object_Attributes|,  Prev: |GNU_Object_Attributes|,  Up: |Object_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Defining_New_Object_Attributes*

8.2 Defining New Object Attributes
----------------------------------

If you want to define a new GNU object attribute, here are the places
you will need to modify.  New attributes should be discussed on the
'binutils' mailing list.

   * This manual, which is the official register of attributes.
   * The header for your architecture 'include/elf', to define the tag.
   * The 'bfd' support file for your architecture, to merge the
     attribute and issue any appropriate link warnings.
   * Test cases in 'ld/testsuite' for merging and link warnings.
   * 'binutils/readelf.c' to display your attribute.
   * GCC, if you want the compiler to mark the attribute automatically.

==============================================================================
File: as.info,  Node: |Machine_Dependencies|,  Next: |Reporting_Bugs|,  Prev: |Object_Attributes|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Machine_Dependencies*

9 Machine Dependent Features
============================

The machine instruction sets are (almost by definition) different on
each machine where 'as' runs.  Floating point representations vary as
well, and 'as' often supports a few additional directives or
command-line options for compatibility with other assemblers on a
particular platform.  Finally, some versions of 'as' support special
pseudo-instructions for branch optimization.

   This chapter discusses most of these differences, though it does not
include details on any machine's instruction set.  For details on that
subject, see the hardware manufacturer's manual.

MENU

* |AArch64_Dependent|::		AArch64 Dependent Features
* |Alpha_Dependent|::		Alpha Dependent Features
* |ARC_Dependent|::               ARC Dependent Features
* |ARM_Dependent|::               ARM Dependent Features
* |AVR_Dependent|::               AVR Dependent Features
* |Blackfin_Dependent|::		Blackfin Dependent Features
* |CR16_Dependent|::              CR16 Dependent Features
* |CRIS_Dependent|::              CRIS Dependent Features
* |D10V_Dependent|::              D10V Dependent Features
* |D30V_Dependent|::              D30V Dependent Features
* |Epiphany_Dependent|::          EPIPHANY Dependent Features
* |H8/300_Dependent|::            Renesas H8/300 Dependent Features
* |HPPA_Dependent|::              HPPA Dependent Features
* |i386_Dependent|::              Intel 80386 and AMD x86-64 Dependent Features
* |IA_64_Dependent|::             Intel IA-64 Dependent Features
* |IP2K_Dependent|::              IP2K Dependent Features
* |LM32_Dependent|::              LM32 Dependent Features
* |M32C_Dependent|::              M32C Dependent Features
* |M32R_Dependent|::              M32R Dependent Features
* |M68K_Dependent|::              M680x0 Dependent Features
* |M68HC11_Dependent|::           M68HC11 and 68HC12 Dependent Features
* |S12Z_Dependent|::            S12Z Dependent Features
* |Meta_Dependent_|::             Meta Dependent Features
* |MicroBlaze_Dependent|::	MICROBLAZE Dependent Features
* |MIPS_Dependent|::              MIPS Dependent Features
* |MMIX_Dependent|::              MMIX Dependent Features
* |MSP430_Dependent|::		MSP430 Dependent Features
* |NDS32_Dependent|::             Andes NDS32 Dependent Features
* |NiosII_Dependent|::            Altera Nios II Dependent Features
* |NS32K_Dependent|::		NS32K Dependent Features
* |PDP_11_Dependent|::            PDP-11 Dependent Features
* |PJ_Dependent|::                picoJava Dependent Features
* |PPC_Dependent|::               PowerPC Dependent Features
* |PRU_Dependent|::               PRU Dependent Features
* |RISC_V_Dependent|::            RISC-V Dependent Features
* |RL78_Dependent|::              RL78 Dependent Features
* |RX_Dependent|::                RX Dependent Features
* |S/390_Dependent|::             IBM S/390 Dependent Features
* |SCORE_Dependent|::             SCORE Dependent Features
* |SH_Dependent|::                Renesas / SuperH SH Dependent Features
* |Sparc_Dependent|::             SPARC Dependent Features
* |TIC54X_Dependent|::            TI TMS320C54x Dependent Features
* |TIC6X_Dependent_|::            TI TMS320C6x Dependent Features
* |TILE_Gx_Dependent_|::          Tilera TILE-Gx Dependent Features
* |TILEPro_Dependent_|::          Tilera TILEPro Dependent Features
* |V850_Dependent|::              V850 Dependent Features
* |Vax_Dependent|::               VAX Dependent Features
* |Visium_Dependent|::            Visium Dependent Features
* |WebAssembly_Dependent|::       WebAssembly Dependent Features
* |XGATE_Dependent|::             XGATE Dependent Features
* |XSTORMY16_Dependent|::         XStormy16 Dependent Features
* |Xtensa_Dependent|::            Xtensa Dependent Features
* |Z80_Dependent|::               Z80 Dependent Features
* |Z8000_Dependent|::             Z8000 Dependent Features

==============================================================================
File: as.info,  Node: |AArch64_Dependent|,  Next: |Alpha_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *AArch64_Dependent*

9.1 AArch64 Dependent Features
------------------------------

MENU

* |AArch64_Options|::              Options
* |AArch64_Extensions|::		 Extensions
* |AArch64_Syntax|::               Syntax
* |AArch64_Floating_Point|::       Floating Point
* |AArch64_Directives|::           AArch64 Machine Directives
* |AArch64_Opcodes|::              Opcodes
* |AArch64_Mapping_Symbols|::      Mapping Symbols

==============================================================================
File: as.info,  Node: |AArch64_Options|,  Next: |AArch64_Extensions|,  Up: AArch64-Dependent
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *AArch64_Options*

9.1.1 Options
-------------

'-EB'
     This option specifies that the output generated by the assembler
     should be marked as being encoded for a big-endian processor.

'-EL'
     This option specifies that the output generated by the assembler
     should be marked as being encoded for a little-endian processor.

'-mabi=ABI'
     Specify which ABI the source code uses.  The recognized arguments
     are: 'ilp32' and 'lp64', which decides the generated object file in
     ELF32 and ELF64 format respectively.  The default is 'lp64'.

'-mcpu=PROCESSOR[+EXTENSION...]'
     This option specifies the target processor.  The assembler will
     issue an error message if an attempt is made to assemble an
     instruction which will not execute on the target processor.  The
     following processor names are recognized: 'cortex-a35',
     'cortex-a53', 'cortex-a55', 'cortex-a57', 'cortex-a72',
     'cortex-a73', 'cortex-a75', 'cortex-a76', 'exynos-m1', 'falkor',
     'qdf24xx', 'saphira', 'thunderx', 'vulcan', 'xgene1' and 'xgene2'.
     The special name 'all' may be used to allow the assembler to accept
     instructions valid for any supported processor, including all
     optional extensions.

     In addition to the basic instruction set, the assembler can be told
     to accept, or restrict, various extension mnemonics that extend the
     processor.  *Note AArch64 Extensions::.

     If some implementations of a particular processor can have an
     extension, then then those extensions are automatically enabled.
     Consequently, you will not normally have to specify any additional
     extensions.

'-march=ARCHITECTURE[+EXTENSION...]'
     This option specifies the target architecture.  The assembler will
     issue an error message if an attempt is made to assemble an
     instruction which will not execute on the target architecture.  The
     following architecture names are recognized: 'armv8-a',
     'armv8.1-a', 'armv8.2-a', 'armv8.3-a' and 'armv8.4-a'.

     If both '-mcpu' and '-march' are specified, the assembler will use
     the setting for '-mcpu'.  If neither are specified, the assembler
     will default to '-mcpu=all'.

     The architecture option can be extended with the same instruction
     set extension options as the '-mcpu' option.  Unlike '-mcpu',
     extensions are not always enabled by default, *Note AArch64
     Extensions::.

'-mverbose-error'
     This option enables verbose error messages for AArch64 gas.  This
     option is enabled by default.

'-mno-verbose-error'
     This option disables verbose error messages in AArch64 gas.

==============================================================================
File: as.info,  Node: |AArch64_Extensions|,  Next: |AArch64_Syntax|,  Prev: |AArch64_Options|,  Up: |AArch64_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *AArch64_Extensions*

9.1.2 Architecture Extensions
-----------------------------

The table below lists the permitted architecture extensions that are
supported by the assembler and the conditions under which they are
automatically enabled.

   Multiple extensions may be specified, separated by a '+'.  Extension
mnemonics may also be removed from those the assembler accepts.  This is
done by prepending 'no' to the option that adds the extension.
Extensions that are removed must be listed after all extensions that
have been added.

   Enabling an extension that requires other extensions will
automatically cause those extensions to be enabled.  Similarly,
disabling an extension that is required by other extensions will
automatically cause those extensions to be disabled.

Extension Minimum      Enabled by   Description
          Architecture default
----------------------------------------------------------------------------
'compnum' ARMv8.2-A    ARMv8.3-A    Enable the complex number SIMD
                       or later     extensions.  This implies 'fp16' and
                                    'simd'.
'crc'     ARMv8-A      ARMv8.1-A    Enable CRC instructions.
                       or later
'crypto'  ARMv8-A      No           Enable cryptographic extensions.
                                    This implies 'fp', 'simd', 'aes' and
                                    'sha2'.
'aes'     ARMv8-A      No           Enable the AES cryptographic
                                    extensions.  This implies 'fp' and
                                    'simd'.
'sha2'    ARMv8-A      No           Enable the SHA2 cryptographic
                                    extensions.  This implies 'fp' and
                                    'simd'.
'sha3'    ARMv8.2-A    No           Enable the ARMv8.2-A SHA2 and SHA3
                                    cryptographic extensions.  This
                                    implies 'fp', 'simd' and 'sha2'.
'sm4'     ARMv8.2-A    No           Enable the ARMv8.2-A SM3 and SM4
                                    cryptographic extensions.  This
                                    implies 'fp' and 'simd'.
'fp'      ARMv8-A      ARMv8-A or   Enable floating-point extensions.
                       later
'fp16'    ARMv8.2-A    ARMv8.2-A    Enable ARMv8.2 16-bit floating-point
                       or later     support.  This implies 'fp'.
'lor'     ARMv8-A      ARMv8.1-A    Enable Limited Ordering Regions
                       or later     extensions.
'lse'     ARMv8-A      ARMv8.1-A    Enable Large System extensions.
                       or later
'pan'     ARMv8-A      ARMv8.1-A    Enable Privileged Access Never
                       or later     support.
'profile' ARMv8.2-A    No           Enable statistical profiling
                                    extensions.
'ras'     ARMv8-A      ARMv8.2-A    Enable the Reliability, Availability
                       or later     and Serviceability extension.
'rcpc'    ARMv8.2-A    ARMv8.3-A    Enable the weak release consistency
                       or later     extension.
'rdma'    ARMv8-A      ARMv8.1-A    Enable ARMv8.1 Advanced SIMD
                       or later     extensions.  This implies 'simd'.
'simd'    ARMv8-A      ARMv8-A or   Enable Advanced SIMD extensions.
                       later        This implies 'fp'.
'sve'     ARMv8.2-A    No           Enable the Scalable Vector
                                    Extensions.  This implies 'fp16',
                                    'simd' and 'compnum'.
'dotprod' ARMv8.2-A    ARMv8.4-A    Enable the Dot Product extension.
                       or later     This implies 'simd'.
'fp16fml' ARMv8.2-A    ARMv8.4-A    Enable ARMv8.2 16-bit floating-point
                       or later     multiplication variant support.  This
                                    implies 'fp16'.

==============================================================================
File: as.info,  Node: |AArch64_Syntax|,  Next: |AArch64_Floating_Point|,  Prev: |AArch64_Extensions|,  Up: |AArch64_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *AArch64_Syntax*

9.1.3 Syntax
------------

MENU

* |AArch64_Chars|::                Special Characters
* |AArch64_Regs|::                 Register Names
* |AArch64_Relocations|::	     Relocations

==============================================================================
File: as.info,  Node: |AArch64_Chars|,  Next: |AArch64_Regs|,  Up: |AArch64_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *AArch64_Chars*

9.1.3.1 Special Characters
--------------------------

The presence of a '//' on a line indicates the start of a comment that
extends to the end of the current line.  If a '#' appears as the first
character of a line, the whole line is treated as a comment.

   The ';' character can be used instead of a newline to separate
statements.

   The '#' can be optionally used to indicate immediate operands.

==============================================================================
File: as.info,  Node: |AArch64_Regs|,  Next: |AArch64_Relocations|,  Prev: |AArch64_Chars|,  Up: |AArch64_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *AArch64_Regs*

9.1.3.2 Register Names
----------------------

Please refer to the section '4.4 Register Names' of 'ARMv8 Instruction
Set Overview', which is available at <http://infocenter.arm.com>.

==============================================================================
File: as.info,  Node: |AArch64_Relocations|,  Prev: |AArch64_Regs|,  Up: |AArch64_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *AArch64_Relocations*

9.1.3.3 Relocations
-------------------

Relocations for 'MOVZ' and 'MOVK' instructions can be generated by
prefixing the label with '#:abs_g2:' etc.  For example to load the
48-bit absolute address of FOO into x0:

             movz x0, #:abs_g2:foo		// bits 32-47, overflow check
             movk x0, #:abs_g1_nc:foo	// bits 16-31, no overflow check
             movk x0, #:abs_g0_nc:foo	// bits  0-15, no overflow check

   Relocations for 'ADRP', and 'ADD', 'LDR' or 'STR' instructions can be
generated by prefixing the label with ':pg_hi21:' and '#:lo12:'
respectively.

   For example to use 33-bit (+/-4GB) pc-relative addressing to load the
address of FOO into x0:

             adrp x0, :pg_hi21:foo
             add  x0, x0, #:lo12:foo

   Or to load the value of FOO into x0:

             adrp x0, :pg_hi21:foo
             ldr  x0, [x0, #:lo12:foo]

   Note that ':pg_hi21:' is optional.

             adrp x0, foo

   is equivalent to

             adrp x0, :pg_hi21:foo

==============================================================================
File: as.info,  Node: |AArch64_Floating_Point|,  Next: |AArch64_Directives|,  Prev: |AArch64_Syntax|,  Up: |AArch64_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *AArch64_Floating_Point*

9.1.4 Floating Point
--------------------

The AArch64 architecture uses IEEE floating-point numbers.

==============================================================================
File: as.info,  Node: |AArch64_Directives|,  Next: |AArch64_Opcodes|,  Prev: |AArch64_Floating_Point|,  Up: |AArch64_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *AArch64_Directives*

9.1.5 AArch64 Machine Directives
--------------------------------

'.arch NAME'
     Select the target architecture.  Valid values for NAME are the same
     as for the '-march' commandline option.

     Specifying '.arch' clears any previously selected architecture
     extensions.

'.arch_extension NAME'
     Add or remove an architecture extension to the target architecture.
     Valid values for NAME are the same as those accepted as
     architectural extensions by the '-mcpu' commandline option.

     '.arch_extension' may be used multiple times to add or remove
     extensions incrementally to the architecture being compiled for.

'.bss'
     This directive switches to the '.bss' section.

'.cpu NAME'
     Set the target processor.  Valid values for NAME are the same as
     those accepted by the '-mcpu=' command line option.

'.dword EXPRESSIONS'
     The '.dword' directive produces 64 bit values.

'.even'
     The '.even' directive aligns the output on the next even byte
     boundary.

'.inst EXPRESSIONS'
     Inserts the expressions into the output as if they were
     instructions, rather than data.

'.ltorg'
     This directive causes the current contents of the literal pool to
     be dumped into the current section (which is assumed to be the
     .text section) at the current location (aligned to a word
     boundary).  GAS maintains a separate literal pool for each section
     and each sub-section.  The '.ltorg' directive will only affect the
     literal pool of the current section and sub-section.  At the end of
     assembly all remaining, un-empty literal pools will automatically
     be dumped.

     Note - older versions of GAS would dump the current literal pool
     any time a section change occurred.  This is no longer done, since
     it prevents accurate control of the placement of literal pools.

'.pool'
     This is a synonym for .ltorg.

'NAME .req REGISTER NAME'
     This creates an alias for REGISTER NAME called NAME.  For example:

                  foo .req w0

     ip0, ip1, lr and fp are automatically defined to alias to X16, X17,
     X30 and X29 respectively.

'.tlsdescadd'
     Emits a TLSDESC_ADD reloc on the next instruction.

'.tlsdesccall'
     Emits a TLSDESC_CALL reloc on the next instruction.

'.tlsdescldr'
     Emits a TLSDESC_LDR reloc on the next instruction.

'.unreq ALIAS-NAME'
     This undefines a register alias which was previously defined using
     the 'req' directive.  For example:

                  foo .req w0
                  .unreq foo

     An error occurs if the name is undefined.  Note - this pseudo op
     can be used to delete builtin in register name aliases (eg 'w0').
     This should only be done if it is really necessary.

'.xword EXPRESSIONS'
     The '.xword' directive produces 64 bit values.  This is the same as
     the '.dword' directive.

==============================================================================
File: as.info,  Node: |AArch64_Opcodes|,  Next: |AArch64_Mapping_Symbols|,  Prev: |AArch64_Directives|,  Up: |AArch64_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *AArch64_Opcodes*

9.1.6 Opcodes
-------------

GAS implements all the standard AArch64 opcodes.  It also implements
several pseudo opcodes, including several synthetic load instructions.

'LDR ='
            ldr <register> , =<expression>

     The constant expression will be placed into the nearest literal
     pool (if it not already there) and a PC-relative LDR instruction
     will be generated.

   For more information on the AArch64 instruction set and assembly
language notation, see 'ARMv8 Instruction Set Overview' available at
<http://infocenter.arm.com>.

==============================================================================
File: as.info,  Node: |AArch64_Mapping_Symbols|,  Prev: |AArch64_Opcodes|,  Up: |AArch64_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *AArch64_Mapping_Symbols*

9.1.7 Mapping Symbols
---------------------

The AArch64 ELF specification requires that special symbols be inserted
into object files to mark certain features:

'$x'
     At the start of a region of code containing AArch64 instructions.

'$d'
     At the start of a region of data.

==============================================================================
File: as.info,  Node: |Alpha_Dependent|,  Next: |ARC_Dependent|,  Prev: |AArch64_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *Alpha_Dependent*

9.2 Alpha Dependent Features
----------------------------

MENU

* |Alpha_Notes|::                Notes
* |Alpha_Options|::              Options
* |Alpha_Syntax|::               Syntax
* |Alpha_Floating_Point|::       Floating Point
* |Alpha_Directives|::           Alpha Machine Directives
* |Alpha_Opcodes|::              Opcodes

==============================================================================
File: as.info,  Node: |Alpha_Notes|,  Next: |Alpha_Options|,  Up: |Alpha_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Alpha_Notes*

9.2.1 Notes
-----------

The documentation here is primarily for the ELF object format.  'as'
also supports the ECOFF and EVAX formats, but features specific to these
formats are not yet documented.

==============================================================================
File: as.info,  Node: |Alpha_Options|,  Next: |Alpha_Syntax|,  Prev: |Alpha_Notes|,  Up: |Alpha_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Alpha_Options*

9.2.2 Options
-------------

'-mCPU'
     This option specifies the target processor.  If an attempt is made
     to assemble an instruction which will not execute on the target
     processor, the assembler may either expand the instruction as a
     macro or issue an error message.  This option is equivalent to the
     '.arch' directive.

     The following processor names are recognized: '21064', '21064a',
     '21066', '21068', '21164', '21164a', '21164pc', '21264', '21264a',
     '21264b', 'ev4', 'ev5', 'lca45', 'ev5', 'ev56', 'pca56', 'ev6',
     'ev67', 'ev68'.  The special name 'all' may be used to allow the
     assembler to accept instructions valid for any Alpha processor.

     In order to support existing practice in OSF/1 with respect to
     '.arch', and existing practice within 'MILO' (the Linux ARC
     bootloader), the numbered processor names (e.g. 21064) enable the
     processor-specific PALcode instructions, while the "electro-vlasic"
     names (e.g. 'ev4') do not.

'-mdebug'
'-no-mdebug'
     Enables or disables the generation of '.mdebug' encapsulation for
     stabs directives and procedure descriptors.  The default is to
     automatically enable '.mdebug' when the first stabs directive is
     seen.

'-relax'
     This option forces all relocations to be put into the object file,
     instead of saving space and resolving some relocations at assembly
     time.  Note that this option does not propagate all symbol
     arithmetic into the object file, because not all symbol arithmetic
     can be represented.  However, the option can still be useful in
     specific applications.

'-replace'
'-noreplace'
     Enables or disables the optimization of procedure calls, both at
     assemblage and at link time.  These options are only available for
     VMS targets and '-replace' is the default.  See section 1.4.1 of
     the OpenVMS Linker Utility Manual.

'-g'
     This option is used when the compiler generates debug information.
     When 'gcc' is using 'mips-tfile' to generate debug information for
     ECOFF, local labels must be passed through to the object file.
     Otherwise this option has no effect.

'-GSIZE'
     A local common symbol larger than SIZE is placed in '.bss', while
     smaller symbols are placed in '.sbss'.

'-F'
'-32addr'
     These options are ignored for backward compatibility.

==============================================================================
File: as.info,  Node: |Alpha_Syntax|,  Next: |Alpha_Floating_Point|,  Prev: |Alpha_Options|,  Up: |Alpha_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Alpha_Syntax*

9.2.3 Syntax
------------

The assembler syntax closely follow the Alpha Reference Manual;
assembler directives and general syntax closely follow the OSF/1 and
OpenVMS syntax, with a few differences for ELF.

MENU

* |Alpha_Chars|::                Special Characters
* |Alpha_Regs|::                 Register Names
* |Alpha_Relocs|::               Relocations

==============================================================================
File: as.info,  Node: |Alpha_Chars|,  Next: |Alpha_Regs|,  Up: |Alpha_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Alpha_Chars*

9.2.3.1 Special Characters
--------------------------

'#' is the line comment character.  Note that if '#' is the first
character on a line then it can also be a logical line number directive
(*note Comments::) or a preprocessor control command (*note
Preprocessing::).

   ';' can be used instead of a newline to separate statements.

==============================================================================
File: as.info,  Node: |Alpha_Regs|,  Next: |Alpha_Relocs|,  Prev: |Alpha_Chars|,  Up: |Alpha_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *Alpha_Regs*

9.2.3.2 Register Names
----------------------

The 32 integer registers are referred to as '$N' or '$rN'.  In addition,
registers 15, 28, 29, and 30 may be referred to by the symbols '$fp',
'$at', '$gp', and '$sp' respectively.

   The 32 floating-point registers are referred to as '$fN'.

==============================================================================
File: as.info,  Node: |Alpha_Relocs|,  Prev: |Alpha_Regs|,  Up: |Alpha_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Alpha_Relocs*

9.2.3.3 Relocations
-------------------

Some of these relocations are available for ECOFF, but mostly only for
ELF. They are modeled after the relocation format introduced in Digital
Unix 4.0, but there are additions.

   The format is '!TAG' or '!TAG!NUMBER' where TAG is the name of the
relocation.  In some cases NUMBER is used to relate specific
instructions.

   The relocation is placed at the end of the instruction like so:

     ldah  $0,a($29)    !gprelhigh
     lda   $0,a($0)     !gprellow
     ldq   $1,b($29)    !literal!100
     ldl   $2,0($1)     !lituse_base!100

'!literal'
'!literal!N'
     Used with an 'ldq' instruction to load the address of a symbol from
     the GOT.

     A sequence number N is optional, and if present is used to pair
     'lituse' relocations with this 'literal' relocation.  The 'lituse'
     relocations are used by the linker to optimize the code based on
     the final location of the symbol.

     Note that these optimizations are dependent on the data flow of the
     program.  Therefore, if _any_ 'lituse' is paired with a 'literal'
     relocation, then _all_ uses of the register set by the 'literal'
     instruction must also be marked with 'lituse' relocations.  This is
     because the original 'literal' instruction may be deleted or
     transformed into another instruction.

     Also note that there may be a one-to-many relationship between
     'literal' and 'lituse', but not a many-to-one.  That is, if there
     are two code paths that load up the same address and feed the value
     to a single use, then the use may not use a 'lituse' relocation.

'!lituse_base!N'
     Used with any memory format instruction (e.g. 'ldl') to indicate
     that the literal is used for an address load.  The offset field of
     the instruction must be zero.  During relaxation, the code may be
     altered to use a gp-relative load.

'!lituse_jsr!N'
     Used with a register branch format instruction (e.g. 'jsr') to
     indicate that the literal is used for a call.  During relaxation,
     the code may be altered to use a direct branch (e.g. 'bsr').

'!lituse_jsrdirect!N'
     Similar to 'lituse_jsr', but also that this call cannot be vectored
     through a PLT entry.  This is useful for functions with special
     calling conventions which do not allow the normal call-clobbered
     registers to be clobbered.

'!lituse_bytoff!N'
     Used with a byte mask instruction (e.g. 'extbl') to indicate that
     only the low 3 bits of the address are relevant.  During
     relaxation, the code may be altered to use an immediate instead of
     a register shift.

'!lituse_addr!N'
     Used with any other instruction to indicate that the original
     address is in fact used, and the original 'ldq' instruction may not
     be altered or deleted.  This is useful in conjunction with
     'lituse_jsr' to test whether a weak symbol is defined.

          ldq  $27,foo($29)   !literal!1
          beq  $27,is_undef   !lituse_addr!1
          jsr  $26,($27),foo  !lituse_jsr!1

'!lituse_tlsgd!N'
     Used with a register branch format instruction to indicate that the
     literal is the call to '__tls_get_addr' used to compute the address
     of the thread-local storage variable whose descriptor was loaded
     with '!tlsgd!N'.

'!lituse_tlsldm!N'
     Used with a register branch format instruction to indicate that the
     literal is the call to '__tls_get_addr' used to compute the address
     of the base of the thread-local storage block for the current
     module.  The descriptor for the module must have been loaded with
     '!tlsldm!N'.

'!gpdisp!N'
     Used with 'ldah' and 'lda' to load the GP from the current address,
     a-la the 'ldgp' macro.  The source register for the 'ldah'
     instruction must contain the address of the 'ldah' instruction.
     There must be exactly one 'lda' instruction paired with the 'ldah'
     instruction, though it may appear anywhere in the instruction
     stream.  The immediate operands must be zero.

          bsr  $26,foo
          ldah $29,0($26)     !gpdisp!1
          lda  $29,0($29)     !gpdisp!1

'!gprelhigh'
     Used with an 'ldah' instruction to add the high 16 bits of a 32-bit
     displacement from the GP.

'!gprellow'
     Used with any memory format instruction to add the low 16 bits of a
     32-bit displacement from the GP.

'!gprel'
     Used with any memory format instruction to add a 16-bit
     displacement from the GP.

'!samegp'
     Used with any branch format instruction to skip the GP load at the
     target address.  The referenced symbol must have the same GP as the
     source object file, and it must be declared to either not use '$27'
     or perform a standard GP load in the first two instructions via the
     '.prologue' directive.

'!tlsgd'
'!tlsgd!N'
     Used with an 'lda' instruction to load the address of a TLS
     descriptor for a symbol in the GOT.

     The sequence number N is optional, and if present it used to pair
     the descriptor load with both the 'literal' loading the address of
     the '__tls_get_addr' function and the 'lituse_tlsgd' marking the
     call to that function.

     For proper relaxation, both the 'tlsgd', 'literal' and 'lituse'
     relocations must be in the same extended basic block.  That is, the
     relocation with the lowest address must be executed first at
     runtime.

'!tlsldm'
'!tlsldm!N'
     Used with an 'lda' instruction to load the address of a TLS
     descriptor for the current module in the GOT.

     Similar in other respects to 'tlsgd'.

'!gotdtprel'
     Used with an 'ldq' instruction to load the offset of the TLS symbol
     within its module's thread-local storage block.  Also known as the
     dynamic thread pointer offset or dtp-relative offset.

'!dtprelhi'
'!dtprello'
'!dtprel'
     Like 'gprel' relocations except they compute dtp-relative offsets.

'!gottprel'
     Used with an 'ldq' instruction to load the offset of the TLS symbol
     from the thread pointer.  Also known as the tp-relative offset.

'!tprelhi'
'!tprello'
'!tprel'
     Like 'gprel' relocations except they compute tp-relative offsets.

==============================================================================
File: as.info,  Node: |Alpha_Floating_Point|,  Next: |Alpha_Directives|,  Prev: |Alpha_Syntax|,  Up: |Alpha_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Alpha_Floating_Point*

9.2.4 Floating Point
--------------------

The Alpha family uses both IEEE and VAX floating-point numbers.

==============================================================================
File: as.info,  Node: |Alpha_Directives|,  Next: |Alpha_Opcodes|,  Prev: |Alpha_Floating_Point|,  Up: |Alpha_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Alpha_Directives*

9.2.5 Alpha Assembler Directives
--------------------------------

'as' for the Alpha supports many additional directives for compatibility
with the native assembler.  This section describes them only briefly.

   These are the additional directives in 'as' for the Alpha:

'.arch CPU'
     Specifies the target processor.  This is equivalent to the '-mCPU'
     command-line option.  *Note Options: Alpha Options, for a list of
     values for CPU.

'.ent FUNCTION[, N]'
     Mark the beginning of FUNCTION.  An optional number may follow for
     compatibility with the OSF/1 assembler, but is ignored.  When
     generating '.mdebug' information, this will create a procedure
     descriptor for the function.  In ELF, it will mark the symbol as a
     function a-la the generic '.type' directive.

'.end FUNCTION'
     Mark the end of FUNCTION.  In ELF, it will set the size of the
     symbol a-la the generic '.size' directive.

'.mask MASK, OFFSET'
     Indicate which of the integer registers are saved in the current
     function's stack frame.  MASK is interpreted a bit mask in which
     bit N set indicates that register N is saved.  The registers are
     saved in a block located OFFSET bytes from the "canonical frame
     address" (CFA) which is the value of the stack pointer on entry to
     the function.  The registers are saved sequentially, except that
     the return address register (normally '$26') is saved first.

     This and the other directives that describe the stack frame are
     currently only used when generating '.mdebug' information.  They
     may in the future be used to generate DWARF2 '.debug_frame' unwind
     information for hand written assembly.

'.fmask MASK, OFFSET'
     Indicate which of the floating-point registers are saved in the
     current stack frame.  The MASK and OFFSET parameters are
     interpreted as with '.mask'.

'.frame FRAMEREG, FRAMEOFFSET, RETREG[, ARGOFFSET]'
     Describes the shape of the stack frame.  The frame pointer in use
     is FRAMEREG; normally this is either '$fp' or '$sp'.  The frame
     pointer is FRAMEOFFSET bytes below the CFA. The return address is
     initially located in RETREG until it is saved as indicated in
     '.mask'.  For compatibility with OSF/1 an optional ARGOFFSET
     parameter is accepted and ignored.  It is believed to indicate the
     offset from the CFA to the saved argument registers.

'.prologue N'
     Indicate that the stack frame is set up and all registers have been
     spilled.  The argument N indicates whether and how the function
     uses the incoming "procedure vector" (the address of the called
     function) in '$27'.  0 indicates that '$27' is not used; 1
     indicates that the first two instructions of the function use '$27'
     to perform a load of the GP register; 2 indicates that '$27' is
     used in some non-standard way and so the linker cannot elide the
     load of the procedure vector during relaxation.

'.usepv FUNCTION, WHICH'
     Used to indicate the use of the '$27' register, similar to
     '.prologue', but without the other semantics of needing to be
     inside an open '.ent'/'.end' block.

     The WHICH argument should be either 'no', indicating that '$27' is
     not used, or 'std', indicating that the first two instructions of
     the function perform a GP load.

     One might use this directive instead of '.prologue' if you are also
     using dwarf2 CFI directives.

'.gprel32 EXPRESSION'
     Computes the difference between the address in EXPRESSION and the
     GP for the current object file, and stores it in 4 bytes.  In
     addition to being smaller than a full 8 byte address, this also
     does not require a dynamic relocation when used in a shared
     library.

'.t_floating EXPRESSION'
     Stores EXPRESSION as an IEEE double precision value.

'.s_floating EXPRESSION'
     Stores EXPRESSION as an IEEE single precision value.

'.f_floating EXPRESSION'
     Stores EXPRESSION as a VAX F format value.

'.g_floating EXPRESSION'
     Stores EXPRESSION as a VAX G format value.

'.d_floating EXPRESSION'
     Stores EXPRESSION as a VAX D format value.

'.set FEATURE'
     Enables or disables various assembler features.  Using the positive
     name of the feature enables while using 'noFEATURE' disables.

     'at'
          Indicates that macro expansions may clobber the "assembler
          temporary" ('$at' or '$28') register.  Some macros may not be
          expanded without this and will generate an error message if
          'noat' is in effect.  When 'at' is in effect, a warning will
          be generated if '$at' is used by the programmer.

     'macro'
          Enables the expansion of macro instructions.  Note that
          variants of real instructions, such as 'br label' vs 'br
          $31,label' are considered alternate forms and not macros.

     'move'
     'reorder'
     'volatile'
          These control whether and how the assembler may re-order
          instructions.  Accepted for compatibility with the OSF/1
          assembler, but 'as' does not do instruction scheduling, so
          these features are ignored.

   The following directives are recognized for compatibility with the
OSF/1 assembler but are ignored.

     .proc           .aproc
     .reguse         .livereg
     .option         .aent
     .ugen           .eflag
     .alias          .noalias

==============================================================================
File: as.info,  Node: |Alpha_Opcodes|,  Prev: |Alpha_Directives|,  Up: |Alpha_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Alpha_Opcodes*

9.2.6 Opcodes
-------------

For detailed information on the Alpha machine instruction set, see the
Alpha Architecture Handbook
(ftp://ftp.digital.com/pub/Digital/info/semiconductor/literature/alphaahb.pdf).

==============================================================================
File: as.info,  Node: |ARC_Dependent|,  Next: |ARM_Dependent|,  Prev: |Alpha_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *ARC_Dependent*

9.3 ARC Dependent Features
--------------------------

MENU

* |ARC_Options|::              Options
* |ARC_Syntax|::               Syntax
* |ARC_Directives|::           ARC Machine Directives
* |ARC_Modifiers|::            ARC Assembler Modifiers
* |ARC_Symbols|::              ARC Pre-defined Symbols
* |ARC_Opcodes|::              Opcodes

==============================================================================
File: as.info,  Node: |ARC_Options|,  Next: |ARC_Syntax|,  Up: |ARC_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *ARC_Options*

9.3.1 Options
-------------

The following options control the type of CPU for which code is
assembled, and generic constraints on the code generated:

'-mcpu=CPU'
     Set architecture type and register usage for CPU.  There are also
     shortcut alias options available for backward compatibility and
     convenience.  Supported values for CPU are

     'arc600'
          Assemble for ARC 600.  Aliases: '-mA6', '-mARC600'.

     'arc600_norm'
          Assemble for ARC 600 with norm instructions.

     'arc600_mul64'
          Assemble for ARC 600 with mul64 instructions.

     'arc600_mul32x16'
          Assemble for ARC 600 with mul32x16 instructions.

     'arc601'
          Assemble for ARC 601.  Alias: '-mARC601'.

     'arc601_norm'
          Assemble for ARC 601 with norm instructions.

     'arc601_mul64'
          Assemble for ARC 601 with mul64 instructions.

     'arc601_mul32x16'
          Assemble for ARC 601 with mul32x16 instructions.

     'arc700'
          Assemble for ARC 700.  Aliases: '-mA7', '-mARC700'.

     'arcem'
          Assemble for ARC EM. Aliases: '-mEM'

     'em'
          Assemble for ARC EM, identical as arcem variant.

     'em4'
          Assemble for ARC EM with code-density instructions.

     'em4_dmips'
          Assemble for ARC EM with code-density instructions.

     'em4_fpus'
          Assemble for ARC EM with code-density instructions.

     'em4_fpuda'
          Assemble for ARC EM with code-density, and double-precision
          assist instructions.

     'quarkse_em'
          Assemble for QuarkSE-EM cpu.

     'archs'
          Assemble for ARC HS. Aliases: '-mHS', '-mav2hs'.

     'hs'
          Assemble for ARC HS.

     'hs34'
          Assemble for ARC HS34.

     'hs38'
          Assemble for ARC HS38.

     'hs38_linux'
          Assemble for ARC HS38 with floating point support on.

     'nps400'
          Assemble for ARC 700 with NPS-400 extended instructions.

     Note: the '.cpu' directive (*note ARC Directives::) can to be used
     to select a core variant from within assembly code.

'-EB'
     This option specifies that the output generated by the assembler
     should be marked as being encoded for a big-endian processor.

'-EL'
     This option specifies that the output generated by the assembler
     should be marked as being encoded for a little-endian processor -
     this is the default.

'-mcode-density'
     This option turns on Code Density instructions.  Only valid for ARC
     EM processors.

'-mrelax'
     Enable support for assembly-time relaxation.  The assembler will
     replace a longer version of an instruction with a shorter one,
     whenever it is possible.

'-mnps400'
     Enable support for NPS-400 extended instructions.

'-mspfp'
     Enable support for single-precision floating point instructions.

'-mdpfp'
     Enable support for double-precision floating point instructions.

'-mfpuda'
     Enable support for double-precision assist floating point
     instructions.  Only valid for ARC EM processors.

==============================================================================
File: as.info,  Node: |ARC_Syntax|,  Next: |ARC_Directives|,  Prev: |ARC_Options|,  Up: |ARC_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *ARC_Syntax*

9.3.2 Syntax
------------

MENU

* |ARC_Chars|::                Special Characters
* |ARC_Regs|::                 Register Names

==============================================================================
File: as.info,  Node: |ARC_Chars|,  Next: |ARC_Regs|,  Up: |ARC_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *ARC_Chars*

9.3.2.1 Special Characters
--------------------------

'%'
     A register name can optionally be prefixed by a '%' character.  So
     register '%r0' is equivalent to 'r0' in the assembly code.

'#'
     The presence of a '#' character within a line (but not at the start
     of a line) indicates the start of a comment that extends to the end
     of the current line.

     _Note:_ if a line starts with a '#' character then it can also be a
     logical line number directive (*note Comments::) or a preprocessor
     control command (*note Preprocessing::).

'@'
     Prefixing an operand with an '@' specifies that the operand is a
     symbol and not a register.  This is how the assembler disambiguates
     the use of an ARC register name as a symbol.  So the instruction
          mov r0, @r0
     moves the address of symbol 'r0' into register 'r0'.

'`'
     The '`' (backtick) character is used to separate statements on a
     single line.

'-'
     Used as a separator to obtain a sequence of commands from a C
     preprocessor macro.

==============================================================================
File: as.info,  Node: |ARC_Regs|,  Prev: |ARC_Chars|,  Up: |ARC_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *ARC_Regs*

9.3.2.2 Register Names
----------------------

The ARC assembler uses the following register names for its core
registers:

'r0-r31'
     The core general registers.  Registers 'r26' through 'r31' have
     special functions, and are usually referred to by those synonyms.

'gp'
     The global pointer and a synonym for 'r26'.

'fp'
     The frame pointer and a synonym for 'r27'.

'sp'
     The stack pointer and a synonym for 'r28'.

'ilink1'
     For ARC 600 and ARC 700, the level 1 interrupt link register and a
     synonym for 'r29'.  Not supported for ARCv2.

'ilink'
     For ARCv2, the interrupt link register and a synonym for 'r29'.
     Not supported for ARC 600 and ARC 700.

'ilink2'
     For ARC 600 and ARC 700, the level 2 interrupt link register and a
     synonym for 'r30'.  Not supported for ARC v2.

'blink'
     The link register and a synonym for 'r31'.

'r32-r59'
     The extension core registers.

'lp_count'
     The loop count register.

'pcl'
     The word aligned program counter.

   In addition the ARC processor has a large number of _auxiliary
registers_.  The precise set depends on the extensions being supported,
but the following baseline set are always defined:

'identity'
     Processor Identification register.  Auxiliary register address 0x4.

'pc'
     Program Counter.  Auxiliary register address 0x6.

'status32'
     Status register.  Auxiliary register address 0x0a.

'bta'
     Branch Target Address.  Auxiliary register address 0x412.

'ecr'
     Exception Cause Register.  Auxiliary register address 0x403.

'int_vector_base'
     Interrupt Vector Base address.  Auxiliary register address 0x25.

'status32_p0'
     Stored STATUS32 register on entry to level P0 interrupts.
     Auxiliary register address 0xb.

'aux_user_sp'
     Saved User Stack Pointer.  Auxiliary register address 0xd.

'eret'
     Exception Return Address.  Auxiliary register address 0x400.

'erbta'
     BTA saved on exception entry.  Auxiliary register address 0x401.

'erstatus'
     STATUS32 saved on exception.  Auxiliary register address 0x402.

'bcr_ver'
     Build Configuration Registers Version.  Auxiliary register address
     0x60.

'bta_link_build'
     Build configuration for: BTA Registers.  Auxiliary register address
     0x63.

'vecbase_ac_build'
     Build configuration for: Interrupts.  Auxiliary register address
     0x68.

'rf_build'
     Build configuration for: Core Registers.  Auxiliary register
     address 0x6e.

'dccm_build'
     DCCM RAM Configuration Register.  Auxiliary register address 0xc1.

   Additional auxiliary register names are defined according to the
processor architecture version and extensions selected by the options.

==============================================================================
File: as.info,  Node: |ARC_Directives|,  Next: |ARC_Modifiers|,  Prev: |ARC_Syntax|,  Up: |ARC_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *ARC_Directives*

9.3.3 ARC Machine Directives
----------------------------

The ARC version of 'as' supports the following additional machine
directives:

'.lcomm SYMBOL, LENGTH[, ALIGNMENT]'
     Reserve LENGTH (an absolute expression) bytes for a local common
     denoted by SYMBOL.  The section and value of SYMBOL are those of
     the new local common.  The addresses are allocated in the bss
     section, so that at run-time the bytes start off zeroed.  Since
     SYMBOL is not declared global, it is normally not visible to 'ld'.
     The optional third parameter, ALIGNMENT, specifies the desired
     alignment of the symbol in the bss section, specified as a byte
     boundary (for example, an alignment of 16 means that the least
     significant 4 bits of the address should be zero).  The alignment
     must be an absolute expression, and it must be a power of two.  If
     no alignment is specified, as will set the alignment to the largest
     power of two less than or equal to the size of the symbol, up to a
     maximum of 16.

'.lcommon SYMBOL, LENGTH[, ALIGNMENT]'
     The same as 'lcomm' directive.

'.cpu CPU'
     The '.cpu' directive must be followed by the desired core version.
     Permitted values for CPU are:
     'ARC600'
          Assemble for the ARC600 instruction set.

     'arc600_norm'
          Assemble for ARC 600 with norm instructions.

     'arc600_mul64'
          Assemble for ARC 600 with mul64 instructions.

     'arc600_mul32x16'
          Assemble for ARC 600 with mul32x16 instructions.

     'arc601'
          Assemble for ARC 601 instruction set.

     'arc601_norm'
          Assemble for ARC 601 with norm instructions.

     'arc601_mul64'
          Assemble for ARC 601 with mul64 instructions.

     'arc601_mul32x16'
          Assemble for ARC 601 with mul32x16 instructions.

     'ARC700'
          Assemble for the ARC700 instruction set.

     'NPS400'
          Assemble for the NPS400 instruction set.

     'EM'
          Assemble for the ARC EM instruction set.

     'arcem'
          Assemble for ARC EM instruction set

     'em4'
          Assemble for ARC EM with code-density instructions.

     'em4_dmips'
          Assemble for ARC EM with code-density instructions.

     'em4_fpus'
          Assemble for ARC EM with code-density instructions.

     'em4_fpuda'
          Assemble for ARC EM with code-density, and double-precision
          assist instructions.

     'quarkse_em'
          Assemble for QuarkSE-EM instruction set.

     'HS'
          Assemble for the ARC HS instruction set.

     'archs'
          Assemble for ARC HS instruction set.

     'hs'
          Assemble for ARC HS instruction set.

     'hs34'
          Assemble for ARC HS34 instruction set.

     'hs38'
          Assemble for ARC HS38 instruction set.

     'hs38_linux'
          Assemble for ARC HS38 with floating point support on.

     Note: the '.cpu' directive overrides the command line option
     '-mcpu=CPU'; a warning is emitted when the version is not
     consistent between the two.

'.extAuxRegister NAME, ADDR, MODE'
     Auxiliary registers can be defined in the assembler source code by
     using this directive.  The first parameter, NAME, is the name of
     the new auxiliary register.  The second parameter, ADDR, is address
     the of the auxiliary register.  The third parameter, MODE,
     specifies whether the register is readable and/or writable and is
     one of:
     'r'
          Read only;

     'w'
          Write only;

     'r|w'
          Read and write.

     For example:
          	.extAuxRegister mulhi, 0x12, w
     specifies a write only extension auxiliary register, MULHI at
     address 0x12.

'.extCondCode SUFFIX, VAL'
     ARC supports extensible condition codes.  This directive defines a
     new condition code, to be known by the suffix, SUFFIX and will
     depend on the value, VAL in the condition code.

     For example:
          	.extCondCode is_busy,0x14
          	add.is_busy  r1,r2,r3
     will only execute the 'add' instruction if the condition code value
     is 0x14.

'.extCoreRegister NAME, REGNUM, MODE, SHORTCUT'
     Specifies an extension core register named NAME as a synonym for
     the register numbered REGNUM.  The register number must be between
     32 and 59.  The third argument, MODE, indicates whether the
     register is readable and/or writable and is one of:
     'r'
          Read only;

     'w'
          Write only;

     'r|w'
          Read and write.

     The final parameter, SHORTCUT indicates whether the register has a
     short cut in the pipeline.  The valid values are:
     'can_shortcut'
          The register has a short cut in the pipeline;

     'cannot_shortcut'
          The register does not have a short cut in the pipeline.

     For example:
          	.extCoreRegister mlo, 57, r , can_shortcut
     defines a read only extension core register, 'mlo', which is
     register 57, and can short cut the pipeline.

'.extInstruction NAME, OPCODE, SUBOPCODE, SUFFIXCLASS, SYNTAXCLASS'
     ARC allows the user to specify extension instructions.  These
     extension instructions are not macros; the assembler creates
     encodings for use of these instructions according to the
     specification by the user.

     The first argument, NAME, gives the name of the instruction.

     The second argument, OPCODE, is the opcode to be used (bits 31:27
     in the encoding).

     The third argument, SUBOPCODE, is the sub-opcode to be used, but
     the correct value also depends on the fifth argument, SYNTAXCLASS

     The fourth argument, SUFFIXCLASS, determines the kinds of suffixes
     to be allowed.  Valid values are:
     'SUFFIX_NONE'
          No suffixes are permitted;

     'SUFFIX_COND'
          Conditional suffixes are permitted;

     'SUFFIX_FLAG'
          Flag setting suffixes are permitted.

     'SUFFIX_COND|SUFFIX_FLAG'
          Both conditional and flag setting suffices are permitted.

     The fifth and final argument, SYNTAXCLASS, determines the syntax
     class for the instruction.  It can have the following values:
     'SYNTAX_2OP'
          Two Operand Instruction;

     'SYNTAX_3OP'
          Three Operand Instruction.

     'SYNTAX_1OP'
          One Operand Instruction.

     'SYNTAX_NOP'
          No Operand Instruction.

     The syntax class may be followed by '|' and one of the following
     modifiers.

     'OP1_MUST_BE_IMM'
          Modifies syntax class 'SYNTAX_3OP', specifying that the first
          operand of a three-operand instruction must be an immediate
          (i.e., the result is discarded).  This is usually used to set
          the flags using specific instructions and not retain results.

     'OP1_IMM_IMPLIED'
          Modifies syntax class 'SYNTAX_20P', specifying that there is
          an implied immediate destination operand which does not appear
          in the syntax.

          For example, if the source code contains an instruction like:
               inst r1,r2
          the first argument is an implied immediate (that is, the
          result is discarded).  This is the same as though the source
          code were: inst 0,r1,r2.

     For example, defining a 64-bit multiplier with immediate operands:
          	.extInstruction  mp64, 0x07, 0x2d, SUFFIX_COND|SUFFIX_FLAG,
          			 SYNTAX_3OP|OP1_MUST_BE_IMM
     which specifies an extension instruction named 'mp64' with 3
     operands.  It sets the flags and can be used with a condition code,
     for which the first operand is an immediate, i.e.  equivalent to
     discarding the result of the operation.

     A two operands instruction variant would be:
          	.extInstruction mul64, 0x07, 0x2d, SUFFIX_COND,
          	SYNTAX_2OP|OP1_IMM_IMPLIED
     which describes a two operand instruction with an implicit first
     immediate operand.  The result of this operation would be
     discarded.

'.arc_attribute TAG, VALUE'
     Set the ARC object attribute TAG to VALUE.

     The TAG is either an attribute number, or one of the following:
     'Tag_ARC_PCS_config', 'Tag_ARC_CPU_base', 'Tag_ARC_CPU_variation',
     'Tag_ARC_CPU_name', 'Tag_ARC_ABI_rf16', 'Tag_ARC_ABI_osver',
     'Tag_ARC_ABI_sda', 'Tag_ARC_ABI_pic', 'Tag_ARC_ABI_tls',
     'Tag_ARC_ABI_enumsize', 'Tag_ARC_ABI_exceptions',
     'Tag_ARC_ABI_double_size', 'Tag_ARC_ISA_config',
     'Tag_ARC_ISA_apex', 'Tag_ARC_ISA_mpy_option'

     The VALUE is either a 'number', '"string"', or 'number, "string"'
     depending on the tag.

==============================================================================
File: as.info,  Node: |ARC_Modifiers|,  Next: |ARC_Symbols|,  Prev: |ARC_Directives|,  Up: |ARC_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *ARC_Modifiers*

9.3.4 ARC Assembler Modifiers
-----------------------------

The following additional assembler modifiers have been added for
position-independent code.  These modifiers are available only with the
ARC 700 and above processors and generate relocation entries, which are
interpreted by the linker as follows:

'@pcl(SYMBOL)'
     Relative distance of SYMBOL's from the current program counter
     location.

'@gotpc(SYMBOL)'
     Relative distance of SYMBOL's Global Offset Table entry from the
     current program counter location.

'@gotoff(SYMBOL)'
     Distance of SYMBOL from the base of the Global Offset Table.

'@plt(SYMBOL)'
     Distance of SYMBOL's Procedure Linkage Table entry from the current
     program counter.  This is valid only with branch and link
     instructions and PC-relative calls.

'@sda(SYMBOL)'
     Relative distance of SYMBOL from the base of the Small Data
     Pointer.

==============================================================================
File: as.info,  Node: |ARC_Symbols|,  Next: |ARC_Opcodes|,  Prev: |ARC_Modifiers|,  Up: |ARC_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *ARC_Symbols*

9.3.5 ARC Pre-defined Symbols
-----------------------------

The following assembler symbols will prove useful when developing
position-independent code.  These symbols are available only with the
ARC 700 and above processors.

'__GLOBAL_OFFSET_TABLE__'
     Symbol referring to the base of the Global Offset Table.

'__DYNAMIC__'
     An alias for the Global Offset Table 'Base__GLOBAL_OFFSET_TABLE__'.
     It can be used only with '@gotpc' modifiers.

==============================================================================
File: as.info,  Node: |ARC_Opcodes|,  Prev: |ARC_Symbols|,  Up: |ARC_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *ARC_Opcodes*

9.3.6 Opcodes
-------------

For information on the ARC instruction set, see 'ARC Programmers
Reference Manual', available where you download the processor IP
library.

==============================================================================
File: as.info,  Node: |ARM_Dependent|,  Next: |AVR_Dependent|,  Prev: |ARC_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *ARM_Dependent*

9.4 ARM Dependent Features
--------------------------

MENU

* |ARM_Options|::              Options
* |ARM_Syntax|::               Syntax
* |ARM_Floating_Point|::       Floating Point
* |ARM_Directives|::           ARM Machine Directives
* |ARM_Opcodes|::              Opcodes
* |ARM_Mapping_Symbols|::      Mapping Symbols
* |ARM_Unwinding_Tutorial|::   Unwinding

==============================================================================
File: as.info,  Node: |ARM_Options|,  Next: |ARM_Syntax|,  Up: |ARM_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *ARM_Options*

9.4.1 Options
-------------

'-mcpu=PROCESSOR[+EXTENSION...]'
     This option specifies the target processor.  The assembler will
     issue an error message if an attempt is made to assemble an
     instruction which will not execute on the target processor.  The
     following processor names are recognized: 'arm1', 'arm2', 'arm250',
     'arm3', 'arm6', 'arm60', 'arm600', 'arm610', 'arm620', 'arm7',
     'arm7m', 'arm7d', 'arm7dm', 'arm7di', 'arm7dmi', 'arm70', 'arm700',
     'arm700i', 'arm710', 'arm710t', 'arm720', 'arm720t', 'arm740t',
     'arm710c', 'arm7100', 'arm7500', 'arm7500fe', 'arm7t', 'arm7tdmi',
     'arm7tdmi-s', 'arm8', 'arm810', 'strongarm', 'strongarm1',
     'strongarm110', 'strongarm1100', 'strongarm1110', 'arm9', 'arm920',
     'arm920t', 'arm922t', 'arm940t', 'arm9tdmi', 'fa526' (Faraday FA526
     processor), 'fa626' (Faraday FA626 processor), 'arm9e', 'arm926e',
     'arm926ej-s', 'arm946e-r0', 'arm946e', 'arm946e-s', 'arm966e-r0',
     'arm966e', 'arm966e-s', 'arm968e-s', 'arm10t', 'arm10tdmi',
     'arm10e', 'arm1020', 'arm1020t', 'arm1020e', 'arm1022e',
     'arm1026ej-s', 'fa606te' (Faraday FA606TE processor), 'fa616te'
     (Faraday FA616TE processor), 'fa626te' (Faraday FA626TE processor),
     'fmp626' (Faraday FMP626 processor), 'fa726te' (Faraday FA726TE
     processor), 'arm1136j-s', 'arm1136jf-s', 'arm1156t2-s',
     'arm1156t2f-s', 'arm1176jz-s', 'arm1176jzf-s', 'mpcore',
     'mpcorenovfp', 'cortex-a5', 'cortex-a7', 'cortex-a8', 'cortex-a9',
     'cortex-a15', 'cortex-a17', 'cortex-a32', 'cortex-a35',
     'cortex-a53', 'cortex-a55', 'cortex-a57', 'cortex-a72',
     'cortex-a73', 'cortex-a75', 'cortex-a76', 'cortex-r4',
     'cortex-r4f', 'cortex-r5', 'cortex-r7', 'cortex-r8', 'cortex-r52',
     'cortex-m33', 'cortex-m23', 'cortex-m7', 'cortex-m4', 'cortex-m3',
     'cortex-m1', 'cortex-m0', 'cortex-m0plus', 'exynos-m1',
     'marvell-pj4', 'marvell-whitney', 'xgene1', 'xgene2', 'ep9312'
     (ARM920 with Cirrus Maverick coprocessor), 'i80200' (Intel XScale
     processor) 'iwmmxt' (Intel(r) XScale processor with Wireless
     MMX(tm) technology coprocessor) and 'xscale'.  The special name
     'all' may be used to allow the assembler to accept instructions
     valid for any ARM processor.

     In addition to the basic instruction set, the assembler can be told
     to accept various extension mnemonics that extend the processor
     using the co-processor instruction space.  For example,
     '-mcpu=arm920+maverick' is equivalent to specifying '-mcpu=ep9312'.

     Multiple extensions may be specified, separated by a '+'.  The
     extensions should be specified in ascending alphabetical order.

     Some extensions may be restricted to particular architectures; this
     is documented in the list of extensions below.

     Extension mnemonics may also be removed from those the assembler
     accepts.  This is done be prepending 'no' to the option that adds
     the extension.  Extensions that are removed should be listed after
     all extensions which have been added, again in ascending
     alphabetical order.  For example, '-mcpu=ep9312+nomaverick' is
     equivalent to specifying '-mcpu=arm920'.

     The following extensions are currently supported: 'crc' 'crypto'
     (Cryptography Extensions for v8-A architecture, implies 'fp+simd'),
     'dotprod' (Dot Product Extensions for v8.2-A architecture, implies
     'fp+simd'), 'fp' (Floating Point Extensions for v8-A architecture),
     'fp16' (FP16 Extensions for v8.2-A architecture, implies 'fp'),
     'fp16fml' (FP16 Floating Point Multiplication Variant Extensions
     for v8.2-A architecture, implies 'fp16'), 'idiv' (Integer Divide
     Extensions for v7-A and v7-R architectures), 'iwmmxt', 'iwmmxt2',
     'xscale', 'maverick', 'mp' (Multiprocessing Extensions for v7-A and
     v7-R architectures), 'os' (Operating System for v6M architecture),
     'sec' (Security Extensions for v6K and v7-A architectures), 'simd'
     (Advanced SIMD Extensions for v8-A architecture, implies 'fp'),
     'virt' (Virtualization Extensions for v7-A architecture, implies
     'idiv'), 'pan' (Privileged Access Never Extensions for v8-A
     architecture), 'ras' (Reliability, Availability and Serviceability
     extensions for v8-A architecture), 'rdma' (ARMv8.1 Advanced SIMD
     extensions for v8-A architecture, implies 'simd') and 'xscale'.

'-march=ARCHITECTURE[+EXTENSION...]'
     This option specifies the target architecture.  The assembler will
     issue an error message if an attempt is made to assemble an
     instruction which will not execute on the target architecture.  The
     following architecture names are recognized: 'armv1', 'armv2',
     'armv2a', 'armv2s', 'armv3', 'armv3m', 'armv4', 'armv4xm',
     'armv4t', 'armv4txm', 'armv5', 'armv5t', 'armv5txm', 'armv5te',
     'armv5texp', 'armv6', 'armv6j', 'armv6k', 'armv6z', 'armv6kz',
     'armv6-m', 'armv6s-m', 'armv7', 'armv7-a', 'armv7ve', 'armv7-r',
     'armv7-m', 'armv7e-m', 'armv8-a', 'armv8.1-a', 'armv8.2-a',
     'armv8.3-a', 'armv8-r', 'armv8.4-a', 'iwmmxt' 'iwmmxt2' and
     'xscale'.  If both '-mcpu' and '-march' are specified, the
     assembler will use the setting for '-mcpu'.

     The architecture option can be extended with the same instruction
     set extension options as the '-mcpu' option.

'-mfpu=FLOATING-POINT-FORMAT'

     This option specifies the floating point format to assemble for.
     The assembler will issue an error message if an attempt is made to
     assemble an instruction which will not execute on the target
     floating point unit.  The following format options are recognized:
     'softfpa', 'fpe', 'fpe2', 'fpe3', 'fpa', 'fpa10', 'fpa11',
     'arm7500fe', 'softvfp', 'softvfp+vfp', 'vfp', 'vfp10', 'vfp10-r0',
     'vfp9', 'vfpxd', 'vfpv2', 'vfpv3', 'vfpv3-fp16', 'vfpv3-d16',
     'vfpv3-d16-fp16', 'vfpv3xd', 'vfpv3xd-d16', 'vfpv4', 'vfpv4-d16',
     'fpv4-sp-d16', 'fpv5-sp-d16', 'fpv5-d16', 'fp-armv8', 'arm1020t',
     'arm1020e', 'arm1136jf-s', 'maverick', 'neon', 'neon-vfpv3',
     'neon-fp16', 'neon-vfpv4', 'neon-fp-armv8', 'crypto-neon-fp-armv8',
     'neon-fp-armv8.1' and 'crypto-neon-fp-armv8.1'.

     In addition to determining which instructions are assembled, this
     option also affects the way in which the '.double' assembler
     directive behaves when assembling little-endian code.

     The default is dependent on the processor selected.  For
     Architecture 5 or later, the default is to assemble for VFP
     instructions; for earlier architectures the default is to assemble
     for FPA instructions.

'-mthumb'
     This option specifies that the assembler should start assembling
     Thumb instructions; that is, it should behave as though the file
     starts with a '.code 16' directive.

'-mthumb-interwork'
     This option specifies that the output generated by the assembler
     should be marked as supporting interworking.  It also affects the
     behaviour of the 'ADR' and 'ADRL' pseudo opcodes.

'-mimplicit-it=never'
'-mimplicit-it=always'
'-mimplicit-it=arm'
'-mimplicit-it=thumb'
     The '-mimplicit-it' option controls the behavior of the assembler
     when conditional instructions are not enclosed in IT blocks.  There
     are four possible behaviors.  If 'never' is specified, such
     constructs cause a warning in ARM code and an error in Thumb-2
     code.  If 'always' is specified, such constructs are accepted in
     both ARM and Thumb-2 code, where the IT instruction is added
     implicitly.  If 'arm' is specified, such constructs are accepted in
     ARM code and cause an error in Thumb-2 code.  If 'thumb' is
     specified, such constructs cause a warning in ARM code and are
     accepted in Thumb-2 code.  If you omit this option, the behavior is
     equivalent to '-mimplicit-it=arm'.

'-mapcs-26'
'-mapcs-32'
     These options specify that the output generated by the assembler
     should be marked as supporting the indicated version of the Arm
     Procedure.  Calling Standard.

'-matpcs'
     This option specifies that the output generated by the assembler
     should be marked as supporting the Arm/Thumb Procedure Calling
     Standard.  If enabled this option will cause the assembler to
     create an empty debugging section in the object file called
     .arm.atpcs.  Debuggers can use this to determine the ABI being used
     by.

'-mapcs-float'
     This indicates the floating point variant of the APCS should be
     used.  In this variant floating point arguments are passed in FP
     registers rather than integer registers.

'-mapcs-reentrant'
     This indicates that the reentrant variant of the APCS should be
     used.  This variant supports position independent code.

'-mfloat-abi=ABI'
     This option specifies that the output generated by the assembler
     should be marked as using specified floating point ABI. The
     following values are recognized: 'soft', 'softfp' and 'hard'.

'-meabi=VER'
     This option specifies which EABI version the produced object files
     should conform to.  The following values are recognized: 'gnu', '4'
     and '5'.

'-EB'
     This option specifies that the output generated by the assembler
     should be marked as being encoded for a big-endian processor.

     Note: If a program is being built for a system with big-endian data
     and little-endian instructions then it should be assembled with the
     '-EB' option, (all of it, code and data) and then linked with the
     '--be8' option.  This will reverse the endianness of the
     instructions back to little-endian, but leave the data as
     big-endian.

'-EL'
     This option specifies that the output generated by the assembler
     should be marked as being encoded for a little-endian processor.

'-k'
     This option specifies that the output of the assembler should be
     marked as position-independent code (PIC).

'--fix-v4bx'
     Allow 'BX' instructions in ARMv4 code.  This is intended for use
     with the linker option of the same name.

'-mwarn-deprecated'
'-mno-warn-deprecated'
     Enable or disable warnings about using deprecated options or
     features.  The default is to warn.

'-mccs'
     Turns on CodeComposer Studio assembly syntax compatibility mode.

'-mwarn-syms'
'-mno-warn-syms'
     Enable or disable warnings about symbols that match the names of
     ARM instructions.  The default is to warn.

==============================================================================
File: as.info,  Node: |ARM_Syntax|,  Next: |ARM_Floating_Point|,  Prev: |ARM_Options|,  Up: |ARM_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *ARM_Syntax*

9.4.2 Syntax
------------

MENU

* |ARM_Instruction_Set|::      Instruction Set
* |ARM_Chars|::                Special Characters
* |ARM_Regs|::                 Register Names
* |ARM_Relocations|::	     Relocations
* |ARM_Neon_Alignment|::	     NEON Alignment Specifiers

==============================================================================
File: as.info,  Node: |ARM_Instruction_Set|,  Next: |ARM_Chars|,  Up: |ARM_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *ARM_Instruction_Set*

9.4.2.1 Instruction Set Syntax
------------------------------

Two slightly different syntaxes are support for ARM and THUMB
instructions.  The default, 'divided', uses the old style where ARM and
THUMB instructions had their own, separate syntaxes.  The new, 'unified'
syntax, which can be selected via the '.syntax' directive, and has the
following main features:

   * Immediate operands do not require a '#' prefix.

   * The 'IT' instruction may appear, and if it does it is validated
     against subsequent conditional affixes.  In ARM mode it does not
     generate machine code, in THUMB mode it does.

   * For ARM instructions the conditional affixes always appear at the
     end of the instruction.  For THUMB instructions conditional affixes
     can be used, but only inside the scope of an 'IT' instruction.

   * All of the instructions new to the V6T2 architecture (and later)
     are available.  (Only a few such instructions can be written in the
     'divided' syntax).

   * The '.N' and '.W' suffixes are recognized and honored.

   * All instructions set the flags if and only if they have an 's'
     affix.

==============================================================================
File: as.info,  Node: |ARM_Chars|,  Next: |ARM_Regs|,  Prev: |ARM_Instruction_Set|,  Up: |ARM_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *ARM_Chars*

9.4.2.2 Special Characters
--------------------------

The presence of a '@' anywhere on a line indicates the start of a
comment that extends to the end of that line.

   If a '#' appears as the first character of a line then the whole line
is treated as a comment, but in this case the line could also be a
logical line number directive (*note Comments::) or a preprocessor
control command (*note Preprocessing::).

   The ';' character can be used instead of a newline to separate
statements.

   Either '#' or '$' can be used to indicate immediate operands.

   TODO Explain about /data modifier on symbols.

==============================================================================
File: as.info,  Node: |ARM_Regs|,  Next: |ARM_Relocations|,  Prev: |ARM_Chars|,  Up: |ARM_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *ARM_Regs*

9.4.2.3 Register Names
----------------------

*TODO Explain about ARM register naming, and the predefined names.

==============================================================================
File: as.info,  Node: |ARM_Relocations|,  Next: |ARM_Neon_Alignment|,  Prev: |ARM_Regs|,  Up: |ARM_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *ARM_Relocations*

9.4.2.4 ARM relocation generation
---------------------------------

Specific data relocations can be generated by putting the relocation
name in parentheses after the symbol name.  For example:

             .word foo(TARGET1)

   This will generate an 'R_ARM_TARGET1' relocation against the symbol
FOO.  The following relocations are supported: 'GOT', 'GOTOFF',
'TARGET1', 'TARGET2', 'SBREL', 'TLSGD', 'TLSLDM', 'TLSLDO', 'TLSDESC',
'TLSCALL', 'GOTTPOFF', 'GOT_PREL' and 'TPOFF'.

   For compatibility with older toolchains the assembler also accepts
'(PLT)' after branch targets.  On legacy targets this will generate the
deprecated 'R_ARM_PLT32' relocation.  On EABI targets it will encode
either the 'R_ARM_CALL' or 'R_ARM_JUMP24' relocation, as appropriate.

   Relocations for 'MOVW' and 'MOVT' instructions can be generated by
prefixing the value with '#:lower16:' and '#:upper16' respectively.  For
example to load the 32-bit address of foo into r0:

             MOVW r0, #:lower16:foo
             MOVT r0, #:upper16:foo

   Relocations 'R_ARM_THM_ALU_ABS_G0_NC', 'R_ARM_THM_ALU_ABS_G1_NC',
'R_ARM_THM_ALU_ABS_G2_NC' and 'R_ARM_THM_ALU_ABS_G3_NC' can be generated
by prefixing the value with '#:lower0_7:#', '#:lower8_15:#',
'#:upper0_7:#' and '#:upper8_15:#' respectively.  For example to load
the 32-bit address of foo into r0:

             MOVS r0, #:upper8_15:#foo
             LSLS r0, r0, #8
             ADDS r0, #:upper0_7:#foo
             LSLS r0, r0, #8
             ADDS r0, #:lower8_15:#foo
             LSLS r0, r0, #8
             ADDS r0, #:lower0_7:#foo

==============================================================================
File: as.info,  Node: |ARM_Neon_Alignment|,  Prev: |ARM_Relocations|,  Up: |ARM_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *ARM_Neon_Alignment*

9.4.2.5 NEON Alignment Specifiers
---------------------------------

Some NEON load/store instructions allow an optional address alignment
qualifier.  The ARM documentation specifies that this is indicated by '@
ALIGN'.  However GAS already interprets the '@' character as a "line
comment" start, so ': ALIGN' is used instead.  For example:

             vld1.8 {q0}, [r0, :128]

==============================================================================
File: as.info,  Node: |ARM_Floating_Point|,  Next: |ARM_Directives|,  Prev: |ARM_Syntax|,  Up: |ARM_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *ARM_Floating_Point*

9.4.3 Floating Point
--------------------

The ARM family uses IEEE floating-point numbers.

==============================================================================
File: as.info,  Node: |ARM_Directives|,  Next: |ARM_Opcodes|,  Prev: |ARM_Floating_Point|,  Up: |ARM_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *ARM_Directives*

9.4.4 ARM Machine Directives
----------------------------

'.align EXPRESSION [, EXPRESSION]'
     This is the generic .ALIGN directive.  For the ARM however if the
     first argument is zero (ie no alignment is needed) the assembler
     will behave as if the argument had been 2 (ie pad to the next four
     byte boundary).  This is for compatibility with ARM's own
     assembler.

'.arch NAME'
     Select the target architecture.  Valid values for NAME are the same
     as for the '-march' commandline option.

     Specifying '.arch' clears any previously selected architecture
     extensions.

'.arch_extension NAME'
     Add or remove an architecture extension to the target architecture.
     Valid values for NAME are the same as those accepted as
     architectural extensions by the '-mcpu' and '-march' commandline
     options.

     '.arch_extension' may be used multiple times to add or remove
     extensions incrementally to the architecture being compiled for.

'.arm'
     This performs the same action as .CODE 32.

'.bss'
     This directive switches to the '.bss' section.

'.cantunwind'
     Prevents unwinding through the current function.  No personality
     routine or exception table data is required or permitted.

'.code [16|32]'
     This directive selects the instruction set being generated.  The
     value 16 selects Thumb, with the value 32 selecting ARM.

'.cpu NAME'
     Select the target processor.  Valid values for NAME are the same as
     for the '-mcpu' commandline option.

     Specifying '.cpu' clears any previously selected architecture
     extensions.

'NAME .dn REGISTER NAME [.TYPE] [[INDEX]]'
'NAME .qn REGISTER NAME [.TYPE] [[INDEX]]'

     The 'dn' and 'qn' directives are used to create typed and/or
     indexed register aliases for use in Advanced SIMD Extension (Neon)
     instructions.  The former should be used to create aliases of
     double-precision registers, and the latter to create aliases of
     quad-precision registers.

     If these directives are used to create typed aliases, those aliases
     can be used in Neon instructions instead of writing types after the
     mnemonic or after each operand.  For example:

                  x .dn d2.f32
                  y .dn d3.f32
                  z .dn d4.f32[1]
                  vmul x,y,z

     This is equivalent to writing the following:

                  vmul.f32 d2,d3,d4[1]

     Aliases created using 'dn' or 'qn' can be destroyed using 'unreq'.

'.eabi_attribute TAG, VALUE'
     Set the EABI object attribute TAG to VALUE.

     The TAG is either an attribute number, or one of the following:
     'Tag_CPU_raw_name', 'Tag_CPU_name', 'Tag_CPU_arch',
     'Tag_CPU_arch_profile', 'Tag_ARM_ISA_use', 'Tag_THUMB_ISA_use',
     'Tag_FP_arch', 'Tag_WMMX_arch', 'Tag_Advanced_SIMD_arch',
     'Tag_PCS_config', 'Tag_ABI_PCS_R9_use', 'Tag_ABI_PCS_RW_data',
     'Tag_ABI_PCS_RO_data', 'Tag_ABI_PCS_GOT_use',
     'Tag_ABI_PCS_wchar_t', 'Tag_ABI_FP_rounding',
     'Tag_ABI_FP_denormal', 'Tag_ABI_FP_exceptions',
     'Tag_ABI_FP_user_exceptions', 'Tag_ABI_FP_number_model',
     'Tag_ABI_align_needed', 'Tag_ABI_align_preserved',
     'Tag_ABI_enum_size', 'Tag_ABI_HardFP_use', 'Tag_ABI_VFP_args',
     'Tag_ABI_WMMX_args', 'Tag_ABI_optimization_goals',
     'Tag_ABI_FP_optimization_goals', 'Tag_compatibility',
     'Tag_CPU_unaligned_access', 'Tag_FP_HP_extension',
     'Tag_ABI_FP_16bit_format', 'Tag_MPextension_use', 'Tag_DIV_use',
     'Tag_nodefaults', 'Tag_also_compatible_with', 'Tag_conformance',
     'Tag_T2EE_use', 'Tag_Virtualization_use'

     The VALUE is either a 'number', '"string"', or 'number, "string"'
     depending on the tag.

     Note - the following legacy values are also accepted by TAG:
     'Tag_VFP_arch', 'Tag_ABI_align8_needed',
     'Tag_ABI_align8_preserved', 'Tag_VFP_HP_extension',

'.even'
     This directive aligns to an even-numbered address.

'.extend EXPRESSION [, EXPRESSION]*'
'.ldouble EXPRESSION [, EXPRESSION]*'
     These directives write 12byte long double floating-point values to
     the output section.  These are not compatible with current ARM
     processors or ABIs.

'.fnend'
     Marks the end of a function with an unwind table entry.  The unwind
     index table entry is created when this directive is processed.

     If no personality routine has been specified then standard
     personality routine 0 or 1 will be used, depending on the number of
     unwind opcodes required.

'.fnstart'
     Marks the start of a function with an unwind table entry.

'.force_thumb'
     This directive forces the selection of Thumb instructions, even if
     the target processor does not support those instructions

'.fpu NAME'
     Select the floating-point unit to assemble for.  Valid values for
     NAME are the same as for the '-mfpu' commandline option.

'.handlerdata'
     Marks the end of the current function, and the start of the
     exception table entry for that function.  Anything between this
     directive and the '.fnend' directive will be added to the exception
     table entry.

     Must be preceded by a '.personality' or '.personalityindex'
     directive.

'.inst OPCODE [ , ... ]'
'.inst.n OPCODE [ , ... ]'
'.inst.w OPCODE [ , ... ]'
     Generates the instruction corresponding to the numerical value
     OPCODE.  '.inst.n' and '.inst.w' allow the Thumb instruction size
     to be specified explicitly, overriding the normal encoding rules.

'.ldouble EXPRESSION [, EXPRESSION]*'
     See '.extend'.

'.ltorg'
     This directive causes the current contents of the literal pool to
     be dumped into the current section (which is assumed to be the
     .text section) at the current location (aligned to a word
     boundary).  'GAS' maintains a separate literal pool for each
     section and each sub-section.  The '.ltorg' directive will only
     affect the literal pool of the current section and sub-section.  At
     the end of assembly all remaining, un-empty literal pools will
     automatically be dumped.

     Note - older versions of 'GAS' would dump the current literal pool
     any time a section change occurred.  This is no longer done, since
     it prevents accurate control of the placement of literal pools.

'.movsp REG [, #OFFSET]'
     Tell the unwinder that REG contains an offset from the current
     stack pointer.  If OFFSET is not specified then it is assumed to be
     zero.

'.object_arch NAME'
     Override the architecture recorded in the EABI object attribute
     section.  Valid values for NAME are the same as for the '.arch'
     directive.  Typically this is useful when code uses runtime
     detection of CPU features.

'.packed EXPRESSION [, EXPRESSION]*'
     This directive writes 12-byte packed floating-point values to the
     output section.  These are not compatible with current ARM
     processors or ABIs.

'.pad #COUNT'
     Generate unwinder annotations for a stack adjustment of COUNT
     bytes.  A positive value indicates the function prologue allocated
     stack space by decrementing the stack pointer.

'.personality NAME'
     Sets the personality routine for the current function to NAME.

'.personalityindex INDEX'
     Sets the personality routine for the current function to the EABI
     standard routine number INDEX

'.pool'
     This is a synonym for .ltorg.

'NAME .req REGISTER NAME'
     This creates an alias for REGISTER NAME called NAME.  For example:

                  foo .req r0

'.save REGLIST'
     Generate unwinder annotations to restore the registers in REGLIST.
     The format of REGLIST is the same as the corresponding
     store-multiple instruction.

     _core registers_
            .save {r4, r5, r6, lr}
            stmfd sp!, {r4, r5, r6, lr}
     _FPA registers_
            .save f4, 2
            sfmfd f4, 2, [sp]!
     _VFP registers_
            .save {d8, d9, d10}
            fstmdx sp!, {d8, d9, d10}
     _iWMMXt registers_
            .save {wr10, wr11}
            wstrd wr11, [sp, #-8]!
            wstrd wr10, [sp, #-8]!
          or
            .save wr11
            wstrd wr11, [sp, #-8]!
            .save wr10
            wstrd wr10, [sp, #-8]!

'.setfp FPREG, SPREG [, #OFFSET]'
     Make all unwinder annotations relative to a frame pointer.  Without
     this the unwinder will use offsets from the stack pointer.

     The syntax of this directive is the same as the 'add' or 'mov'
     instruction used to set the frame pointer.  SPREG must be either
     'sp' or mentioned in a previous '.movsp' directive.

          .movsp ip
          mov ip, sp
          ...
          .setfp fp, ip, #4
          add fp, ip, #4

'.secrel32 EXPRESSION [, EXPRESSION]*'
     This directive emits relocations that evaluate to the
     section-relative offset of each expression's symbol.  This
     directive is only supported for PE targets.

'.syntax [unified | divided]'
     This directive sets the Instruction Set Syntax as described in the
     *note ARM-Instruction-Set:: section.

'.thumb'
     This performs the same action as .CODE 16.

'.thumb_func'
     This directive specifies that the following symbol is the name of a
     Thumb encoded function.  This information is necessary in order to
     allow the assembler and linker to generate correct code for
     interworking between Arm and Thumb instructions and should be used
     even if interworking is not going to be performed.  The presence of
     this directive also implies '.thumb'

     This directive is not necessary when generating EABI objects.  On
     these targets the encoding is implicit when generating Thumb code.

'.thumb_set'
     This performs the equivalent of a '.set' directive in that it
     creates a symbol which is an alias for another symbol (possibly not
     yet defined).  This directive also has the added property in that
     it marks the aliased symbol as being a thumb function entry point,
     in the same way that the '.thumb_func' directive does.

'.tlsdescseq TLS-VARIABLE'
     This directive is used to annotate parts of an inlined TLS
     descriptor trampoline.  Normally the trampoline is provided by the
     linker, and this directive is not needed.

'.unreq ALIAS-NAME'
     This undefines a register alias which was previously defined using
     the 'req', 'dn' or 'qn' directives.  For example:

                  foo .req r0
                  .unreq foo

     An error occurs if the name is undefined.  Note - this pseudo op
     can be used to delete builtin in register name aliases (eg 'r0').
     This should only be done if it is really necessary.

'.unwind_raw OFFSET, BYTE1, ...'
     Insert one of more arbitrary unwind opcode bytes, which are known
     to adjust the stack pointer by OFFSET bytes.

     For example '.unwind_raw 4, 0xb1, 0x01' is equivalent to '.save
     {r0}'

'.vsave VFP-REGLIST'
     Generate unwinder annotations to restore the VFP registers in
     VFP-REGLIST using FLDMD. Also works for VFPv3 registers that are to
     be restored using VLDM. The format of VFP-REGLIST is the same as
     the corresponding store-multiple instruction.

     _VFP registers_
            .vsave {d8, d9, d10}
            fstmdd sp!, {d8, d9, d10}
     _VFPv3 registers_
            .vsave {d15, d16, d17}
            vstm sp!, {d15, d16, d17}

     Since FLDMX and FSTMX are now deprecated, this directive should be
     used in favour of '.save' for saving VFP registers for ARMv6 and
     above.

==============================================================================
File: as.info,  Node: |ARM_Opcodes|,  Next: |ARM_Mapping_Symbols|,  Prev: |ARM_Directives|,  Up: |ARM_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *ARM_Opcodes*

9.4.5 Opcodes
-------------

'as' implements all the standard ARM opcodes.  It also implements
several pseudo opcodes, including several synthetic load instructions.

'NOP'
            nop

     This pseudo op will always evaluate to a legal ARM instruction that
     does nothing.  Currently it will evaluate to MOV r0, r0.

'LDR'
            ldr <register> , = <expression>

     If expression evaluates to a numeric constant then a MOV or MVN
     instruction will be used in place of the LDR instruction, if the
     constant can be generated by either of these instructions.
     Otherwise the constant will be placed into the nearest literal pool
     (if it not already there) and a PC relative LDR instruction will be
     generated.

'ADR'
            adr <register> <label>

     This instruction will load the address of LABEL into the indicated
     register.  The instruction will evaluate to a PC relative ADD or
     SUB instruction depending upon where the label is located.  If the
     label is out of range, or if it is not defined in the same file
     (and section) as the ADR instruction, then an error will be
     generated.  This instruction will not make use of the literal pool.

     If LABEL is a thumb function symbol, and thumb interworking has
     been enabled via the '-mthumb-interwork' option then the bottom bit
     of the value stored into REGISTER will be set.  This allows the
     following sequence to work as expected:

            adr     r0, thumb_function
            blx     r0

'ADRL'
            adrl <register> <label>

     This instruction will load the address of LABEL into the indicated
     register.  The instruction will evaluate to one or two PC relative
     ADD or SUB instructions depending upon where the label is located.
     If a second instruction is not needed a NOP instruction will be
     generated in its place, so that this instruction is always 8 bytes
     long.

     If the label is out of range, or if it is not defined in the same
     file (and section) as the ADRL instruction, then an error will be
     generated.  This instruction will not make use of the literal pool.

     If LABEL is a thumb function symbol, and thumb interworking has
     been enabled via the '-mthumb-interwork' option then the bottom bit
     of the value stored into REGISTER will be set.

   For information on the ARM or Thumb instruction sets, see 'ARM
Software Development Toolkit Reference Manual', Advanced RISC Machines
Ltd.

==============================================================================
File: as.info,  Node: |ARM_Mapping_Symbols|,  Next: |ARM_Unwinding_Tutorial|,  Prev: |ARM_Opcodes|,  Up: |ARM_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *ARM_Mapping_Symbols*

9.4.6 Mapping Symbols
---------------------

The ARM ELF specification requires that special symbols be inserted into
object files to mark certain features:

'$a'
     At the start of a region of code containing ARM instructions.

'$t'
     At the start of a region of code containing THUMB instructions.

'$d'
     At the start of a region of data.

   The assembler will automatically insert these symbols for you - there
is no need to code them yourself.  Support for tagging symbols ($b, $f,
$p and $m) which is also mentioned in the current ARM ELF specification
is not implemented.  This is because they have been dropped from the new
EABI and so tools cannot rely upon their presence.

==============================================================================
File: as.info,  Node: |ARM_Unwinding_Tutorial|,  Prev: |ARM_Mapping_Symbols|,  Up: |ARM_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *ARM_Unwinding_Tutorial*

9.4.7 Unwinding
---------------

The ABI for the ARM Architecture specifies a standard format for
exception unwind information.  This information is used when an
exception is thrown to determine where control should be transferred.
In particular, the unwind information is used to determine which
function called the function that threw the exception, and which
function called that one, and so forth.  This information is also used
to restore the values of callee-saved registers in the function catching
the exception.

   If you are writing functions in assembly code, and those functions
call other functions that throw exceptions, you must use assembly pseudo
ops to ensure that appropriate exception unwind information is
generated.  Otherwise, if one of the functions called by your assembly
code throws an exception, the run-time library will be unable to unwind
the stack through your assembly code and your program will not behave
correctly.

   To illustrate the use of these pseudo ops, we will examine the code
that G++ generates for the following C++ input:

void callee (int *);

int
caller ()
{
  int i;
  callee (&i);
  return i;
}

   This example does not show how to throw or catch an exception from
assembly code.  That is a much more complex operation and should always
be done in a high-level language, such as C++, that directly supports
exceptions.

   The code generated by one particular version of G++ when compiling
the example above is:

_Z6callerv:
	.fnstart
.LFB2:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	stmfd	sp!, {fp, lr}
	.save {fp, lr}
.LCFI0:
	.setfp fp, sp, #4
	add	fp, sp, #4
.LCFI1:
	.pad #8
	sub	sp, sp, #8
.LCFI2:
	sub	r3, fp, #8
	mov	r0, r3
	bl	_Z6calleePi
	ldr	r3, [fp, #-8]
	mov	r0, r3
	sub	sp, fp, #4
	ldmfd	sp!, {fp, lr}
	bx	lr
.LFE2:
	.fnend

   Of course, the sequence of instructions varies based on the options
you pass to GCC and on the version of GCC in use.  The exact
instructions are not important since we are focusing on the pseudo ops
that are used to generate unwind information.

   An important assumption made by the unwinder is that the stack frame
does not change during the body of the function.  In particular, since
we assume that the assembly code does not itself throw an exception, the
only point where an exception can be thrown is from a call, such as the
'bl' instruction above.  At each call site, the same saved registers
(including 'lr', which indicates the return address) must be located in
the same locations relative to the frame pointer.

   The '.fnstart' (*note .fnstart pseudo op: arm_fnstart.) pseudo op
appears immediately before the first instruction of the function while
the '.fnend' (*note .fnend pseudo op: arm_fnend.) pseudo op appears
immediately after the last instruction of the function.  These pseudo
ops specify the range of the function.

   Only the order of the other pseudos ops (e.g., '.setfp' or '.pad')
matters; their exact locations are irrelevant.  In the example above,
the compiler emits the pseudo ops with particular instructions.  That
makes it easier to understand the code, but it is not required for
correctness.  It would work just as well to emit all of the pseudo ops
other than '.fnend' in the same order, but immediately after '.fnstart'.

   The '.save' (*note .save pseudo op: arm_save.) pseudo op indicates
registers that have been saved to the stack so that they can be restored
before the function returns.  The argument to the '.save' pseudo op is a
list of registers to save.  If a register is "callee-saved" (as
specified by the ABI) and is modified by the function you are writing,
then your code must save the value before it is modified and restore the
original value before the function returns.  If an exception is thrown,
the run-time library restores the values of these registers from their
locations on the stack before returning control to the exception
handler.  (Of course, if an exception is not thrown, the function that
contains the '.save' pseudo op restores these registers in the function
epilogue, as is done with the 'ldmfd' instruction above.)

   You do not have to save callee-saved registers at the very beginning
of the function and you do not need to use the '.save' pseudo op
immediately following the point at which the registers are saved.
However, if you modify a callee-saved register, you must save it on the
stack before modifying it and before calling any functions which might
throw an exception.  And, you must use the '.save' pseudo op to indicate
that you have done so.

   The '.pad' (*note .pad: arm_pad.) pseudo op indicates a modification
of the stack pointer that does not save any registers.  The argument is
the number of bytes (in decimal) that are subtracted from the stack
pointer.  (On ARM CPUs, the stack grows downwards, so subtracting from
the stack pointer increases the size of the stack.)

   The '.setfp' (*note .setfp pseudo op: arm_setfp.) pseudo op indicates
the register that contains the frame pointer.  The first argument is the
register that is set, which is typically 'fp'.  The second argument
indicates the register from which the frame pointer takes its value.
The third argument, if present, is the value (in decimal) added to the
register specified by the second argument to compute the value of the
frame pointer.  You should not modify the frame pointer in the body of
the function.

   If you do not use a frame pointer, then you should not use the
'.setfp' pseudo op.  If you do not use a frame pointer, then you should
avoid modifying the stack pointer outside of the function prologue.
Otherwise, the run-time library will be unable to find saved registers
when it is unwinding the stack.

   The pseudo ops described above are sufficient for writing assembly
code that calls functions which may throw exceptions.  If you need to
know more about the object-file format used to represent unwind
information, you may consult the 'Exception Handling ABI for the ARM
Architecture' available from <http://infocenter.arm.com>.

==============================================================================
File: as.info,  Node: |AVR_Dependent|,  Next: |Blackfin_Dependent|,  Prev: |ARM_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *AVR_Dependent*

9.5 AVR Dependent Features
--------------------------

MENU

* |AVR_Options|::              Options
* |AVR_Syntax|::               Syntax
* |AVR_Opcodes|::              Opcodes
* |AVR_Pseudo_Instructions|::  Pseudo Instructions

==============================================================================
File: as.info,  Node: |AVR_Options|,  Next: |AVR_Syntax|,  Up: |AVR_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *AVR_Options*

9.5.1 Options
-------------

'-mmcu=MCU'
     Specify ATMEL AVR instruction set or MCU type.

     Instruction set avr1 is for the minimal AVR core, not supported by
     the C compiler, only for assembler programs (MCU types: at90s1200,
     attiny11, attiny12, attiny15, attiny28).

     Instruction set avr2 (default) is for the classic AVR core with up
     to 8K program memory space (MCU types: at90s2313, at90s2323,
     at90s2333, at90s2343, attiny22, attiny26, at90s4414, at90s4433,
     at90s4434, at90s8515, at90c8534, at90s8535).

     Instruction set avr25 is for the classic AVR core with up to 8K
     program memory space plus the MOVW instruction (MCU types:
     attiny13, attiny13a, attiny2313, attiny2313a, attiny24, attiny24a,
     attiny4313, attiny44, attiny44a, attiny84, attiny84a, attiny25,
     attiny45, attiny85, attiny261, attiny261a, attiny461, attiny461a,
     attiny861, attiny861a, attiny87, attiny43u, attiny48, attiny88,
     attiny828, at86rf401, ata6289, ata5272).

     Instruction set avr3 is for the classic AVR core with up to 128K
     program memory space (MCU types: at43usb355, at76c711).

     Instruction set avr31 is for the classic AVR core with exactly 128K
     program memory space (MCU types: atmega103, at43usb320).

     Instruction set avr35 is for classic AVR core plus MOVW, CALL, and
     JMP instructions (MCU types: attiny167, attiny1634, at90usb82,
     at90usb162, atmega8u2, atmega16u2, atmega32u2, ata5505).

     Instruction set avr4 is for the enhanced AVR core with up to 8K
     program memory space (MCU types: atmega48, atmega48a, atmega48pa,
     atmega48p, atmega8, atmega8a, atmega88, atmega88a, atmega88p,
     atmega88pa, atmega8515, atmega8535, atmega8hva, at90pwm1, at90pwm2,
     at90pwm2b, at90pwm3, at90pwm3b, at90pwm81, ata6285, ata6286).

     Instruction set avr5 is for the enhanced AVR core with up to 128K
     program memory space (MCU types: at90pwm161, atmega16, atmega16a,
     atmega161, atmega162, atmega163, atmega164a, atmega164p,
     atmega164pa, atmega165, atmega165a, atmega165p, atmega165pa,
     atmega168, atmega168a, atmega168p, atmega168pa, atmega169,
     atmega169a, atmega169p, atmega169pa, atmega32, atmega323,
     atmega324a, atmega324p, atmega324pa, atmega325, atmega325a,
     atmega32, atmega32a, atmega323, atmega324a, atmega324p,
     atmega324pa, atmega325, atmega325a, atmega325p, atmega325p,
     atmega325pa, atmega3250, atmega3250a, atmega3250p, atmega3250pa,
     atmega328, atmega328p, atmega329, atmega329a, atmega329p,
     atmega329pa, atmega3290a, atmega3290p, atmega3290pa, atmega406,
     atmega64, atmega64a, atmega64rfr2, atmega644rfr2, atmega640,
     atmega644, atmega644a, atmega644p, atmega644pa, atmega645,
     atmega645a, atmega645p, atmega6450, atmega6450a, atmega6450p,
     atmega649, atmega649a, atmega649p, atmega6490, atmega6490a,
     atmega6490p, atmega16hva, atmega16hva2, atmega16hvb,
     atmega16hvbrevb, atmega32hvb, atmega32hvbrevb, atmega64hve,
     at90can32, at90can64, at90pwm161, at90pwm216, at90pwm316,
     atmega32c1, atmega64c1, atmega16m1, atmega32m1, atmega64m1,
     atmega16u4, atmega32u4, atmega32u6, at90usb646, at90usb647, at94k,
     at90scr100, ata5790, ata5795).

     Instruction set avr51 is for the enhanced AVR core with exactly
     128K program memory space (MCU types: atmega128, atmega128a,
     atmega1280, atmega1281, atmega1284, atmega1284p, atmega128rfa1,
     atmega128rfr2, atmega1284rfr2, at90can128, at90usb1286,
     at90usb1287, m3000).

     Instruction set avr6 is for the enhanced AVR core with a 3-byte PC
     (MCU types: atmega2560, atmega2561, atmega256rfr2, atmega2564rfr2).

     Instruction set avrxmega2 is for the XMEGA AVR core with 8K to 64K
     program memory space and less than 64K data space (MCU types:
     atxmega16a4, atxmega16a4u, atxmega16c4, atxmega16d4, atxmega16x1,
     atxmega32a4, atxmega32a4u, atxmega32c4, atxmega32d4, atxmega16e5,
     atxmega8e5, atxmega32e5, atxmega32x1).

     Instruction set avrxmega3 is for the XMEGA AVR core with up to 64K
     of combined program memory and RAM, and with program memory visible
     in the RAM address space (MCU types: attiny212, attiny214,
     attiny412, attiny414, attiny416, attiny417, attiny814, attiny816,
     attiny817, attiny1614, attiny1616, attiny1617, attiny3214,
     attiny3216, attiny3217).

     Instruction set avrxmega4 is for the XMEGA AVR core with up to 64K
     program memory space and less than 64K data space (MCU types:
     atxmega64a3, atxmega64a3u, atxmega64a4u, atxmega64b1, atxmega64b3,
     atxmega64c3, atxmega64d3, atxmega64d4).

     Instruction set avrxmega5 is for the XMEGA AVR core with up to 64K
     program memory space and greater than 64K data space (MCU types:
     atxmega64a1, atxmega64a1u).

     Instruction set avrxmega6 is for the XMEGA AVR core with larger
     than 64K program memory space and less than 64K data space (MCU
     types: atxmega128a3, atxmega128a3u, atxmega128c3, atxmega128d3,
     atxmega128d4, atxmega192a3, atxmega192a3u, atxmega128b1,
     atxmega128b3, atxmega192c3, atxmega192d3, atxmega256a3,
     atxmega256a3u, atxmega256a3b, atxmega256a3bu, atxmega256c3,
     atxmega256d3, atxmega384c3, atxmega256d3).

     Instruction set avrxmega7 is for the XMEGA AVR core with larger
     than 64K program memory space and greater than 64K data space (MCU
     types: atxmega128a1, atxmega128a1u, atxmega128a4u).

     Instruction set avrtiny is for the ATtiny4/5/9/10/20/40
     microcontrollers.

'-mall-opcodes'
     Accept all AVR opcodes, even if not supported by '-mmcu'.

'-mno-skip-bug'
     This option disable warnings for skipping two-word instructions.

'-mno-wrap'
     This option reject 'rjmp/rcall' instructions with 8K wrap-around.

'-mrmw'
     Accept Read-Modify-Write ('XCH,LAC,LAS,LAT') instructions.

'-mlink-relax'
     Enable support for link-time relaxation.  This is now on by default
     and this flag no longer has any effect.

'-mno-link-relax'
     Disable support for link-time relaxation.  The assembler will
     resolve relocations when it can, and may be able to better compress
     some debug information.

'-mgcc-isr'
     Enable the '__gcc_isr' pseudo instruction.

==============================================================================
File: as.info,  Node: |AVR_Syntax|,  Next: |AVR_Opcodes|,  Prev: |AVR_Options|,  Up: |AVR_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *AVR_Syntax*

9.5.2 Syntax
------------

MENU

* |AVR_Chars|::                Special Characters
* |AVR_Regs|::                 Register Names
* |AVR_Modifiers|::            Relocatable Expression Modifiers

==============================================================================
File: as.info,  Node: |AVR_Chars|,  Next: |AVR_Regs|,  Up: |AVR_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *AVR_Chars*

9.5.2.1 Special Characters
--------------------------

The presence of a ';' anywhere on a line indicates the start of a
comment that extends to the end of that line.

   If a '#' appears as the first character of a line, the whole line is
treated as a comment, but in this case the line can also be a logical
line number directive (*note Comments::) or a preprocessor control
command (*note Preprocessing::).

   The '$' character can be used instead of a newline to separate
statements.

==============================================================================
File: as.info,  Node: |AVR_Regs|,  Next: |AVR_Modifiers|,  Prev: |AVR_Chars|,  Up: |AVR_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *AVR_Regs*

9.5.2.2 Register Names
----------------------

The AVR has 32 x 8-bit general purpose working registers 'r0', 'r1', ...
'r31'.  Six of the 32 registers can be used as three 16-bit indirect
address register pointers for Data Space addressing.  One of the these
address pointers can also be used as an address pointer for look up
tables in Flash program memory.  These added function registers are the
16-bit 'X', 'Y' and 'Z' - registers.

     X = r26:r27
     Y = r28:r29
     Z = r30:r31

==============================================================================
File: as.info,  Node: |AVR_Modifiers|,  Prev: |AVR_Regs|,  Up: |AVR_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *AVR_Modifiers*

9.5.2.3 Relocatable Expression Modifiers
----------------------------------------

The assembler supports several modifiers when using relocatable
addresses in AVR instruction operands.  The general syntax is the
following:

     modifier(relocatable-expression)

'lo8'

     This modifier allows you to use bits 0 through 7 of an address
     expression as 8 bit relocatable expression.

'hi8'

     This modifier allows you to use bits 7 through 15 of an address
     expression as 8 bit relocatable expression.  This is useful with,
     for example, the AVR 'ldi' instruction and 'lo8' modifier.

     For example

          ldi r26, lo8(sym+10)
          ldi r27, hi8(sym+10)

'hh8'

     This modifier allows you to use bits 16 through 23 of an address
     expression as 8 bit relocatable expression.  Also, can be useful
     for loading 32 bit constants.

'hlo8'

     Synonym of 'hh8'.

'hhi8'

     This modifier allows you to use bits 24 through 31 of an expression
     as 8 bit expression.  This is useful with, for example, the AVR
     'ldi' instruction and 'lo8', 'hi8', 'hlo8', 'hhi8', modifier.

     For example

          ldi r26, lo8(285774925)
          ldi r27, hi8(285774925)
          ldi r28, hlo8(285774925)
          ldi r29, hhi8(285774925)
          ; r29,r28,r27,r26 = 285774925

'pm_lo8'

     This modifier allows you to use bits 0 through 7 of an address
     expression as 8 bit relocatable expression.  This modifier useful
     for addressing data or code from Flash/Program memory.  The using
     of 'pm_lo8' similar to 'lo8'.

'pm_hi8'

     This modifier allows you to use bits 8 through 15 of an address
     expression as 8 bit relocatable expression.  This modifier useful
     for addressing data or code from Flash/Program memory.

'pm_hh8'

     This modifier allows you to use bits 15 through 23 of an address
     expression as 8 bit relocatable expression.  This modifier useful
     for addressing data or code from Flash/Program memory.

==============================================================================
File: as.info,  Node: |AVR_Opcodes|,  Next: |AVR_Pseudo_Instructions|,  Prev: |AVR_Syntax|,  Up: |AVR_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *AVR_Opcodes*

9.5.3 Opcodes
-------------

For detailed information on the AVR machine instruction set, see
<www.atmel.com/products/AVR>.

   'as' implements all the standard AVR opcodes.  The following table
summarizes the AVR opcodes, and their arguments.

     Legend:
        r   any register
        d   'ldi' register (r16-r31)
        v   'movw' even register (r0, r2, ..., r28, r30)
        a   'fmul' register (r16-r23)
        w   'adiw' register (r24,r26,r28,r30)
        e   pointer registers (X,Y,Z)
        b   base pointer register and displacement ([YZ]+disp)
        z   Z pointer register (for [e]lpm Rd,Z[+])
        M   immediate value from 0 to 255
        n   immediate value from 0 to 255 ( n = ~M ). Relocation impossible
        s   immediate value from 0 to 7
        P   Port address value from 0 to 63. (in, out)
        p   Port address value from 0 to 31. (cbi, sbi, sbic, sbis)
        K   immediate value from 0 to 63 (used in 'adiw', 'sbiw')
        i   immediate value
        l   signed pc relative offset from -64 to 63
        L   signed pc relative offset from -2048 to 2047
        h   absolute code address (call, jmp)
        S   immediate value from 0 to 7 (S = s << 4)
        ?   use this opcode entry if no parameters, else use next opcode entry

     1001010010001000   clc
     1001010011011000   clh
     1001010011111000   cli
     1001010010101000   cln
     1001010011001000   cls
     1001010011101000   clt
     1001010010111000   clv
     1001010010011000   clz
     1001010000001000   sec
     1001010001011000   seh
     1001010001111000   sei
     1001010000101000   sen
     1001010001001000   ses
     1001010001101000   set
     1001010000111000   sev
     1001010000011000   sez
     100101001SSS1000   bclr    S
     100101000SSS1000   bset    S
     1001010100001001   icall
     1001010000001001   ijmp
     1001010111001000   lpm     ?
     1001000ddddd010+   lpm     r,z
     1001010111011000   elpm    ?
     1001000ddddd011+   elpm    r,z
     0000000000000000   nop
     1001010100001000   ret
     1001010100011000   reti
     1001010110001000   sleep
     1001010110011000   break
     1001010110101000   wdr
     1001010111101000   spm
     000111rdddddrrrr   adc     r,r
     000011rdddddrrrr   add     r,r
     001000rdddddrrrr   and     r,r
     000101rdddddrrrr   cp      r,r
     000001rdddddrrrr   cpc     r,r
     000100rdddddrrrr   cpse    r,r
     001001rdddddrrrr   eor     r,r
     001011rdddddrrrr   mov     r,r
     100111rdddddrrrr   mul     r,r
     001010rdddddrrrr   or      r,r
     000010rdddddrrrr   sbc     r,r
     000110rdddddrrrr   sub     r,r
     001001rdddddrrrr   clr     r
     000011rdddddrrrr   lsl     r
     000111rdddddrrrr   rol     r
     001000rdddddrrrr   tst     r
     0111KKKKddddKKKK   andi    d,M
     0111KKKKddddKKKK   cbr     d,n
     1110KKKKddddKKKK   ldi     d,M
     11101111dddd1111   ser     d
     0110KKKKddddKKKK   ori     d,M
     0110KKKKddddKKKK   sbr     d,M
     0011KKKKddddKKKK   cpi     d,M
     0100KKKKddddKKKK   sbci    d,M
     0101KKKKddddKKKK   subi    d,M
     1111110rrrrr0sss   sbrc    r,s
     1111111rrrrr0sss   sbrs    r,s
     1111100ddddd0sss   bld     r,s
     1111101ddddd0sss   bst     r,s
     10110PPdddddPPPP   in      r,P
     10111PPrrrrrPPPP   out     P,r
     10010110KKddKKKK   adiw    w,K
     10010111KKddKKKK   sbiw    w,K
     10011000pppppsss   cbi     p,s
     10011010pppppsss   sbi     p,s
     10011001pppppsss   sbic    p,s
     10011011pppppsss   sbis    p,s
     111101lllllll000   brcc    l
     111100lllllll000   brcs    l
     111100lllllll001   breq    l
     111101lllllll100   brge    l
     111101lllllll101   brhc    l
     111100lllllll101   brhs    l
     111101lllllll111   brid    l
     111100lllllll111   brie    l
     111100lllllll000   brlo    l
     111100lllllll100   brlt    l
     111100lllllll010   brmi    l
     111101lllllll001   brne    l
     111101lllllll010   brpl    l
     111101lllllll000   brsh    l
     111101lllllll110   brtc    l
     111100lllllll110   brts    l
     111101lllllll011   brvc    l
     111100lllllll011   brvs    l
     111101lllllllsss   brbc    s,l
     111100lllllllsss   brbs    s,l
     1101LLLLLLLLLLLL   rcall   L
     1100LLLLLLLLLLLL   rjmp    L
     1001010hhhhh111h   call    h
     1001010hhhhh110h   jmp     h
     1001010rrrrr0101   asr     r
     1001010rrrrr0000   com     r
     1001010rrrrr1010   dec     r
     1001010rrrrr0011   inc     r
     1001010rrrrr0110   lsr     r
     1001010rrrrr0001   neg     r
     1001000rrrrr1111   pop     r
     1001001rrrrr1111   push    r
     1001010rrrrr0111   ror     r
     1001010rrrrr0010   swap    r
     00000001ddddrrrr   movw    v,v
     00000010ddddrrrr   muls    d,d
     000000110ddd0rrr   mulsu   a,a
     000000110ddd1rrr   fmul    a,a
     000000111ddd0rrr   fmuls   a,a
     000000111ddd1rrr   fmulsu  a,a
     1001001ddddd0000   sts     i,r
     1001000ddddd0000   lds     r,i
     10o0oo0dddddbooo   ldd     r,b
     100!000dddddee-+   ld      r,e
     10o0oo1rrrrrbooo   std     b,r
     100!001rrrrree-+   st      e,r
     1001010100011001   eicall
     1001010000011001   eijmp

==============================================================================
File: as.info,  Node: |AVR_Pseudo_Instructions|,  Prev: |AVR_Opcodes|,  Up: |AVR_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *AVR_Pseudo_Instructions*

9.5.4 Pseudo Instructions
-------------------------

The only available pseudo-instruction '__gcc_isr' can be activated by
option '-mgcc-isr'.

'__gcc_isr 1'
     Emit code chunk to be used in avr-gcc ISR prologue.  It will expand
     to at most six 1-word instructions, all optional: push of
     'tmp_reg', push of 'SREG', push and clear of 'zero_reg', push of
     REG.

'__gcc_isr 2'
     Emit code chunk to be used in an avr-gcc ISR epilogue.  It will
     expand to at most five 1-word instructions, all optional: pop of
     REG, pop of 'zero_reg', pop of 'SREG', pop of 'tmp_reg'.

'__gcc_isr 0, REG'
     Finish avr-gcc ISR function.  Scan code since the last prologue for
     usage of: 'SREG', 'tmp_reg', 'zero_reg'.  Prologue chunk and
     epilogue chunks will be replaced by appropriate code to save /
     restore 'SREG', 'tmp_reg', 'zero_reg' and REG.

   Example input:

     __vector1:
         __gcc_isr 1
         lds r24, var
         inc r24
         sts var, r24
         __gcc_isr 2
         reti
         __gcc_isr 0, r24

   Example output:

     00000000 <__vector1>:
        0:   8f 93           push    r24
        2:   8f b7           in      r24, 0x3f
        4:   8f 93           push    r24
        6:   80 91 60 00     lds     r24, 0x0060     ; 0x800060 <var>
        a:   83 95           inc     r24
        c:   80 93 60 00     sts     0x0060, r24     ; 0x800060 <var>
       10:   8f 91           pop     r24
       12:   8f bf           out     0x3f, r24
       14:   8f 91           pop     r24
       16:   18 95           reti

==============================================================================
File: as.info,  Node: |Blackfin_Dependent|,  Next: |CR16_Dependent|,  Prev: |AVR_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *Blackfin_Dependent*

9.6 Blackfin Dependent Features
-------------------------------

MENU

* |Blackfin_Options|::		Blackfin Options
* |Blackfin_Syntax|::		Blackfin Syntax
* |Blackfin_Directives|::		Blackfin Directives

==============================================================================
File: as.info,  Node: |Blackfin_Options|,  Next: |Blackfin_Syntax|,  Up: |Blackfin_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Blackfin_Options*

9.6.1 Options
-------------

'-mcpu=PROCESSOR[-SIREVISION]'
     This option specifies the target processor.  The optional
     SIREVISION is not used in assembler.  It's here such that GCC can
     easily pass down its '-mcpu=' option.  The assembler will issue an
     error message if an attempt is made to assemble an instruction
     which will not execute on the target processor.  The following
     processor names are recognized: 'bf504', 'bf506', 'bf512', 'bf514',
     'bf516', 'bf518', 'bf522', 'bf523', 'bf524', 'bf525', 'bf526',
     'bf527', 'bf531', 'bf532', 'bf533', 'bf534', 'bf535' (not
     implemented yet), 'bf536', 'bf537', 'bf538', 'bf539', 'bf542',
     'bf542m', 'bf544', 'bf544m', 'bf547', 'bf547m', 'bf548', 'bf548m',
     'bf549', 'bf549m', 'bf561', and 'bf592'.

'-mfdpic'
     Assemble for the FDPIC ABI.

'-mno-fdpic'
'-mnopic'
     Disable -mfdpic.

==============================================================================
File: as.info,  Node: |Blackfin_Syntax|,  Next: |Blackfin_Directives|,  Prev: |Blackfin_Options|,  Up: |Blackfin_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *Blackfin_Syntax*

9.6.2 Syntax
------------

'Special Characters'
     Assembler input is free format and may appear anywhere on the line.
     One instruction may extend across multiple lines or more than one
     instruction may appear on the same line.  White space (space, tab,
     comments or newline) may appear anywhere between tokens.  A token
     must not have embedded spaces.  Tokens include numbers, register
     names, keywords, user identifiers, and also some multicharacter
     special symbols like "+=", "/*" or "||".

     Comments are introduced by the '#' character and extend to the end
     of the current line.  If the '#' appears as the first character of
     a line, the whole line is treated as a comment, but in this case
     the line can also be a logical line number directive (*note
     Comments::) or a preprocessor control command (*note
     Preprocessing::).

'Instruction Delimiting'
     A semicolon must terminate every instruction.  Sometimes a complete
     instruction will consist of more than one operation.  There are two
     cases where this occurs.  The first is when two general operations
     are combined.  Normally a comma separates the different parts, as
     in

          a0= r3.h * r2.l, a1 = r3.l * r2.h ;

     The second case occurs when a general instruction is combined with
     one or two memory references for joint issue.  The latter portions
     are set off by a "||" token.

          a0 = r3.h * r2.l || r1 = [p3++] || r4 = [i2++];

     Multiple instructions can occur on the same line.  Each must be
     terminated by a semicolon character.

'Register Names'

     The assembler treats register names and instruction keywords in a
     case insensitive manner.  User identifiers are case sensitive.
     Thus, R3.l, R3.L, r3.l and r3.L are all equivalent input to the
     assembler.

     Register names are reserved and may not be used as program
     identifiers.

     Some operations (such as "Move Register") require a register pair.
     Register pairs are always data registers and are denoted using a
     colon, eg., R3:2.  The larger number must be written firsts.  Note
     that the hardware only supports odd-even pairs, eg., R7:6, R5:4,
     R3:2, and R1:0.

     Some instructions (such as -SP (Push Multiple)) require a group of
     adjacent registers.  Adjacent registers are denoted in the syntax
     by the range enclosed in parentheses and separated by a colon, eg.,
     (R7:3).  Again, the larger number appears first.

     Portions of a particular register may be individually specified.
     This is written with a dot (".")  following the register name and
     then a letter denoting the desired portion.  For 32-bit registers,
     ".H" denotes the most significant ("High") portion.  ".L" denotes
     the least-significant portion.  The subdivisions of the 40-bit
     registers are described later.

'Accumulators'
     The set of 40-bit registers A1 and A0 that normally contain data
     that is being manipulated.  Each accumulator can be accessed in
     four ways.

     'one 40-bit register'
          The register will be referred to as A1 or A0.
     'one 32-bit register'
          The registers are designated as A1.W or A0.W.
     'two 16-bit registers'
          The registers are designated as A1.H, A1.L, A0.H or A0.L.
     'one 8-bit register'
          The registers are designated as A1.X or A0.X for the bits that
          extend beyond bit 31.

'Data Registers'
     The set of 32-bit registers (R0, R1, R2, R3, R4, R5, R6 and R7)
     that normally contain data for manipulation.  These are abbreviated
     as D-register or Dreg.  Data registers can be accessed as 32-bit
     registers or as two independent 16-bit registers.  The least
     significant 16 bits of each register is called the "low" half and
     is designated with ".L" following the register name.  The most
     significant 16 bits are called the "high" half and is designated
     with ".H" following the name.

             R7.L, r2.h, r4.L, R0.H

'Pointer Registers'
     The set of 32-bit registers (P0, P1, P2, P3, P4, P5, SP and FP)
     that normally contain byte addresses of data structures.  These are
     abbreviated as P-register or Preg.

          p2, p5, fp, sp

'Stack Pointer SP'
     The stack pointer contains the 32-bit address of the last occupied
     byte location in the stack.  The stack grows by decrementing the
     stack pointer.

'Frame Pointer FP'
     The frame pointer contains the 32-bit address of the previous frame
     pointer in the stack.  It is located at the top of a frame.

'Loop Top'
     LT0 and LT1.  These registers contain the 32-bit address of the top
     of a zero overhead loop.

'Loop Count'
     LC0 and LC1.  These registers contain the 32-bit counter of the
     zero overhead loop executions.

'Loop Bottom'
     LB0 and LB1.  These registers contain the 32-bit address of the
     bottom of a zero overhead loop.

'Index Registers'
     The set of 32-bit registers (I0, I1, I2, I3) that normally contain
     byte addresses of data structures.  Abbreviated I-register or Ireg.

'Modify Registers'
     The set of 32-bit registers (M0, M1, M2, M3) that normally contain
     offset values that are added and subtracted to one of the index
     registers.  Abbreviated as Mreg.

'Length Registers'
     The set of 32-bit registers (L0, L1, L2, L3) that normally contain
     the length in bytes of the circular buffer.  Abbreviated as Lreg.
     Clear the Lreg to disable circular addressing for the corresponding
     Ireg.

'Base Registers'
     The set of 32-bit registers (B0, B1, B2, B3) that normally contain
     the base address in bytes of the circular buffer.  Abbreviated as
     Breg.

'Floating Point'
     The Blackfin family has no hardware floating point but the .float
     directive generates ieee floating point numbers for use with
     software floating point libraries.

'Blackfin Opcodes'
     For detailed information on the Blackfin machine instruction set,
     see the Blackfin(r) Processor Instruction Set Reference.

==============================================================================
File: as.info,  Node: |Blackfin_Directives|,  Prev: |Blackfin_Syntax|,  Up: |Blackfin_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *Blackfin_Directives*

9.6.3 Directives
----------------

The following directives are provided for compatibility with the VDSP
assembler.

'.byte2'
     Initializes a two byte data object.

     This maps to the '.short' directive.
'.byte4'
     Initializes a four byte data object.

     This maps to the '.int' directive.
'.db'
     Initializes a single byte data object.

     This directive is a synonym for '.byte'.
'.dw'
     Initializes a two byte data object.

     This directive is a synonym for '.byte2'.
'.dd'
     Initializes a four byte data object.

     This directive is a synonym for '.byte4'.
'.var'
     Define and initialize a 32 bit data object.

==============================================================================
File: as.info,  Node: |CR16_Dependent|,  Next: |CRIS_Dependent|,  Prev: |Blackfin_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *CR16_Dependent*

9.7 CR16 Dependent Features
---------------------------

MENU

* |CR16_Operand_Qualifiers|::     CR16 Machine Operand Qualifiers
* |CR16_Syntax|::                 Syntax for the CR16

==============================================================================
File: as.info,  Node: |CR16_Operand_Qualifiers|,  Next: |CR16_Syntax|,  Up: |CR16_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *CR16_Operand_Qualifiers*

9.7.1 CR16 Operand Qualifiers
-----------------------------

The National Semiconductor CR16 target of 'as' has a few machine
dependent operand qualifiers.

   Operand expression type qualifier is an optional field in the
instruction operand, to determines the type of the expression field of
an operand.  The '@' is required.  CR16 architecture uses one of the
following expression qualifiers:

's'
     - 'Specifies expression operand type as small'
'm'
     - 'Specifies expression operand type as medium'
'l'
     - 'Specifies expression operand type as large'
'c'
     - 'Specifies the CR16 Assembler generates a relocation entry for
     the operand, where pc has implied bit, the expression is adjusted
     accordingly. The linker uses the relocation entry to update the
     operand address at link time.'
'got/GOT'
     - 'Specifies the CR16 Assembler generates a relocation entry for
     the operand, offset from Global Offset Table. The linker uses this
     relocation entry to update the operand address at link time'
'cgot/cGOT'
     - 'Specifies the CompactRISC Assembler generates a relocation entry
     for the operand, where pc has implied bit, the expression is
     adjusted accordingly. The linker uses the relocation entry to
     update the operand address at link time.'

   CR16 target operand qualifiers and its size (in bits):

'Immediate Operand: s'
     4 bits.

'Immediate Operand: m'
     16 bits, for movb and movw instructions.

'Immediate Operand: m'
     20 bits, movd instructions.

'Immediate Operand: l'
     32 bits.

'Absolute Operand: s'
     Illegal specifier for this operand.

'Absolute Operand: m'
     20 bits, movd instructions.

'Displacement Operand: s'
     8 bits.

'Displacement Operand: m'
     16 bits.

'Displacement Operand: l'
     24 bits.

   For example:
     1   movw $_myfun@c,r1

         This loads the address of _myfun, shifted right by 1, into r1.

     2   movd $_myfun@c,(r2,r1)

         This loads the address of _myfun, shifted right by 1, into register-pair r2-r1.

     3   _myfun_ptr:
         .long _myfun@c
         loadd _myfun_ptr, (r1,r0)
         jal (r1,r0)

         This .long directive, the address of _myfunc, shifted right by 1 at link time.

     4   loadd  _data1@GOT(r12), (r1,r0)

         This loads the address of _data1, into global offset table (ie GOT) and its offset value from GOT loads into register-pair r2-r1.

     5   loadd  _myfunc@cGOT(r12), (r1,r0)

         This loads the address of _myfun, shifted right by 1, into global offset table (ie GOT) and its offset value from GOT loads into register-pair r1-r0.

==============================================================================
File: as.info,  Node: |CR16_Syntax|,  Prev: |CR16_Operand_Qualifiers|,  Up: |CR16_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *CR16_Syntax*

9.7.2 CR16 Syntax
-----------------

MENU

* |CR16_Chars|::                Special Characters

==============================================================================
File: as.info,  Node: |CR16_Chars|,  Up: |CR16_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *CR16_Chars*

9.7.2.1 Special Characters
--------------------------

The presence of a '#' on a line indicates the start of a comment that
extends to the end of the current line.  If the '#' appears as the first
character of a line, the whole line is treated as a comment, but in this
case the line can also be a logical line number directive (*note
Comments::) or a preprocessor control command (*note Preprocessing::).

   The ';' character can be used to separate statements on the same
line.

==============================================================================
File: as.info,  Node: |CRIS_Dependent|,  Next: |D10V_Dependent|,  Prev: |CR16_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *CRIS_Dependent*

9.8 CRIS Dependent Features
---------------------------

MENU

* |CRIS_Opts|::              Command-line Options
* |CRIS_Expand|::            Instruction expansion
* |CRIS_Symbols|::           Symbols
* |CRIS_Syntax|::            Syntax

==============================================================================
File: as.info,  Node: |CRIS_Opts|,  Next: |CRIS_Expand|,  Up: |CRIS_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *CRIS_Opts*

9.8.1 Command-line Options
--------------------------

The CRIS version of 'as' has these machine-dependent command-line
options.

   The format of the generated object files can be either ELF or a.out,
specified by the command-line options '--emulation=crisaout' and
'--emulation=criself'.  The default is ELF (criself), unless 'as' has
been configured specifically for a.out by using the configuration name
'cris-axis-aout'.

   There are two different link-incompatible ELF object file variants
for CRIS, for use in environments where symbols are expected to be
prefixed by a leading '_' character and for environments without such a
symbol prefix.  The variant used for GNU/Linux port has no symbol
prefix.  Which variant to produce is specified by either of the options
'--underscore' and '--no-underscore'.  The default is '--underscore'.
Since symbols in CRIS a.out objects are expected to have a '_' prefix,
specifying '--no-underscore' when generating a.out objects is an error.
Besides the object format difference, the effect of this option is to
parse register names differently (*note crisnous::).  The
'--no-underscore' option makes a '$' register prefix mandatory.

   The option '--pic' must be passed to 'as' in order to recognize the
symbol syntax used for ELF (SVR4 PIC) position-independent-code (*note
crispic::).  This will also affect expansion of instructions.  The
expansion with '--pic' will use PC-relative rather than (slightly
faster) absolute addresses in those expansions.  This option is only
valid when generating ELF format object files.

   The option '--march=ARCHITECTURE' specifies the recognized
instruction set and recognized register names.  It also controls the
architecture type of the object file.  Valid values for ARCHITECTURE
are:

'v0_v10'
     All instructions and register names for any architecture variant in
     the set v0...v10 are recognized.  This is the default if the target
     is configured as cris-*.

'v10'
     Only instructions and register names for CRIS v10 (as found in
     ETRAX 100 LX) are recognized.  This is the default if the target is
     configured as crisv10-*.

'v32'
     Only instructions and register names for CRIS v32 (code name
     Guinness) are recognized.  This is the default if the target is
     configured as crisv32-*.  This value implies '--no-mul-bug-abort'.
     (A subsequent '--mul-bug-abort' will turn it back on.)

'common_v10_v32'
     Only instructions with register names and addressing modes with
     opcodes common to the v10 and v32 are recognized.

   When '-N' is specified, 'as' will emit a warning when a 16-bit branch
instruction is expanded into a 32-bit multiple-instruction construct
(*note CRIS-Expand::).

   Some versions of the CRIS v10, for example in the Etrax 100 LX,
contain a bug that causes destabilizing memory accesses when a multiply
instruction is executed with certain values in the first operand just
before a cache-miss.  When the '--mul-bug-abort' command line option is
active (the default value), 'as' will refuse to assemble a file
containing a multiply instruction at a dangerous offset, one that could
be the last on a cache-line, or is in a section with insufficient
alignment.  This placement checking does not catch any case where the
multiply instruction is dangerously placed because it is located in a
delay-slot.  The '--mul-bug-abort' command line option turns off the
checking.

==============================================================================
File: as.info,  Node: |CRIS_Expand|,  Next: |CRIS_Symbols|,  Prev: |CRIS_Opts|,  Up: |CRIS_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *CRIS_Expand*

9.8.2 Instruction expansion
---------------------------

'as' will silently choose an instruction that fits the operand size for
'[register+constant]' operands.  For example, the offset '127' in
'move.d [r3+127],r4' fits in an instruction using a signed-byte offset.
Similarly, 'move.d [r2+32767],r1' will generate an instruction using a
16-bit offset.  For symbolic expressions and constants that do not fit
in 16 bits including the sign bit, a 32-bit offset is generated.

   For branches, 'as' will expand from a 16-bit branch instruction into
a sequence of instructions that can reach a full 32-bit address.  Since
this does not correspond to a single instruction, such expansions can
optionally be warned about.  *Note CRIS-Opts::.

   If the operand is found to fit the range, a 'lapc' mnemonic will
translate to a 'lapcq' instruction.  Use 'lapc.d' to force the 32-bit
'lapc' instruction.

   Similarly, the 'addo' mnemonic will translate to the shortest fitting
instruction of 'addoq', 'addo.w' and 'addo.d', when used with a operand
that is a constant known at assembly time.

==============================================================================
File: as.info,  Node: |CRIS_Symbols|,  Next: |CRIS_Syntax|,  Prev: |CRIS_Expand|,  Up: |CRIS_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *CRIS_Symbols*

9.8.3 Symbols
-------------

Some symbols are defined by the assembler.  They're intended to be used
in conditional assembly, for example:
      .if ..asm.arch.cris.v32
      CODE FOR CRIS V32
      .elseif ..asm.arch.cris.common_v10_v32
      CODE COMMON TO CRIS V32 AND CRIS V10
      .elseif ..asm.arch.cris.v10 | ..asm.arch.cris.any_v0_v10
      CODE FOR V10
      .else
      .error "Code needs to be added here."
      .endif

   These symbols are defined in the assembler, reflecting command-line
options, either when specified or the default.  They are always defined,
to 0 or 1.

'..asm.arch.cris.any_v0_v10'
     This symbol is non-zero when '--march=v0_v10' is specified or the
     default.

'..asm.arch.cris.common_v10_v32'
     Set according to the option '--march=common_v10_v32'.

'..asm.arch.cris.v10'
     Reflects the option '--march=v10'.

'..asm.arch.cris.v32'
     Corresponds to '--march=v10'.

   Speaking of symbols, when a symbol is used in code, it can have a
suffix modifying its value for use in position-independent code.  *Note
CRIS-Pic::.

==============================================================================
File: as.info,  Node: |CRIS_Syntax|,  Prev: |CRIS_Symbols|,  Up: |CRIS_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *CRIS_Syntax*

9.8.4 Syntax
------------

There are different aspects of the CRIS assembly syntax.

MENU

* |CRIS_Chars|::		        Special Characters
* |CRIS_Pic|::			Position-Independent Code Symbols
* |CRIS_Regs|::			Register Names
* |CRIS_Pseudos|::		Assembler Directives

==============================================================================
File: as.info,  Node: |CRIS_Chars|,  Next: |CRIS_Pic|,  Up: |CRIS_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *CRIS_Chars*

9.8.4.1 Special Characters
--------------------------

The character '#' is a line comment character.  It starts a comment if
and only if it is placed at the beginning of a line.

   A ';' character starts a comment anywhere on the line, causing all
characters up to the end of the line to be ignored.

   A '@' character is handled as a line separator equivalent to a
logical new-line character (except in a comment), so separate
instructions can be specified on a single line.

==============================================================================
File: as.info,  Node: |CRIS_Pic|,  Next: |CRIS_Regs|,  Prev: |CRIS_Chars|,  Up: |CRIS_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *CRIS_Pic*

9.8.4.2 Symbols in position-independent code
--------------------------------------------

When generating position-independent code (SVR4 PIC) for use in
cris-axis-linux-gnu or crisv32-axis-linux-gnu shared libraries, symbol
suffixes are used to specify what kind of run-time symbol lookup will be
used, expressed in the object as different _relocation types_.  Usually,
all absolute symbol values must be located in a table, the _global
offset table_, leaving the code position-independent; independent of
values of global symbols and independent of the address of the code.
The suffix modifies the value of the symbol, into for example an index
into the global offset table where the real symbol value is entered, or
a PC-relative value, or a value relative to the start of the global
offset table.  All symbol suffixes start with the character ':' (omitted
in the list below).  Every symbol use in code or a read-only section
must therefore have a PIC suffix to enable a useful shared library to be
created.  Usually, these constructs must not be used with an additive
constant offset as is usually allowed, i.e. no 4 as in 'symbol + 4' is
allowed.  This restriction is checked at link-time, not at
assembly-time.

'GOT'

     Attaching this suffix to a symbol in an instruction causes the
     symbol to be entered into the global offset table.  The value is a
     32-bit index for that symbol into the global offset table.  The
     name of the corresponding relocation is 'R_CRIS_32_GOT'.  Example:
     'move.d [$r0+extsym:GOT],$r9'

'GOT16'

     Same as for 'GOT', but the value is a 16-bit index into the global
     offset table.  The corresponding relocation is 'R_CRIS_16_GOT'.
     Example: 'move.d [$r0+asymbol:GOT16],$r10'

'PLT'

     This suffix is used for function symbols.  It causes a _procedure
     linkage table_, an array of code stubs, to be created at the time
     the shared object is created or linked against, together with a
     global offset table entry.  The value is a pc-relative offset to
     the corresponding stub code in the procedure linkage table.  This
     arrangement causes the run-time symbol resolver to be called to
     look up and set the value of the symbol the first time the function
     is called (at latest; depending environment variables).  It is only
     safe to leave the symbol unresolved this way if all references are
     function calls.  The name of the relocation is
     'R_CRIS_32_PLT_PCREL'.  Example: 'add.d fnname:PLT,$pc'

'PLTG'

     Like PLT, but the value is relative to the beginning of the global
     offset table.  The relocation is 'R_CRIS_32_PLT_GOTREL'.  Example:
     'move.d fnname:PLTG,$r3'

'GOTPLT'

     Similar to 'PLT', but the value of the symbol is a 32-bit index
     into the global offset table.  This is somewhat of a mix between
     the effect of the 'GOT' and the 'PLT' suffix; the difference to
     'GOT' is that there will be a procedure linkage table entry
     created, and that the symbol is assumed to be a function entry and
     will be resolved by the run-time resolver as with 'PLT'.  The
     relocation is 'R_CRIS_32_GOTPLT'.  Example: 'jsr
     [$r0+fnname:GOTPLT]'

'GOTPLT16'

     A variant of 'GOTPLT' giving a 16-bit value.  Its relocation name
     is 'R_CRIS_16_GOTPLT'.  Example: 'jsr [$r0+fnname:GOTPLT16]'

'GOTOFF'

     This suffix must only be attached to a local symbol, but may be
     used in an expression adding an offset.  The value is the address
     of the symbol relative to the start of the global offset table.
     The relocation name is 'R_CRIS_32_GOTREL'.  Example: 'move.d
     [$r0+localsym:GOTOFF],r3'

==============================================================================
File: as.info,  Node: |CRIS_Regs|,  Next: |CRIS_Pseudos|,  Prev: |CRIS_Pic|,  Up: |CRIS_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *CRIS_Regs*

9.8.4.3 Register names
----------------------

A '$' character may always prefix a general or special register name in
an instruction operand but is mandatory when the option
'--no-underscore' is specified or when the '.syntax register_prefix'
directive is in effect (*note crisnous::).  Register names are
case-insensitive.

==============================================================================
File: as.info,  Node: |CRIS_Pseudos|,  Prev: |CRIS_Regs|,  Up: |CRIS_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *CRIS_Pseudos*

9.8.4.4 Assembler Directives
----------------------------

There are a few CRIS-specific pseudo-directives in addition to the
generic ones.  *Note Pseudo Ops::.  Constants emitted by
pseudo-directives are in little-endian order for CRIS. There is no
support for floating-point-specific directives for CRIS.

'.dword EXPRESSIONS'

     The '.dword' directive is a synonym for '.int', expecting zero or
     more EXPRESSIONS, separated by commas.  For each expression, a
     32-bit little-endian constant is emitted.

'.syntax ARGUMENT'
     The '.syntax' directive takes as ARGUMENT one of the following
     case-sensitive choices.

     'no_register_prefix'

          The '.syntax no_register_prefix' directive makes a '$'
          character prefix on all registers optional.  It overrides a
          previous setting, including the corresponding effect of the
          option '--no-underscore'.  If this directive is used when
          ordinary symbols do not have a '_' character prefix, care must
          be taken to avoid ambiguities whether an operand is a register
          or a symbol; using symbols with names the same as general or
          special registers then invoke undefined behavior.

     'register_prefix'

          This directive makes a '$' character prefix on all registers
          mandatory.  It overrides a previous setting, including the
          corresponding effect of the option '--underscore'.

     'leading_underscore'

          This is an assertion directive, emitting an error if the
          '--no-underscore' option is in effect.

     'no_leading_underscore'

          This is the opposite of the '.syntax leading_underscore'
          directive and emits an error if the option '--underscore' is
          in effect.

'.arch ARGUMENT'
     This is an assertion directive, giving an error if the specified
     ARGUMENT is not the same as the specified or default value for the
     '--march=ARCHITECTURE' option (*note march-option::).

==============================================================================
File: as.info,  Node: |D10V_Dependent|,  Next: |D30V_Dependent|,  Prev: |CRIS_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *D10V_Dependent*

9.9 D10V Dependent Features
---------------------------

MENU

* |D10V_Opts|::                   D10V Options
* |D10V_Syntax|::                 Syntax
* |D10V_Float|::                  Floating Point
* |D10V_Opcodes|::                Opcodes

==============================================================================
File: as.info,  Node: |D10V_Opts|,  Next: |D10V_Syntax|,  Up: |D10V_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *D10V_Opts*

9.9.1 D10V Options
------------------

The Mitsubishi D10V version of 'as' has a few machine dependent options.

'-O'
     The D10V can often execute two sub-instructions in parallel.  When
     this option is used, 'as' will attempt to optimize its output by
     detecting when instructions can be executed in parallel.
'--nowarnswap'
     To optimize execution performance, 'as' will sometimes swap the
     order of instructions.  Normally this generates a warning.  When
     this option is used, no warning will be generated when instructions
     are swapped.
'--gstabs-packing'
'--no-gstabs-packing'
     'as' packs adjacent short instructions into a single packed
     instruction.  '--no-gstabs-packing' turns instruction packing off
     if '--gstabs' is specified as well; '--gstabs-packing' (the
     default) turns instruction packing on even when '--gstabs' is
     specified.

==============================================================================
File: as.info,  Node: |D10V_Syntax|,  Next: |D10V_Float|,  Prev: |D10V_Opts|,  Up: |D10V_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *D10V_Syntax*

9.9.2 Syntax
------------

The D10V syntax is based on the syntax in Mitsubishi's D10V architecture
manual.  The differences are detailed below.

MENU

* |D10V_Size|::                 Size Modifiers
* |D10V_Subs|::                 Sub-Instructions
* |D10V_Chars|::                Special Characters
* |D10V_Regs|::                 Register Names
* |D10V_Addressing|::           Addressing Modes
* |D10V_Word|::                 @WORD Modifier

==============================================================================
File: as.info,  Node: |D10V_Size|,  Next: |D10V_Subs|,  Up: |D10V_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *D10V_Size*

9.9.2.1 Size Modifiers
----------------------

The D10V version of 'as' uses the instruction names in the D10V
Architecture Manual.  However, the names in the manual are sometimes
ambiguous.  There are instruction names that can assemble to a short or
long form opcode.  How does the assembler pick the correct form?  'as'
will always pick the smallest form if it can.  When dealing with a
symbol that is not defined yet when a line is being assembled, it will
always use the long form.  If you need to force the assembler to use
either the short or long form of the instruction, you can append either
'.s' (short) or '.l' (long) to it.  For example, if you are writing an
assembly program and you want to do a branch to a symbol that is defined
later in your program, you can write 'bra.s foo'.  Objdump and GDB will
always append '.s' or '.l' to instructions which have both short and
long forms.

==============================================================================
File: as.info,  Node: |D10V_Subs|,  Next: |D10V_Chars|,  Prev: |D10V_Size|,  Up: |D10V_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *D10V_Subs*

9.9.2.2 Sub-Instructions
------------------------

The D10V assembler takes as input a series of instructions, either
one-per-line, or in the special two-per-line format described in the
next section.  Some of these instructions will be short-form or
sub-instructions.  These sub-instructions can be packed into a single
instruction.  The assembler will do this automatically.  It will also
detect when it should not pack instructions.  For example, when a label
is defined, the next instruction will never be packaged with the
previous one.  Whenever a branch and link instruction is called, it will
not be packaged with the next instruction so the return address will be
valid.  Nops are automatically inserted when necessary.

   If you do not want the assembler automatically making these
decisions, you can control the packaging and execution type (parallel or
sequential) with the special execution symbols described in the next
section.

==============================================================================
File: as.info,  Node: |D10V_Chars|,  Next: |D10V_Regs|,  Prev: |D10V_Subs|,  Up: |D10V_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *D10V_Chars*

9.9.2.3 Special Characters
--------------------------

A semicolon (';') can be used anywhere on a line to start a comment that
extends to the end of the line.

   If a '#' appears as the first character of a line, the whole line is
treated as a comment, but in this case the line could also be a logical
line number directive (*note Comments::) or a preprocessor control
command (*note Preprocessing::).

   Sub-instructions may be executed in order, in reverse-order, or in
parallel.  Instructions listed in the standard one-per-line format will
be executed sequentially.  To specify the executing order, use the
following symbols:
'->'
     Sequential with instruction on the left first.
'<-'
     Sequential with instruction on the right first.
'||'
     Parallel
   The D10V syntax allows either one instruction per line, one
instruction per line with the execution symbol, or two instructions per
line.  For example
'abs a1 -> abs r0'
     Execute these sequentially.  The instruction on the right is in the
     right container and is executed second.
'abs r0 <- abs a1'
     Execute these reverse-sequentially.  The instruction on the right
     is in the right container, and is executed first.
'ld2w r2,@r8+ || mac a0,r0,r7'
     Execute these in parallel.
'ld2w r2,@r8+ ||'
'mac a0,r0,r7'
     Two-line format.  Execute these in parallel.
'ld2w r2,@r8+'
'mac a0,r0,r7'
     Two-line format.  Execute these sequentially.  Assembler will put
     them in the proper containers.
'ld2w r2,@r8+ ->'
'mac a0,r0,r7'
     Two-line format.  Execute these sequentially.  Same as above but
     second instruction will always go into right container.
   Since '$' has no special meaning, you may use it in symbol names.

==============================================================================
File: as.info,  Node: |D10V_Regs|,  Next: |D10V_Addressing|,  Prev: |D10V_Chars|,  Up: |D10V_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *D10V_Regs*

9.9.2.4 Register Names
----------------------

You can use the predefined symbols 'r0' through 'r15' to refer to the
D10V registers.  You can also use 'sp' as an alias for 'r15'.  The
accumulators are 'a0' and 'a1'.  There are special register-pair names
that may optionally be used in opcodes that require even-numbered
registers.  Register names are not case sensitive.

   Register Pairs
'r0-r1'
'r2-r3'
'r4-r5'
'r6-r7'
'r8-r9'
'r10-r11'
'r12-r13'
'r14-r15'

   The D10V also has predefined symbols for these control registers and
status bits:
'psw'
     Processor Status Word
'bpsw'
     Backup Processor Status Word
'pc'
     Program Counter
'bpc'
     Backup Program Counter
'rpt_c'
     Repeat Count
'rpt_s'
     Repeat Start address
'rpt_e'
     Repeat End address
'mod_s'
     Modulo Start address
'mod_e'
     Modulo End address
'iba'
     Instruction Break Address
'f0'
     Flag 0
'f1'
     Flag 1
'c'
     Carry flag

==============================================================================
File: as.info,  Node: |D10V_Addressing|,  Next: |D10V_Word|,  Prev: |D10V_Regs|,  Up: |D10V_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *D10V_Addressing*

9.9.2.5 Addressing Modes
------------------------

'as' understands the following addressing modes for the D10V. 'RN' in
the following refers to any of the numbered registers, but _not_ the
control registers.
'RN'
     Register direct
'@RN'
     Register indirect
'@RN+'
     Register indirect with post-increment
'@RN-'
     Register indirect with post-decrement
'@-SP'
     Register indirect with pre-decrement
'@(DISP, RN)'
     Register indirect with displacement
'ADDR'
     PC relative address (for branch or rep).
'#IMM'
     Immediate data (the '#' is optional and ignored)

==============================================================================
File: as.info,  Node: |D10V_Word|,  Prev: |D10V_Addressing|,  Up: |D10V_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *D10V_Word*

9.9.2.6 @WORD Modifier
----------------------

Any symbol followed by '@word' will be replaced by the symbol's value
shifted right by 2.  This is used in situations such as loading a
register with the address of a function (or any other code fragment).
For example, if you want to load a register with the location of the
function 'main' then jump to that function, you could do it as follows:
     ldi     r2, main@word
     jmp     r2

==============================================================================
File: as.info,  Node: |D10V_Float|,  Next: |D10V_Opcodes|,  Prev: |D10V_Syntax|,  Up: |D10V_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *D10V_Float*

9.9.3 Floating Point
--------------------

The D10V has no hardware floating point, but the '.float' and '.double'
directives generates IEEE floating-point numbers for compatibility with
other development tools.

==============================================================================
File: as.info,  Node: |D10V_Opcodes|,  Prev: |D10V_Float|,  Up: |D10V_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *D10V_Opcodes*

9.9.4 Opcodes
-------------

For detailed information on the D10V machine instruction set, see 'D10V
Architecture: A VLIW Microprocessor for Multimedia Applications'
(Mitsubishi Electric Corp.).  'as' implements all the standard D10V
opcodes.  The only changes are those described in the section on size
modifiers

==============================================================================
File: as.info,  Node: |D30V_Dependent|,  Next: |Epiphany_Dependent|,  Prev: |D10V_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *D30V_Dependent*

9.10 D30V Dependent Features
----------------------------

MENU

* |D30V_Opts|::                   D30V Options
* |D30V_Syntax|::                 Syntax
* |D30V_Float|::                  Floating Point
* |D30V_Opcodes|::                Opcodes

==============================================================================
File: as.info,  Node: |D30V_Opts|,  Next: |D30V_Syntax|,  Up: |D30V_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *D30V_Opts*

9.10.1 D30V Options
-------------------

The Mitsubishi D30V version of 'as' has a few machine dependent options.

'-O'
     The D30V can often execute two sub-instructions in parallel.  When
     this option is used, 'as' will attempt to optimize its output by
     detecting when instructions can be executed in parallel.

'-n'
     When this option is used, 'as' will issue a warning every time it
     adds a nop instruction.

'-N'
     When this option is used, 'as' will issue a warning if it needs to
     insert a nop after a 32-bit multiply before a load or 16-bit
     multiply instruction.

==============================================================================
File: as.info,  Node: |D30V_Syntax|,  Next: |D30V_Float|,  Prev: |D30V_Opts|,  Up: |D30V_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *D30V_Syntax*

9.10.2 Syntax
-------------

The D30V syntax is based on the syntax in Mitsubishi's D30V architecture
manual.  The differences are detailed below.

MENU

* |D30V_Size|::                 Size Modifiers
* |D30V_Subs|::                 Sub-Instructions
* |D30V_Chars|::                Special Characters
* |D30V_Guarded|::              Guarded Execution
* |D30V_Regs|::                 Register Names
* |D30V_Addressing|::           Addressing Modes

==============================================================================
File: as.info,  Node: |D30V_Size|,  Next: |D30V_Subs|,  Up: |D30V_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *D30V_Size*

9.10.2.1 Size Modifiers
-----------------------

The D30V version of 'as' uses the instruction names in the D30V
Architecture Manual.  However, the names in the manual are sometimes
ambiguous.  There are instruction names that can assemble to a short or
long form opcode.  How does the assembler pick the correct form?  'as'
will always pick the smallest form if it can.  When dealing with a
symbol that is not defined yet when a line is being assembled, it will
always use the long form.  If you need to force the assembler to use
either the short or long form of the instruction, you can append either
'.s' (short) or '.l' (long) to it.  For example, if you are writing an
assembly program and you want to do a branch to a symbol that is defined
later in your program, you can write 'bra.s foo'.  Objdump and GDB will
always append '.s' or '.l' to instructions which have both short and
long forms.

==============================================================================
File: as.info,  Node: |D30V_Subs|,  Next: |D30V_Chars|,  Prev: |D30V_Size|,  Up: |D30V_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *D30V_Subs*

9.10.2.2 Sub-Instructions
-------------------------

The D30V assembler takes as input a series of instructions, either
one-per-line, or in the special two-per-line format described in the
next section.  Some of these instructions will be short-form or
sub-instructions.  These sub-instructions can be packed into a single
instruction.  The assembler will do this automatically.  It will also
detect when it should not pack instructions.  For example, when a label
is defined, the next instruction will never be packaged with the
previous one.  Whenever a branch and link instruction is called, it will
not be packaged with the next instruction so the return address will be
valid.  Nops are automatically inserted when necessary.

   If you do not want the assembler automatically making these
decisions, you can control the packaging and execution type (parallel or
sequential) with the special execution symbols described in the next
section.

==============================================================================
File: as.info,  Node: |D30V_Chars|,  Next: |D30V_Guarded|,  Prev: |D30V_Subs|,  Up: |D30V_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *D30V_Chars*

9.10.2.3 Special Characters
---------------------------

A semicolon (';') can be used anywhere on a line to start a comment that
extends to the end of the line.

   If a '#' appears as the first character of a line, the whole line is
treated as a comment, but in this case the line could also be a logical
line number directive (*note Comments::) or a preprocessor control
command (*note Preprocessing::).

   Sub-instructions may be executed in order, in reverse-order, or in
parallel.  Instructions listed in the standard one-per-line format will
be executed sequentially unless you use the '-O' option.

   To specify the executing order, use the following symbols:
'->'
     Sequential with instruction on the left first.

'<-'
     Sequential with instruction on the right first.

'||'
     Parallel

   The D30V syntax allows either one instruction per line, one
instruction per line with the execution symbol, or two instructions per
line.  For example
'abs r2,r3 -> abs r4,r5'
     Execute these sequentially.  The instruction on the right is in the
     right container and is executed second.

'abs r2,r3 <- abs r4,r5'
     Execute these reverse-sequentially.  The instruction on the right
     is in the right container, and is executed first.

'abs r2,r3 || abs r4,r5'
     Execute these in parallel.

'ldw r2,@(r3,r4) ||'
'mulx r6,r8,r9'
     Two-line format.  Execute these in parallel.

'mulx a0,r8,r9'
'stw r2,@(r3,r4)'
     Two-line format.  Execute these sequentially unless '-O' option is
     used.  If the '-O' option is used, the assembler will determine if
     the instructions could be done in parallel (the above two
     instructions can be done in parallel), and if so, emit them as
     parallel instructions.  The assembler will put them in the proper
     containers.  In the above example, the assembler will put the 'stw'
     instruction in left container and the 'mulx' instruction in the
     right container.

'stw r2,@(r3,r4) ->'
'mulx a0,r8,r9'
     Two-line format.  Execute the 'stw' instruction followed by the
     'mulx' instruction sequentially.  The first instruction goes in the
     left container and the second instruction goes into right
     container.  The assembler will give an error if the machine
     ordering constraints are violated.

'stw r2,@(r3,r4) <-'
'mulx a0,r8,r9'
     Same as previous example, except that the 'mulx' instruction is
     executed before the 'stw' instruction.

   Since '$' has no special meaning, you may use it in symbol names.

==============================================================================
File: as.info,  Node: |D30V_Guarded|,  Next: |D30V_Regs|,  Prev: |D30V_Chars|,  Up: |D30V_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *D30V_Guarded*

9.10.2.4 Guarded Execution
--------------------------

'as' supports the full range of guarded execution directives for each
instruction.  Just append the directive after the instruction proper.
The directives are:

'/tx'
     Execute the instruction if flag f0 is true.
'/fx'
     Execute the instruction if flag f0 is false.
'/xt'
     Execute the instruction if flag f1 is true.
'/xf'
     Execute the instruction if flag f1 is false.
'/tt'
     Execute the instruction if both flags f0 and f1 are true.
'/tf'
     Execute the instruction if flag f0 is true and flag f1 is false.

==============================================================================
File: as.info,  Node: |D30V_Regs|,  Next: |D30V_Addressing|,  Prev: |D30V_Guarded|,  Up: |D30V_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *D30V_Regs*

9.10.2.5 Register Names
-----------------------

You can use the predefined symbols 'r0' through 'r63' to refer to the
D30V registers.  You can also use 'sp' as an alias for 'r63' and 'link'
as an alias for 'r62'.  The accumulators are 'a0' and 'a1'.

   The D30V also has predefined symbols for these control registers and
status bits:
'psw'
     Processor Status Word
'bpsw'
     Backup Processor Status Word
'pc'
     Program Counter
'bpc'
     Backup Program Counter
'rpt_c'
     Repeat Count
'rpt_s'
     Repeat Start address
'rpt_e'
     Repeat End address
'mod_s'
     Modulo Start address
'mod_e'
     Modulo End address
'iba'
     Instruction Break Address
'f0'
     Flag 0
'f1'
     Flag 1
'f2'
     Flag 2
'f3'
     Flag 3
'f4'
     Flag 4
'f5'
     Flag 5
'f6'
     Flag 6
'f7'
     Flag 7
's'
     Same as flag 4 (saturation flag)
'v'
     Same as flag 5 (overflow flag)
'va'
     Same as flag 6 (sticky overflow flag)
'c'
     Same as flag 7 (carry/borrow flag)
'b'
     Same as flag 7 (carry/borrow flag)

==============================================================================
File: as.info,  Node: |D30V_Addressing|,  Prev: |D30V_Regs|,  Up: |D30V_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *D30V_Addressing*

9.10.2.6 Addressing Modes
-------------------------

'as' understands the following addressing modes for the D30V. 'RN' in
the following refers to any of the numbered registers, but _not_ the
control registers.
'RN'
     Register direct
'@RN'
     Register indirect
'@RN+'
     Register indirect with post-increment
'@RN-'
     Register indirect with post-decrement
'@-SP'
     Register indirect with pre-decrement
'@(DISP, RN)'
     Register indirect with displacement
'ADDR'
     PC relative address (for branch or rep).
'#IMM'
     Immediate data (the '#' is optional and ignored)

==============================================================================
File: as.info,  Node: |D30V_Float|,  Next: |D30V_Opcodes|,  Prev: |D30V_Syntax|,  Up: |D30V_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *D30V_Float*

9.10.3 Floating Point
---------------------

The D30V has no hardware floating point, but the '.float' and '.double'
directives generates IEEE floating-point numbers for compatibility with
other development tools.

==============================================================================
File: as.info,  Node: |D30V_Opcodes|,  Prev: |D30V_Float|,  Up: |D30V_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *D30V_Opcodes*

9.10.4 Opcodes
--------------

For detailed information on the D30V machine instruction set, see 'D30V
Architecture: A VLIW Microprocessor for Multimedia Applications'
(Mitsubishi Electric Corp.).  'as' implements all the standard D30V
opcodes.  The only changes are those described in the section on size
modifiers

==============================================================================
File: as.info,  Node: |Epiphany_Dependent|,  Next: |H8/300_Dependent|,  Prev: |D30V_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *Epiphany_Dependent*

9.11 Epiphany Dependent Features
--------------------------------

MENU

* |Epiphany_Options|::              Options
* |Epiphany_Syntax|::               Epiphany Syntax

==============================================================================
File: as.info,  Node: |Epiphany_Options|,  Next: |Epiphany_Syntax|,  Up: |Epiphany_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Epiphany_Options*

9.11.1 Options
--------------

'as' has two additional command-line options for the Epiphany
architecture.

'-mepiphany'
     Specifies that the both 32 and 16 bit instructions are allowed.
     This is the default behavior.

'-mepiphany16'
     Restricts the permitted instructions to just the 16 bit set.

==============================================================================
File: as.info,  Node: |Epiphany_Syntax|,  Prev: |Epiphany_Options|,  Up: |Epiphany_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *Epiphany_Syntax*

9.11.2 Epiphany Syntax
----------------------

MENU

* |Epiphany_Chars|::                Special Characters

==============================================================================
File: as.info,  Node: |Epiphany_Chars|,  Up: |Epiphany_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Epiphany_Chars*

9.11.2.1 Special Characters
---------------------------

The presence of a ';' on a line indicates the start of a comment that
extends to the end of the current line.

   If a '#' appears as the first character of a line then the whole line
is treated as a comment, but in this case the line could also be a
logical line number directive (*note Comments::) or a preprocessor
control command (*note Preprocessing::).

   The '`' character can be used to separate statements on the same
line.

==============================================================================
File: as.info,  Node: |H8/300_Dependent|,  Next: |HPPA_Dependent|,  Prev: |Epiphany_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *H8/300_Dependent*

9.12 H8/300 Dependent Features
------------------------------

MENU

* |H8/300_Options|::              Options
* |H8/300_Syntax|::               Syntax
* |H8/300_Floating_Point|::       Floating Point
* |H8/300_Directives|::           H8/300 Machine Directives
* |H8/300_Opcodes|::              Opcodes

==============================================================================
File: as.info,  Node: |H8/300_Options|,  Next: |H8/300_Syntax|,  Up: |H8/300_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *H8/300_Options*

9.12.1 Options
--------------

The Renesas H8/300 version of 'as' has one machine-dependent option:

'-h-tick-hex'
     Support H'00 style hex constants in addition to 0x00 style.

'-mach=NAME'
     Sets the H8300 machine variant.  The following machine names are
     recognised: 'h8300h', 'h8300hn', 'h8300s', 'h8300sn', 'h8300sx' and
     'h8300sxn'.

==============================================================================
File: as.info,  Node: |H8/300_Syntax|,  Next: |H8/300_Floating_Point|,  Prev: |H8/300_Options|,  Up: |H8/300_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *H8/300_Syntax*

9.12.2 Syntax
-------------

MENU

* |H8/300_Chars|::                Special Characters
* |H8/300_Regs|::                 Register Names
* |H8/300_Addressing|::           Addressing Modes

==============================================================================
File: as.info,  Node: |H8/300_Chars|,  Next: |H8/300_Regs|,  Up: |H8/300_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *H8/300_Chars*

9.12.2.1 Special Characters
---------------------------

';' is the line comment character.

   '$' can be used instead of a newline to separate statements.
Therefore _you may not use '$' in symbol names_ on the H8/300.

==============================================================================
File: as.info,  Node: |H8/300_Regs|,  Next: |H8/300_Addressing|,  Prev: |H8/300_Chars|,  Up: |H8/300_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *H8/300_Regs*

9.12.2.2 Register Names
-----------------------

You can use predefined symbols of the form 'rNh' and 'rNl' to refer to
the H8/300 registers as sixteen 8-bit general-purpose registers.  N is a
digit from '0' to '7'); for instance, both 'r0h' and 'r7l' are valid
register names.

   You can also use the eight predefined symbols 'rN' to refer to the
H8/300 registers as 16-bit registers (you must use this form for
addressing).

   On the H8/300H, you can also use the eight predefined symbols 'erN'
('er0' ... 'er7') to refer to the 32-bit general purpose registers.

   The two control registers are called 'pc' (program counter; a 16-bit
register, except on the H8/300H where it is 24 bits) and 'ccr'
(condition code register; an 8-bit register).  'r7' is used as the stack
pointer, and can also be called 'sp'.

==============================================================================
File: as.info,  Node: |H8/300_Addressing|,  Prev: |H8/300_Regs|,  Up: |H8/300_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *H8/300_Addressing*

9.12.2.3 Addressing Modes
-------------------------

as understands the following addressing modes for the H8/300:
'rN'
     Register direct

'@rN'
     Register indirect

'@(D, rN)'
'@(D:16, rN)'
'@(D:24, rN)'
     Register indirect: 16-bit or 24-bit displacement D from register N.
     (24-bit displacements are only meaningful on the H8/300H.)

'@rN+'
     Register indirect with post-increment

'@-rN'
     Register indirect with pre-decrement

'@AA'
'@AA:8'
'@AA:16'
'@AA:24'
     Absolute address 'aa'.  (The address size ':24' only makes sense on
     the H8/300H.)

'#XX'
'#XX:8'
'#XX:16'
'#XX:32'
     Immediate data XX.  You may specify the ':8', ':16', or ':32' for
     clarity, if you wish; but 'as' neither requires this nor uses
     it--the data size required is taken from context.

'@@AA'
'@@AA:8'
     Memory indirect.  You may specify the ':8' for clarity, if you
     wish; but 'as' neither requires this nor uses it.

==============================================================================
File: as.info,  Node: |H8/300_Floating_Point|,  Next: |H8/300_Directives|,  Prev: |H8/300_Syntax|,  Up: |H8/300_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *H8/300_Floating_Point*

9.12.3 Floating Point
---------------------

The H8/300 family has no hardware floating point, but the '.float'
directive generates IEEE floating-point numbers for compatibility with
other development tools.

==============================================================================
File: as.info,  Node: |H8/300_Directives|,  Next: |H8/300_Opcodes|,  Prev: |H8/300_Floating_Point|,  Up: |H8/300_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *H8/300_Directives*

9.12.4 H8/300 Machine Directives
--------------------------------
vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
