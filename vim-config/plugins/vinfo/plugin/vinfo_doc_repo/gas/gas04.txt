'hw0'

     This modifier is used to load bits 0-15 of the symbol's address.

'hw1'

     This modifier is used to load bits 16-31 of the symbol's address.

'hw2'

     This modifier is used to load bits 32-47 of the symbol's address.

'hw3'

     This modifier is used to load bits 48-63 of the symbol's address.

'hw0_last'

     This modifier yields the same value as 'hw0', but it also checks
     that the value does not overflow.

'hw1_last'

     This modifier yields the same value as 'hw1', but it also checks
     that the value does not overflow.

'hw2_last'

     This modifier yields the same value as 'hw2', but it also checks
     that the value does not overflow.

     A 48-bit symbolic value is constructed by using the following
     idiom:

          moveli r0, hw2_last(sym)
          shl16insli r0, r0, hw1(sym)
          shl16insli r0, r0, hw0(sym)

'hw0_got'

     This modifier is used to load bits 0-15 of the symbol's offset in
     the GOT entry corresponding to the symbol.

'hw0_last_got'

     This modifier yields the same value as 'hw0_got', but it also
     checks that the value does not overflow.

'hw1_last_got'

     This modifier is used to load bits 16-31 of the symbol's offset in
     the GOT entry corresponding to the symbol, and it also checks that
     the value does not overflow.

'plt'

     This modifier is used for function symbols.  It causes a _procedure
     linkage table_, an array of code stubs, to be created at the time
     the shared object is created or linked against, together with a
     global offset table entry.  The value is a pc-relative offset to
     the corresponding stub code in the procedure linkage table.  This
     arrangement causes the run-time symbol resolver to be called to
     look up and set the value of the symbol the first time the function
     is called (at latest; depending environment variables).  It is only
     safe to leave the symbol unresolved this way if all references are
     function calls.

'hw0_plt'

     This modifier is used to load bits 0-15 of the pc-relative address
     of a plt entry.

'hw1_plt'

     This modifier is used to load bits 16-31 of the pc-relative address
     of a plt entry.

'hw1_last_plt'

     This modifier yields the same value as 'hw1_plt', but it also
     checks that the value does not overflow.

'hw2_last_plt'

     This modifier is used to load bits 32-47 of the pc-relative address
     of a plt entry, and it also checks that the value does not
     overflow.

'hw0_tls_gd'

     This modifier is used to load bits 0-15 of the offset of the GOT
     entry of the symbol's TLS descriptor, to be used for
     general-dynamic TLS accesses.

'hw0_last_tls_gd'

     This modifier yields the same value as 'hw0_tls_gd', but it also
     checks that the value does not overflow.

'hw1_last_tls_gd'

     This modifier is used to load bits 16-31 of the offset of the GOT
     entry of the symbol's TLS descriptor, to be used for
     general-dynamic TLS accesses.  It also checks that the value does
     not overflow.

'hw0_tls_ie'

     This modifier is used to load bits 0-15 of the offset of the GOT
     entry containing the offset of the symbol's address from the TCB,
     to be used for initial-exec TLS accesses.

'hw0_last_tls_ie'

     This modifier yields the same value as 'hw0_tls_ie', but it also
     checks that the value does not overflow.

'hw1_last_tls_ie'

     This modifier is used to load bits 16-31 of the offset of the GOT
     entry containing the offset of the symbol's address from the TCB,
     to be used for initial-exec TLS accesses.  It also checks that the
     value does not overflow.

'hw0_tls_le'

     This modifier is used to load bits 0-15 of the offset of the
     symbol's address from the TCB, to be used for local-exec TLS
     accesses.

'hw0_last_tls_le'

     This modifier yields the same value as 'hw0_tls_le', but it also
     checks that the value does not overflow.

'hw1_last_tls_le'

     This modifier is used to load bits 16-31 of the offset of the
     symbol's address from the TCB, to be used for local-exec TLS
     accesses.  It also checks that the value does not overflow.

'tls_gd_call'

     This modifier is used to tag an instruction as the "call" part of a
     calling sequence for a TLS GD reference of its operand.

'tls_gd_add'

     This modifier is used to tag an instruction as the "add" part of a
     calling sequence for a TLS GD reference of its operand.

'tls_ie_load'

     This modifier is used to tag an instruction as the "load" part of a
     calling sequence for a TLS IE reference of its operand.

==============================================================================
File: as.info,  Node: |TILE_Gx_Directives|,  Prev: |TILE_Gx_Syntax|,  Up: |TILE_Gx_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *TILE_Gx_Directives*

9.44.3 TILE-Gx Directives
-------------------------

'.align EXPRESSION [, EXPRESSION]'
     This is the generic .ALIGN directive.  The first argument is the
     requested alignment in bytes.

'.allow_suspicious_bundles'
     Turns on error checking for combinations of instructions in a
     bundle that probably indicate a programming error.  This is on by
     default.

'.no_allow_suspicious_bundles'
     Turns off error checking for combinations of instructions in a
     bundle that probably indicate a programming error.

'.require_canonical_reg_names'
     Require that canonical register names be used, and emit a warning
     if the numeric names are used.  This is on by default.

'.no_require_canonical_reg_names'
     Permit the use of numeric names for registers that have canonical
     names.

==============================================================================
File: as.info,  Node: |TILEPro_Dependent|,  Next: |V850_Dependent|,  Prev: |TILE_Gx_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *TILEPro_Dependent*

9.45 TILEPro Dependent Features
-------------------------------

MENU

* |TILEPro_Options|::		TILEPro Options
* |TILEPro_Syntax|::		TILEPro Syntax
* |TILEPro_Directives|::		TILEPro Directives

==============================================================================
File: as.info,  Node: |TILEPro_Options|,  Next: |TILEPro_Syntax|,  Up: |TILEPro_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *TILEPro_Options*

9.45.1 Options
--------------

'as' has no machine-dependent command-line options for TILEPro.

==============================================================================
File: as.info,  Node: |TILEPro_Syntax|,  Next: |TILEPro_Directives|,  Prev: |TILEPro_Options|,  Up: |TILEPro_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *TILEPro_Syntax*

9.45.2 Syntax
-------------

Block comments are delimited by '/*' and '*/'.  End of line comments may
be introduced by '#'.

   Instructions consist of a leading opcode or macro name followed by
whitespace and an optional comma-separated list of operands:

     OPCODE [OPERAND, ...]

   Instructions must be separated by a newline or semicolon.

   There are two ways to write code: either write naked instructions,
which the assembler is free to combine into VLIW bundles, or specify the
VLIW bundles explicitly.

   Bundles are specified using curly braces:

     { ADD r3,r4,r5 ; ADD r7,r8,r9 ; LW r10,r11 }

   A bundle can span multiple lines.  If you want to put multiple
instructions on a line, whether in a bundle or not, you need to separate
them with semicolons as in this example.

   A bundle may contain one or more instructions, up to the limit
specified by the ISA (currently three).  If fewer instructions are
specified than the hardware supports in a bundle, the assembler inserts
'fnop' instructions automatically.

   The assembler will prefer to preserve the ordering of instructions
within the bundle, putting the first instruction in a lower-numbered
pipeline than the next one, etc.  This fact, combined with the optional
use of explicit 'fnop' or 'nop' instructions, allows precise control
over which pipeline executes each instruction.

   If the instructions cannot be bundled in the listed order, the
assembler will automatically try to find a valid pipeline assignment.
If there is no way to bundle the instructions together, the assembler
reports an error.

   The assembler does not yet auto-bundle (automatically combine
multiple instructions into one bundle), but it reserves the right to do
so in the future.  If you want to force an instruction to run by itself,
put it in a bundle explicitly with curly braces and use 'nop'
instructions (not 'fnop') to fill the remaining pipeline slots in that
bundle.

MENU

* |TILEPro_Opcodes|::              Opcode Naming Conventions.
* |TILEPro_Registers|::            Register Naming.
* |TILEPro_Modifiers|::            Symbolic Operand Modifiers.

==============================================================================
File: as.info,  Node: |TILEPro_Opcodes|,  Next: |TILEPro_Registers|,  Up: |TILEPro_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *TILEPro_Opcodes*

9.45.2.1 Opcode Names
---------------------

For a complete list of opcodes and descriptions of their semantics, see
'TILE Processor User Architecture Manual', available upon request at
www.tilera.com.

==============================================================================
File: as.info,  Node: |TILEPro_Registers|,  Next: |TILEPro_Modifiers|,  Prev: |TILEPro_Opcodes|,  Up: |TILEPro_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *TILEPro_Registers*

9.45.2.2 Register Names
-----------------------

General-purpose registers are represented by predefined symbols of the
form 'rN', where N represents a number between '0' and '63'.  However,
the following registers have canonical names that must be used instead:

'r54'
     sp

'r55'
     lr

'r56'
     sn

'r57'
     idn0

'r58'
     idn1

'r59'
     udn0

'r60'
     udn1

'r61'
     udn2

'r62'
     udn3

'r63'
     zero

   The assembler will emit a warning if a numeric name is used instead
of the canonical name.  The '.no_require_canonical_reg_names' assembler
pseudo-op turns off this warning.  '.require_canonical_reg_names' turns
it back on.

==============================================================================
File: as.info,  Node: |TILEPro_Modifiers|,  Prev: |TILEPro_Registers|,  Up: |TILEPro_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *TILEPro_Modifiers*

9.45.2.3 Symbolic Operand Modifiers
-----------------------------------

The assembler supports several modifiers when using symbol addresses in
TILEPro instruction operands.  The general syntax is the following:

     modifier(symbol)

   The following modifiers are supported:

'lo16'

     This modifier is used to load the low 16 bits of the symbol's
     address, sign-extended to a 32-bit value (sign-extension allows it
     to be range-checked against signed 16 bit immediate operands
     without complaint).

'hi16'

     This modifier is used to load the high 16 bits of the symbol's
     address, also sign-extended to a 32-bit value.

'ha16'

     'ha16(N)' is identical to 'hi16(N)', except if 'lo16(N)' is
     negative it adds one to the 'hi16(N)' value.  This way 'lo16' and
     'ha16' can be added to create any 32-bit value using 'auli'.  For
     example, here is how you move an arbitrary 32-bit address into r3:

          moveli r3, lo16(sym)
          auli r3, r3, ha16(sym)

'got'

     This modifier is used to load the offset of the GOT entry
     corresponding to the symbol.

'got_lo16'

     This modifier is used to load the sign-extended low 16 bits of the
     offset of the GOT entry corresponding to the symbol.

'got_hi16'

     This modifier is used to load the sign-extended high 16 bits of the
     offset of the GOT entry corresponding to the symbol.

'got_ha16'

     This modifier is like 'got_hi16', but it adds one if 'got_lo16' of
     the input value is negative.

'plt'

     This modifier is used for function symbols.  It causes a _procedure
     linkage table_, an array of code stubs, to be created at the time
     the shared object is created or linked against, together with a
     global offset table entry.  The value is a pc-relative offset to
     the corresponding stub code in the procedure linkage table.  This
     arrangement causes the run-time symbol resolver to be called to
     look up and set the value of the symbol the first time the function
     is called (at latest; depending environment variables).  It is only
     safe to leave the symbol unresolved this way if all references are
     function calls.

'tls_gd'

     This modifier is used to load the offset of the GOT entry of the
     symbol's TLS descriptor, to be used for general-dynamic TLS
     accesses.

'tls_gd_lo16'

     This modifier is used to load the sign-extended low 16 bits of the
     offset of the GOT entry of the symbol's TLS descriptor, to be used
     for general dynamic TLS accesses.

'tls_gd_hi16'

     This modifier is used to load the sign-extended high 16 bits of the
     offset of the GOT entry of the symbol's TLS descriptor, to be used
     for general dynamic TLS accesses.

'tls_gd_ha16'

     This modifier is like 'tls_gd_hi16', but it adds one to the value
     if 'tls_gd_lo16' of the input value is negative.

'tls_ie'

     This modifier is used to load the offset of the GOT entry
     containing the offset of the symbol's address from the TCB, to be
     used for initial-exec TLS accesses.

'tls_ie_lo16'

     This modifier is used to load the low 16 bits of the offset of the
     GOT entry containing the offset of the symbol's address from the
     TCB, to be used for initial-exec TLS accesses.

'tls_ie_hi16'

     This modifier is used to load the high 16 bits of the offset of the
     GOT entry containing the offset of the symbol's address from the
     TCB, to be used for initial-exec TLS accesses.

'tls_ie_ha16'

     This modifier is like 'tls_ie_hi16', but it adds one to the value
     if 'tls_ie_lo16' of the input value is negative.

'tls_le'

     This modifier is used to load the offset of the symbol's address
     from the TCB, to be used for local-exec TLS accesses.

'tls_le_lo16'

     This modifier is used to load the low 16 bits of the offset of the
     symbol's address from the TCB, to be used for local-exec TLS
     accesses.

'tls_le_hi16'

     This modifier is used to load the high 16 bits of the offset of the
     symbol's address from the TCB, to be used for local-exec TLS
     accesses.

'tls_le_ha16'

     This modifier is like 'tls_le_hi16', but it adds one to the value
     if 'tls_le_lo16' of the input value is negative.

'tls_gd_call'

     This modifier is used to tag an instruction as the "call" part of a
     calling sequence for a TLS GD reference of its operand.

'tls_gd_add'

     This modifier is used to tag an instruction as the "add" part of a
     calling sequence for a TLS GD reference of its operand.

'tls_ie_load'

     This modifier is used to tag an instruction as the "load" part of a
     calling sequence for a TLS IE reference of its operand.

==============================================================================
File: as.info,  Node: |TILEPro_Directives|,  Prev: TILEPro Syntax,  Up: |TILEPro_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *TILEPro_Directives*

9.45.3 TILEPro Directives
-------------------------

'.align EXPRESSION [, EXPRESSION]'
     This is the generic .ALIGN directive.  The first argument is the
     requested alignment in bytes.

'.allow_suspicious_bundles'
     Turns on error checking for combinations of instructions in a
     bundle that probably indicate a programming error.  This is on by
     default.

'.no_allow_suspicious_bundles'
     Turns off error checking for combinations of instructions in a
     bundle that probably indicate a programming error.

'.require_canonical_reg_names'
     Require that canonical register names be used, and emit a warning
     if the numeric names are used.  This is on by default.

'.no_require_canonical_reg_names'
     Permit the use of numeric names for registers that have canonical
     names.

==============================================================================
File: as.info,  Node: |V850_Dependent|,  Next: |Vax_Dependent|,  Prev: |TILEPro_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *V850_Dependent*

9.46 v850 Dependent Features
----------------------------

MENU

* |V850_Options|::              Options
* |V850_Syntax|::               Syntax
* |V850_Floating_Point|::       Floating Point
* |V850_Directives|::           V850 Machine Directives
* |V850_Opcodes|::              Opcodes

==============================================================================
File: as.info,  Node: |V850_Options|,  Next: |V850_Syntax|,  Up: |V850_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *V850_Options*

9.46.1 Options
--------------

'as' supports the following additional command-line options for the V850
processor family:

'-wsigned_overflow'
     Causes warnings to be produced when signed immediate values
     overflow the space available for then within their opcodes.  By
     default this option is disabled as it is possible to receive
     spurious warnings due to using exact bit patterns as immediate
     constants.

'-wunsigned_overflow'
     Causes warnings to be produced when unsigned immediate values
     overflow the space available for then within their opcodes.  By
     default this option is disabled as it is possible to receive
     spurious warnings due to using exact bit patterns as immediate
     constants.

'-mv850'
     Specifies that the assembled code should be marked as being
     targeted at the V850 processor.  This allows the linker to detect
     attempts to link such code with code assembled for other
     processors.

'-mv850e'
     Specifies that the assembled code should be marked as being
     targeted at the V850E processor.  This allows the linker to detect
     attempts to link such code with code assembled for other
     processors.

'-mv850e1'
     Specifies that the assembled code should be marked as being
     targeted at the V850E1 processor.  This allows the linker to detect
     attempts to link such code with code assembled for other
     processors.

'-mv850any'
     Specifies that the assembled code should be marked as being
     targeted at the V850 processor but support instructions that are
     specific to the extended variants of the process.  This allows the
     production of binaries that contain target specific code, but which
     are also intended to be used in a generic fashion.  For example
     libgcc.a contains generic routines used by the code produced by GCC
     for all versions of the v850 architecture, together with support
     routines only used by the V850E architecture.

'-mv850e2'
     Specifies that the assembled code should be marked as being
     targeted at the V850E2 processor.  This allows the linker to detect
     attempts to link such code with code assembled for other
     processors.

'-mv850e2v3'
     Specifies that the assembled code should be marked as being
     targeted at the V850E2V3 processor.  This allows the linker to
     detect attempts to link such code with code assembled for other
     processors.

'-mv850e2v4'
     This is an alias for '-mv850e3v5'.

'-mv850e3v5'
     Specifies that the assembled code should be marked as being
     targeted at the V850E3V5 processor.  This allows the linker to
     detect attempts to link such code with code assembled for other
     processors.

'-mrelax'
     Enables relaxation.  This allows the .longcall and .longjump pseudo
     ops to be used in the assembler source code.  These ops label
     sections of code which are either a long function call or a long
     branch.  The assembler will then flag these sections of code and
     the linker will attempt to relax them.

'-mgcc-abi'
     Marks the generated object file as supporting the old GCC ABI.

'-mrh850-abi'
     Marks the generated object file as supporting the RH850 ABI. This
     is the default.

'-m8byte-align'
     Marks the generated object file as supporting a maximum 64-bits of
     alignment for variables defined in the source code.

'-m4byte-align'
     Marks the generated object file as supporting a maximum 32-bits of
     alignment for variables defined in the source code.  This is the
     default.

'-msoft-float'
     Marks the generated object file as not using any floating point
     instructions - and hence can be linked with other V850 binaries
     that do or do not use floating point.  This is the default for
     binaries for architectures earlier than the 'e2v3'.

'-mhard-float'
     Marks the generated object file as one that uses floating point
     instructions - and hence can only be linked with other V850
     binaries that use the same kind of floating point instructions, or
     with binaries that do not use floating point at all.  This is the
     default for binaries the 'e2v3' and later architectures.

==============================================================================
File: as.info,  Node: |V850_Syntax|,  Next: |V850_Floating_Point|,  Prev: |V850_Options|,  Up: |V850_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *V850_Syntax*

9.46.2 Syntax
-------------

MENU

* |V850_Chars|::                Special Characters
* |V850_Regs|::                 Register Names

==============================================================================
File: as.info,  Node: |V850_Chars|,  Next: |V850_Regs|,  Up: |V850_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *V850_Chars*

9.46.2.1 Special Characters
---------------------------

'#' is the line comment character.  If a '#' appears as the first
character of a line, the whole line is treated as a comment, but in this
case the line can also be a logical line number directive (*note
Comments::) or a preprocessor control command (*note Preprocessing::).

   Two dashes ('--') can also be used to start a line comment.

   The ';' character can be used to separate statements on the same
line.

==============================================================================
File: as.info,  Node: |V850_Regs|,  Prev: |V850_Chars|,  Up: |V850_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *V850_Regs*

9.46.2.2 Register Names
-----------------------

'as' supports the following names for registers:
'general register 0'
     r0, zero
'general register 1'
     r1
'general register 2'
     r2, hp
'general register 3'
     r3, sp
'general register 4'
     r4, gp
'general register 5'
     r5, tp
'general register 6'
     r6
'general register 7'
     r7
'general register 8'
     r8
'general register 9'
     r9
'general register 10'
     r10
'general register 11'
     r11
'general register 12'
     r12
'general register 13'
     r13
'general register 14'
     r14
'general register 15'
     r15
'general register 16'
     r16
'general register 17'
     r17
'general register 18'
     r18
'general register 19'
     r19
'general register 20'
     r20
'general register 21'
     r21
'general register 22'
     r22
'general register 23'
     r23
'general register 24'
     r24
'general register 25'
     r25
'general register 26'
     r26
'general register 27'
     r27
'general register 28'
     r28
'general register 29'
     r29
'general register 30'
     r30, ep
'general register 31'
     r31, lp
'system register 0'
     eipc
'system register 1'
     eipsw
'system register 2'
     fepc
'system register 3'
     fepsw
'system register 4'
     ecr
'system register 5'
     psw
'system register 16'
     ctpc
'system register 17'
     ctpsw
'system register 18'
     dbpc
'system register 19'
     dbpsw
'system register 20'
     ctbp

==============================================================================
File: as.info,  Node: |V850_Floating_Point|,  Next: |V850_Directives|,  Prev: |V850_Syntax|,  Up: |V850_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *V850_Floating_Point*

9.46.3 Floating Point
---------------------

The V850 family uses IEEE floating-point numbers.

==============================================================================
File: as.info,  Node: |V850_Directives|,  Next: |V850_Opcodes|,  Prev: |V850_Floating_Point|,  Up: |V850_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *V850_Directives*

9.46.4 V850 Machine Directives
------------------------------

'.offset <EXPRESSION>'
     Moves the offset into the current section to the specified amount.

'.section "name", <type>'
     This is an extension to the standard .section directive.  It sets
     the current section to be <type> and creates an alias for this
     section called "name".

'.v850'
     Specifies that the assembled code should be marked as being
     targeted at the V850 processor.  This allows the linker to detect
     attempts to link such code with code assembled for other
     processors.

'.v850e'
     Specifies that the assembled code should be marked as being
     targeted at the V850E processor.  This allows the linker to detect
     attempts to link such code with code assembled for other
     processors.

'.v850e1'
     Specifies that the assembled code should be marked as being
     targeted at the V850E1 processor.  This allows the linker to detect
     attempts to link such code with code assembled for other
     processors.

'.v850e2'
     Specifies that the assembled code should be marked as being
     targeted at the V850E2 processor.  This allows the linker to detect
     attempts to link such code with code assembled for other
     processors.

'.v850e2v3'
     Specifies that the assembled code should be marked as being
     targeted at the V850E2V3 processor.  This allows the linker to
     detect attempts to link such code with code assembled for other
     processors.

'.v850e2v4'
     Specifies that the assembled code should be marked as being
     targeted at the V850E3V5 processor.  This allows the linker to
     detect attempts to link such code with code assembled for other
     processors.

'.v850e3v5'
     Specifies that the assembled code should be marked as being
     targeted at the V850E3V5 processor.  This allows the linker to
     detect attempts to link such code with code assembled for other
     processors.

==============================================================================
File: as.info,  Node: |V850_Opcodes|,  Prev: |V850_Directives|,  Up: |V850_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *V850_Opcodes*

9.46.5 Opcodes
--------------

'as' implements all the standard V850 opcodes.

   'as' also implements the following pseudo ops:

'hi0()'
     Computes the higher 16 bits of the given expression and stores it
     into the immediate operand field of the given instruction.  For
     example:

     'mulhi hi0(here - there), r5, r6'

     computes the difference between the address of labels 'here' and
     'there', takes the upper 16 bits of this difference, shifts it down
     16 bits and then multiplies it by the lower 16 bits in register 5,
     putting the result into register 6.

'lo()'
     Computes the lower 16 bits of the given expression and stores it
     into the immediate operand field of the given instruction.  For
     example:

     'addi lo(here - there), r5, r6'

     computes the difference between the address of labels 'here' and
     'there', takes the lower 16 bits of this difference and adds it to
     register 5, putting the result into register 6.

'hi()'
     Computes the higher 16 bits of the given expression and then adds
     the value of the most significant bit of the lower 16 bits of the
     expression and stores the result into the immediate operand field
     of the given instruction.  For example the following code can be
     used to compute the address of the label 'here' and store it into
     register 6:

     'movhi hi(here), r0, r6' 'movea lo(here), r6, r6'

     The reason for this special behaviour is that movea performs a sign
     extension on its immediate operand.  So for example if the address
     of 'here' was 0xFFFFFFFF then without the special behaviour of the
     hi() pseudo-op the movhi instruction would put 0xFFFF0000 into r6,
     then the movea instruction would takes its immediate operand,
     0xFFFF, sign extend it to 32 bits, 0xFFFFFFFF, and then add it into
     r6 giving 0xFFFEFFFF which is wrong (the fifth nibble is E). With
     the hi() pseudo op adding in the top bit of the lo() pseudo op, the
     movhi instruction actually stores 0 into r6 (0xFFFF + 1 = 0x0000),
     so that the movea instruction stores 0xFFFFFFFF into r6 - the right
     value.

'hilo()'
     Computes the 32 bit value of the given expression and stores it
     into the immediate operand field of the given instruction (which
     must be a mov instruction).  For example:

     'mov hilo(here), r6'

     computes the absolute address of label 'here' and puts the result
     into register 6.

'sdaoff()'
     Computes the offset of the named variable from the start of the
     Small Data Area (whose address is held in register 4, the GP
     register) and stores the result as a 16 bit signed value in the
     immediate operand field of the given instruction.  For example:

     'ld.w sdaoff(_a_variable)[gp],r6'

     loads the contents of the location pointed to by the label
     '_a_variable' into register 6, provided that the label is located
     somewhere within +/- 32K of the address held in the GP register.
     [Note the linker assumes that the GP register contains a fixed
     address set to the address of the label called '__gp'.  This can
     either be set up automatically by the linker, or specifically set
     by using the '--defsym __gp=<value>' command line option].

'tdaoff()'
     Computes the offset of the named variable from the start of the
     Tiny Data Area (whose address is held in register 30, the EP
     register) and stores the result as a 4,5, 7 or 8 bit unsigned value
     in the immediate operand field of the given instruction.  For
     example:

     'sld.w tdaoff(_a_variable)[ep],r6'

     loads the contents of the location pointed to by the label
     '_a_variable' into register 6, provided that the label is located
     somewhere within +256 bytes of the address held in the EP register.
     [Note the linker assumes that the EP register contains a fixed
     address set to the address of the label called '__ep'.  This can
     either be set up automatically by the linker, or specifically set
     by using the '--defsym __ep=<value>' command line option].

'zdaoff()'
     Computes the offset of the named variable from address 0 and stores
     the result as a 16 bit signed value in the immediate operand field
     of the given instruction.  For example:

     'movea zdaoff(_a_variable),zero,r6'

     puts the address of the label '_a_variable' into register 6,
     assuming that the label is somewhere within the first 32K of
     memory.  (Strictly speaking it also possible to access the last 32K
     of memory as well, as the offsets are signed).

'ctoff()'
     Computes the offset of the named variable from the start of the
     Call Table Area (whose address is held in system register 20, the
     CTBP register) and stores the result a 6 or 16 bit unsigned value
     in the immediate field of then given instruction or piece of data.
     For example:

     'callt ctoff(table_func1)'

     will put the call the function whose address is held in the call
     table at the location labeled 'table_func1'.

'.longcall name'
     Indicates that the following sequence of instructions is a long
     call to function 'name'.  The linker will attempt to shorten this
     call sequence if 'name' is within a 22bit offset of the call.  Only
     valid if the '-mrelax' command line switch has been enabled.

'.longjump name'
     Indicates that the following sequence of instructions is a long
     jump to label 'name'.  The linker will attempt to shorten this code
     sequence if 'name' is within a 22bit offset of the jump.  Only
     valid if the '-mrelax' command line switch has been enabled.

   For information on the V850 instruction set, see 'V850 Family
32-/16-Bit single-Chip Microcontroller Architecture Manual' from NEC.
Ltd.

==============================================================================
File: as.info,  Node: |Vax_Dependent|,  Next: |Visium_Dependent|,  Prev: |V850_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Vax_Dependent*

9.47 VAX Dependent Features
---------------------------

MENU

* |VAX_Opts|::                    VAX Command-Line Options
* |VAX_float|::                   VAX Floating Point
* |VAX_directives|::              Vax Machine Directives
* |VAX_opcodes|::                 VAX Opcodes
* |VAX_branch|::                  VAX Branch Improvement
* |VAX_operands|::                VAX Operands
* |VAX_no|::                      Not Supported on VAX
* |VAX_Syntax|::                  VAX Syntax

==============================================================================
File: as.info,  Node: |VAX_Opts|,  Next: |VAX_float|,  Up: |Vax_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *VAX_Opts*

9.47.1 VAX Command-Line Options
-------------------------------

The Vax version of 'as' accepts any of the following options, gives a
warning message that the option was ignored and proceeds.  These options
are for compatibility with scripts designed for other people's
assemblers.

'-D (Debug)'
'-S (Symbol Table)'
'-T (Token Trace)'
     These are obsolete options used to debug old assemblers.

'-d (Displacement size for JUMPs)'
     This option expects a number following the '-d'.  Like options that
     expect filenames, the number may immediately follow the '-d' (old
     standard) or constitute the whole of the command line argument that
     follows '-d' (GNU standard).

'-V (Virtualize Interpass Temporary File)'
     Some other assemblers use a temporary file.  This option commanded
     them to keep the information in active memory rather than in a disk
     file.  'as' always does this, so this option is redundant.

'-J (JUMPify Longer Branches)'
     Many 32-bit computers permit a variety of branch instructions to do
     the same job.  Some of these instructions are short (and fast) but
     have a limited range; others are long (and slow) but can branch
     anywhere in virtual memory.  Often there are 3 flavors of branch:
     short, medium and long.  Some other assemblers would emit short and
     medium branches, unless told by this option to emit short and long
     branches.

'-t (Temporary File Directory)'
     Some other assemblers may use a temporary file, and this option
     takes a filename being the directory to site the temporary file.
     Since 'as' does not use a temporary disk file, this option makes no
     difference.  '-t' needs exactly one filename.

   The Vax version of the assembler accepts additional options when
compiled for VMS:

'-h N'
     External symbol or section (used for global variables) names are
     not case sensitive on VAX/VMS and always mapped to upper case.
     This is contrary to the C language definition which explicitly
     distinguishes upper and lower case.  To implement a standard
     conforming C compiler, names must be changed (mapped) to preserve
     the case information.  The default mapping is to convert all lower
     case characters to uppercase and adding an underscore followed by a
     6 digit hex value, representing a 24 digit binary value.  The one
     digits in the binary value represent which characters are uppercase
     in the original symbol name.

     The '-h N' option determines how we map names.  This takes several
     values.  No '-h' switch at all allows case hacking as described
     above.  A value of zero ('-h0') implies names should be upper case,
     and inhibits the case hack.  A value of 2 ('-h2') implies names
     should be all lower case, with no case hack.  A value of 3 ('-h3')
     implies that case should be preserved.  The value 1 is unused.  The
     '-H' option directs 'as' to display every mapped symbol during
     assembly.

     Symbols whose names include a dollar sign '$' are exceptions to the
     general name mapping.  These symbols are normally only used to
     reference VMS library names.  Such symbols are always mapped to
     upper case.

'-+'
     The '-+' option causes 'as' to truncate any symbol name larger than
     31 characters.  The '-+' option also prevents some code following
     the '_main' symbol normally added to make the object file
     compatible with Vax-11 "C".

'-1'
     This option is ignored for backward compatibility with 'as' version
     1.x.

'-H'
     The '-H' option causes 'as' to print every symbol which was changed
     by case mapping.

==============================================================================
File: as.info,  Node: |VAX_float|,  Next: |VAX_directives|,  Prev: |VAX_Opts|,  Up: |Vax_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *VAX_float*

9.47.2 VAX Floating Point
-------------------------

Conversion of flonums to floating point is correct, and compatible with
previous assemblers.  Rounding is towards zero if the remainder is
exactly half the least significant bit.

   'D', 'F', 'G' and 'H' floating point formats are understood.

   Immediate floating literals (_e.g._  'S`$6.9') are rendered
correctly.  Again, rounding is towards zero in the boundary case.

   The '.float' directive produces 'f' format numbers.  The '.double'
directive produces 'd' format numbers.

==============================================================================
File: as.info,  Node: |VAX_directives|,  Next: |VAX_opcodes|,  Prev: |VAX_float|,  Up: |Vax_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *VAX_directives*

9.47.3 Vax Machine Directives
-----------------------------

The Vax version of the assembler supports four directives for generating
Vax floating point constants.  They are described in the table below.

'.dfloat'
     This expects zero or more flonums, separated by commas, and
     assembles Vax 'd' format 64-bit floating point constants.

'.ffloat'
     This expects zero or more flonums, separated by commas, and
     assembles Vax 'f' format 32-bit floating point constants.

'.gfloat'
     This expects zero or more flonums, separated by commas, and
     assembles Vax 'g' format 64-bit floating point constants.

'.hfloat'
     This expects zero or more flonums, separated by commas, and
     assembles Vax 'h' format 128-bit floating point constants.

==============================================================================
File: as.info,  Node: |VAX_opcodes|,  Next: |VAX_branch|,  Prev: |VAX_directives|,  Up: |Vax_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *VAX_opcodes*

9.47.4 VAX Opcodes
------------------

All DEC mnemonics are supported.  Beware that 'case...' instructions
have exactly 3 operands.  The dispatch table that follows the 'case...'
instruction should be made with '.word' statements.  This is compatible
with all unix assemblers we know of.

==============================================================================
File: as.info,  Node: |VAX_branch|,  Next: |VAX_operands|,  Prev: |VAX_opcodes|,  Up: |Vax_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *VAX_branch*

9.47.5 VAX Branch Improvement
-----------------------------

Certain pseudo opcodes are permitted.  They are for branch instructions.
They expand to the shortest branch instruction that reaches the target.
Generally these mnemonics are made by substituting 'j' for 'b' at the
start of a DEC mnemonic.  This feature is included both for
compatibility and to help compilers.  If you do not need this feature,
avoid these opcodes.  Here are the mnemonics, and the code they can
expand into.

'jbsb'
     'Jsb' is already an instruction mnemonic, so we chose 'jbsb'.
     (byte displacement)
          'bsbb ...'
     (word displacement)
          'bsbw ...'
     (long displacement)
          'jsb ...'
'jbr'
'jr'
     Unconditional branch.
     (byte displacement)
          'brb ...'
     (word displacement)
          'brw ...'
     (long displacement)
          'jmp ...'
'jCOND'
     COND may be any one of the conditional branches 'neq', 'nequ',
     'eql', 'eqlu', 'gtr', 'geq', 'lss', 'gtru', 'lequ', 'vc', 'vs',
     'gequ', 'cc', 'lssu', 'cs'.  COND may also be one of the bit tests
     'bs', 'bc', 'bss', 'bcs', 'bsc', 'bcc', 'bssi', 'bcci', 'lbs',
     'lbc'.  NOTCOND is the opposite condition to COND.
     (byte displacement)
          'bCOND ...'
     (word displacement)
          'bNOTCOND foo ; brw ... ; foo:'
     (long displacement)
          'bNOTCOND foo ; jmp ... ; foo:'
'jacbX'
     X may be one of 'b d f g h l w'.
     (word displacement)
          'OPCODE ...'
     (long displacement)
               OPCODE ..., foo ;
               brb bar ;
               foo: jmp ... ;
               bar:
'jaobYYY'
     YYY may be one of 'lss leq'.
'jsobZZZ'
     ZZZ may be one of 'geq gtr'.
     (byte displacement)
          'OPCODE ...'
     (word displacement)
               OPCODE ..., foo ;
               brb bar ;
               foo: brw DESTINATION ;
               bar:
     (long displacement)
               OPCODE ..., foo ;
               brb bar ;
               foo: jmp DESTINATION ;
               bar:
'aobleq'
'aoblss'
'sobgeq'
'sobgtr'
     (byte displacement)
          'OPCODE ...'
     (word displacement)
               OPCODE ..., foo ;
               brb bar ;
               foo: brw DESTINATION ;
               bar:
     (long displacement)
               OPCODE ..., foo ;
               brb bar ;
               foo: jmp DESTINATION ;
               bar:

==============================================================================
File: as.info,  Node: |VAX_operands|,  Next: |VAX_no|,  Prev: |VAX_branch|,  Up: |Vax_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *VAX_operands*

9.47.6 VAX Operands
-------------------

The immediate character is '$' for Unix compatibility, not '#' as DEC
writes it.

   The indirect character is '*' for Unix compatibility, not '@' as DEC
writes it.

   The displacement sizing character is '`' (an accent grave) for Unix
compatibility, not '^' as DEC writes it.  The letter preceding '`' may
have either case.  'G' is not understood, but all other letters ('b i l
s w') are understood.

   Register names understood are 'r0 r1 r2 ... r15 ap fp sp pc'.  Upper
and lower case letters are equivalent.

   For instance
     tstb *w`$4(r5)

   Any expression is permitted in an operand.  Operands are comma
separated.

==============================================================================
File: as.info,  Node: |VAX_no|,  Next: |VAX_Syntax|,  Prev: |VAX_operands|,  Up: |Vax_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *VAX_no*

9.47.7 Not Supported on VAX
---------------------------

Vax bit fields can not be assembled with 'as'.  Someone can add the
required code if they really need it.

==============================================================================
File: as.info,  Node: |VAX_Syntax|,  Prev: |VAX_no|,  Up: |Vax_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *VAX_Syntax*

9.47.8 VAX Syntax
-----------------

MENU

* |VAX_Chars|::                Special Characters

==============================================================================
File: as.info,  Node: |VAX_Chars|,  Up: |VAX_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *VAX_Chars*

9.47.8.1 Special Characters
---------------------------

The presence of a '#' appearing anywhere on a line indicates the start
of a comment that extends to the end of that line.

   If a '#' appears as the first character of a line then the whole line
is treated as a comment, but in this case the line can also be a logical
line number directive (*note Comments::) or a preprocessor control
command (*note Preprocessing::).

   The ';' character can be used to separate statements on the same
line.

==============================================================================
File: as.info,  Node: |Visium_Dependent|,  Next: |WebAssembly_Dependent|,  Prev: |Vax_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Visium_Dependent*

9.48 Visium Dependent Features
------------------------------

MENU

* |Visium_Options|::              Options
* |Visium_Syntax|::               Syntax
* |Visium_Opcodes|::              Opcodes

==============================================================================
File: as.info,  Node: |Visium_Options|,  Next: |Visium_Syntax|,  Up: |Visium_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Visium_Options*

9.48.1 Options
--------------

The Visium assembler implements one machine-specific option:

'-mtune=ARCH'
     This option specifies the target architecture.  If an attempt is
     made to assemble an instruction that will not execute on the target
     architecture, the assembler will issue an error message.

     The following names are recognized: 'mcm24' 'mcm' 'gr5' 'gr6'

==============================================================================
File: as.info,  Node: |Visium_Syntax|,  Next: |Visium_Opcodes|,  Prev: |Visium_Options|,  Up: |Visium_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Visium_Syntax*

9.48.2 Syntax
-------------

MENU

* |Visium_Characters|::           Special Characters
* |Visium_Registers|::            Register Names

==============================================================================
File: as.info,  Node: |Visium_Characters|,  Next: |Visium_Registers|,  Up: |Visium_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Visium_Characters*

9.48.2.1 Special Characters
---------------------------

Line comments are introduced either by the '!' character or by the ';'
character appearing anywhere on a line.

   A hash character ('#') as the first character on a line also marks
the start of a line comment, but in this case it could also be a logical
line number directive (*note Comments::) or a preprocessor control
command (*note Preprocessing::).

   The Visium assembler does not currently support a line separator
character.

==============================================================================
File: as.info,  Node: |Visium_Registers|,  Prev: |Visium_Characters|,  Up: |Visium_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Visium_Registers*

9.48.2.2 Register Names
-----------------------

Registers can be specified either by using their canonical mnemonic
names or by using their alias if they have one, for example 'sp'.

==============================================================================
File: as.info,  Node: |Visium_Opcodes|,  Prev: Visium Syntax,  Up: |Visium_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Visium_Opcodes*

9.48.3 Opcodes
--------------

All the standard opcodes of the architecture are implemented, along with
the following three pseudo-instructions: 'cmp', 'cmpc', 'move'.

   In addition, the following two illegal opcodes are implemented and
used by the simulation:

     stop    5-bit immediate, SourceA
     trace   5-bit immediate, SourceA

==============================================================================
File: as.info,  Node: |WebAssembly_Dependent|,  Next: |XGATE_Dependent|,  Prev: |Visium_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *WebAssembly_Dependent*

9.49 WebAssembly Dependent Features
-----------------------------------

MENU

* |WebAssembly_Notes|::                Notes
* |WebAssembly_Syntax|::               Syntax
* |WebAssembly_Floating_Point|::       Floating Point
* |WebAssembly_Opcodes|::              Opcodes
* |WebAssembly_module_layout|::        Module Layout

==============================================================================
File: as.info,  Node: |WebAssembly_Notes|,  Next: |WebAssembly_Syntax|,  Up: |WebAssembly_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *WebAssembly_Notes*

9.49.1 Notes
------------

While WebAssembly provides its own module format for executables, this
documentation describes how to use 'as' to produce intermediate ELF
object format files.

==============================================================================
File: as.info,  Node: |WebAssembly_Syntax|,  Next: |WebAssembly_Floating_Point|,  Prev: |WebAssembly_Notes|,  Up: |WebAssembly_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *WebAssembly_Syntax*

9.49.2 Syntax
-------------

The assembler syntax directly encodes sequences of opcodes as defined in
the WebAssembly binary encoding specification at
https://github.com/webassembly/spec/BinaryEncoding.md.  Structured
sexp-style expressions are not supported as input.

MENU

* |WebAssembly_Chars|::                Special Characters
* |WebAssembly_Relocs|::               Relocations
* |WebAssembly_Signatures|::           Signatures

==============================================================================
File: as.info,  Node: |WebAssembly_Chars|,  Next: |WebAssembly_Relocs|,  Up: |WebAssembly_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *WebAssembly_Chars*

9.49.2.1 Special Characters
---------------------------

'#' and ';' are the line comment characters.  Note that if '#' is the
first character on a line then it can also be a logical line number
directive (*note Comments::) or a preprocessor control command (*note
Preprocessing::).

==============================================================================
File: as.info,  Node: |WebAssembly_Relocs|,  Next: |WebAssembly_Signatures|,  Prev: |WebAssembly_Chars|,  Up: |WebAssembly_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *WebAssembly_Relocs*

9.49.2.2 Relocations
--------------------

Special relocations are available by using the '@PLT', '@GOT', or '@GOT'
suffixes after a constant expression, which correspond to the
R_ASMJS_LEB128_PLT, R_ASMJS_LEB128_GOT, and R_ASMJS_LEB128_GOT_CODE
relocations, respectively.

   The '@PLT' suffix is followed by a symbol name in braces; the symbol
value is used to determine the function signature for which a PLT stub
is generated.  Currently, the symbol _name_ is parsed from its last 'F'
character to determine the argument count of the function, which is also
necessary for generating a PLT stub.

==============================================================================
File: as.info,  Node: |WebAssembly_Signatures|,  Prev: |WebAssembly_Relocs|,  Up: |WebAssembly_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *WebAssembly_Signatures*

9.49.2.3 Signatures
-------------------

Function signatures are specified with the 'signature' pseudo-opcode,
followed by a simple function signature imitating a C++-mangled function
type: 'F' followed by an optional 'v', then a sequence of 'i', 'l', 'f',
and 'd' characters to mark i32, i64, f32, and f64 parameters,
respectively; followed by a final 'E' to mark the end of the function
signature.

==============================================================================
File: as.info,  Node: |WebAssembly_Floating_Point|,  Next: |WebAssembly_Opcodes|,  Prev: |WebAssembly_Syntax|,  Up: |WebAssembly_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *WebAssembly_Floating_Point*

9.49.3 Floating Point
---------------------

WebAssembly uses little-endian IEEE floating-point numbers.

==============================================================================
File: as.info,  Node: |WebAssembly_Opcodes|,  Next: |WebAssembly_module_layout|,  Prev: |WebAssembly_Floating_Point|,  Up: |WebAssembly_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *WebAssembly_Opcodes*

9.49.4 Regular Opcodes
----------------------

Ordinary instructions are encoded with the WebAssembly mnemonics as
listed at:
<https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md>.

   Opcodes are written directly in the order in which they are encoded,
without going through an intermediate sexp-style expression as in the
'was' format.

   For "typed" opcodes (block, if, etc.), the type of the block is
specified in square brackets following the opcode: 'if[i]', 'if[]'.

==============================================================================
File: as.info,  Node: |WebAssembly_module_layout|,  Prev: |WebAssembly_Opcodes|,  Up: |WebAssembly_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *WebAssembly_module_layout*

9.49.5 WebAssembly Module Layout
--------------------------------

'as' will only produce ELF output, not a valid WebAssembly module.  It
is possible to make 'as' produce output in a single ELF section which
becomes a valid WebAssembly module, but a linker script to do so may be
preferrable, as it doesn't require running the entire module through the
assembler at once.

==============================================================================
File: as.info,  Node: |XGATE_Dependent|,  Next: |XSTORMY16_Dependent|,  Prev: |WebAssembly_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *XGATE_Dependent*

9.50 XGATE Dependent Features
-----------------------------

MENU

* |XGATE_Opts|::                   XGATE Options
* |XGATE_Syntax|::                 Syntax
* |XGATE_Directives|::             Assembler Directives
* |XGATE_Float|::                  Floating Point
* |XGATE_opcodes|::                Opcodes

==============================================================================
File: as.info,  Node: |XGATE_Opts|,  Next: |XGATE_Syntax|,  Up: |XGATE_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *XGATE_Opts*

9.50.1 XGATE Options
--------------------

The Freescale XGATE version of 'as' has a few machine dependent options.

'-mshort'
     This option controls the ABI and indicates to use a 16-bit integer
     ABI. It has no effect on the assembled instructions.  This is the
     default.

'-mlong'
     This option controls the ABI and indicates to use a 32-bit integer
     ABI.

'-mshort-double'
     This option controls the ABI and indicates to use a 32-bit float
     ABI. This is the default.

'-mlong-double'
     This option controls the ABI and indicates to use a 64-bit float
     ABI.

'--print-insn-syntax'
     You can use the '--print-insn-syntax' option to obtain the syntax
     description of the instruction when an error is detected.

'--print-opcodes'
     The '--print-opcodes' option prints the list of all the
     instructions with their syntax.  Once the list is printed 'as'
     exits.

==============================================================================
File: as.info,  Node: |XGATE_Syntax|,  Next: |XGATE_Directives|,  Prev: |XGATE_Opts|,  Up: |XGATE_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *XGATE_Syntax*

9.50.2 Syntax
-------------

In XGATE RISC syntax, the instruction name comes first and it may be
followed by up to three operands.  Operands are separated by commas
(',').  'as' will complain if too many operands are specified for a
given instruction.  The same will happen if you specified too few
operands.

     nop
     ldl  #23
     CMP  R1, R2

   The presence of a ';' character or a '!' character anywhere on a line
indicates the start of a comment that extends to the end of that line.

   A '*' or a '#' character at the start of a line also introduces a
line comment, but these characters do not work elsewhere on the line.
If the first character of the line is a '#' then as well as starting a
comment, the line could also be logical line number directive (*note
Comments::) or a preprocessor control command (*note Preprocessing::).

   The XGATE assembler does not currently support a line separator
character.

   The following addressing modes are understood for XGATE:
"Inherent"
     ''

"Immediate 3 Bit Wide"
     '#NUMBER'

"Immediate 4 Bit Wide"
     '#NUMBER'

"Immediate 8 Bit Wide"
     '#NUMBER'

"Monadic Addressing"
     'REG'

"Dyadic Addressing"
     'REG, REG'

"Triadic Addressing"
     'REG, REG, REG'

"Relative Addressing 9 Bit Wide"
     '*SYMBOL'

"Relative Addressing 10 Bit Wide"
     '*SYMBOL'

"Index Register plus Immediate Offset"
     'REG, (REG, #NUMBER)'

"Index Register plus Register Offset"
     'REG, REG, REG'

"Index Register plus Register Offset with Post-increment"
     'REG, REG, REG+'

"Index Register plus Register Offset with Pre-decrement"
     'REG, REG, -REG'

     The register can be either 'R0', 'R1', 'R2', 'R3', 'R4', 'R5', 'R6'
     or 'R7'.

   Convene macro opcodes to deal with 16-bit values have been added.

"Immediate 16 Bit Wide"
     '#NUMBER', or '*SYMBOL'

     For example:

          ldw R1, #1024
          ldw R3, timer
          ldw R1, (R1, #0)
          COM R1
          stw R2, (R1, #0)

==============================================================================
File: as.info,  Node: |XGATE_Directives|,  Next: |XGATE_Float|,  Prev: |XGATE_Syntax|,  Up: |XGATE_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *XGATE_Directives*

9.50.3 Assembler Directives
---------------------------

The XGATE version of 'as' have the following specific assembler
directives:

==============================================================================
File: as.info,  Node: |XGATE_Float|,  Next: |XGATE_opcodes|,  Prev: |XGATE_Directives|,  Up: |XGATE_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *XGATE_Float*

9.50.4 Floating Point
---------------------

Packed decimal (P) format floating literals are not supported(yet).

   The floating point formats generated by directives are these.

'.float'
     'Single' precision floating point constants.

'.double'
     'Double' precision floating point constants.

'.extend'
'.ldouble'
     'Extended' precision ('long double') floating point constants.

==============================================================================
File: as.info,  Node: |XGATE_opcodes|,  Prev: |XGATE_Float|,  Up: |XGATE_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *XGATE_opcodes*

9.50.5 Opcodes
--------------

==============================================================================
File: as.info,  Node: |XSTORMY16_Dependent|,  Next: |Xtensa_Dependent|,  Prev: |XGATE_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *XSTORMY16_Dependent*

9.51 XStormy16 Dependent Features
---------------------------------

MENU

* |XStormy16_Syntax|::               Syntax
* |XStormy16_Directives|::           Machine Directives
* |XStormy16_Opcodes|::              Pseudo-Opcodes

==============================================================================
File: as.info,  Node: |XStormy16_Syntax|,  Next: |XStormy16_Directives|,  Up: |XSTORMY16_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *XStormy16_Syntax*

9.51.1 Syntax
-------------

MENU

* |XStormy16_Chars|::                Special Characters

==============================================================================
File: as.info,  Node: |XStormy16_Chars|,  Up: XStormy16 Syntax
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *XStormy16_Chars*

9.51.1.1 Special Characters
---------------------------

'#' is the line comment character.  If a '#' appears as the first
character of a line, the whole line is treated as a comment, but in this
case the line can also be a logical line number directive (*note
Comments::) or a preprocessor control command (*note Preprocessing::).

   A semicolon (';') can be used to start a comment that extends from
wherever the character appears on the line up to the end of the line.

   The '|' character can be used to separate statements on the same
line.

==============================================================================
File: as.info,  Node: |XStormy16_Directives|,  Next: |XStormy16_Opcodes|,  Prev: |XStormy16_Syntax|,  Up: |XSTORMY16_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *XStormy16_Directives*

9.51.2 XStormy16 Machine Directives
-----------------------------------

'.16bit_pointers'
     Like the '--16bit-pointers' command line option this directive
     indicates that the assembly code makes use of 16-bit pointers.

'.32bit_pointers'
     Like the '--32bit-pointers' command line option this directive
     indicates that the assembly code makes use of 32-bit pointers.

'.no_pointers'
     Like the '--no-pointers' command line option this directive
     indicates that the assembly code does not makes use pointers.

==============================================================================
File: as.info,  Node: |XStormy16_Opcodes|,  Prev: |XStormy16_Directives|,  Up: |XSTORMY16_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *XStormy16_Opcodes*

9.51.3 XStormy16 Pseudo-Opcodes
-------------------------------

'as' implements all the standard XStormy16 opcodes.

   'as' also implements the following pseudo ops:

'@lo()'
     Computes the lower 16 bits of the given expression and stores it
     into the immediate operand field of the given instruction.  For
     example:

     'add r6, @lo(here - there)'

     computes the difference between the address of labels 'here' and
     'there', takes the lower 16 bits of this difference and adds it to
     register 6.

'@hi()'
     Computes the higher 16 bits of the given expression and stores it
     into the immediate operand field of the given instruction.  For
     example:

     'addc r7, @hi(here - there)'

     computes the difference between the address of labels 'here' and
     'there', takes the upper 16 bits of this difference, shifts it down
     16 bits and then adds it, along with the carry bit, to the value in
     register 7.

==============================================================================
File: as.info,  Node: |Xtensa_Dependent|,  Next: |Z80_Dependent|,  Prev: |XSTORMY16_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Xtensa_Dependent*

9.52 Xtensa Dependent Features
------------------------------

This chapter covers features of the GNU assembler that are specific to
the Xtensa architecture.  For details about the Xtensa instruction set,
please consult the 'Xtensa Instruction Set Architecture (ISA) Reference
Manual'.

MENU

* |Xtensa_Options|::              Command-line Options.
* |Xtensa_Syntax|::               Assembler Syntax for Xtensa Processors.
* |Xtensa_Optimizations|::        Assembler Optimizations.
* |Xtensa_Relaxation|::           Other Automatic Transformations.
* |Xtensa_Directives|::           Directives for Xtensa Processors.

==============================================================================
File: as.info,  Node: |Xtensa_Options|,  Next: |Xtensa_Syntax|,  Up: |Xtensa_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Xtensa_Options*

9.52.1 Command Line Options
---------------------------

'--text-section-literals | --no-text-section-literals'
     Control the treatment of literal pools.  The default is
     '--no-text-section-literals', which places literals in separate
     sections in the output file.  This allows the literal pool to be
     placed in a data RAM/ROM. With '--text-section-literals', the
     literals are interspersed in the text section in order to keep them
     as close as possible to their references.  This may be necessary
     for large assembly files, where the literals would otherwise be out
     of range of the 'L32R' instructions in the text section.  Literals
     are grouped into pools following '.literal_position' directives or
     preceding 'ENTRY' instructions.  These options only affect literals
     referenced via PC-relative 'L32R' instructions; literals for
     absolute mode 'L32R' instructions are handled separately.  *Note
     literal: Literal Directive.

'--auto-litpools | --no-auto-litpools'
     Control the treatment of literal pools.  The default is
     '--no-auto-litpools', which in the absence of
     '--text-section-literals' places literals in separate sections in
     the output file.  This allows the literal pool to be placed in a
     data RAM/ROM. With '--auto-litpools', the literals are interspersed
     in the text section in order to keep them as close as possible to
     their references, explicit '.literal_position' directives are not
     required.  This may be necessary for very large functions, where
     single literal pool at the beginning of the function may not be
     reachable by 'L32R' instructions at the end.  These options only
     affect literals referenced via PC-relative 'L32R' instructions;
     literals for absolute mode 'L32R' instructions are handled
     separately.  When used together with '--text-section-literals',
     '--auto-litpools' takes precedence.  *Note literal: Literal
     Directive.

'--absolute-literals | --no-absolute-literals'
     Indicate to the assembler whether 'L32R' instructions use absolute
     or PC-relative addressing.  If the processor includes the absolute
     addressing option, the default is to use absolute 'L32R'
     relocations.  Otherwise, only the PC-relative 'L32R' relocations
     can be used.

'--target-align | --no-target-align'
     Enable or disable automatic alignment to reduce branch penalties at
     some expense in code size.  *Note Automatic Instruction Alignment:
     Xtensa Automatic Alignment.  This optimization is enabled by
     default.  Note that the assembler will always align instructions
     like 'LOOP' that have fixed alignment requirements.

'--longcalls | --no-longcalls'
     Enable or disable transformation of call instructions to allow
     calls across a greater range of addresses.  *Note Function Call
     Relaxation: Xtensa Call Relaxation.  This option should be used
     when call targets can potentially be out of range.  It may degrade
     both code size and performance, but the linker can generally
     optimize away the unnecessary overhead when a call ends up within
     range.  The default is '--no-longcalls'.

'--transform | --no-transform'
     Enable or disable all assembler transformations of Xtensa
     instructions, including both relaxation and optimization.  The
     default is '--transform'; '--no-transform' should only be used in
     the rare cases when the instructions must be exactly as specified
     in the assembly source.  Using '--no-transform' causes out of range
     instruction operands to be errors.

'--rename-section OLDNAME=NEWNAME'
     Rename the OLDNAME section to NEWNAME.  This option can be used
     multiple times to rename multiple sections.

'--trampolines | --no-trampolines'
     Enable or disable transformation of jump instructions to allow
     jumps across a greater range of addresses.  *Note Jump Trampolines:
     Xtensa Jump Relaxation.  This option should be used when jump
     targets can potentially be out of range.  In the absence of such
     jumps this option does not affect code size or performance.  The
     default is '--trampolines'.

==============================================================================
File: as.info,  Node: |Xtensa_Syntax|,  Next: |Xtensa_Optimizations|,  Prev: |Xtensa_Options|,  Up: |Xtensa_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Xtensa_Syntax*

9.52.2 Assembler Syntax
-----------------------

Block comments are delimited by '/*' and '*/'.  End of line comments may
be introduced with either '#' or '//'.

   If a '#' appears as the first character of a line then the whole line
is treated as a comment, but in this case the line could also be a
logical line number directive (*note Comments::) or a preprocessor
control command (*note Preprocessing::).

   Instructions consist of a leading opcode or macro name followed by
whitespace and an optional comma-separated list of operands:

     OPCODE [OPERAND, ...]

   Instructions must be separated by a newline or semicolon (';').

   FLIX instructions, which bundle multiple opcodes together in a single
instruction, are specified by enclosing the bundled opcodes inside
braces:

     {
     [FORMAT]
     OPCODE0 [OPERANDS]
     OPCODE1 [OPERANDS]
     OPCODE2 [OPERANDS]
     ...
     }

   The opcodes in a FLIX instruction are listed in the same order as the
corresponding instruction slots in the TIE format declaration.
Directives and labels are not allowed inside the braces of a FLIX
instruction.  A particular TIE format name can optionally be specified
immediately after the opening brace, but this is usually unnecessary.
The assembler will automatically search for a format that can encode the
specified opcodes, so the format name need only be specified in rare
cases where there is more than one applicable format and where it
matters which of those formats is used.  A FLIX instruction can also be
specified on a single line by separating the opcodes with semicolons:

     { [FORMAT;] OPCODE0 [OPERANDS]; OPCODE1 [OPERANDS]; OPCODE2 [OPERANDS]; ... }

   If an opcode can only be encoded in a FLIX instruction but is not
specified as part of a FLIX bundle, the assembler will choose the
smallest format where the opcode can be encoded and will fill unused
instruction slots with no-ops.

MENU

* |Xtensa_Opcodes|::              Opcode Naming Conventions.
* |Xtensa_Registers|::            Register Naming.

==============================================================================
File: as.info,  Node: |Xtensa_Opcodes|,  Next: |Xtensa_Registers|,  Up: |Xtensa_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Xtensa_Opcodes*

9.52.2.1 Opcode Names
---------------------

See the 'Xtensa Instruction Set Architecture (ISA) Reference Manual' for
a complete list of opcodes and descriptions of their semantics.

   If an opcode name is prefixed with an underscore character ('_'),
'as' will not transform that instruction in any way.  The underscore
prefix disables both optimization (*note Xtensa Optimizations: Xtensa
Optimizations.) and relaxation (*note Xtensa Relaxation: Xtensa
Relaxation.) for that particular instruction.  Only use the underscore
prefix when it is essential to select the exact opcode produced by the
assembler.  Using this feature unnecessarily makes the code less
efficient by disabling assembler optimization and less flexible by
disabling relaxation.

   Note that this special handling of underscore prefixes only applies
to Xtensa opcodes, not to either built-in macros or user-defined macros.
When an underscore prefix is used with a macro (e.g., '_MOV'), it refers
to a different macro.  The assembler generally provides built-in macros
both with and without the underscore prefix, where the underscore
versions behave as if the underscore carries through to the instructions
in the macros.  For example, '_MOV' may expand to '_MOV.N'.

   The underscore prefix only applies to individual instructions, not to
series of instructions.  For example, if a series of instructions have
underscore prefixes, the assembler will not transform the individual
instructions, but it may insert other instructions between them (e.g.,
to align a 'LOOP' instruction).  To prevent the assembler from modifying
a series of instructions as a whole, use the 'no-transform' directive.
*Note transform: Transform Directive.

==============================================================================
File: as.info,  Node: |Xtensa_Registers|,  Prev: |Xtensa_Opcodes|,  Up: |Xtensa_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Xtensa_Registers*

9.52.2.2 Register Names
-----------------------

The assembly syntax for a register file entry is the "short" name for a
TIE register file followed by the index into that register file.  For
example, the general-purpose 'AR' register file has a short name of 'a',
so these registers are named 'a0'...'a15'.  As a special feature, 'sp'
is also supported as a synonym for 'a1'.  Additional registers may be
added by processor configuration options and by designer-defined TIE
extensions.  An initial '$' character is optional in all register names.

==============================================================================
File: as.info,  Node: |Xtensa_Optimizations|,  Next: |Xtensa_Relaxation|,  Prev: |Xtensa_Syntax|,  Up: |Xtensa_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Xtensa_Optimizations*

9.52.3 Xtensa Optimizations
---------------------------

The optimizations currently supported by 'as' are generation of density
instructions where appropriate and automatic branch target alignment.

MENU

* |Density_Instructions|::        Using Density Instructions.
* |Xtensa_Automatic_Alignment|::  Automatic Instruction Alignment.

==============================================================================
File: as.info,  Node: |Density_Instructions|,  Next: |Xtensa_Automatic_Alignment|,  Up: |Xtensa_Optimizations|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Density_Instructions*

9.52.3.1 Using Density Instructions
-----------------------------------

The Xtensa instruction set has a code density option that provides
16-bit versions of some of the most commonly used opcodes.  Use of these
opcodes can significantly reduce code size.  When possible, the
assembler automatically translates instructions from the core Xtensa
instruction set into equivalent instructions from the Xtensa code
density option.  This translation can be disabled by using underscore
prefixes (*note Opcode Names: Xtensa Opcodes.), by using the
'--no-transform' command-line option (*note Command Line Options: Xtensa
Options.), or by using the 'no-transform' directive (*note transform:
Transform Directive.).

   It is a good idea _not_ to use the density instructions directly.
The assembler will automatically select dense instructions where
possible.  If you later need to use an Xtensa processor without the code
density option, the same assembly code will then work without
modification.

==============================================================================
File: as.info,  Node: |Xtensa_Automatic_Alignment|,  Prev: |Density_Instructions|,  Up: |Xtensa_Optimizations|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *Xtensa_Automatic_Alignment*

9.52.3.2 Automatic Instruction Alignment
----------------------------------------

The Xtensa assembler will automatically align certain instructions, both
to optimize performance and to satisfy architectural requirements.

   As an optimization to improve performance, the assembler attempts to
align branch targets so they do not cross instruction fetch boundaries.
(Xtensa processors can be configured with either 32-bit or 64-bit
instruction fetch widths.)  An instruction immediately following a call
is treated as a branch target in this context, because it will be the
target of a return from the call.  This alignment has the potential to
reduce branch penalties at some expense in code size.  This optimization
is enabled by default.  You can disable it with the '--no-target-align'
command-line option (*note Command Line Options: Xtensa Options.).

   The target alignment optimization is done without adding instructions
that could increase the execution time of the program.  If there are
density instructions in the code preceding a target, the assembler can
change the target alignment by widening some of those instructions to
the equivalent 24-bit instructions.  Extra bytes of padding can be
inserted immediately following unconditional jump and return
instructions.  This approach is usually successful in aligning many, but
not all, branch targets.

   The 'LOOP' family of instructions must be aligned such that the first
instruction in the loop body does not cross an instruction fetch
boundary (e.g., with a 32-bit fetch width, a 'LOOP' instruction must be
on either a 1 or 2 mod 4 byte boundary).  The assembler knows about this
restriction and inserts the minimal number of 2 or 3 byte no-op
instructions to satisfy it.  When no-op instructions are added, any
label immediately preceding the original loop will be moved in order to
refer to the loop instruction, not the newly generated no-op
instruction.  To preserve binary compatibility across processors with
different fetch widths, the assembler conservatively assumes a 32-bit
fetch width when aligning 'LOOP' instructions (except if the first
instruction in the loop is a 64-bit instruction).

   Previous versions of the assembler automatically aligned 'ENTRY'
instructions to 4-byte boundaries, but that alignment is now the
programmer's responsibility.

==============================================================================
File: as.info,  Node: |Xtensa_Relaxation|,  Next: |Xtensa_Directives|,  Prev: |Xtensa_Optimizations|,  Up: |Xtensa_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Xtensa_Relaxation*

9.52.4 Xtensa Relaxation
------------------------

When an instruction operand is outside the range allowed for that
particular instruction field, 'as' can transform the code to use a
functionally-equivalent instruction or sequence of instructions.  This
process is known as "relaxation".  This is typically done for branch
instructions because the distance of the branch targets is not known
until assembly-time.  The Xtensa assembler offers branch relaxation and
also extends this concept to function calls, 'MOVI' instructions and
other instructions with immediate fields.

MENU

* |Xtensa_Branch_Relaxation|::        Relaxation of Branches.
* |Xtensa_Call_Relaxation|::          Relaxation of Function Calls.
* |Xtensa_Jump_Relaxation|::          Relaxation of Jumps.
* |Xtensa_Immediate_Relaxation|::     Relaxation of other Immediate Fields.

==============================================================================
File: as.info,  Node: |Xtensa_Branch_Relaxation|,  Next: |Xtensa_Call_Relaxation|,  Up: |Xtensa_Relaxation|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *Xtensa_Branch_Relaxation*

9.52.4.1 Conditional Branch Relaxation
--------------------------------------

When the target of a branch is too far away from the branch itself,
i.e., when the offset from the branch to the target is too large to fit
in the immediate field of the branch instruction, it may be necessary to
replace the branch with a branch around a jump.  For example,

         beqz    a2, L

   may result in:

         bnez.n  a2, M
         j L
     M:

   (The 'BNEZ.N' instruction would be used in this example only if the
density option is available.  Otherwise, 'BNEZ' would be used.)

   This relaxation works well because the unconditional jump instruction
has a much larger offset range than the various conditional branches.
However, an error will occur if a branch target is beyond the range of a
jump instruction.  'as' cannot relax unconditional jumps.  Similarly, an
error will occur if the original input contains an unconditional jump to
a target that is out of range.

   Branch relaxation is enabled by default.  It can be disabled by using
underscore prefixes (*note Opcode Names: Xtensa Opcodes.), the
'--no-transform' command-line option (*note Command Line Options: Xtensa
Options.), or the 'no-transform' directive (*note transform: Transform
Directive.).

==============================================================================
File: as.info,  Node: |Xtensa_Call_Relaxation|,  Next: |Xtensa_Jump_Relaxation|,  Prev: |Xtensa_Branch_Relaxation|,  Up: |Xtensa_Relaxation|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *Xtensa_Call_Relaxation*

9.52.4.2 Function Call Relaxation
---------------------------------

Function calls may require relaxation because the Xtensa immediate call
instructions ('CALL0', 'CALL4', 'CALL8' and 'CALL12') provide a
PC-relative offset of only 512 Kbytes in either direction.  For larger
programs, it may be necessary to use indirect calls ('CALLX0', 'CALLX4',
'CALLX8' and 'CALLX12') where the target address is specified in a
register.  The Xtensa assembler can automatically relax immediate call
instructions into indirect call instructions.  This relaxation is done
by loading the address of the called function into the callee's return
address register and then using a 'CALLX' instruction.  So, for example:

         call8 func

   might be relaxed to:

         .literal .L1, func
         l32r    a8, .L1
         callx8  a8

   Because the addresses of targets of function calls are not generally
known until link-time, the assembler must assume the worst and relax all
the calls to functions in other source files, not just those that really
will be out of range.  The linker can recognize calls that were
unnecessarily relaxed, and it will remove the overhead introduced by the
assembler for those cases where direct calls are sufficient.

   Call relaxation is disabled by default because it can have a negative
effect on both code size and performance, although the linker can
usually eliminate the unnecessary overhead.  If a program is too large
and some of the calls are out of range, function call relaxation can be
enabled using the '--longcalls' command-line option or the 'longcalls'
directive (*note longcalls: Longcalls Directive.).

==============================================================================
File: as.info,  Node: |Xtensa_Jump_Relaxation|,  Next: |Xtensa_Immediate_Relaxation|,  Prev: |Xtensa_Call_Relaxation|,  Up: |Xtensa_Relaxation|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *Xtensa_Jump_Relaxation*

9.52.4.3 Jump Relaxation
------------------------

Jump instruction may require relaxation because the Xtensa jump
instruction ('J') provide a PC-relative offset of only 128 Kbytes in
either direction.  One option is to use jump long ('J.L') instruction,
which depending on jump distance may be assembled as jump ('J') or
indirect jump ('JX').  However it needs a free register.  When there's
no spare register it is possible to plant intermediate jump sites
(trampolines) between the jump instruction and its target.  These sites
may be located in areas unreachable by normal code execution flow, in
that case they only contain intermediate jumps, or they may be inserted
in the middle of code block, in which case there's an additional jump
from the beginning of the trampoline to the instruction past its end.
So, for example:

         j 1f
         ...
         retw
         ...
         mov a10, a2
         call8 func
         ...
     1:
         ...

   might be relaxed to:

         j .L0_TR_1
         ...
         retw
     .L0_TR_1:
         j 1f
         ...
         mov a10, a2
         call8 func
         ...
     1:
         ...

   or to:

         j .L0_TR_1
         ...
         retw
         ...
         mov a10, a2
         j .L0_TR_0
     .L0_TR_1:
         j 1f
     .L0_TR_0:
         call8 func
         ...
     1:
         ...

   The Xtensa assembler uses trampolines with jump around only when it
cannot find suitable unreachable trampoline.  There may be multiple
trampolines between the jump instruction and its target.

   This relaxation does not apply to jumps to undefined symbols,
assuming they will reach their targets once resolved.

   Jump relaxation is enabled by default because it does not affect code
size or performance while the code itself is small.  This relaxation may
be disabled completely with '--no-trampolines' or '--no-transform'
command-line options (*note Command Line Options: Xtensa Options.).

==============================================================================
File: as.info,  Node: |Xtensa_Immediate_Relaxation|,  Prev: |Xtensa_Jump_Relaxation|,  Up: |Xtensa_Relaxation|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Xtensa_Immediate_Relaxation*

9.52.4.4 Other Immediate Field Relaxation
-----------------------------------------

The assembler normally performs the following other relaxations.  They
can be disabled by using underscore prefixes (*note Opcode Names: Xtensa
Opcodes.), the '--no-transform' command-line option (*note Command Line
Options: Xtensa Options.), or the 'no-transform' directive (*note
transform: Transform Directive.).

   The 'MOVI' machine instruction can only materialize values in the
range from -2048 to 2047.  Values outside this range are best
materialized with 'L32R' instructions.  Thus:

         movi a0, 100000

   is assembled into the following machine code:

         .literal .L1, 100000
         l32r a0, .L1

   The 'L8UI' machine instruction can only be used with immediate
offsets in the range from 0 to 255.  The 'L16SI' and 'L16UI' machine
instructions can only be used with offsets from 0 to 510.  The 'L32I'
machine instruction can only be used with offsets from 0 to 1020.  A
load offset outside these ranges can be materialized with an 'L32R'
instruction if the destination register of the load is different than
the source address register.  For example:

         l32i a1, a0, 2040

   is translated to:

         .literal .L1, 2040
         l32r a1, .L1
         add a1, a0, a1
         l32i a1, a1, 0

If the load destination and source address register are the same, an
out-of-range offset causes an error.

   The Xtensa 'ADDI' instruction only allows immediate operands in the
range from -128 to 127.  There are a number of alternate instruction
sequences for the 'ADDI' operation.  First, if the immediate is 0, the
'ADDI' will be turned into a 'MOV.N' instruction (or the equivalent 'OR'
instruction if the code density option is not available).  If the 'ADDI'
immediate is outside of the range -128 to 127, but inside the range
-32896 to 32639, an 'ADDMI' instruction or 'ADDMI'/'ADDI' sequence will
be used.  Finally, if the immediate is outside of this range and a free
register is available, an 'L32R'/'ADD' sequence will be used with a
literal allocated from the literal pool.

   For example:

         addi    a5, a6, 0
         addi    a5, a6, 512
         addi    a5, a6, 513
         addi    a5, a6, 50000

   is assembled into the following:

         .literal .L1, 50000
         mov.n   a5, a6
         addmi   a5, a6, 0x200
         addmi   a5, a6, 0x200
         addi    a5, a5, 1
         l32r    a5, .L1
         add     a5, a6, a5

==============================================================================
File: as.info,  Node: |Xtensa_Directives|,  Prev: Xtensa Relaxation,  Up: |Xtensa_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Xtensa_Directives*

9.52.5 Directives
-----------------

The Xtensa assembler supports a region-based directive syntax:

         .begin DIRECTIVE [OPTIONS]
         ...
         .end DIRECTIVE

   All the Xtensa-specific directives that apply to a region of code use
this syntax.

   The directive applies to code between the '.begin' and the '.end'.
The state of the option after the '.end' reverts to what it was before
the '.begin'.  A nested '.begin'/'.end' region can further change the
state of the directive without having to be aware of its outer state.
For example, consider:

         .begin no-transform
     L:  add a0, a1, a2
         .begin transform
     M:  add a0, a1, a2
         .end transform
     N:  add a0, a1, a2
         .end no-transform

   The 'ADD' opcodes at 'L' and 'N' in the outer 'no-transform' region
both result in 'ADD' machine instructions, but the assembler selects an
'ADD.N' instruction for the 'ADD' at 'M' in the inner 'transform'
region.

   The advantage of this style is that it works well inside macros which
can preserve the context of their callers.

   The following directives are available:
MENU

* |Schedule_Directive|::         Enable instruction scheduling.
* |Longcalls_Directive|::        Use Indirect Calls for Greater Range.
* |Transform_Directive|::        Disable All Assembler Transformations.
* |Literal_Directive|::          Intermix Literals with Instructions.
* |Literal_Position_Directive|:: Specify Inline Literal Pool Locations.
* |Literal_Prefix_Directive|::   Specify Literal Section Name Prefix.
* |Absolute_Literals_Directive|:: Control PC-Relative vs. Absolute Literals.

==============================================================================
File: as.info,  Node: |Schedule_Directive|,  Next: |Longcalls_Directive|,  Up: Xtensa Directives
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *Schedule_Directive*

9.52.5.1 schedule
-----------------

The 'schedule' directive is recognized only for compatibility with
Tensilica's assembler.

         .begin [no-]schedule
         .end [no-]schedule

   This directive is ignored and has no effect on 'as'.

==============================================================================
File: as.info,  Node: |Longcalls_Directive|,  Next: |Transform_Directive|,  Prev: |Schedule_Directive|,  Up: |Xtensa_Directives|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *Longcalls_Directive*

9.52.5.2 longcalls
------------------

The 'longcalls' directive enables or disables function call relaxation.
*Note Function Call Relaxation: Xtensa Call Relaxation.

         .begin [no-]longcalls
         .end [no-]longcalls

   Call relaxation is disabled by default unless the '--longcalls'
command-line option is specified.  The 'longcalls' directive overrides
the default determined by the command-line options.

==============================================================================
File: as.info,  Node: |Transform_Directive|,  Next: |Literal_Directive|,  Prev: |Longcalls_Directive|,  Up: |Xtensa_Directives|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *Transform_Directive*

9.52.5.3 transform
------------------

This directive enables or disables all assembler transformation,
including relaxation (*note Xtensa Relaxation: Xtensa Relaxation.) and
optimization (*note Xtensa Optimizations: Xtensa Optimizations.).

         .begin [no-]transform
         .end [no-]transform

   Transformations are enabled by default unless the '--no-transform'
option is used.  The 'transform' directive overrides the default
determined by the command-line options.  An underscore opcode prefix,
disabling transformation of that opcode, always takes precedence over
both directives and command-line flags.

==============================================================================
File: as.info,  Node: |Literal_Directive|,  Next: |Literal_Position_Directive|,  Prev: |Transform_Directive|,  Up: |Xtensa_Directives|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Literal_Directive*

9.52.5.4 literal
----------------

The '.literal' directive is used to define literal pool data, i.e.,
read-only 32-bit data accessed via 'L32R' instructions.

         .literal LABEL, VALUE[, VALUE...]

   This directive is similar to the standard '.word' directive, except
that the actual location of the literal data is determined by the
assembler and linker, not by the position of the '.literal' directive.
Using this directive gives the assembler freedom to locate the literal
data in the most appropriate place and possibly to combine identical
literals.  For example, the code:

         entry sp, 40
         .literal .L1, sym
         l32r    a4, .L1

   can be used to load a pointer to the symbol 'sym' into register 'a4'.
The value of 'sym' will not be placed between the 'ENTRY' and 'L32R'
instructions; instead, the assembler puts the data in a literal pool.

   Literal pools are placed by default in separate literal sections;
however, when using the '--text-section-literals' option (*note Command
Line Options: Xtensa Options.), the literal pools for PC-relative mode
'L32R' instructions are placed in the current section.(1)  These text
section literal pools are created automatically before 'ENTRY'
instructions and manually after '.literal_position' directives (*note
literal_position: Literal Position Directive.).  If there are no
preceding 'ENTRY' instructions, explicit '.literal_position' directives
must be used to place the text section literal pools; otherwise, 'as'
will report an error.

   When literals are placed in separate sections, the literal section
names are derived from the names of the sections where the literals are
defined.  The base literal section names are '.literal' for PC-relative
mode 'L32R' instructions and '.lit4' for absolute mode 'L32R'
instructions (*note absolute-literals: Absolute Literals Directive.).
These base names are used for literals defined in the default '.text'
section.  For literals defined in other sections or within the scope of
a 'literal_prefix' directive (*note literal_prefix: Literal Prefix
Directive.), the following rules determine the literal section name:

  1. If the current section is a member of a section group, the literal
     section name includes the group name as a suffix to the base
     '.literal' or '.lit4' name, with a period to separate the base name
     and group name.  The literal section is also made a member of the
     group.

  2. If the current section name (or 'literal_prefix' value) begins with
     "'.gnu.linkonce.KIND.'", the literal section name is formed by
     replacing "'.KIND'" with the base '.literal' or '.lit4' name.  For
     example, for literals defined in a section named
     '.gnu.linkonce.t.func', the literal section will be
     '.gnu.linkonce.literal.func' or '.gnu.linkonce.lit4.func'.

  3. If the current section name (or 'literal_prefix' value) ends with
     '.text', the literal section name is formed by replacing that
     suffix with the base '.literal' or '.lit4' name.  For example, for
     literals defined in a section named '.iram0.text', the literal
     section will be '.iram0.literal' or '.iram0.lit4'.

  4. If none of the preceding conditions apply, the literal section name
     is formed by adding the base '.literal' or '.lit4' name as a suffix
     to the current section name (or 'literal_prefix' value).

   ---------- Footnotes ----------

   (1) Literals for the '.init' and '.fini' sections are always placed
in separate sections, even when '--text-section-literals' is enabled.

==============================================================================
File: as.info,  Node: |Literal_Position_Directive|,  Next: |Literal_Prefix_Directive|,  Prev: |Literal_Directive|,  Up: |Xtensa_Directives|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *Literal_Position_Directive*

9.52.5.5 literal_position
-------------------------

When using '--text-section-literals' to place literals inline in the
section being assembled, the '.literal_position' directive can be used
to mark a potential location for a literal pool.

         .literal_position

   The '.literal_position' directive is ignored when the
'--text-section-literals' option is not used or when 'L32R' instructions
use the absolute addressing mode.

   The assembler will automatically place text section literal pools
before 'ENTRY' instructions, so the '.literal_position' directive is
only needed to specify some other location for a literal pool.  You may
need to add an explicit jump instruction to skip over an inline literal
pool.

   For example, an interrupt vector does not begin with an 'ENTRY'
instruction so the assembler will be unable to automatically find a good
place to put a literal pool.  Moreover, the code for the interrupt
vector must be at a specific starting address, so the literal pool
cannot come before the start of the code.  The literal pool for the
vector must be explicitly positioned in the middle of the vector (before
any uses of the literals, due to the negative offsets used by
PC-relative 'L32R' instructions).  The '.literal_position' directive can
be used to do this.  In the following code, the literal for 'M' will
automatically be aligned correctly and is placed after the unconditional
jump.

         .global M
     code_start:
         j continue
         .literal_position
         .align 4
     continue:
         movi    a4, M

==============================================================================
File: as.info,  Node: |Literal_Prefix_Directive|,  Next: |Absolute_Literals_Directive|,  Prev: |Literal_Position_Directive|,  Up: |Xtensa_Directives|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *Literal_Prefix_Directive*

9.52.5.6 literal_prefix
-----------------------

The 'literal_prefix' directive allows you to override the default
literal section names, which are derived from the names of the sections
where the literals are defined.

         .begin literal_prefix [NAME]
         .end literal_prefix

   For literals defined within the delimited region, the literal section
names are derived from the NAME argument instead of the name of the
current section.  The rules used to derive the literal section names do
not change.  *Note literal: Literal Directive.  If the NAME argument is
omitted, the literal sections revert to the defaults.  This directive
has no effect when using the '--text-section-literals' option (*note
Command Line Options: Xtensa Options.).

==============================================================================
File: as.info,  Node: |Absolute_Literals_Directive|,  Prev: |Literal_Prefix_Directive|,  Up: |Xtensa_Directives|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Absolute_Literals_Directive*

9.52.5.7 absolute-literals
--------------------------

The 'absolute-literals' and 'no-absolute-literals' directives control
the absolute vs. PC-relative mode for 'L32R' instructions.  These are
relevant only for Xtensa configurations that include the absolute
addressing option for 'L32R' instructions.

         .begin [no-]absolute-literals
         .end [no-]absolute-literals

   These directives do not change the 'L32R' mode--they only cause the
assembler to emit the appropriate kind of relocation for 'L32R'
instructions and to place the literal values in the appropriate section.
To change the 'L32R' mode, the program must write the 'LITBASE' special
register.  It is the programmer's responsibility to keep track of the
mode and indicate to the assembler which mode is used in each region of
code.

   If the Xtensa configuration includes the absolute 'L32R' addressing
option, the default is to assume absolute 'L32R' addressing unless the
'--no-absolute-literals' command-line option is specified.  Otherwise,
the default is to assume PC-relative 'L32R' addressing.  The
'absolute-literals' directive can then be used to override the default
determined by the command-line options.

==============================================================================
File: as.info,  Node: |Z80_Dependent|,  Next: |Z8000_Dependent|,  Prev: |Xtensa_Dependent|,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Z80_Dependent*

9.53 Z80 Dependent Features
---------------------------

MENU

* |Z80_Options|::              Options
* |Z80_Syntax|::               Syntax
* |Z80_Floating_Point|::       Floating Point
* |Z80_Directives|::           Z80 Machine Directives
* |Z80_Opcodes|::              Opcodes

==============================================================================
File: as.info,  Node: |Z80_Options|,  Next: |Z80_Syntax|,  Up: |Z80_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Z80_Options*

9.53.1 Options
--------------

The Zilog Z80 and Ascii R800 version of 'as' have a few machine
dependent options.
'-z80'
     Produce code for the Z80 processor.  There are additional options
     to request warnings and error messages for undocumented
     instructions.
'-ignore-undocumented-instructions'
'-Wnud'
     Silently assemble undocumented Z80-instructions that have been
     adopted as documented R800-instructions.
'-ignore-unportable-instructions'
'-Wnup'
     Silently assemble all undocumented Z80-instructions.
'-warn-undocumented-instructions'
'-Wud'
     Issue warnings for undocumented Z80-instructions that work on R800,
     do not assemble other undocumented instructions without warning.
'-warn-unportable-instructions'
'-Wup'
     Issue warnings for other undocumented Z80-instructions, do not
     treat any undocumented instructions as errors.
'-forbid-undocumented-instructions'
'-Fud'
     Treat all undocumented z80-instructions as errors.
'-forbid-unportable-instructions'
'-Fup'
     Treat undocumented z80-instructions that do not work on R800 as
     errors.

'-r800'
     Produce code for the R800 processor.  The assembler does not
     support undocumented instructions for the R800.  In line with
     common practice, 'as' uses Z80 instruction names for the R800
     processor, as far as they exist.

==============================================================================
File: as.info,  Node: |Z80_Syntax|,  Next: |Z80_Floating_Point|,  Prev: |Z80_Options|,  Up: |Z80_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *Z80_Syntax*

9.53.2 Syntax
-------------

The assembler syntax closely follows the 'Z80 family CPU User Manual' by
Zilog.  In expressions a single '=' may be used as "is equal to"
comparison operator.

   Suffices can be used to indicate the radix of integer constants; 'H'
or 'h' for hexadecimal, 'D' or 'd' for decimal, 'Q', 'O', 'q' or 'o' for
octal, and 'B' for binary.

   The suffix 'b' denotes a backreference to local label.

MENU

* |Z80_Chars|::                Special Characters
* |Z80_Regs|::                 Register Names
* |Z80_Case|::                 Case Sensitivity

==============================================================================
File: as.info,  Node: |Z80_Chars|,  Next: |Z80_Regs|,  Up: |Z80_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *Z80_Chars*

9.53.2.1 Special Characters
---------------------------

The semicolon ';' is the line comment character;

   If a '#' appears as the first character of a line then the whole line
is treated as a comment, but in this case the line could also be a
logical line number directive (*note Comments::) or a preprocessor
control command (*note Preprocessing::).

   The Z80 assembler does not support a line separator character.

   The dollar sign '$' can be used as a prefix for hexadecimal numbers
and as a symbol denoting the current location counter.

   A backslash '\' is an ordinary character for the Z80 assembler.

   The single quote ''' must be followed by a closing quote.  If there
is one character in between, it is a character constant, otherwise it is
a string constant.

==============================================================================
File: as.info,  Node: |Z80_Regs|,  Next: |Z80_Case|,  Prev: |Z80_Chars|,  Up: |Z80_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *Z80_Regs*

9.53.2.2 Register Names
-----------------------

The registers are referred to with the letters assigned to them by
Zilog.  In addition 'as' recognizes 'ixl' and 'ixh' as the least and
most significant octet in 'ix', and similarly 'iyl' and 'iyh' as parts
of 'iy'.

==============================================================================
File: as.info,  Node: |Z80_Case|,  Prev: |Z80_Regs|,  Up: |Z80_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *Z80_Case*

9.53.2.3 Case Sensitivity
-------------------------

Upper and lower case are equivalent in register names, opcodes,
condition codes and assembler directives.  The case of letters is
significant in labels and symbol names.  The case is also important to
distinguish the suffix 'b' for a backward reference to a local label
from the suffix 'B' for a number in binary notation.

==============================================================================
File: as.info,  Node: |Z80_Floating_Point|,  Next: |Z80_Directives|,  Prev: |Z80_Syntax|,  Up: |Z80_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *Z80_Floating_Point*

9.53.3 Floating Point
---------------------

Floating-point numbers are not supported.

==============================================================================
File: as.info,  Node: |Z80_Directives|,  Next: |Z80_Opcodes|,  Prev: |Z80_Floating_Point|,  Up: |Z80_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Z80_Directives*

9.53.4 Z80 Assembler Directives
-------------------------------

'as' for the Z80 supports some additional directives for compatibility
with other assemblers.

   These are the additional directives in 'as' for the Z80:

'db EXPRESSION|STRING[,EXPRESSION|STRING...]'
'defb EXPRESSION|STRING[,EXPRESSION|STRING...]'
     For each STRING the characters are copied to the object file, for
     each other EXPRESSION the value is stored in one byte.  A warning
     is issued in case of an overflow.

'dw EXPRESSION[,EXPRESSION...]'
'defw EXPRESSION[,EXPRESSION...]'
     For each EXPRESSION the value is stored in two bytes, ignoring
     overflow.

'd24 EXPRESSION[,EXPRESSION...]'
'def24 EXPRESSION[,EXPRESSION...]'
     For each EXPRESSION the value is stored in three bytes, ignoring
     overflow.

'd32 EXPRESSION[,EXPRESSION...]'
'def32 EXPRESSION[,EXPRESSION...]'
     For each EXPRESSION the value is stored in four bytes, ignoring
     overflow.

'ds COUNT[, VALUE]'
'defs COUNT[, VALUE]'
     Fill COUNT bytes in the object file with VALUE, if VALUE is omitted
     it defaults to zero.

'SYMBOL equ EXPRESSION'
'SYMBOL defl EXPRESSION'
     These directives set the value of SYMBOL to EXPRESSION.  If 'equ'
     is used, it is an error if SYMBOL is already defined.  Symbols
     defined with 'equ' are not protected from redefinition.

'set'
     This is a normal instruction on Z80, and not an assembler
     directive.

'psect NAME'
     A synonym for *Note Section::, no second argument should be given.

==============================================================================
File: as.info,  Node: |Z80_Opcodes|,  Prev: |Z80_Directives|,  Up: |Z80_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Z80_Opcodes*

9.53.5 Opcodes
--------------

In line with common practice, Z80 mnemonics are used for both the Z80
and the R800.

   In many instructions it is possible to use one of the half index
registers ('ixl','ixh','iyl','iyh') in stead of an 8-bit general purpose
register.  This yields instructions that are documented on the R800 and
undocumented on the Z80.  Similarly 'in f,(c)' is documented on the R800
and undocumented on the Z80.

   The assembler also supports the following undocumented
Z80-instructions, that have not been adopted in the R800 instruction
set:
'out (c),0'
     Sends zero to the port pointed to by register c.

'sli M'
     Equivalent to 'M = (M<<1)+1', the operand M can be any operand that
     is valid for 'sla'.  One can use 'sll' as a synonym for 'sli'.

'OP (ix+D), R'
     This is equivalent to

          ld R, (ix+D)
          OPC R
          ld (ix+D), R

     The operation 'OPC' may be any of 'res B,', 'set B,', 'rl', 'rlc',
     'rr', 'rrc', 'sla', 'sli', 'sra' and 'srl', and the register 'R'
     may be any of 'a', 'b', 'c', 'd', 'e', 'h' and 'l'.

'OPC (iy+D), R'
     As above, but with 'iy' instead of 'ix'.

   The web site at <http://www.z80.info> is a good starting place to
find more information on programming the Z80.

==============================================================================
File: as.info,  Node: |Z8000_Dependent|,  Prev: Z80-Dependent,  Up: |Machine_Dependencies|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *Z8000_Dependent*

9.54 Z8000 Dependent Features
-----------------------------

The Z8000 as supports both members of the Z8000 family: the unsegmented
Z8002, with 16 bit addresses, and the segmented Z8001 with 24 bit
addresses.

   When the assembler is in unsegmented mode (specified with the
'unsegm' directive), an address takes up one word (16 bit) sized
register.  When the assembler is in segmented mode (specified with the
'segm' directive), a 24-bit address takes up a long (32 bit) register.
*Note Assembler Directives for the Z8000: Z8000 Directives, for a list
of other Z8000 specific assembler directives.

MENU

* |Z8000_Options|::               Command-line options for the Z8000
* |Z8000_Syntax|::                Assembler syntax for the Z8000
* |Z8000_Directives|::            Special directives for the Z8000
* |Z8000_Opcodes|::               Opcodes

==============================================================================
File: as.info,  Node: |Z8000_Options|,  Next: |Z8000_Syntax|,  Up: Z8000-Dependent
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Z8000_Options*

9.54.1 Options
--------------

'-z8001'
     Generate segmented code by default.

'-z8002'
     Generate unsegmented code by default.

==============================================================================
File: as.info,  Node: |Z8000_Syntax|,  Next: |Z8000_Directives|,  Prev: |Z8000_Options|,  Up: |Z8000_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Z8000_Syntax*

9.54.2 Syntax
-------------

MENU

* |Z8000_Chars|::                Special Characters
* |Z8000_Regs|::                 Register Names
* |Z8000_Addressing|::           Addressing Modes

==============================================================================
File: as.info,  Node: |Z8000_Chars|,  Next: |Z8000_Regs|,  Up: |Z8000_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Z8000_Chars*

9.54.2.1 Special Characters
---------------------------

'!' is the line comment character.

   If a '#' appears as the first character of a line then the whole line
is treated as a comment, but in this case the line could also be a
logical line number directive (*note Comments::) or a preprocessor
control command (*note Preprocessing::).

   You can use ';' instead of a newline to separate statements.

==============================================================================
File: as.info,  Node: |Z8000_Regs|,  Next: |Z8000_Addressing|,  Prev: |Z8000_Chars|,  Up: |Z8000_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *Z8000_Regs*

9.54.2.2 Register Names
-----------------------

The Z8000 has sixteen 16 bit registers, numbered 0 to 15.  You can refer
to different sized groups of registers by register number, with the
prefix 'r' for 16 bit registers, 'rr' for 32 bit registers and 'rq' for
64 bit registers.  You can also refer to the contents of the first eight
(of the sixteen 16 bit registers) by bytes.  They are named 'rlN' and
'rhN'.

_byte registers_
     rl0 rh0 rl1 rh1 rl2 rh2 rl3 rh3
     rl4 rh4 rl5 rh5 rl6 rh6 rl7 rh7

_word registers_
     r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15

_long word registers_
     rr0 rr2 rr4 rr6 rr8 rr10 rr12 rr14

_quad word registers_
     rq0 rq4 rq8 rq12

==============================================================================
File: as.info,  Node: |Z8000_Addressing|,  Prev: |Z8000_Regs|,  Up: |Z8000_Syntax|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Z8000_Addressing*

9.54.2.3 Addressing Modes
-------------------------

as understands the following addressing modes for the Z8000:

'rlN'
'rhN'
'rN'
'rrN'
'rqN'
     Register direct: 8bit, 16bit, 32bit, and 64bit registers.

'@rN'
'@rrN'
     Indirect register: @rrN in segmented mode, @rN in unsegmented mode.

'ADDR'
     Direct: the 16 bit or 24 bit address (depending on whether the
     assembler is in segmented or unsegmented mode) of the operand is in
     the instruction.

'address(rN)'
     Indexed: the 16 or 24 bit address is added to the 16 bit register
     to produce the final address in memory of the operand.

'rN(#IMM)'
'rrN(#IMM)'
     Base Address: the 16 or 24 bit register is added to the 16 bit sign
     extended immediate displacement to produce the final address in
     memory of the operand.

'rN(rM)'
'rrN(rM)'
     Base Index: the 16 or 24 bit register rN or rrN is added to the
     sign extended 16 bit index register rM to produce the final address
     in memory of the operand.

'#XX'
     Immediate data XX.

==============================================================================
File: as.info,  Node: |Z8000_Directives|,  Next: |Z8000_Opcodes|,  Prev: |Z8000_Syntax|,  Up: |Z8000_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Z8000_Directives*

9.54.3 Assembler Directives for the Z8000
-----------------------------------------

The Z8000 port of as includes additional assembler directives, for
compatibility with other Z8000 assemblers.  These do not begin with '.'
(unlike the ordinary as directives).

'segm'
'.z8001'
     Generate code for the segmented Z8001.

'unsegm'
'.z8002'
     Generate code for the unsegmented Z8002.

'name'
     Synonym for '.file'

'global'
     Synonym for '.global'

'wval'
     Synonym for '.word'

'lval'
     Synonym for '.long'

'bval'
     Synonym for '.byte'

'sval'
     Assemble a string.  'sval' expects one string literal, delimited by
     single quotes.  It assembles each byte of the string into
     consecutive addresses.  You can use the escape sequence '%XX'
     (where XX represents a two-digit hexadecimal number) to represent
     the character whose ASCII value is XX.  Use this feature to
     describe single quote and other characters that may not appear in
     string literals as themselves.  For example, the C statement
     'char *a = "he said \"it's 50% off\"";' is represented in Z8000
     assembly language (shown with the assembler output in hex at the
     left) as

          68652073    sval    'he said %22it%27s 50%25 off%22%00'
          61696420
          22697427
          73203530
          25206F66
          662200

'rsect'
     synonym for '.section'

'block'
     synonym for '.space'

'even'
     special case of '.align'; aligns output to even byte boundary.

==============================================================================
File: as.info,  Node: |Z8000_Opcodes|,  Prev: |Z8000_Directives|,  Up: |Z8000_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Z8000_Opcodes*

9.54.4 Opcodes
--------------

For detailed information on the Z8000 machine instruction set, see
'Z8000 Technical Manual'.

   The following table summarizes the opcodes and their arguments:

                 rs   16 bit source register
                 rd   16 bit destination register
                 rbs   8 bit source register
                 rbd   8 bit destination register
                 rrs   32 bit source register
                 rrd   32 bit destination register
                 rqs   64 bit source register
                 rqd   64 bit destination register
                 addr 16/24 bit address
                 imm  immediate data

     adc rd,rs               clrb addr               cpsir @rd,@rs,rr,cc
     adcb rbd,rbs            clrb addr(rd)           cpsirb @rd,@rs,rr,cc
     add rd,@rs              clrb rbd                dab rbd
     add rd,addr             com @rd                 dbjnz rbd,disp7
     add rd,addr(rs)         com addr                dec @rd,imm4m1
     add rd,imm16            com addr(rd)            dec addr(rd),imm4m1
     add rd,rs               com rd                  dec addr,imm4m1
     addb rbd,@rs            comb @rd                dec rd,imm4m1
     addb rbd,addr           comb addr               decb @rd,imm4m1
     addb rbd,addr(rs)       comb addr(rd)           decb addr(rd),imm4m1
     addb rbd,imm8           comb rbd                decb addr,imm4m1
     addb rbd,rbs            comflg flags            decb rbd,imm4m1
     addl rrd,@rs            cp @rd,imm16            di i2
     addl rrd,addr           cp addr(rd),imm16       div rrd,@rs
     addl rrd,addr(rs)       cp addr,imm16           div rrd,addr
     addl rrd,imm32          cp rd,@rs               div rrd,addr(rs)
     addl rrd,rrs            cp rd,addr              div rrd,imm16
     and rd,@rs              cp rd,addr(rs)          div rrd,rs
     and rd,addr             cp rd,imm16             divl rqd,@rs
     and rd,addr(rs)         cp rd,rs                divl rqd,addr
     and rd,imm16            cpb @rd,imm8            divl rqd,addr(rs)
     and rd,rs               cpb addr(rd),imm8       divl rqd,imm32
     andb rbd,@rs            cpb addr,imm8           divl rqd,rrs
     andb rbd,addr           cpb rbd,@rs             djnz rd,disp7
     andb rbd,addr(rs)       cpb rbd,addr            ei i2
     andb rbd,imm8           cpb rbd,addr(rs)        ex rd,@rs
     andb rbd,rbs            cpb rbd,imm8            ex rd,addr
     bit @rd,imm4            cpb rbd,rbs             ex rd,addr(rs)
     bit addr(rd),imm4       cpd rd,@rs,rr,cc        ex rd,rs
     bit addr,imm4           cpdb rbd,@rs,rr,cc      exb rbd,@rs
     bit rd,imm4             cpdr rd,@rs,rr,cc       exb rbd,addr
     bit rd,rs               cpdrb rbd,@rs,rr,cc     exb rbd,addr(rs)
     bitb @rd,imm4           cpi rd,@rs,rr,cc        exb rbd,rbs
     bitb addr(rd),imm4      cpib rbd,@rs,rr,cc      ext0e imm8
     bitb addr,imm4          cpir rd,@rs,rr,cc       ext0f imm8
     bitb rbd,imm4           cpirb rbd,@rs,rr,cc     ext8e imm8
     bitb rbd,rs             cpl rrd,@rs             ext8f imm8
     bpt                     cpl rrd,addr            exts rrd
     call @rd                cpl rrd,addr(rs)        extsb rd
     call addr               cpl rrd,imm32           extsl rqd
     call addr(rd)           cpl rrd,rrs             halt
     calr disp12             cpsd @rd,@rs,rr,cc      in rd,@rs
     clr @rd                 cpsdb @rd,@rs,rr,cc     in rd,imm16
     clr addr                cpsdr @rd,@rs,rr,cc     inb rbd,@rs
     clr addr(rd)            cpsdrb @rd,@rs,rr,cc    inb rbd,imm16
     clr rd                  cpsi @rd,@rs,rr,cc      inc @rd,imm4m1
     clrb @rd                cpsib @rd,@rs,rr,cc     inc addr(rd),imm4m1
     inc addr,imm4m1         ldb rbd,rs(rx)          mult rrd,addr(rs)
     inc rd,imm4m1           ldb rd(imm16),rbs       mult rrd,imm16
     incb @rd,imm4m1         ldb rd(rx),rbs          mult rrd,rs
     incb addr(rd),imm4m1    ldctl ctrl,rs           multl rqd,@rs
     incb addr,imm4m1        ldctl rd,ctrl           multl rqd,addr
     incb rbd,imm4m1         ldd @rs,@rd,rr          multl rqd,addr(rs)
     ind @rd,@rs,ra          lddb @rs,@rd,rr         multl rqd,imm32
     indb @rd,@rs,rba        lddr @rs,@rd,rr         multl rqd,rrs
     inib @rd,@rs,ra         lddrb @rs,@rd,rr        neg @rd
     inibr @rd,@rs,ra        ldi @rd,@rs,rr          neg addr
     iret                    ldib @rd,@rs,rr         neg addr(rd)
     jp cc,@rd               ldir @rd,@rs,rr         neg rd
     jp cc,addr              ldirb @rd,@rs,rr        negb @rd
     jp cc,addr(rd)          ldk rd,imm4             negb addr
     jr cc,disp8             ldl @rd,rrs             negb addr(rd)
     ld @rd,imm16            ldl addr(rd),rrs        negb rbd
     ld @rd,rs               ldl addr,rrs            nop
     ld addr(rd),imm16       ldl rd(imm16),rrs       or rd,@rs
     ld addr(rd),rs          ldl rd(rx),rrs          or rd,addr
     ld addr,imm16           ldl rrd,@rs             or rd,addr(rs)
     ld addr,rs              ldl rrd,addr            or rd,imm16
     ld rd(imm16),rs         ldl rrd,addr(rs)        or rd,rs
     ld rd(rx),rs            ldl rrd,imm32           orb rbd,@rs
     ld rd,@rs               ldl rrd,rrs             orb rbd,addr
     ld rd,addr              ldl rrd,rs(imm16)       orb rbd,addr(rs)
     ld rd,addr(rs)          ldl rrd,rs(rx)          orb rbd,imm8
     ld rd,imm16             ldm @rd,rs,n            orb rbd,rbs
     ld rd,rs                ldm addr(rd),rs,n       out @rd,rs
     ld rd,rs(imm16)         ldm addr,rs,n           out imm16,rs
     ld rd,rs(rx)            ldm rd,@rs,n            outb @rd,rbs
     lda rd,addr             ldm rd,addr(rs),n       outb imm16,rbs
     lda rd,addr(rs)         ldm rd,addr,n           outd @rd,@rs,ra
     lda rd,rs(imm16)        ldps @rs                outdb @rd,@rs,rba
     lda rd,rs(rx)           ldps addr               outib @rd,@rs,ra
     ldar rd,disp16          ldps addr(rs)           outibr @rd,@rs,ra
     ldb @rd,imm8            ldr disp16,rs           pop @rd,@rs
     ldb @rd,rbs             ldr rd,disp16           pop addr(rd),@rs
     ldb addr(rd),imm8       ldrb disp16,rbs         pop addr,@rs
     ldb addr(rd),rbs        ldrb rbd,disp16         pop rd,@rs
     ldb addr,imm8           ldrl disp16,rrs         popl @rd,@rs
     ldb addr,rbs            ldrl rrd,disp16         popl addr(rd),@rs
     ldb rbd,@rs             mbit                    popl addr,@rs
     ldb rbd,addr            mreq rd                 popl rrd,@rs
     ldb rbd,addr(rs)        mres                    push @rd,@rs
     ldb rbd,imm8            mset                    push @rd,addr
     ldb rbd,rbs             mult rrd,@rs            push @rd,addr(rs)
     ldb rbd,rs(imm16)       mult rrd,addr           push @rd,imm16
     push @rd,rs             set addr,imm4           subl rrd,imm32
     pushl @rd,@rs           set rd,imm4             subl rrd,rrs
     pushl @rd,addr          set rd,rs               tcc cc,rd
     pushl @rd,addr(rs)      setb @rd,imm4           tccb cc,rbd
     pushl @rd,rrs           setb addr(rd),imm4      test @rd
     res @rd,imm4            setb addr,imm4          test addr
     res addr(rd),imm4       setb rbd,imm4           test addr(rd)
     res addr,imm4           setb rbd,rs             test rd
     res rd,imm4             setflg imm4             testb @rd
     res rd,rs               sinb rbd,imm16          testb addr
     resb @rd,imm4           sinb rd,imm16           testb addr(rd)
     resb addr(rd),imm4      sind @rd,@rs,ra         testb rbd
     resb addr,imm4          sindb @rd,@rs,rba       testl @rd
     resb rbd,imm4           sinib @rd,@rs,ra        testl addr
     resb rbd,rs             sinibr @rd,@rs,ra       testl addr(rd)
     resflg imm4             sla rd,imm8             testl rrd
     ret cc                  slab rbd,imm8           trdb @rd,@rs,rba
     rl rd,imm1or2           slal rrd,imm8           trdrb @rd,@rs,rba
     rlb rbd,imm1or2         sll rd,imm8             trib @rd,@rs,rbr
     rlc rd,imm1or2          sllb rbd,imm8           trirb @rd,@rs,rbr
     rlcb rbd,imm1or2        slll rrd,imm8           trtdrb @ra,@rb,rbr
     rldb rbb,rba            sout imm16,rs           trtib @ra,@rb,rr
     rr rd,imm1or2           soutb imm16,rbs         trtirb @ra,@rb,rbr
     rrb rbd,imm1or2         soutd @rd,@rs,ra        trtrb @ra,@rb,rbr
     rrc rd,imm1or2          soutdb @rd,@rs,rba      tset @rd
     rrcb rbd,imm1or2        soutib @rd,@rs,ra       tset addr
     rrdb rbb,rba            soutibr @rd,@rs,ra      tset addr(rd)
     rsvd36                  sra rd,imm8             tset rd
     rsvd38                  srab rbd,imm8           tsetb @rd
     rsvd78                  sral rrd,imm8           tsetb addr
     rsvd7e                  srl rd,imm8             tsetb addr(rd)
     rsvd9d                  srlb rbd,imm8           tsetb rbd
     rsvd9f                  srll rrd,imm8           xor rd,@rs
     rsvdb9                  sub rd,@rs              xor rd,addr
     rsvdbf                  sub rd,addr             xor rd,addr(rs)
     sbc rd,rs               sub rd,addr(rs)         xor rd,imm16
     sbcb rbd,rbs            sub rd,imm16            xor rd,rs
     sc imm8                 sub rd,rs               xorb rbd,@rs
     sda rd,rs               subb rbd,@rs            xorb rbd,addr
     sdab rbd,rs             subb rbd,addr           xorb rbd,addr(rs)
     sdal rrd,rs             subb rbd,addr(rs)       xorb rbd,imm8
     sdl rd,rs               subb rbd,imm8           xorb rbd,rbs
     sdlb rbd,rs             subb rbd,rbs            xorb rbd,rbs
     sdll rrd,rs             subl rrd,@rs
     set @rd,imm4            subl rrd,addr
     set addr(rd),imm4       subl rrd,addr(rs)

==============================================================================
File: as.info,  Node: |Reporting_Bugs|,  Next: |Acknowledgements|,  Prev: |Machine_Dependencies|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Reporting_Bugs*

10 Reporting Bugs
=================

Your bug reports play an essential role in making 'as' reliable.

   Reporting a bug may help you by bringing a solution to your problem,
or it may not.  But in any case the principal function of a bug report
is to help the entire community by making the next version of 'as' work
better.  Bug reports are your contribution to the maintenance of 'as'.

   In order for a bug report to serve its purpose, you must include the
information that enables us to fix the bug.

MENU

* |Bug_Criteria|::                Have you found a bug?
* |Bug_Reporting|::               How to report bugs

==============================================================================
File: as.info,  Node: |Bug_Criteria|,  Next: |Bug_Reporting|,  Up: |Reporting_Bugs|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Bug_Criteria*

10.1 Have You Found a Bug?
--------------------------

If you are not sure whether you have found a bug, here are some
guidelines:

   * If the assembler gets a fatal signal, for any input whatever, that
     is a 'as' bug.  Reliable assemblers never crash.

   * If 'as' produces an error message for valid input, that is a bug.

   * If 'as' does not produce an error message for invalid input, that
     is a bug.  However, you should note that your idea of "invalid
     input" might be our idea of "an extension" or "support for
     traditional practice".

   * If you are an experienced user of assemblers, your suggestions for
     improvement of 'as' are welcome in any case.

==============================================================================
File: as.info,  Node: |Bug_Reporting|,  Prev: |Bug_Criteria|,  Up: |Reporting_Bugs|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Bug_Reporting*

10.2 How to Report Bugs
-----------------------

A number of companies and individuals offer support for GNU products.
If you obtained 'as' from a support organization, we recommend you
contact that organization first.

   You can find contact information for many support companies and
individuals in the file 'etc/SERVICE' in the GNU Emacs distribution.

   In any event, we also recommend that you send bug reports for 'as' to
<http://www.sourceware.org/bugzilla/>.

   The fundamental principle of reporting bugs usefully is this: *report
all the facts*.  If you are not sure whether to state a fact or leave it
out, state it!

   Often people omit facts because they think they know what causes the
problem and assume that some details do not matter.  Thus, you might
assume that the name of a symbol you use in an example does not matter.
Well, probably it does not, but one cannot be sure.  Perhaps the bug is
a stray memory reference which happens to fetch from the location where
that name is stored in memory; perhaps, if the name were different, the
contents of that location would fool the assembler into doing the right
thing despite the bug.  Play it safe and give a specific, complete
example.  That is the easiest thing for you to do, and the most helpful.

   Keep in mind that the purpose of a bug report is to enable us to fix
the bug if it is new to us.  Therefore, always write your bug reports on
the assumption that the bug has not been reported previously.

   Sometimes people give a few sketchy facts and ask, "Does this ring a
bell?"  This cannot help us fix a bug, so it is basically useless.  We
respond by asking for enough details to enable us to investigate.  You
might as well expedite matters by sending them to begin with.

   To enable us to fix the bug, you should include all these things:

   * The version of 'as'.  'as' announces it if you start it with the
     '--version' argument.

     Without this, we will not know whether there is any point in
     looking for the bug in the current version of 'as'.

   * Any patches you may have applied to the 'as' source.

   * The type of machine you are using, and the operating system name
     and version number.

   * What compiler (and its version) was used to compile 'as'--e.g.
     "'gcc-2.7'".

   * The command arguments you gave the assembler to assemble your
     example and observe the bug.  To guarantee you will not omit
     something important, list them all.  A copy of the Makefile (or the
     output from make) is sufficient.

     If we were to try to guess the arguments, we would probably guess
     wrong and then we might not encounter the bug.

   * A complete input file that will reproduce the bug.  If the bug is
     observed when the assembler is invoked via a compiler, send the
     assembler source, not the high level language source.  Most
     compilers will produce the assembler source when run with the '-S'
     option.  If you are using 'gcc', use the options '-v --save-temps';
     this will save the assembler source in a file with an extension of
     '.s', and also show you exactly how 'as' is being run.

   * A description of what behavior you observe that you believe is
     incorrect.  For example, "It gets a fatal signal."

     Of course, if the bug is that 'as' gets a fatal signal, then we
     will certainly notice it.  But if the bug is incorrect output, we
     might not notice unless it is glaringly wrong.  You might as well
     not give us a chance to make a mistake.

     Even if the problem you experience is a fatal signal, you should
     still say so explicitly.  Suppose something strange is going on,
     such as, your copy of 'as' is out of sync, or you have encountered
     a bug in the C library on your system.  (This has happened!)  Your
     copy might crash and ours would not.  If you told us to expect a
     crash, then when ours fails to crash, we would know that the bug
     was not happening for us.  If you had not told us to expect a
     crash, then we would not be able to draw any conclusion from our
     observations.

   * If you wish to suggest changes to the 'as' source, send us context
     diffs, as generated by 'diff' with the '-u', '-c', or '-p' option.
     Always send diffs from the old file to the new file.  If you even
     discuss something in the 'as' source, refer to it by context, not
     by line number.

     The line numbers in our development sources will not match those in
     your sources.  Your line numbers would convey no useful information
     to us.

   Here are some things that are not necessary:

   * A description of the envelope of the bug.

     Often people who encounter a bug spend a lot of time investigating
     which changes to the input file will make the bug go away and which
     changes will not affect it.

     This is often time consuming and not very useful, because the way
     we will find the bug is by running a single example under the
     debugger with breakpoints, not by pure deduction from a series of
     examples.  We recommend that you save your time for something else.

     Of course, if you can find a simpler example to report _instead_ of
     the original one, that is a convenience for us.  Errors in the
     output will be easier to spot, running under the debugger will take
     less time, and so on.

     However, simplification is not vital; if you do not want to do
     this, report the bug anyway and send us the entire test case you
     used.

   * A patch for the bug.

     A patch for the bug does help us if it is a good one.  But do not
     omit the necessary information, such as the test case, on the
     assumption that a patch is all we need.  We might see problems with
     your patch and decide to fix the problem another way, or we might
     not understand it at all.

     Sometimes with a program as complicated as 'as' it is very hard to
     construct an example that will make the program follow a certain
     path through the code.  If you do not send us the example, we will
     not be able to construct one, so we will not be able to verify that
     the bug is fixed.

     And if we cannot understand what bug you are trying to fix, or why
     your patch should be an improvement, we will not install it.  A
     test case will help us to understand.

   * A guess about what the bug is or what it depends on.

     Such guesses are usually wrong.  Even we cannot guess right about
     such things without first using the debugger to find the facts.

==============================================================================
File: as.info,  Node: |Acknowledgements|,  Next: |GNU_Free_Documentation_License|,  Prev: |Reporting_Bugs|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Acknowledgements*

11 Acknowledgements
===================

If you have contributed to GAS and your name isn't listed here, it is
not meant as a slight.  We just don't know about it.  Send mail to the
maintainer, and we'll correct the situation.  Currently the maintainer
is Nick Clifton (email address 'nickc@redhat.com').

   Dean Elsner wrote the original GNU assembler for the VAX.(1)

   Jay Fenlason maintained GAS for a while, adding support for
GDB-specific debug information and the 68k series machines, most of the
preprocessing pass, and extensive changes in 'messages.c',
'input-file.c', 'write.c'.

   K. Richard Pixley maintained GAS for a while, adding various
enhancements and many bug fixes, including merging support for several
processors, breaking GAS up to handle multiple object file format back
ends (including heavy rewrite, testing, an integration of the coff and
b.out back ends), adding configuration including heavy testing and
verification of cross assemblers and file splits and renaming, converted
GAS to strictly ANSI C including full prototypes, added support for
m680[34]0 and cpu32, did considerable work on i960 including a COFF port
(including considerable amounts of reverse engineering), a SPARC opcode
file rewrite, DECstation, rs6000, and hp300hpux host ports, updated
"know" assertions and made them work, much other reorganization,
cleanup, and lint.

   Ken Raeburn wrote the high-level BFD interface code to replace most
of the code in format-specific I/O modules.

   The original VMS support was contributed by David L. Kashtan.  Eric
Youngdale has done much work with it since.

   The Intel 80386 machine description was written by Eliot Dresselhaus.

   Minh Tran-Le at IntelliCorp contributed some AIX 386 support.

   The Motorola 88k machine description was contributed by Devon Bowen
of Buffalo University and Torbjorn Granlund of the Swedish Institute of
Computer Science.

   Keith Knowles at the Open Software Foundation wrote the original MIPS
back end ('tc-mips.c', 'tc-mips.h'), and contributed Rose format support
(which hasn't been merged in yet).  Ralph Campbell worked with the MIPS
code to support a.out format.

   Support for the Zilog Z8k and Renesas H8/300 processors (tc-z8k,
tc-h8300), and IEEE 695 object file format (obj-ieee), was written by
Steve Chamberlain of Cygnus Support.  Steve also modified the COFF back
end to use BFD for some low-level operations, for use with the H8/300
and AMD 29k targets.

   John Gilmore built the AMD 29000 support, added '.include' support,
and simplified the configuration of which versions accept which
directives.  He updated the 68k machine description so that Motorola's
opcodes always produced fixed-size instructions (e.g., 'jsr'), while
synthetic instructions remained shrinkable ('jbsr').  John fixed many
bugs, including true tested cross-compilation support, and one bug in
relaxation that took a week and required the proverbial one-bit fix.

   Ian Lance Taylor of Cygnus Support merged the Motorola and MIT syntax
for the 68k, completed support for some COFF targets (68k, i386 SVR3,
and SCO Unix), added support for MIPS ECOFF and ELF targets, wrote the
initial RS/6000 and PowerPC assembler, and made a few other minor
patches.

   Steve Chamberlain made GAS able to generate listings.

   Hewlett-Packard contributed support for the HP9000/300.

   Jeff Law wrote GAS and BFD support for the native HPPA object format
(SOM) along with a fairly extensive HPPA testsuite (for both SOM and ELF
object formats).  This work was supported by both the Center for
Software Science at the University of Utah and Cygnus Support.

   Support for ELF format files has been worked on by Mark Eichin of
Cygnus Support (original, incomplete implementation for SPARC), Pete
Hoogenboom and Jeff Law at the University of Utah (HPPA mainly), Michael
Meissner of the Open Software Foundation (i386 mainly), and Ken Raeburn
of Cygnus Support (sparc, and some initial 64-bit support).

   Linas Vepstas added GAS support for the ESA/390 "IBM 370"
architecture.

   Richard Henderson rewrote the Alpha assembler.  Klaus Kaempf wrote
GAS and BFD support for openVMS/Alpha.

   Timothy Wall, Michael Hayes, and Greg Smart contributed to the
various tic* flavors.

   David Heine, Sterling Augustine, Bob Wilson and John Ruttenberg from
Tensilica, Inc. added support for Xtensa processors.

   Several engineers at Cygnus Support have also provided many small bug
fixes and configuration enhancements.

   Jon Beniston added support for the Lattice Mico32 architecture.

   Many others have contributed large or small bugfixes and
enhancements.  If you have contributed significant work and are not
mentioned on this list, and want to be, let us know.  Some of the
history has been lost; we are not intentionally leaving anyone out.

   ---------- Footnotes ----------

   (1) Any more details?

==============================================================================
File: as.info,  Node: |GNU_Free_Documentation_License|,  Next: |AS_Index|,  Prev: |Acknowledgements|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *GNU_Free_Documentation_License*

Appendix A GNU Free Documentation License
=========================================

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
----------------------------------------------------

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts."  line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.

==============================================================================
File: as.info,  Node: |AS_Index|,  Prev: GNU Free Documentation License,  Up: Top
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *AS_Index*

AS Index
========


MENU

* \" (doublequote character):            Strings.            (line   43)
* \b (backspace character):              Strings.            (line   15)
* \DDD (octal character code):           Strings.            (line   30)
* \f (formfeed character):               Strings.            (line   18)
* \n (newline character):                Strings.            (line   21)
* \r (carriage return character):        Strings.            (line   24)
* \t (tab):                              Strings.            (line   27)
* \XD... (hex character code):           Strings.            (line   36)
* \\ (\ character):                      Strings.            (line   40)
* #:                                     Comments.           (line   33)
* #APP:                                  Preprocessing.      (line   26)
* #NO_APP:                               Preprocessing.      (line   26)
* $ in symbol names:                     D10V-Chars.         (line   46)
* $ in symbol names <1>:                 D30V-Chars.         (line   70)
* $ in symbol names <2>:                 Meta-Chars.         (line   10)
* $ in symbol names <3>:                 SH-Chars.           (line   15)
* $a:                                    ARM Mapping Symbols.
                                                             (line    9)
* $acos math builtin, TIC54X:            TIC54X-Builtins.    (line   10)
* $asin math builtin, TIC54X:            TIC54X-Builtins.    (line   13)
* $atan math builtin, TIC54X:            TIC54X-Builtins.    (line   16)
* $atan2 math builtin, TIC54X:           TIC54X-Builtins.    (line   19)
* $ceil math builtin, TIC54X:            TIC54X-Builtins.    (line   22)
* $cos math builtin, TIC54X:             TIC54X-Builtins.    (line   28)
* $cosh math builtin, TIC54X:            TIC54X-Builtins.    (line   25)
* $cvf math builtin, TIC54X:             TIC54X-Builtins.    (line   31)
* $cvi math builtin, TIC54X:             TIC54X-Builtins.    (line   34)
* $d:                                    AArch64 Mapping Symbols.
                                                             (line   12)
* $d <1>:                                ARM Mapping Symbols.
                                                             (line   15)
* $exp math builtin, TIC54X:             TIC54X-Builtins.    (line   37)
* $fabs math builtin, TIC54X:            TIC54X-Builtins.    (line   40)
* $firstch subsym builtin, TIC54X:       TIC54X-Macros.      (line   26)
* $floor math builtin, TIC54X:           TIC54X-Builtins.    (line   43)
* $fmod math builtin, TIC54X:            TIC54X-Builtins.    (line   47)
* $int math builtin, TIC54X:             TIC54X-Builtins.    (line   50)
* $iscons subsym builtin, TIC54X:        TIC54X-Macros.      (line   43)
* $isdefed subsym builtin, TIC54X:       TIC54X-Macros.      (line   34)
* $ismember subsym builtin, TIC54X:      TIC54X-Macros.      (line   38)
* $isname subsym builtin, TIC54X:        TIC54X-Macros.      (line   47)
* $isreg subsym builtin, TIC54X:         TIC54X-Macros.      (line   50)
* $lastch subsym builtin, TIC54X:        TIC54X-Macros.      (line   30)
* $ldexp math builtin, TIC54X:           TIC54X-Builtins.    (line   53)
* $log math builtin, TIC54X:             TIC54X-Builtins.    (line   59)
* $log10 math builtin, TIC54X:           TIC54X-Builtins.    (line   56)
* $max math builtin, TIC54X:             TIC54X-Builtins.    (line   62)
* $min math builtin, TIC54X:             TIC54X-Builtins.    (line   65)
* $pow math builtin, TIC54X:             TIC54X-Builtins.    (line   68)
* $round math builtin, TIC54X:           TIC54X-Builtins.    (line   71)
* $sgn math builtin, TIC54X:             TIC54X-Builtins.    (line   74)
* $sin math builtin, TIC54X:             TIC54X-Builtins.    (line   77)
* $sinh math builtin, TIC54X:            TIC54X-Builtins.    (line   80)
* $sqrt math builtin, TIC54X:            TIC54X-Builtins.    (line   83)
* $structacc subsym builtin, TIC54X:     TIC54X-Macros.      (line   57)
* $structsz subsym builtin, TIC54X:      TIC54X-Macros.      (line   54)
* $symcmp subsym builtin, TIC54X:        TIC54X-Macros.      (line   23)
* $symlen subsym builtin, TIC54X:        TIC54X-Macros.      (line   20)
* $t:                                    ARM Mapping Symbols.
                                                             (line   12)
* $tan math builtin, TIC54X:             TIC54X-Builtins.    (line   86)
* $tanh math builtin, TIC54X:            TIC54X-Builtins.    (line   89)
* $trunc math builtin, TIC54X:           TIC54X-Builtins.    (line   92)
* $x:                                    AArch64 Mapping Symbols.
                                                             (line    9)
* %gp:                                   RX-Modifiers.       (line    6)
* %gpreg:                                RX-Modifiers.       (line   22)
* %pidreg:                               RX-Modifiers.       (line   25)
* -+ option, VAX/VMS:                    VAX-Opts.           (line   71)
* --:                                    Command Line.       (line   10)
* --32 option, i386:                     i386-Options.       (line    8)
* --32 option, x86-64:                   i386-Options.       (line    8)
* --64 option, i386:                     i386-Options.       (line    8)
* --64 option, x86-64:                   i386-Options.       (line    8)
* --absolute-literals:                   Xtensa Options.     (line   39)
* --allow-reg-prefix:                    SH Options.         (line    9)
* --alternate:                           alternate.          (line    6)
* --auto-litpools:                       Xtensa Options.     (line   22)
* --base-size-default-16:                M68K-Opts.          (line   66)
* --base-size-default-32:                M68K-Opts.          (line   66)
* --big:                                 SH Options.         (line    9)
* --bitwise-or option, M680x0:           M68K-Opts.          (line   59)
* --compress-debug-sections= option:     Overview.           (line  351)
* --disp-size-default-16:                M68K-Opts.          (line   75)
* --disp-size-default-32:                M68K-Opts.          (line   75)
* --divide option, i386:                 i386-Options.       (line   25)
* --dsp:                                 SH Options.         (line    9)
* --emulation=crisaout command line option, CRIS: CRIS-Opts. (line    9)
* --emulation=criself command line option, CRIS: CRIS-Opts.  (line    9)
* --enforce-aligned-data:                Sparc-Aligned-Data. (line   11)
* --fatal-warnings:                      W.                  (line   16)
* --fdpic:                               SH Options.         (line   31)
* --fix-v4bx command line option, ARM:   ARM Options.        (line  196)
* --fixed-special-register-names command line option, MMIX: MMIX-Opts.
                                                             (line    8)
* --force-long-branches:                 M68HC11-Opts.       (line   81)
* --generate-example:                    M68HC11-Opts.       (line   98)
* --globalize-symbols command line option, MMIX: MMIX-Opts.  (line   12)
* --gnu-syntax command line option, MMIX: MMIX-Opts.         (line   16)
* --linker-allocated-gregs command line option, MMIX: MMIX-Opts.
                                                             (line   67)
* --listing-cont-lines:                  listing.            (line   34)
* --listing-lhs-width:                   listing.            (line   16)
* --listing-lhs-width2:                  listing.            (line   21)
* --listing-rhs-width:                   listing.            (line   28)
* --little:                              SH Options.         (line    9)
* --longcalls:                           Xtensa Options.     (line   53)
* --march=ARCHITECTURE command line option, CRIS: CRIS-Opts. (line   34)
* --MD:                                  MD.                 (line    6)
* --mul-bug-abort command line option, CRIS: CRIS-Opts.      (line   63)
* --no-absolute-literals:                Xtensa Options.     (line   39)
* --no-auto-litpools:                    Xtensa Options.     (line   22)
* --no-expand command line option, MMIX: MMIX-Opts.          (line   31)
* --no-longcalls:                        Xtensa Options.     (line   53)
* --no-merge-gregs command line option, MMIX: MMIX-Opts.     (line   36)
* --no-mul-bug-abort command line option, CRIS: CRIS-Opts.   (line   63)
* --no-pad-sections:                     no-pad-sections.    (line    6)
* --no-predefined-syms command line option, MMIX: MMIX-Opts. (line   22)
* --no-pushj-stubs command line option, MMIX: MMIX-Opts.     (line   54)
* --no-stubs command line option, MMIX:  MMIX-Opts.          (line   54)
* --no-target-align:                     Xtensa Options.     (line   46)
* --no-text-section-literals:            Xtensa Options.     (line    7)
* --no-trampolines:                      Xtensa Options.     (line   74)
* --no-transform:                        Xtensa Options.     (line   62)
* --no-underscore command line option, CRIS: CRIS-Opts.      (line   15)
* --no-warn:                             W.                  (line   11)
* --pcrel:                               M68K-Opts.          (line   87)
* --pic command line option, CRIS:       CRIS-Opts.          (line   27)
* --print-insn-syntax:                   M68HC11-Opts.       (line   87)
* --print-insn-syntax <1>:               XGATE-Opts.         (line   25)
* --print-opcodes:                       M68HC11-Opts.       (line   91)
* --print-opcodes <1>:                   XGATE-Opts.         (line   29)
* --register-prefix-optional option, M680x0: M68K-Opts.      (line   46)
* --relax:                               SH Options.         (line    9)
* --relax command line option, MMIX:     MMIX-Opts.          (line   19)
* --rename-section:                      Xtensa Options.     (line   70)
* --renesas:                             SH Options.         (line    9)
* --sectname-subst:                      Section.            (line   71)
* --short-branches:                      M68HC11-Opts.       (line   67)
* --small:                               SH Options.         (line    9)
* --statistics:                          statistics.         (line    6)
* --strict-direct-mode:                  M68HC11-Opts.       (line   57)
* --target-align:                        Xtensa Options.     (line   46)
* --text-section-literals:               Xtensa Options.     (line    7)
* --traditional-format:                  traditional-format. (line    6)
* --trampolines:                         Xtensa Options.     (line   74)
* --transform:                           Xtensa Options.     (line   62)
* --underscore command line option, CRIS: CRIS-Opts.         (line   15)
* --warn:                                W.                  (line   19)
* --x32 option, i386:                    i386-Options.       (line    8)
* --x32 option, x86-64:                  i386-Options.       (line    8)
* --xgate-ramoffset:                     M68HC11-Opts.       (line   36)
* -1 option, VAX/VMS:                    VAX-Opts.           (line   77)
* -32addr command line option, Alpha:    Alpha Options.      (line   57)
* -a:                                    a.                  (line    6)
* -ac:                                   a.                  (line    6)
* -ad:                                   a.                  (line    6)
* -ag:                                   a.                  (line    6)
* -ah:                                   a.                  (line    6)
* -al:                                   a.                  (line    6)
* -Aleon:                                Sparc-Opts.         (line   25)
* -an:                                   a.                  (line    6)
* -as:                                   a.                  (line    6)
* -Asparc:                               Sparc-Opts.         (line   25)
* -Asparcfmaf:                           Sparc-Opts.         (line   25)
* -Asparcima:                            Sparc-Opts.         (line   25)
* -Asparclet:                            Sparc-Opts.         (line   25)
* -Asparclite:                           Sparc-Opts.         (line   25)
* -Asparcvis:                            Sparc-Opts.         (line   25)
* -Asparcvis2:                           Sparc-Opts.         (line   25)
* -Asparcvis3:                           Sparc-Opts.         (line   25)
* -Asparcvis3r:                          Sparc-Opts.         (line   25)
* -Av6:                                  Sparc-Opts.         (line   25)
* -Av7:                                  Sparc-Opts.         (line   25)
* -Av8:                                  Sparc-Opts.         (line   25)
* -Av9:                                  Sparc-Opts.         (line   25)
* -Av9a:                                 Sparc-Opts.         (line   25)
* -Av9b:                                 Sparc-Opts.         (line   25)
* -Av9c:                                 Sparc-Opts.         (line   25)
* -Av9d:                                 Sparc-Opts.         (line   25)
* -Av9e:                                 Sparc-Opts.         (line   25)
* -Av9m:                                 Sparc-Opts.         (line   25)
* -Av9v:                                 Sparc-Opts.         (line   25)
* -big option, M32R:                     M32R-Opts.          (line   35)
* -D:                                    D.                  (line    6)
* -D, ignored on VAX:                    VAX-Opts.           (line   11)
* -d, VAX option:                        VAX-Opts.           (line   16)
* -eabi= command line option, ARM:       ARM Options.        (line  172)
* -EB command line option, AArch64:      AArch64 Options.    (line    6)
* -EB command line option, ARC:          ARC Options.        (line   84)
* -EB command line option, ARM:          ARM Options.        (line  177)
* -EB option (MIPS):                     MIPS Options.       (line   13)
* -EB option, M32R:                      M32R-Opts.          (line   39)
* -EB option, TILE-Gx:                   TILE-Gx Options.    (line   11)
* -EL command line option, AArch64:      AArch64 Options.    (line   10)
* -EL command line option, ARC:          ARC Options.        (line   88)
* -EL command line option, ARM:          ARM Options.        (line  188)
* -EL option (MIPS):                     MIPS Options.       (line   13)
* -EL option, M32R:                      M32R-Opts.          (line   32)
* -EL option, TILE-Gx:                   TILE-Gx Options.    (line   11)
* -f:                                    f.                  (line    6)
* -F command line option, Alpha:         Alpha Options.      (line   57)
* -fno-pic option, RISC-V:               RISC-V-Options.     (line   12)
* -fpic option, RISC-V:                  RISC-V-Options.     (line    8)
* -g command line option, Alpha:         Alpha Options.      (line   47)
* -G command line option, Alpha:         Alpha Options.      (line   53)
* -G option (MIPS):                      MIPS Options.       (line    8)
* -h option, VAX/VMS:                    VAX-Opts.           (line   45)
* -H option, VAX/VMS:                    VAX-Opts.           (line   81)
* -I PATH:                               I.                  (line    6)
* -ignore-parallel-conflicts option, M32RX: M32R-Opts.       (line   87)
* -Ip option, M32RX:                     M32R-Opts.          (line   97)
* -J, ignored on VAX:                    VAX-Opts.           (line   27)
* -K:                                    K.                  (line    6)
* -k command line option, ARM:           ARM Options.        (line  192)
* -KPIC option, M32R:                    M32R-Opts.          (line   42)
* -KPIC option, MIPS:                    MIPS Options.       (line   21)
* -L:                                    L.                  (line    6)
* -l option, M680x0:                     M68K-Opts.          (line   34)
* -little option, M32R:                  M32R-Opts.          (line   27)
* -M:                                    M.                  (line    6)
* -m11/03:                               PDP-11-Options.     (line  140)
* -m11/04:                               PDP-11-Options.     (line  143)
* -m11/05:                               PDP-11-Options.     (line  146)
* -m11/10:                               PDP-11-Options.     (line  146)
* -m11/15:                               PDP-11-Options.     (line  149)
* -m11/20:                               PDP-11-Options.     (line  149)
* -m11/21:                               PDP-11-Options.     (line  152)
* -m11/23:                               PDP-11-Options.     (line  155)
* -m11/24:                               PDP-11-Options.     (line  155)
* -m11/34:                               PDP-11-Options.     (line  158)
* -m11/34a:                              PDP-11-Options.     (line  161)
* -m11/35:                               PDP-11-Options.     (line  164)
* -m11/40:                               PDP-11-Options.     (line  164)
* -m11/44:                               PDP-11-Options.     (line  167)
* -m11/45:                               PDP-11-Options.     (line  170)
* -m11/50:                               PDP-11-Options.     (line  170)
* -m11/53:                               PDP-11-Options.     (line  173)
* -m11/55:                               PDP-11-Options.     (line  170)
* -m11/60:                               PDP-11-Options.     (line  176)
* -m11/70:                               PDP-11-Options.     (line  170)
* -m11/73:                               PDP-11-Options.     (line  173)
* -m11/83:                               PDP-11-Options.     (line  173)
* -m11/84:                               PDP-11-Options.     (line  173)
* -m11/93:                               PDP-11-Options.     (line  173)
* -m11/94:                               PDP-11-Options.     (line  173)
* -m16c option, M16C:                    M32C-Opts.          (line   12)
* -m31 option, s390:                     s390 Options.       (line    8)
* -m32 option, TILE-Gx:                  TILE-Gx Options.    (line    8)
* -m32bit-doubles:                       RX-Opts.            (line    9)
* -m32c option, M32C:                    M32C-Opts.          (line    9)
* -m32r option, M32R:                    M32R-Opts.          (line   21)
* -m32rx option, M32R2:                  M32R-Opts.          (line   17)
* -m32rx option, M32RX:                  M32R-Opts.          (line    9)
* -m4byte-align command line option, V850: V850 Options.     (line   90)
* -m64 option, s390:                     s390 Options.       (line    8)
* -m64 option, TILE-Gx:                  TILE-Gx Options.    (line    8)
* -m64bit-doubles:                       RX-Opts.            (line   15)
* -m68000 and related options:           M68K-Opts.          (line   99)
* -m68hc11:                              M68HC11-Opts.       (line    9)
* -m68hc12:                              M68HC11-Opts.       (line   14)
* -m68hcs12:                             M68HC11-Opts.       (line   21)
* -m8byte-align command line option, V850: V850 Options.     (line   86)
* -mabi= command line option, AArch64:   AArch64 Options.    (line   14)
* -mabi=ABI option, RISC-V:              RISC-V-Options.     (line   19)
* -madd-bnd-prefix option, i386:         i386-Options.       (line  138)
* -madd-bnd-prefix option, x86-64:       i386-Options.       (line  138)
* -mall:                                 PDP-11-Options.     (line   26)
* -mall-enabled command line option, LM32: LM32 Options.     (line   30)
* -mall-extensions:                      PDP-11-Options.     (line   26)
* -mall-opcodes command line option, AVR: AVR Options.       (line  111)
* -mamd64 option, x86-64:                i386-Options.       (line  194)
* -mapcs-26 command line option, ARM:    ARM Options.        (line  144)
* -mapcs-32 command line option, ARM:    ARM Options.        (line  144)
* -mapcs-float command line option, ARM: ARM Options.        (line  158)
* -mapcs-reentrant command line option, ARM: ARM Options.    (line  163)
* -march= command line option, AArch64:  AArch64 Options.    (line   40)
* -march= command line option, ARM:      ARM Options.        (line   77)
* -march= command line option, M680x0:   M68K-Opts.          (line    8)
* -march= command line option, TIC6X:    TIC6X Options.      (line    6)
* -march= option, i386:                  i386-Options.       (line   32)
* -march= option, s390:                  s390 Options.       (line   25)
* -march= option, x86-64:                i386-Options.       (line   32)
* -march=ISA option, RISC-V:             RISC-V-Options.     (line   15)
* -matpcs command line option, ARM:      ARM Options.        (line  150)
* -mavxscalar= option, i386:             i386-Options.       (line   96)
* -mavxscalar= option, x86-64:           i386-Options.       (line   96)
* -mbarrel-shift-enabled command line option, LM32: LM32 Options.
                                                             (line   12)
* -mbig-endian:                          RX-Opts.            (line   20)
* -mbig-obj option, x86-64:              i386-Options.       (line  152)
* -mbreak-enabled command line option, LM32: LM32 Options.   (line   27)
* -mccs command line option, ARM:        ARM Options.        (line  205)
* -mcis:                                 PDP-11-Options.     (line   32)
* -mcode-density command line option, ARC: ARC Options.      (line   93)
* -mconstant-gp command line option, IA-64: IA-64 Options.   (line    6)
* -mCPU command line option, Alpha:      Alpha Options.      (line    6)
* -mcpu option, cpu:                     TIC54X-Opts.        (line   15)
* -mcpu=:                                RX-Opts.            (line   75)
* -mcpu= command line option, AArch64:   AArch64 Options.    (line   19)
* -mcpu= command line option, ARM:       ARM Options.        (line    6)
* -mcpu= command line option, Blackfin:  Blackfin Options.   (line    6)
* -mcpu= command line option, M680x0:    M68K-Opts.          (line   14)
* -mcpu=CPU command line option, ARC:    ARC Options.        (line   10)
* -mcsm:                                 PDP-11-Options.     (line   43)
* -mdcache-enabled command line option, LM32: LM32 Options.  (line   24)
* -mdebug command line option, Alpha:    Alpha Options.      (line   25)
* -mdivide-enabled command line option, LM32: LM32 Options.  (line    9)
* -mdpfp command line option, ARC:       ARC Options.        (line  108)
* -mdsbt command line option, TIC6X:     TIC6X Options.      (line   13)
* -me option, stderr redirect:           TIC54X-Opts.        (line   20)
* -meis:                                 PDP-11-Options.     (line   46)
* -mepiphany command line option, Epiphany: Epiphany Options.
                                                             (line    9)
* -mepiphany16 command line option, Epiphany: Epiphany Options.
                                                             (line   13)
* -merrors-to-file option, stderr redirect: TIC54X-Opts.     (line   20)
* -mesa option, s390:                    s390 Options.       (line   17)
* -mevexlig= option, i386:               i386-Options.       (line  104)
* -mevexlig= option, x86-64:             i386-Options.       (line  104)
* -mevexrcig= option, i386:              i386-Options.       (line  184)
* -mevexrcig= option, x86-64:            i386-Options.       (line  184)
* -mevexwig= option, i386:               i386-Options.       (line  114)
* -mevexwig= option, x86-64:             i386-Options.       (line  114)
* -mf option, far-mode:                  TIC54X-Opts.        (line    8)
* -mf11:                                 PDP-11-Options.     (line  122)
* -mfar-mode option, far-mode:           TIC54X-Opts.        (line    8)
* -mfdpic command line option, Blackfin: Blackfin Options.   (line   19)
* -mfence-as-lock-add= option, i386:     i386-Options.       (line  165)
* -mfence-as-lock-add= option, x86-64:   i386-Options.       (line  165)
* -mfis:                                 PDP-11-Options.     (line   51)
* -mfloat-abi= command line option, ARM: ARM Options.        (line  167)
* -mfp-11:                               PDP-11-Options.     (line   56)
* -mfpp:                                 PDP-11-Options.     (line   56)
* -mfpu:                                 PDP-11-Options.     (line   56)
* -mfpu= command line option, ARM:       ARM Options.        (line   94)
* -mfpuda command line option, ARC:      ARC Options.        (line  111)
* -mgcc-abi:                             RX-Opts.            (line   63)
* -mgcc-abi command line option, V850:   V850 Options.       (line   79)
* -mgcc-isr command line option, AVR:    AVR Options.        (line  132)
* -mhard-float command line option, V850: V850 Options.      (line  101)
* -micache-enabled command line option, LM32: LM32 Options.  (line   21)
* -mimplicit-it command line option, ARM: ARM Options.       (line  128)
* -mint-register:                        RX-Opts.            (line   57)
* -mintel64 option, x86-64:              i386-Options.       (line  194)
* -mip2022 option, IP2K:                 IP2K-Opts.          (line   14)
* -mip2022ext option, IP2022:            IP2K-Opts.          (line    9)
* -mj11:                                 PDP-11-Options.     (line  126)
* -mka11:                                PDP-11-Options.     (line   92)
* -mkb11:                                PDP-11-Options.     (line   95)
* -mkd11a:                               PDP-11-Options.     (line   98)
* -mkd11b:                               PDP-11-Options.     (line  101)
* -mkd11d:                               PDP-11-Options.     (line  104)
* -mkd11e:                               PDP-11-Options.     (line  107)
* -mkd11f:                               PDP-11-Options.     (line  110)
* -mkd11h:                               PDP-11-Options.     (line  110)
* -mkd11k:                               PDP-11-Options.     (line  114)
* -mkd11q:                               PDP-11-Options.     (line  110)
* -mkd11z:                               PDP-11-Options.     (line  118)
* -mkev11:                               PDP-11-Options.     (line   51)
* -mkev11 <1>:                           PDP-11-Options.     (line   51)
* -mlimited-eis:                         PDP-11-Options.     (line   64)
* -mlink-relax command line option, AVR: AVR Options.        (line  123)
* -mlittle-endian:                       RX-Opts.            (line   26)
* -mlong:                                M68HC11-Opts.       (line   45)
* -mlong <1>:                            XGATE-Opts.         (line   13)
* -mlong-double:                         M68HC11-Opts.       (line   53)
* -mlong-double <1>:                     XGATE-Opts.         (line   21)
* -mm9s12x:                              M68HC11-Opts.       (line   27)
* -mm9s12xg:                             M68HC11-Opts.       (line   32)
* -mmcu= command line option, AVR:       AVR Options.        (line    6)
* -mmfpt:                                PDP-11-Options.     (line   70)
* -mmicrocode:                           PDP-11-Options.     (line   83)
* -mmnemonic= option, i386:              i386-Options.       (line  121)
* -mmnemonic= option, x86-64:            i386-Options.       (line  121)
* -mmultiply-enabled command line option, LM32: LM32 Options.
                                                             (line    6)
* -mmutiproc:                            PDP-11-Options.     (line   73)
* -mmxps:                                PDP-11-Options.     (line   77)
* -mnaked-reg option, i386:              i386-Options.       (line  133)
* -mnaked-reg option, x86-64:            i386-Options.       (line  133)
* -mnan= command line option, MIPS:      MIPS Options.       (line  397)
* -mno-allow-string-insns:               RX-Opts.            (line   82)
* -mno-cis:                              PDP-11-Options.     (line   32)
* -mno-csm:                              PDP-11-Options.     (line   43)
* -mno-dsbt command line option, TIC6X:  TIC6X Options.      (line   13)
* -mno-eis:                              PDP-11-Options.     (line   46)
* -mno-extensions:                       PDP-11-Options.     (line   29)
* -mno-fdpic command line option, Blackfin: Blackfin Options.
                                                             (line   22)
* -mno-fis:                              PDP-11-Options.     (line   51)
* -mno-fp-11:                            PDP-11-Options.     (line   56)
* -mno-fpp:                              PDP-11-Options.     (line   56)
* -mno-fpu:                              PDP-11-Options.     (line   56)
* -mno-kev11:                            PDP-11-Options.     (line   51)
* -mno-limited-eis:                      PDP-11-Options.     (line   64)
* -mno-link-relax command line option, AVR: AVR Options.     (line  127)
* -mno-mfpt:                             PDP-11-Options.     (line   70)
* -mno-microcode:                        PDP-11-Options.     (line   83)
* -mno-mutiproc:                         PDP-11-Options.     (line   73)
* -mno-mxps:                             PDP-11-Options.     (line   77)
* -mno-pic:                              PDP-11-Options.     (line   11)
* -mno-pic command line option, TIC6X:   TIC6X Options.      (line   36)
* -mno-regnames option, s390:            s390 Options.       (line   50)
* -mno-relax option, RISC-V:             RISC-V-Options.     (line   31)
* -mno-skip-bug command line option, AVR: AVR Options.       (line  114)
* -mno-spl:                              PDP-11-Options.     (line   80)
* -mno-sym32:                            MIPS Options.       (line  306)
* -mno-verbose-error command line option, AArch64: AArch64 Options.
                                                             (line   60)
* -mno-wrap command line option, AVR:    AVR Options.        (line  117)
* -mnopic command line option, Blackfin: Blackfin Options.   (line   22)
* -mnps400 command line option, ARC:     ARC Options.        (line  102)
* -momit-lock-prefix= option, i386:      i386-Options.       (line  156)
* -momit-lock-prefix= option, x86-64:    i386-Options.       (line  156)
* -mpic:                                 PDP-11-Options.     (line   11)
* -mpic command line option, TIC6X:      TIC6X Options.      (line   36)
* -mpid:                                 RX-Opts.            (line   50)
* -mpid= command line option, TIC6X:     TIC6X Options.      (line   23)
* -mregnames option, s390:               s390 Options.       (line   47)
* -mrelax command line option, ARC:      ARC Options.        (line   97)
* -mrelax command line option, V850:     V850 Options.       (line   72)
* -mrelax option, RISC-V:                RISC-V-Options.     (line   27)
* -mrelax-relocations= option, i386:     i386-Options.       (line  174)
* -mrelax-relocations= option, x86-64:   i386-Options.       (line  174)
* -mrh850-abi command line option, V850: V850 Options.       (line   82)
* -mrmw command line option, AVR:        AVR Options.        (line  120)
* -mrx-abi:                              RX-Opts.            (line   69)
* -mshared option, i386:                 i386-Options.       (line  143)
* -mshared option, x86-64:               i386-Options.       (line  143)
* -mshort:                               M68HC11-Opts.       (line   40)
* -mshort <1>:                           XGATE-Opts.         (line    8)
* -mshort-double:                        M68HC11-Opts.       (line   49)
* -mshort-double <1>:                    XGATE-Opts.         (line   17)
* -msign-extend-enabled command line option, LM32: LM32 Options.
                                                             (line   15)
* -msmall-data-limit:                    RX-Opts.            (line   42)
* -msoft-float command line option, V850: V850 Options.      (line   95)
* -mspfp command line option, ARC:       ARC Options.        (line  105)
* -mspl:                                 PDP-11-Options.     (line   80)
* -msse-check= option, i386:             i386-Options.       (line   86)
* -msse-check= option, x86-64:           i386-Options.       (line   86)
* -msse2avx option, i386:                i386-Options.       (line   82)
* -msse2avx option, x86-64:              i386-Options.       (line   82)
* -msym32:                               MIPS Options.       (line  306)
* -msyntax= option, i386:                i386-Options.       (line  127)
* -msyntax= option, x86-64:              i386-Options.       (line  127)
* -mt11:                                 PDP-11-Options.     (line  130)
* -mthumb command line option, ARM:      ARM Options.        (line  118)
* -mthumb-interwork command line option, ARM: ARM Options.   (line  123)
* -mtune= option, i386:                  i386-Options.       (line   74)
* -mtune= option, x86-64:                i386-Options.       (line   74)
* -mtune=ARCH command line option, Visium: Visium Options.   (line    8)
* -muse-conventional-section-names:      RX-Opts.            (line   33)
* -muse-renesas-section-names:           RX-Opts.            (line   37)
* -muser-enabled command line option, LM32: LM32 Options.    (line   18)
* -mv850 command line option, V850:      V850 Options.       (line   23)
* -mv850any command line option, V850:   V850 Options.       (line   41)
* -mv850e command line option, V850:     V850 Options.       (line   29)
* -mv850e1 command line option, V850:    V850 Options.       (line   35)
* -mv850e2 command line option, V850:    V850 Options.       (line   51)
* -mv850e2v3 command line option, V850:  V850 Options.       (line   57)
* -mv850e2v4 command line option, V850:  V850 Options.       (line   63)
* -mv850e3v5 command line option, V850:  V850 Options.       (line   66)
* -mverbose-error command line option, AArch64: AArch64 Options.
                                                             (line   56)
* -mvxworks-pic option, MIPS:            MIPS Options.       (line   26)
* -mwarn-areg-zero option, s390:         s390 Options.       (line   53)
* -mwarn-deprecated command line option, ARM: ARM Options.   (line  200)
* -mwarn-syms command line option, ARM:  ARM Options.        (line  208)
* -mzarch option, s390:                  s390 Options.       (line   17)
* -m[no-]68851 command line option, M680x0: M68K-Opts.       (line   21)
* -m[no-]68881 command line option, M680x0: M68K-Opts.       (line   21)
* -m[no-]div command line option, M680x0: M68K-Opts.         (line   21)
* -m[no-]emac command line option, M680x0: M68K-Opts.        (line   21)
* -m[no-]float command line option, M680x0: M68K-Opts.       (line   21)
* -m[no-]mac command line option, M680x0: M68K-Opts.         (line   21)
* -m[no-]usp command line option, M680x0: M68K-Opts.         (line   21)
* -N command line option, CRIS:          CRIS-Opts.          (line   59)
* -nIp option, M32RX:                    M32R-Opts.          (line  101)
* -no-bitinst, M32R2:                    M32R-Opts.          (line   54)
* -no-ignore-parallel-conflicts option, M32RX: M32R-Opts.    (line   93)
* -no-mdebug command line option, Alpha: Alpha Options.      (line   25)
* -no-parallel option, M32RX:            M32R-Opts.          (line   51)
* -no-warn-explicit-parallel-conflicts option, M32RX: M32R-Opts.
                                                             (line   79)
* -no-warn-unmatched-high option, M32R:  M32R-Opts.          (line  111)
* -nocpp ignored (MIPS):                 MIPS Options.       (line  309)
* -noreplace command line option, Alpha: Alpha Options.      (line   40)
* -o:                                    o.                  (line    6)
* -O option, i386:                       i386-Options.       (line  199)
* -O option, M32RX:                      M32R-Opts.          (line   59)
* -O option, x86-64:                     i386-Options.       (line  199)
* -O0 option, i386:                      i386-Options.       (line  199)
* -O0 option, x86-64:                    i386-Options.       (line  199)
* -O1 option, i386:                      i386-Options.       (line  199)
* -O1 option, x86-64:                    i386-Options.       (line  199)
* -O2 option, i386:                      i386-Options.       (line  199)
* -O2 option, x86-64:                    i386-Options.       (line  199)
* -Os option, i386:                      i386-Options.       (line  199)
* -Os option, x86-64:                    i386-Options.       (line  199)
* -parallel option, M32RX:               M32R-Opts.          (line   46)
* -R:                                    R.                  (line    6)
* -r800 command line option, Z80:        Z80 Options.        (line   35)
* -relax command line option, Alpha:     Alpha Options.      (line   32)
* -replace command line option, Alpha:   Alpha Options.      (line   40)
* -S, ignored on VAX:                    VAX-Opts.           (line   11)
* -T, ignored on VAX:                    VAX-Opts.           (line   11)
* -t, ignored on VAX:                    VAX-Opts.           (line   36)
* -v:                                    v.                  (line    6)
* -V, redundant on VAX:                  VAX-Opts.           (line   22)
* -version:                              v.                  (line    6)
* -W:                                    W.                  (line   11)
* -warn-explicit-parallel-conflicts option, M32RX: M32R-Opts.
                                                             (line   65)
* -warn-unmatched-high option, M32R:     M32R-Opts.          (line  105)
* -Wnp option, M32RX:                    M32R-Opts.          (line   83)
* -Wnuh option, M32RX:                   M32R-Opts.          (line  117)
* -Wp option, M32RX:                     M32R-Opts.          (line   75)
* -wsigned_overflow command line option, V850: V850 Options. (line    9)
* -Wuh option, M32RX:                    M32R-Opts.          (line  114)
* -wunsigned_overflow command line option, V850: V850 Options.
                                                             (line   16)
* -x command line option, MMIX:          MMIX-Opts.          (line   44)
* -z80 command line option, Z80:         Z80 Options.        (line    8)
* -z8001 command line option, Z8000:     Z8000 Options.      (line    6)
* -z8002 command line option, Z8000:     Z8000 Options.      (line    9)
* . (symbol):                            Dot.                (line    6)
* .align directive, ARM:                 ARM Directives.     (line    6)
* .align directive, TILE-Gx:             TILE-Gx Directives. (line    6)
* .align directive, TILEPro:             TILEPro Directives. (line    6)
* .allow_suspicious_bundles directive, TILE-Gx: TILE-Gx Directives.
                                                             (line   10)
* .allow_suspicious_bundles directive, TILEPro: TILEPro Directives.
                                                             (line   10)
* .arch directive, AArch64:              AArch64 Directives. (line    6)
* .arch directive, ARM:                  ARM Directives.     (line   13)
* .arch directive, TIC6X:                TIC6X Directives.   (line   10)
* .arch_extension directive, AArch64:    AArch64 Directives. (line   13)
* .arch_extension directive, ARM:        ARM Directives.     (line   20)
* .arc_attribute directive, ARC:         ARC Directives.     (line  240)
* .arm directive, ARM:                   ARM Directives.     (line   29)
* .big directive, M32RX:                 M32R-Directives.    (line   88)
* .bss directive, AArch64:               AArch64 Directives. (line   21)
* .bss directive, ARM:                   ARM Directives.     (line   32)
* .c6xabi_attribute directive, TIC6X:    TIC6X Directives.   (line   20)
* .cantunwind directive, ARM:            ARM Directives.     (line   35)
* .cantunwind directive, TIC6X:          TIC6X Directives.   (line   13)
* .code directive, ARM:                  ARM Directives.     (line   39)
* .cpu directive, AArch64:               AArch64 Directives. (line   24)
* .cpu directive, ARM:                   ARM Directives.     (line   43)
* .dn and .qn directives, ARM:           ARM Directives.     (line   50)
* .dword directive, AArch64:             AArch64 Directives. (line   28)
* .eabi_attribute directive, ARM:        ARM Directives.     (line   74)
* .ehtype directive, TIC6X:              TIC6X Directives.   (line   31)
* .endp directive, TIC6X:                TIC6X Directives.   (line   34)
* .even directive, AArch64:              AArch64 Directives. (line   31)
* .even directive, ARM:                  ARM Directives.     (line  102)
* .extend directive, ARM:                ARM Directives.     (line  105)
* .fnend directive, ARM:                 ARM Directives.     (line  111)
* .fnstart directive, ARM:               ARM Directives.     (line  119)
* .force_thumb directive, ARM:           ARM Directives.     (line  122)
* .fpu directive, ARM:                   ARM Directives.     (line  126)
* .global:                               MIPS insn.          (line   12)
* .gnu_attribute 4, N directive, MIPS:   MIPS FP ABI History.
                                                             (line    6)
* .gnu_attribute Tag_GNU_MIPS_ABI_FP, N directive, MIPS: MIPS FP ABI History.
                                                             (line    6)
* .handlerdata directive, ARM:           ARM Directives.     (line  130)
* .handlerdata directive, TIC6X:         TIC6X Directives.   (line   39)
* .insn:                                 MIPS insn.          (line    6)
* .insn directive, s390:                 s390 Directives.    (line   11)
* .inst directive, AArch64:              AArch64 Directives. (line   35)
* .inst directive, ARM:                  ARM Directives.     (line  139)
* .ldouble directive, ARM:               ARM Directives.     (line  105)
* .little directive, M32RX:              M32R-Directives.    (line   82)
* .long directive, s390:                 s390 Directives.    (line   16)
* .ltorg directive, AArch64:             AArch64 Directives. (line   39)
* .ltorg directive, ARM:                 ARM Directives.     (line  149)
* .ltorg directive, s390:                s390 Directives.    (line   79)
* .m32r directive, M32R:                 M32R-Directives.    (line   66)
* .m32r2 directive, M32R2:               M32R-Directives.    (line   77)
* .m32rx directive, M32RX:               M32R-Directives.    (line   72)
* .machine directive, s390:              s390 Directives.    (line   84)
* .machinemode directive, s390:          s390 Directives.    (line  101)
* .module:                               MIPS assembly options.
                                                             (line    6)
* .module fp=NN directive, MIPS:         MIPS FP ABI Selection.
                                                             (line    6)
* .movsp directive, ARM:                 ARM Directives.     (line  163)
* .nan directive, MIPS:                  MIPS NaN Encodings. (line    6)
* .nocmp directive, TIC6X:               TIC6X Directives.   (line   47)
* .no_pointers directive, XStormy16:     XStormy16 Directives.
                                                             (line   14)
* .o:                                    Object.             (line    6)
* .object_arch directive, ARM:           ARM Directives.     (line  168)
* .packed directive, ARM:                ARM Directives.     (line  174)
* .pad directive, ARM:                   ARM Directives.     (line  179)
* .param on HPPA:                        HPPA Directives.    (line   19)
* .personality directive, ARM:           ARM Directives.     (line  184)
* .personality directive, TIC6X:         TIC6X Directives.   (line   55)
* .personalityindex directive, ARM:      ARM Directives.     (line  187)
* .personalityindex directive, TIC6X:    TIC6X Directives.   (line   51)
* .pool directive, AArch64:              AArch64 Directives. (line   53)
* .pool directive, ARM:                  ARM Directives.     (line  191)
* .quad directive, s390:                 s390 Directives.    (line   16)
* .req directive, AArch64:               AArch64 Directives. (line   56)
* .req directive, ARM:                   ARM Directives.     (line  194)
* .require_canonical_reg_names directive, TILE-Gx: TILE-Gx Directives.
                                                             (line   19)
* .require_canonical_reg_names directive, TILEPro: TILEPro Directives.
                                                             (line   19)
* .save directive, ARM:                  ARM Directives.     (line  199)
* .scomm directive, TIC6X:               TIC6X Directives.   (line   58)
* .secrel32 directive, ARM:              ARM Directives.     (line  237)
* .set arch=CPU:                         MIPS ISA.           (line   18)
* .set at:                               MIPS Macros.        (line   41)
* .set at=REG:                           MIPS Macros.        (line   35)
* .set autoextend:                       MIPS autoextend.    (line    6)
* .set crc:                              MIPS ASE Instruction Generation Overrides.
                                                             (line   68)
* .set doublefloat:                      MIPS Floating-Point.
                                                             (line   12)
* .set dsp:                              MIPS ASE Instruction Generation Overrides.
                                                             (line   21)
* .set dspr2:                            MIPS ASE Instruction Generation Overrides.
                                                             (line   26)
* .set dspr3:                            MIPS ASE Instruction Generation Overrides.
                                                             (line   31)
* .set ginv:                             MIPS ASE Instruction Generation Overrides.
                                                             (line   72)
* .set hardfloat:                        MIPS Floating-Point.
                                                             (line    6)
* .set insn32:                           MIPS assembly options.
                                                             (line   18)
* .set macro:                            MIPS Macros.        (line   30)
* .set mcu:                              MIPS ASE Instruction Generation Overrides.
                                                             (line   42)
* .set mdmx:                             MIPS ASE Instruction Generation Overrides.
                                                             (line   16)
* .set mips16e2:                         MIPS ASE Instruction Generation Overrides.
                                                             (line   61)
* .set mips3d:                           MIPS ASE Instruction Generation Overrides.
                                                             (line    6)
* .set mipsN:                            MIPS ISA.           (line    6)
* .set msa:                              MIPS ASE Instruction Generation Overrides.
                                                             (line   47)
* .set mt:                               MIPS ASE Instruction Generation Overrides.
                                                             (line   37)
* .set noat:                             MIPS Macros.        (line   41)
* .set noautoextend:                     MIPS autoextend.    (line    6)
* .set nocrc:                            MIPS ASE Instruction Generation Overrides.
                                                             (line   68)
* .set nodsp:                            MIPS ASE Instruction Generation Overrides.
                                                             (line   21)
* .set nodspr2:                          MIPS ASE Instruction Generation Overrides.
                                                             (line   26)
* .set nodspr3:                          MIPS ASE Instruction Generation Overrides.
                                                             (line   31)
* .set noginv:                           MIPS ASE Instruction Generation Overrides.
                                                             (line   72)
* .set noinsn32:                         MIPS assembly options.
                                                             (line   18)
* .set nomacro:                          MIPS Macros.        (line   30)
* .set nomcu:                            MIPS ASE Instruction Generation Overrides.
                                                             (line   42)
* .set nomdmx:                           MIPS ASE Instruction Generation Overrides.
                                                             (line   16)
* .set nomips16e2:                       MIPS ASE Instruction Generation Overrides.
                                                             (line   61)
* .set nomips3d:                         MIPS ASE Instruction Generation Overrides.
                                                             (line    6)
* .set nomsa:                            MIPS ASE Instruction Generation Overrides.
                                                             (line   47)
* .set nomt:                             MIPS ASE Instruction Generation Overrides.
                                                             (line   37)
* .set nosmartmips:                      MIPS ASE Instruction Generation Overrides.
                                                             (line   11)
* .set nosym32:                          MIPS Symbol Sizes.  (line    6)
* .set novirt:                           MIPS ASE Instruction Generation Overrides.
                                                             (line   52)
* .set noxpa:                            MIPS ASE Instruction Generation Overrides.
                                                             (line   57)
* .set pop:                              MIPS Option Stack.  (line    6)
* .set push:                             MIPS Option Stack.  (line    6)
* .set singlefloat:                      MIPS Floating-Point.
                                                             (line   12)
* .set smartmips:                        MIPS ASE Instruction Generation Overrides.
                                                             (line   11)
* .set softfloat:                        MIPS Floating-Point.
                                                             (line    6)
* .set sym32:                            MIPS Symbol Sizes.  (line    6)
* .set virt:                             MIPS ASE Instruction Generation Overrides.
                                                             (line   52)
* .set xpa:                              MIPS ASE Instruction Generation Overrides.
                                                             (line   57)
* .setfp directive, ARM:                 ARM Directives.     (line  223)
* .short directive, s390:                s390 Directives.    (line   16)
* .syntax directive, ARM:                ARM Directives.     (line  242)
* .thumb directive, ARM:                 ARM Directives.     (line  246)
* .thumb_func directive, ARM:            ARM Directives.     (line  249)
* .thumb_set directive, ARM:             ARM Directives.     (line  260)
* .tlsdescadd directive, AArch64:        AArch64 Directives. (line   64)
* .tlsdesccall directive, AArch64:       AArch64 Directives. (line   67)
* .tlsdescldr directive, AArch64:        AArch64 Directives. (line   70)
* .tlsdescseq directive, ARM:            ARM Directives.     (line  267)
* .unreq directive, AArch64:             AArch64 Directives. (line   73)
* .unreq directive, ARM:                 ARM Directives.     (line  272)
* .unwind_raw directive, ARM:            ARM Directives.     (line  283)
* .v850 directive, V850:                 V850 Directives.    (line   14)
* .v850e directive, V850:                V850 Directives.    (line   20)
* .v850e1 directive, V850:               V850 Directives.    (line   26)
* .v850e2 directive, V850:               V850 Directives.    (line   32)
* .v850e2v3 directive, V850:             V850 Directives.    (line   38)
* .v850e2v4 directive, V850:             V850 Directives.    (line   44)
* .v850e3v5 directive, V850:             V850 Directives.    (line   50)
* .vsave directive, ARM:                 ARM Directives.     (line  290)
* .xword directive, AArch64:             AArch64 Directives. (line   84)
* .z8001:                                Z8000 Directives.   (line   11)
* .z8002:                                Z8000 Directives.   (line   15)
* 16-bit code, i386:                     i386-16bit.         (line    6)
* 16bit_pointers directive, XStormy16:   XStormy16 Directives.
                                                             (line    6)
* 16byte directive, Nios II:             Nios II Directives. (line   28)
* 16byte directive, PRU:                 PRU Directives.     (line   25)
* 2byte directive:                       2byte.              (line    6)
* 2byte directive, Nios II:              Nios II Directives. (line   19)
* 2byte directive, PRU:                  PRU Directives.     (line   16)
* 32bit_pointers directive, XStormy16:   XStormy16 Directives.
                                                             (line   10)
* 3DNow!, i386:                          i386-SIMD.          (line    6)
* 3DNow!, x86-64:                        i386-SIMD.          (line    6)
* 430 support:                           MSP430-Dependent.   (line    6)
* 4byte directive:                       4byte.              (line    6)
* 4byte directive, Nios II:              Nios II Directives. (line   22)
* 4byte directive, PRU:                  PRU Directives.     (line   19)
* 8byte directive:                       8byte.              (line    6)
* 8byte directive, Nios II:              Nios II Directives. (line   25)
* 8byte directive, PRU:                  PRU Directives.     (line   22)
* : (label):                             Statements.         (line   31)
* @gotoff(SYMBOL), ARC modifier:         ARC Modifiers.      (line   20)
* @gotpc(SYMBOL), ARC modifier:          ARC Modifiers.      (line   16)
* @hi pseudo-op, XStormy16:              XStormy16 Opcodes.  (line   21)
* @lo pseudo-op, XStormy16:              XStormy16 Opcodes.  (line   10)
* @pcl(SYMBOL), ARC modifier:            ARC Modifiers.      (line   12)
* @plt(SYMBOL), ARC modifier:            ARC Modifiers.      (line   23)
* @sda(SYMBOL), ARC modifier:            ARC Modifiers.      (line   28)
* @word modifier, D10V:                  D10V-Word.          (line    6)
* _ opcode prefix:                       Xtensa Opcodes.     (line    9)
* __DYNAMIC__, ARC pre-defined symbol:   ARC Symbols.        (line   14)
* __GLOBAL_OFFSET_TABLE__, ARC pre-defined symbol: ARC Symbols.
                                                             (line   11)
* a.out:                                 Object.             (line    6)
* a.out symbol attributes:               a.out Symbols.      (line    6)
* AArch64 floating point (IEEE):         AArch64 Floating Point.
                                                             (line    6)
* AArch64 immediate character:           AArch64-Chars.      (line   13)
* AArch64 line comment character:        AArch64-Chars.      (line    6)
* AArch64 line separator:                AArch64-Chars.      (line   10)
* AArch64 machine directives:            AArch64 Directives. (line    6)
* AArch64 opcodes:                       AArch64 Opcodes.    (line    6)
* AArch64 options (none):                AArch64 Options.    (line    6)
* AArch64 register names:                AArch64-Regs.       (line    6)
* AArch64 relocations:                   AArch64-Relocations.
                                                             (line    6)
* AArch64 support:                       AArch64-Dependent.  (line    6)
* abort directive:                       Abort.              (line    6)
* ABORT directive:                       ABORT (COFF).       (line    6)
* absolute section:                      Ld Sections.        (line   29)
* absolute-literals directive:           Absolute Literals Directive.
                                                             (line    6)
* ADDI instructions, relaxation:         Xtensa Immediate Relaxation.
                                                             (line   43)
* addition, permitted arguments:         Infix Ops.          (line   45)
* addresses:                             Expressions.        (line    6)
* addresses, format of:                  Secs Background.    (line   65)
* addressing modes, D10V:                D10V-Addressing.    (line    6)
* addressing modes, D30V:                D30V-Addressing.    (line    6)
* addressing modes, H8/300:              H8/300-Addressing.  (line    6)
* addressing modes, M680x0:              M68K-Syntax.        (line   21)
* addressing modes, M68HC11:             M68HC11-Syntax.     (line   29)
* addressing modes, S12Z:                S12Z-Syntax.        (line   41)
* addressing modes, SH:                  SH-Addressing.      (line    6)
* addressing modes, XGATE:               XGATE-Syntax.       (line   28)
* addressing modes, Z8000:               Z8000-Addressing.   (line    6)
* ADR reg,<label> pseudo op, ARM:        ARM Opcodes.        (line   25)
* ADRL reg,<label> pseudo op, ARM:       ARM Opcodes.        (line   43)
* ADRP, ADD, LDR/STR group relocations, AArch64: AArch64-Relocations.
                                                             (line   14)
* advancing location counter:            Org.                (line    6)
* align directive:                       Align.              (line    6)
* align directive <1>:                   RISC-V-Directives.  (line    8)
* align directive, Nios II:              Nios II Directives. (line    6)
* align directive, PRU:                  PRU Directives.     (line    6)
* align directive, SPARC:                Sparc-Directives.   (line    9)
* align directive, TIC54X:               TIC54X-Directives.  (line    6)
* aligned instruction bundle:            Bundle directives.  (line    9)
* alignment for NEON instructions:       ARM-Neon-Alignment. (line    6)
* alignment of branch targets:           Xtensa Automatic Alignment.
                                                             (line    6)
* alignment of LOOP instructions:        Xtensa Automatic Alignment.
                                                             (line    6)
* Alpha floating point (IEEE):           Alpha Floating Point.
                                                             (line    6)
* Alpha line comment character:          Alpha-Chars.        (line    6)
* Alpha line separator:                  Alpha-Chars.        (line   11)
* Alpha notes:                           Alpha Notes.        (line    6)
* Alpha options:                         Alpha Options.      (line    6)
* Alpha registers:                       Alpha-Regs.         (line    6)
* Alpha relocations:                     Alpha-Relocs.       (line    6)
* Alpha support:                         Alpha-Dependent.    (line    6)
* Alpha Syntax:                          Alpha Options.      (line   60)
* Alpha-only directives:                 Alpha Directives.   (line    9)
* Altera Nios II support:                NiosII-Dependent.   (line    6)
* altered difference tables:             Word.               (line   12)
* alternate syntax for the 680x0:        M68K-Moto-Syntax.   (line    6)
* ARC Branch Target Address:             ARC-Regs.           (line   60)
* ARC BTA saved on exception entry:      ARC-Regs.           (line   79)
* ARC Build configuration for: BTA Registers: ARC-Regs.      (line   89)
* ARC Build configuration for: Core Registers: ARC-Regs.     (line   97)
* ARC Build configuration for: Interrupts: ARC-Regs.         (line   93)
* ARC Build Configuration Registers Version: ARC-Regs.       (line   85)
* ARC C preprocessor macro separator:    ARC-Chars.          (line   31)
* ARC core general registers:            ARC-Regs.           (line   10)
* ARC DCCM RAM Configuration Register:   ARC-Regs.           (line  101)
* ARC Exception Cause Register:          ARC-Regs.           (line   63)
* ARC Exception Return Address:          ARC-Regs.           (line   76)
* ARC extension core registers:          ARC-Regs.           (line   38)
* ARC frame pointer:                     ARC-Regs.           (line   17)
* ARC global pointer:                    ARC-Regs.           (line   14)
* ARC interrupt link register:           ARC-Regs.           (line   27)
* ARC Interrupt Vector Base address:     ARC-Regs.           (line   66)
* ARC level 1 interrupt link register:   ARC-Regs.           (line   23)
* ARC level 2 interrupt link register:   ARC-Regs.           (line   31)
* ARC line comment character:            ARC-Chars.          (line   11)
* ARC line separator:                    ARC-Chars.          (line   27)
* ARC link register:                     ARC-Regs.           (line   35)
* ARC loop counter:                      ARC-Regs.           (line   41)
* ARC machine directives:                ARC Directives.     (line    6)
* ARC opcodes:                           ARC Opcodes.        (line    6)
* ARC options:                           ARC Options.        (line    6)
* ARC Processor Identification register: ARC-Regs.           (line   51)
* ARC Program Counter:                   ARC-Regs.           (line   54)
* ARC register name prefix character:    ARC-Chars.          (line    7)
* ARC register names:                    ARC-Regs.           (line    6)
* ARC Saved User Stack Pointer:          ARC-Regs.           (line   73)
* ARC stack pointer:                     ARC-Regs.           (line   20)
* ARC Status register:                   ARC-Regs.           (line   57)
* ARC STATUS32 saved on exception:       ARC-Regs.           (line   82)
* ARC Stored STATUS32 register on entry to level P0 interrupts: ARC-Regs.
                                                             (line   69)
* ARC support:                           ARC-Dependent.      (line    6)
* ARC symbol prefix character:           ARC-Chars.          (line   20)
* ARC word aligned program counter:      ARC-Regs.           (line   44)
* arch directive, i386:                  i386-Arch.          (line    6)
* arch directive, M680x0:                M68K-Directives.    (line   22)
* arch directive, MSP 430:               MSP430 Directives.  (line   18)
* arch directive, x86-64:                i386-Arch.          (line    6)
* architecture options, IP2022:          IP2K-Opts.          (line    9)
* architecture options, IP2K:            IP2K-Opts.          (line   14)
* architecture options, M16C:            M32C-Opts.          (line   12)
* architecture options, M32C:            M32C-Opts.          (line    9)
* architecture options, M32R:            M32R-Opts.          (line   21)
* architecture options, M32R2:           M32R-Opts.          (line   17)
* architecture options, M32RX:           M32R-Opts.          (line    9)
* architecture options, M680x0:          M68K-Opts.          (line   99)
* Architecture variant option, CRIS:     CRIS-Opts.          (line   34)
* architectures, Meta:                   Meta Options.       (line    6)
* architectures, PowerPC:                PowerPC-Opts.       (line    6)
* architectures, SCORE:                  SCORE-Opts.         (line    6)
* architectures, SPARC:                  Sparc-Opts.         (line    6)
* arguments for addition:                Infix Ops.          (line   45)
* arguments for subtraction:             Infix Ops.          (line   50)
* arguments in expressions:              Arguments.          (line    6)
* arithmetic functions:                  Operators.          (line    6)
* arithmetic operands:                   Arguments.          (line    6)
* ARM data relocations:                  ARM-Relocations.    (line    6)
* ARM floating point (IEEE):             ARM Floating Point. (line    6)
* ARM identifiers:                       ARM-Chars.          (line   19)
* ARM immediate character:               ARM-Chars.          (line   17)
* ARM line comment character:            ARM-Chars.          (line    6)
* ARM line separator:                    ARM-Chars.          (line   14)
* ARM machine directives:                ARM Directives.     (line    6)
* ARM opcodes:                           ARM Opcodes.        (line    6)
* ARM options (none):                    ARM Options.        (line    6)
* ARM register names:                    ARM-Regs.           (line    6)
* ARM support:                           ARM-Dependent.      (line    6)
* ascii directive:                       Ascii.              (line    6)
* asciz directive:                       Asciz.              (line    6)
* asg directive, TIC54X:                 TIC54X-Directives.  (line   18)
* assembler bugs, reporting:             Bug Reporting.      (line    6)
* assembler crash:                       Bug Criteria.       (line    9)
* assembler directive .3byte, RX:        RX-Directives.      (line    9)
* assembler directive .arch, CRIS:       CRIS-Pseudos.       (line   50)
* assembler directive .dword, CRIS:      CRIS-Pseudos.       (line   12)
* assembler directive .far, M68HC11:     M68HC11-Directives. (line   20)
* assembler directive .fetchalign, RX:   RX-Directives.      (line   13)
* assembler directive .interrupt, M68HC11: M68HC11-Directives.
                                                             (line   26)
* assembler directive .mode, M68HC11:    M68HC11-Directives. (line   16)
* assembler directive .relax, M68HC11:   M68HC11-Directives. (line   10)
* assembler directive .syntax, CRIS:     CRIS-Pseudos.       (line   18)
* assembler directive .xrefb, M68HC11:   M68HC11-Directives. (line   31)
* assembler directive BSPEC, MMIX:       MMIX-Pseudos.       (line  137)
* assembler directive BYTE, MMIX:        MMIX-Pseudos.       (line  101)
* assembler directive ESPEC, MMIX:       MMIX-Pseudos.       (line  137)
* assembler directive GREG, MMIX:        MMIX-Pseudos.       (line   53)
* assembler directive IS, MMIX:          MMIX-Pseudos.       (line   44)
* assembler directive LOC, MMIX:         MMIX-Pseudos.       (line    7)
* assembler directive LOCAL, MMIX:       MMIX-Pseudos.       (line   29)
* assembler directive OCTA, MMIX:        MMIX-Pseudos.       (line  113)
* assembler directive PREFIX, MMIX:      MMIX-Pseudos.       (line  125)
* assembler directive TETRA, MMIX:       MMIX-Pseudos.       (line  113)
* assembler directive WYDE, MMIX:        MMIX-Pseudos.       (line  113)
* assembler directives, CRIS:            CRIS-Pseudos.       (line    6)
* assembler directives, M68HC11:         M68HC11-Directives. (line    6)
* assembler directives, M68HC12:         M68HC11-Directives. (line    6)
* assembler directives, MMIX:            MMIX-Pseudos.       (line    6)
* assembler directives, RL78:            RL78-Directives.    (line    6)
* assembler directives, RX:              RX-Directives.      (line    6)
* assembler directives, S12Z:            S12Z-Directives.    (line    5)
* assembler directives, XGATE:           XGATE-Directives.   (line    6)
* assembler internal logic error:        As Sections.        (line   13)
* assembler version:                     v.                  (line    6)
* assembler, and linker:                 Secs Background.    (line   10)
* assembly listings, enabling:           a.                  (line    6)
* assigning values to symbols:           Setting Symbols.    (line    6)
* assigning values to symbols <1>:       Equ.                (line    6)
* at register, MIPS:                     MIPS Macros.        (line   35)
* attributes, symbol:                    Symbol Attributes.  (line    6)
* att_syntax pseudo op, i386:            i386-Variations.    (line    6)
* att_syntax pseudo op, x86-64:          i386-Variations.    (line    6)
* auxiliary attributes, COFF symbols:    COFF Symbols.       (line   19)
* auxiliary symbol information, COFF:    Dim.                (line    6)
* AVR line comment character:            AVR-Chars.          (line    6)
* AVR line separator:                    AVR-Chars.          (line   14)
* AVR modifiers:                         AVR-Modifiers.      (line    6)
* AVR opcode summary:                    AVR Opcodes.        (line    6)
* AVR options (none):                    AVR Options.        (line    6)
* AVR register names:                    AVR-Regs.           (line    6)
* AVR support:                           AVR-Dependent.      (line    6)
* A_DIR environment variable, TIC54X:    TIC54X-Env.         (line    6)
* backslash (\\):                        Strings.            (line   40)
* backspace (\b):                        Strings.            (line   15)
* balign directive:                      Balign.             (line    6)
* balignl directive:                     Balign.             (line   27)
* balignw directive:                     Balign.             (line   27)
* bes directive, TIC54X:                 TIC54X-Directives.  (line  194)
* big endian output, MIPS:               Overview.           (line  808)
* big endian output, PJ:                 Overview.           (line  712)
* big-endian output, MIPS:               MIPS Options.       (line   13)
* big-endian output, TIC6X:              TIC6X Options.      (line   46)
* bignums:                               Bignums.            (line    6)
* binary constants, TIC54X:              TIC54X-Constants.   (line    8)
* binary files, including:               Incbin.             (line    6)
* binary integers:                       Integers.           (line    6)
* bit names, IA-64:                      IA-64-Bits.         (line    6)
* bitfields, not supported on VAX:       VAX-no.             (line    6)
* Blackfin directives:                   Blackfin Directives.
                                                             (line    6)
* Blackfin options (none):               Blackfin Options.   (line    6)
* Blackfin support:                      Blackfin-Dependent. (line    6)
* Blackfin syntax:                       Blackfin Syntax.    (line    6)
* block:                                 Z8000 Directives.   (line   55)
* BMI, i386:                             i386-BMI.           (line    6)
* BMI, x86-64:                           i386-BMI.           (line    6)
* branch improvement, M680x0:            M68K-Branch.        (line    6)
* branch improvement, M68HC11:           M68HC11-Branch.     (line    6)
* branch improvement, VAX:               VAX-branch.         (line    6)
* branch instructions, relaxation:       Xtensa Branch Relaxation.
                                                             (line    6)
* Branch Target Address, ARC:            ARC-Regs.           (line   60)
* branch target alignment:               Xtensa Automatic Alignment.
                                                             (line    6)
* break directive, TIC54X:               TIC54X-Directives.  (line  141)
* BSD syntax:                            PDP-11-Syntax.      (line    6)
* BSS directive:                         RISC-V-Directives.  (line   24)
* bss directive, TIC54X:                 TIC54X-Directives.  (line   27)
* bss section:                           Ld Sections.        (line   20)
* bss section <1>:                       bss.                (line    6)
* BTA saved on exception entry, ARC:     ARC-Regs.           (line   79)
* bug criteria:                          Bug Criteria.       (line    6)
* bug reports:                           Bug Reporting.      (line    6)
* bugs in assembler:                     Reporting Bugs.     (line    6)
* Build configuration for: BTA Registers, ARC: ARC-Regs.     (line   89)
* Build configuration for: Core Registers, ARC: ARC-Regs.    (line   97)
* Build configuration for: Interrupts, ARC: ARC-Regs.        (line   93)
* Build Configuration Registers Version, ARC: ARC-Regs.      (line   85)
* Built-in symbols, CRIS:                CRIS-Symbols.       (line    6)
* builtin math functions, TIC54X:        TIC54X-Builtins.    (line    6)
* builtin subsym functions, TIC54X:      TIC54X-Macros.      (line   16)
* bundle:                                Bundle directives.  (line    9)
* bundle-locked:                         Bundle directives.  (line   39)
* bundle_align_mode directive:           Bundle directives.  (line    9)
* bundle_lock directive:                 Bundle directives.  (line   31)
* bundle_unlock directive:               Bundle directives.  (line   31)
* bus lock prefixes, i386:               i386-Prefixes.      (line   36)
* bval:                                  Z8000 Directives.   (line   30)
* byte directive:                        Byte.               (line    6)
* byte directive, TIC54X:                TIC54X-Directives.  (line   34)
* C preprocessor macro separator, ARC:   ARC-Chars.          (line   31)
* C54XDSP_DIR environment variable, TIC54X: TIC54X-Env.      (line    6)
* call directive, Nios II:               Nios II Relocations.
                                                             (line   38)
* call instructions, i386:               i386-Mnemonics.     (line   75)
* call instructions, relaxation:         Xtensa Call Relaxation.
                                                             (line    6)
* call instructions, x86-64:             i386-Mnemonics.     (line   75)
* call_hiadj directive, Nios II:         Nios II Relocations.
                                                             (line   38)
* call_lo directive, Nios II:            Nios II Relocations.
                                                             (line   38)
* carriage return (backslash-r):         Strings.            (line   24)
* case sensitivity, Z80:                 Z80-Case.           (line    6)
* cfi_endproc directive:                 CFI directives.     (line   40)
* cfi_fde_data directive:                CFI directives.     (line   66)
* cfi_personality directive:             CFI directives.     (line   47)
* cfi_personality_id directive:          CFI directives.     (line   59)
* cfi_sections directive:                CFI directives.     (line    9)
* cfi_startproc directive:               CFI directives.     (line   30)
* char directive, TIC54X:                TIC54X-Directives.  (line   34)
* character constant, Z80:               Z80-Chars.          (line   20)
* character constants:                   Characters.         (line    6)
* character escape codes:                Strings.            (line   15)
* character escapes, Z80:                Z80-Chars.          (line   18)
* character, single:                     Chars.              (line    6)
* characters used in symbols:            Symbol Intro.       (line    6)
* clink directive, TIC54X:               TIC54X-Directives.  (line   43)
* code16 directive, i386:                i386-16bit.         (line    6)
* code16gcc directive, i386:             i386-16bit.         (line    6)
* code32 directive, i386:                i386-16bit.         (line    6)
* code64 directive, i386:                i386-16bit.         (line    6)
* code64 directive, x86-64:              i386-16bit.         (line    6)
* COFF auxiliary symbol information:     Dim.                (line    6)
* COFF structure debugging:              Tag.                (line    6)
* COFF symbol attributes:                COFF Symbols.       (line    6)
* COFF symbol descriptor:                Desc.               (line    6)
* COFF symbol storage class:             Scl.                (line    6)
* COFF symbol type:                      Type.               (line   11)
* COFF symbols, debugging:               Def.                (line    6)
* COFF value attribute:                  Val.                (line    6)
* COMDAT:                                Linkonce.           (line    6)
* comm directive:                        Comm.               (line    6)
* command line conventions:              Command Line.       (line    6)
* command line options, V850:            V850 Options.       (line    9)
* command-line options ignored, VAX:     VAX-Opts.           (line    6)
* comment character, XStormy16:          XStormy16-Chars.    (line   11)
* comments:                              Comments.           (line    6)
* comments, M680x0:                      M68K-Chars.         (line    6)
* comments, removed by preprocessor:     Preprocessing.      (line   11)
* common directive, SPARC:               Sparc-Directives.   (line   12)
* common sections:                       Linkonce.           (line    6)
* common variable storage:               bss.                (line    6)
* comparison expressions:                Infix Ops.          (line   56)
* conditional assembly:                  If.                 (line    6)
* constant, single character:            Chars.              (line    6)
* constants:                             Constants.          (line    6)
* constants, bignum:                     Bignums.            (line    6)
* constants, character:                  Characters.         (line    6)
* constants, converted by preprocessor:  Preprocessing.      (line   14)
* constants, floating point:             Flonums.            (line    6)
* constants, integer:                    Integers.           (line    6)
* constants, number:                     Numbers.            (line    6)
* constants, Sparc:                      Sparc-Constants.    (line    6)
* constants, string:                     Strings.            (line    6)
* constants, TIC54X:                     TIC54X-Constants.   (line    6)
* conversion instructions, i386:         i386-Mnemonics.     (line   56)
* conversion instructions, x86-64:       i386-Mnemonics.     (line   56)
* coprocessor wait, i386:                i386-Prefixes.      (line   40)
* copy directive, TIC54X:                TIC54X-Directives.  (line   52)
* core general registers, ARC:           ARC-Regs.           (line   10)
* cpu directive, ARC:                    ARC Directives.     (line   27)
* cpu directive, M680x0:                 M68K-Directives.    (line   30)
* cpu directive, MSP 430:                MSP430 Directives.  (line   22)
* CR16 line comment character:           CR16-Chars.         (line    6)
* CR16 line separator:                   CR16-Chars.         (line   12)
* CR16 Operand Qualifiers:               CR16 Operand Qualifiers.
                                                             (line    6)
* CR16 support:                          CR16-Dependent.     (line    6)
* crash of assembler:                    Bug Criteria.       (line    9)
* CRIS --emulation=crisaout command line option: CRIS-Opts.  (line    9)
* CRIS --emulation=criself command line option: CRIS-Opts.   (line    9)
* CRIS --march=ARCHITECTURE command line option: CRIS-Opts.  (line   34)
* CRIS --mul-bug-abort command line option: CRIS-Opts.       (line   63)
* CRIS --no-mul-bug-abort command line option: CRIS-Opts.    (line   63)
* CRIS --no-underscore command line option: CRIS-Opts.       (line   15)
* CRIS --pic command line option:        CRIS-Opts.          (line   27)
* CRIS --underscore command line option: CRIS-Opts.          (line   15)
* CRIS -N command line option:           CRIS-Opts.          (line   59)
* CRIS architecture variant option:      CRIS-Opts.          (line   34)
* CRIS assembler directive .arch:        CRIS-Pseudos.       (line   50)
* CRIS assembler directive .dword:       CRIS-Pseudos.       (line   12)
* CRIS assembler directive .syntax:      CRIS-Pseudos.       (line   18)
* CRIS assembler directives:             CRIS-Pseudos.       (line    6)
* CRIS built-in symbols:                 CRIS-Symbols.       (line    6)
* CRIS instruction expansion:            CRIS-Expand.        (line    6)
* CRIS line comment characters:          CRIS-Chars.         (line    6)
* CRIS options:                          CRIS-Opts.          (line    6)
* CRIS position-independent code:        CRIS-Opts.          (line   27)
* CRIS pseudo-op .arch:                  CRIS-Pseudos.       (line   50)
* CRIS pseudo-op .dword:                 CRIS-Pseudos.       (line   12)
* CRIS pseudo-op .syntax:                CRIS-Pseudos.       (line   18)
* CRIS pseudo-ops:                       CRIS-Pseudos.       (line    6)
* CRIS register names:                   CRIS-Regs.          (line    6)
* CRIS support:                          CRIS-Dependent.     (line    6)
* CRIS symbols in position-independent code: CRIS-Pic.       (line    6)
* ctbp register, V850:                   V850-Regs.          (line   90)
* ctoff pseudo-op, V850:                 V850 Opcodes.       (line  110)
* ctpc register, V850:                   V850-Regs.          (line   82)
* ctpsw register, V850:                  V850-Regs.          (line   84)
* current address:                       Dot.                (line    6)
* current address, advancing:            Org.                (line    6)
* c_mode directive, TIC54X:              TIC54X-Directives.  (line   49)
* D10V @word modifier:                   D10V-Word.          (line    6)
* D10V addressing modes:                 D10V-Addressing.    (line    6)
* D10V floating point:                   D10V-Float.         (line    6)
* D10V line comment character:           D10V-Chars.         (line    6)
* D10V opcode summary:                   D10V-Opcodes.       (line    6)
* D10V optimization:                     Overview.           (line  591)
* D10V options:                          D10V-Opts.          (line    6)
* D10V registers:                        D10V-Regs.          (line    6)
* D10V size modifiers:                   D10V-Size.          (line    6)
* D10V sub-instruction ordering:         D10V-Chars.         (line   14)
* D10V sub-instructions:                 D10V-Subs.          (line    6)
* D10V support:                          D10V-Dependent.     (line    6)
* D10V syntax:                           D10V-Syntax.        (line    6)
* D30V addressing modes:                 D30V-Addressing.    (line    6)
* D30V floating point:                   D30V-Float.         (line    6)
* D30V Guarded Execution:                D30V-Guarded.       (line    6)
* D30V line comment character:           D30V-Chars.         (line    6)
* D30V nops:                             Overview.           (line  599)
* D30V nops after 32-bit multiply:       Overview.           (line  602)
* D30V opcode summary:                   D30V-Opcodes.       (line    6)
* D30V optimization:                     Overview.           (line  596)
* D30V options:                          D30V-Opts.          (line    6)
* D30V registers:                        D30V-Regs.          (line    6)
* D30V size modifiers:                   D30V-Size.          (line    6)
* D30V sub-instruction ordering:         D30V-Chars.         (line   14)
* D30V sub-instructions:                 D30V-Subs.          (line    6)
* D30V support:                          D30V-Dependent.     (line    6)
* D30V syntax:                           D30V-Syntax.        (line    6)
* data alignment on SPARC:               Sparc-Aligned-Data. (line    6)
* data and text sections, joining:       R.                  (line    6)
* data directive:                        Data.               (line    6)
* data directive, TIC54X:                TIC54X-Directives.  (line   59)
* Data directives:                       RISC-V-Directives.  (line   12)
* data relocations, ARM:                 ARM-Relocations.    (line    6)
* data section:                          Ld Sections.        (line    9)
* data1 directive, M680x0:               M68K-Directives.    (line    9)
* data2 directive, M680x0:               M68K-Directives.    (line   12)
* dbpc register, V850:                   V850-Regs.          (line   86)
* dbpsw register, V850:                  V850-Regs.          (line   88)
* dc directive:                          Dc.                 (line    6)
* dcb directive:                         Dcb.                (line    6)
* DCCM RAM Configuration Register, ARC:  ARC-Regs.           (line  101)
* debuggers, and symbol order:           Symbols.            (line   10)
* debugging COFF symbols:                Def.                (line    6)
* DEC syntax:                            PDP-11-Syntax.      (line    6)
* decimal integers:                      Integers.           (line   12)
* def directive:                         Def.                (line    6)
* def directive, TIC54X:                 TIC54X-Directives.  (line  101)
* density instructions:                  Density Instructions.
                                                             (line    6)
* dependency tracking:                   MD.                 (line    6)
* deprecated directives:                 Deprecated.         (line    6)
* desc directive:                        Desc.               (line    6)
* descriptor, of a.out symbol:           Symbol Desc.        (line    6)
* dfloat directive, VAX:                 VAX-directives.     (line    9)
* difference tables altered:             Word.               (line   12)
* difference tables, warning:            K.                  (line    6)
* differences, mmixal:                   MMIX-mmixal.        (line    6)
* dim directive:                         Dim.                (line    6)
* directives and instructions:           Statements.         (line   20)
* directives for PowerPC:                PowerPC-Pseudo.     (line    6)
* directives for SCORE:                  SCORE-Pseudo.       (line    6)
* directives, Blackfin:                  Blackfin Directives.
                                                             (line    6)
* directives, M32R:                      M32R-Directives.    (line    6)
* directives, M680x0:                    M68K-Directives.    (line    6)
* directives, machine independent:       Pseudo Ops.         (line    6)
* directives, Xtensa:                    Xtensa Directives.  (line    6)
* directives, Z8000:                     Z8000 Directives.   (line    6)
* Disable floating-point instructions:   MIPS Floating-Point.
                                                             (line    6)
* Disable single-precision floating-point operations: MIPS Floating-Point.
                                                             (line   12)
* displacement sizing character, VAX:    VAX-operands.       (line   12)
* dollar local symbols:                  Symbol Names.       (line  113)
* dot (symbol):                          Dot.                (line    6)
* double directive:                      Double.             (line    6)
* double directive, i386:                i386-Float.         (line   14)
* double directive, M680x0:              M68K-Float.         (line   14)
* double directive, M68HC11:             M68HC11-Float.      (line   14)
* double directive, RX:                  RX-Float.           (line   11)
* double directive, TIC54X:              TIC54X-Directives.  (line   62)
* double directive, VAX:                 VAX-float.          (line   15)
* double directive, x86-64:              i386-Float.         (line   14)
* double directive, XGATE:               XGATE-Float.        (line   13)
* doublequote (\"):                      Strings.            (line   43)
* drlist directive, TIC54X:              TIC54X-Directives.  (line   71)
* drnolist directive, TIC54X:            TIC54X-Directives.  (line   71)
* ds directive:                          Ds.                 (line    6)
* DTP-relative data directives:          RISC-V-Directives.  (line   18)
* dword directive, Nios II:              Nios II Directives. (line   16)
* dword directive, PRU:                  PRU Directives.     (line   13)
* EB command line option, Nios II:       Nios II Options.    (line   22)
* ecr register, V850:                    V850-Regs.          (line   78)
* eight-byte integer:                    Quad.               (line    9)
* eight-byte integer <1>:                8byte.              (line    6)
* eipc register, V850:                   V850-Regs.          (line   70)
* eipsw register, V850:                  V850-Regs.          (line   72)
* eject directive:                       Eject.              (line    6)
* EL command line option, Nios II:       Nios II Options.    (line   25)
* ELF symbol type:                       Type.               (line   22)
* else directive:                        Else.               (line    6)
* elseif directive:                      Elseif.             (line    6)
* empty expressions:                     Empty Exprs.        (line    6)
* emsg directive, TIC54X:                TIC54X-Directives.  (line   75)
* emulation:                             Overview.           (line 1027)
* encoding options, i386:                i386-Mnemonics.     (line   34)
* encoding options, x86-64:              i386-Mnemonics.     (line   34)
* end directive:                         End.                (line    6)
* endef directive:                       Endef.              (line    6)
* endfunc directive:                     Endfunc.            (line    6)
* endianness, MIPS:                      Overview.           (line  808)
* endianness, PJ:                        Overview.           (line  712)
* endif directive:                       Endif.              (line    6)
* endloop directive, TIC54X:             TIC54X-Directives.  (line  141)
* endm directive:                        Macro.              (line  137)
* endm directive, TIC54X:                TIC54X-Directives.  (line  151)
* endstruct directive, TIC54X:           TIC54X-Directives.  (line  214)
* endunion directive, TIC54X:            TIC54X-Directives.  (line  248)
* environment settings, TIC54X:          TIC54X-Env.         (line    6)
* EOF, newline must precede:             Statements.         (line   14)
* ep register, V850:                     V850-Regs.          (line   66)
* Epiphany line comment character:       Epiphany-Chars.     (line    6)
* Epiphany line separator:               Epiphany-Chars.     (line   14)
* Epiphany options:                      Epiphany Options.   (line    6)
* Epiphany support:                      Epiphany-Dependent. (line    6)
* equ directive:                         Equ.                (line    6)
* equ directive, TIC54X:                 TIC54X-Directives.  (line  189)
* equiv directive:                       Equiv.              (line    6)
* eqv directive:                         Eqv.                (line    6)
vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
