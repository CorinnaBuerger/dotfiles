Addresses and symbols may be section relative, or absolute.  A section
relative symbol is relocatable.  If you request relocatable output using
the '-r' option, a further link operation may change the value of a
section relative symbol.  On the other hand, an absolute symbol will
retain the same value throughout any further link operations.

   Some terms in linker expressions are addresses.  This is true of
section relative symbols and for builtin functions that return an
address, such as 'ADDR', 'LOADADDR', 'ORIGIN' and 'SEGMENT_START'.
Other terms are simply numbers, or are builtin functions that return a
non-address value, such as 'LENGTH'.  One complication is that unless
you set 'LD_FEATURE ("SANE_EXPR")' (*note Miscellaneous Commands::),
numbers and absolute symbols are treated differently depending on their
location, for compatibility with older versions of 'ld'.  Expressions
appearing outside an output section definition treat all numbers as
absolute addresses.  Expressions appearing inside an output section
definition treat absolute symbols as numbers.  If 'LD_FEATURE
("SANE_EXPR")' is given, then absolute symbols and numbers are simply
treated as numbers everywhere.

   In the following simple example,

     SECTIONS
       {
         . = 0x100;
         __executable_start = 0x100;
         .data :
         {
           . = 0x10;
           __data_start = 0x10;
           *(.data)
         }
         ...
       }

   both '.' and '__executable_start' are set to the absolute address
0x100 in the first two assignments, then both '.' and '__data_start' are
set to 0x10 relative to the '.data' section in the second two
assignments.

   For expressions involving numbers, relative addresses and absolute
addresses, ld follows these rules to evaluate terms:

   * Unary operations on an absolute address or number, and binary
     operations on two absolute addresses or two numbers, or between one
     absolute address and a number, apply the operator to the value(s).
   * Unary operations on a relative address, and binary operations on
     two relative addresses in the same section or between one relative
     address and a number, apply the operator to the offset part of the
     address(es).
   * Other binary operations, that is, between two relative addresses
     not in the same section, or between a relative address and an
     absolute address, first convert any non-absolute term to an
     absolute address before applying the operator.

   The result section of each sub-expression is as follows:

   * An operation involving only numbers results in a number.
   * The result of comparisons, '&&' and '||' is also a number.
   * The result of other binary arithmetic and logical operations on two
     relative addresses in the same section or two absolute addresses
     (after above conversions) is also a number when 'LD_FEATURE
     ("SANE_EXPR")' or inside an output section definition but an
     absolute address otherwise.
   * The result of other operations on relative addresses or one
     relative address and a number, is a relative address in the same
     section as the relative operand(s).
   * The result of other operations on absolute addresses (after above
     conversions) is an absolute address.

   You can use the builtin function 'ABSOLUTE' to force an expression to
be absolute when it would otherwise be relative.  For example, to create
an absolute symbol set to the address of the end of the output section
'.data':
     SECTIONS
       {
         .data : { *(.data) _edata = ABSOLUTE(.); }
       }
If 'ABSOLUTE' were not used, '_edata' would be relative to the '.data'
section.

   Using 'LOADADDR' also forces an expression absolute, since this
particular builtin function returns an absolute address.

==============================================================================
File: ld.info,  Node: |Builtin_Functions|,  Prev: |Expression_Section|,  Up: |Expressions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Builtin_Functions*

3.10.9 Builtin Functions
------------------------

The linker script language includes a number of builtin functions for
use in linker script expressions.

'ABSOLUTE(EXP)'
     Return the absolute (non-relocatable, as opposed to non-negative)
     value of the expression EXP.  Primarily useful to assign an
     absolute value to a symbol within a section definition, where
     symbol values are normally section relative.  *Note Expression
     Section::.

'ADDR(SECTION)'
     Return the address (VMA) of the named SECTION.  Your script must
     previously have defined the location of that section.  In the
     following example, 'start_of_output_1', 'symbol_1' and 'symbol_2'
     are assigned equivalent values, except that 'symbol_1' will be
     relative to the '.output1' section while the other two will be
     absolute:
          SECTIONS { ...
            .output1 :
              {
              start_of_output_1 = ABSOLUTE(.);
              ...
              }
            .output :
              {
              symbol_1 = ADDR(.output1);
              symbol_2 = start_of_output_1;
              }
          ... }

'ALIGN(ALIGN)'
'ALIGN(EXP,ALIGN)'
     Return the location counter ('.') or arbitrary expression aligned
     to the next ALIGN boundary.  The single operand 'ALIGN' doesn't
     change the value of the location counter--it just does arithmetic
     on it.  The two operand 'ALIGN' allows an arbitrary expression to
     be aligned upwards ('ALIGN(ALIGN)' is equivalent to
     'ALIGN(ABSOLUTE(.), ALIGN)').

     Here is an example which aligns the output '.data' section to the
     next '0x2000' byte boundary after the preceding section and sets a
     variable within the section to the next '0x8000' boundary after the
     input sections:
          SECTIONS { ...
            .data ALIGN(0x2000): {
              *(.data)
              variable = ALIGN(0x8000);
            }
          ... }
     The first use of 'ALIGN' in this example specifies the location of
     a section because it is used as the optional ADDRESS attribute of a
     section definition (*note Output Section Address::).  The second
     use of 'ALIGN' is used to defines the value of a symbol.

     The builtin function 'NEXT' is closely related to 'ALIGN'.

'ALIGNOF(SECTION)'
     Return the alignment in bytes of the named SECTION, if that section
     has been allocated.  If the section has not been allocated when
     this is evaluated, the linker will report an error.  In the
     following example, the alignment of the '.output' section is stored
     as the first value in that section.
          SECTIONS{ ...
            .output {
              LONG (ALIGNOF (.output))
              ...
              }
          ... }

'BLOCK(EXP)'
     This is a synonym for 'ALIGN', for compatibility with older linker
     scripts.  It is most often seen when setting the address of an
     output section.

'DATA_SEGMENT_ALIGN(MAXPAGESIZE, COMMONPAGESIZE)'
     This is equivalent to either
          (ALIGN(MAXPAGESIZE) + (. & (MAXPAGESIZE - 1)))
     or
          (ALIGN(MAXPAGESIZE)
           + ((. + COMMONPAGESIZE - 1) & (MAXPAGESIZE - COMMONPAGESIZE)))
     depending on whether the latter uses fewer COMMONPAGESIZE sized
     pages for the data segment (area between the result of this
     expression and 'DATA_SEGMENT_END') than the former or not.  If the
     latter form is used, it means COMMONPAGESIZE bytes of runtime
     memory will be saved at the expense of up to COMMONPAGESIZE wasted
     bytes in the on-disk file.

     This expression can only be used directly in 'SECTIONS' commands,
     not in any output section descriptions and only once in the linker
     script.  COMMONPAGESIZE should be less or equal to MAXPAGESIZE and
     should be the system page size the object wants to be optimized for
     while still running on system page sizes up to MAXPAGESIZE.  Note
     however that '-z relro' protection will not be effective if the
     system page size is larger than COMMONPAGESIZE.

     Example:
            . = DATA_SEGMENT_ALIGN(0x10000, 0x2000);

'DATA_SEGMENT_END(EXP)'
     This defines the end of data segment for 'DATA_SEGMENT_ALIGN'
     evaluation purposes.

            . = DATA_SEGMENT_END(.);

'DATA_SEGMENT_RELRO_END(OFFSET, EXP)'
     This defines the end of the 'PT_GNU_RELRO' segment when '-z relro'
     option is used.  When '-z relro' option is not present,
     'DATA_SEGMENT_RELRO_END' does nothing, otherwise
     'DATA_SEGMENT_ALIGN' is padded so that EXP + OFFSET is aligned to
     the COMMONPAGESIZE argument given to 'DATA_SEGMENT_ALIGN'.  If
     present in the linker script, it must be placed between
     'DATA_SEGMENT_ALIGN' and 'DATA_SEGMENT_END'.  Evaluates to the
     second argument plus any padding needed at the end of the
     'PT_GNU_RELRO' segment due to section alignment.

            . = DATA_SEGMENT_RELRO_END(24, .);

'DEFINED(SYMBOL)'
     Return 1 if SYMBOL is in the linker global symbol table and is
     defined before the statement using DEFINED in the script, otherwise
     return 0.  You can use this function to provide default values for
     symbols.  For example, the following script fragment shows how to
     set a global symbol 'begin' to the first location in the '.text'
     section--but if a symbol called 'begin' already existed, its value
     is preserved:

          SECTIONS { ...
            .text : {
              begin = DEFINED(begin) ? begin : . ;
              ...
            }
            ...
          }

'LENGTH(MEMORY)'
     Return the length of the memory region named MEMORY.

'LOADADDR(SECTION)'
     Return the absolute LMA of the named SECTION.  (*note Output
     Section LMA::).

'LOG2CEIL(EXP)'
     Return the binary logarithm of EXP rounded towards infinity.
     'LOG2CEIL(0)' returns 0.

'MAX(EXP1, EXP2)'
     Returns the maximum of EXP1 and EXP2.

'MIN(EXP1, EXP2)'
     Returns the minimum of EXP1 and EXP2.

'NEXT(EXP)'
     Return the next unallocated address that is a multiple of EXP.
     This function is closely related to 'ALIGN(EXP)'; unless you use
     the 'MEMORY' command to define discontinuous memory for the output
     file, the two functions are equivalent.

'ORIGIN(MEMORY)'
     Return the origin of the memory region named MEMORY.

'SEGMENT_START(SEGMENT, DEFAULT)'
     Return the base address of the named SEGMENT.  If an explicit value
     has already been given for this segment (with a command-line '-T'
     option) then that value will be returned otherwise the value will
     be DEFAULT.  At present, the '-T' command-line option can only be
     used to set the base address for the "text", "data", and "bss"
     sections, but you can use 'SEGMENT_START' with any segment name.

'SIZEOF(SECTION)'
     Return the size in bytes of the named SECTION, if that section has
     been allocated.  If the section has not been allocated when this is
     evaluated, the linker will report an error.  In the following
     example, 'symbol_1' and 'symbol_2' are assigned identical values:
          SECTIONS{ ...
            .output {
              .start = . ;
              ...
              .end = . ;
              }
            symbol_1 = .end - .start ;
            symbol_2 = SIZEOF(.output);
          ... }

'SIZEOF_HEADERS'
'sizeof_headers'
     Return the size in bytes of the output file's headers.  This is
     information which appears at the start of the output file.  You can
     use this number when setting the start address of the first
     section, if you choose, to facilitate paging.

     When producing an ELF output file, if the linker script uses the
     'SIZEOF_HEADERS' builtin function, the linker must compute the
     number of program headers before it has determined all the section
     addresses and sizes.  If the linker later discovers that it needs
     additional program headers, it will report an error 'not enough
     room for program headers'.  To avoid this error, you must avoid
     using the 'SIZEOF_HEADERS' function, or you must rework your linker
     script to avoid forcing the linker to use additional program
     headers, or you must define the program headers yourself using the
     'PHDRS' command (*note PHDRS::).

==============================================================================
File: ld.info,  Node: |Implicit_Linker_Scripts|,  Prev: Expressions,  Up: |Scripts|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *Implicit_Linker_Scripts*

3.11 Implicit Linker Scripts
----------------------------

If you specify a linker input file which the linker can not recognize as
an object file or an archive file, it will try to read the file as a
linker script.  If the file can not be parsed as a linker script, the
linker will report an error.

   An implicit linker script will not replace the default linker script.

   Typically an implicit linker script would contain only symbol
assignments, or the 'INPUT', 'GROUP', or 'VERSION' commands.

   Any input files read because of an implicit linker script will be
read at the position in the command line where the implicit linker
script was read.  This can affect archive searching.

==============================================================================
File: ld.info,  Node: |Machine_Dependent|,  Next: |BFD|,  Prev: |Scripts|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Machine_Dependent*

4 Machine Dependent Features
============================

'ld' has additional features on some platforms; the following sections
describe them.  Machines where 'ld' has no additional functionality are
not listed.

MENU

* |H8/300|::                      'ld' and the H8/300
* |M68HC11/68HC12|::		'ld' and the Motorola 68HC11 and 68HC12 families
* |ARM|::				'ld' and the ARM family
* |HPPA_ELF32|::                  'ld' and HPPA 32-bit ELF
* |M68K|::			'ld' and the Motorola 68K family
* |MIPS|::			'ld' and the MIPS family
* |MMIX|::			'ld' and MMIX
* |MSP430|::			'ld' and MSP430
* |NDS32|::			'ld' and NDS32
* |Nios_II|::			'ld' and the Altera Nios II
* |PowerPC_ELF32|::		'ld' and PowerPC 32-bit ELF Support
* |PowerPC64_ELF64|::		'ld' and PowerPC64 64-bit ELF Support
* |S/390_ELF|::			'ld' and S/390 ELF Support
* |SPU_ELF|::			'ld' and SPU ELF Support
* |TI_COFF|::                     'ld' and TI COFF
* |WIN32|::                       'ld' and WIN32 (cygwin/mingw)
* |Xtensa|::                      'ld' and Xtensa Processors

==============================================================================
File: ld.info,  Node: |H8/300|,  Next: |M68HC11/68HC12|,  Up: |Machine_Dependent|
==============================================================================



4.1 'ld' and the H8/300
-----------------------

For the H8/300, 'ld' can perform these global optimizations when you
specify the '--relax' command-line option.

_relaxing address modes_
     'ld' finds all 'jsr' and 'jmp' instructions whose targets are
     within eight bits, and turns them into eight-bit program-counter
     relative 'bsr' and 'bra' instructions, respectively.

_synthesizing instructions_
     'ld' finds all 'mov.b' instructions which use the sixteen-bit
     absolute address form, but refer to the top page of memory, and
     changes them to use the eight-bit address form.  (That is: the
     linker turns 'mov.b '@'AA:16' into 'mov.b '@'AA:8' whenever the
     address AA is in the top page of memory).

     'ld' finds all 'mov' instructions which use the register indirect
     with 32-bit displacement addressing mode, but use a small
     displacement inside 16-bit displacement range, and changes them to
     use the 16-bit displacement form.  (That is: the linker turns
     'mov.b '@'D:32,ERx' into 'mov.b '@'D:16,ERx' whenever the
     displacement D is in the 16 bit signed integer range.  Only
     implemented in ELF-format ld).

_bit manipulation instructions_
     'ld' finds all bit manipulation instructions like 'band, bclr,
     biand, bild, bior, bist, bixor, bld, bnot, bor, bset, bst, btst,
     bxor' which use 32 bit and 16 bit absolute address form, but refer
     to the top page of memory, and changes them to use the 8 bit
     address form.  (That is: the linker turns 'bset #xx:3,'@'AA:32'
     into 'bset #xx:3,'@'AA:8' whenever the address AA is in the top
     page of memory).

_system control instructions_
     'ld' finds all 'ldc.w, stc.w' instructions which use the 32 bit
     absolute address form, but refer to the top page of memory, and
     changes them to use 16 bit address form.  (That is: the linker
     turns 'ldc.w '@'AA:32,ccr' into 'ldc.w '@'AA:16,ccr' whenever the
     address AA is in the top page of memory).

==============================================================================
File: ld.info,  Node: |M68HC11/68HC12|,  Next: |ARM|,  Prev: |H8/300|,  Up: |Machine_Dependent|
==============================================================================



4.2 'ld' and the Motorola 68HC11 and 68HC12 families
----------------------------------------------------

4.2.1 Linker Relaxation
-----------------------

For the Motorola 68HC11, 'ld' can perform these global optimizations
when you specify the '--relax' command-line option.

_relaxing address modes_
     'ld' finds all 'jsr' and 'jmp' instructions whose targets are
     within eight bits, and turns them into eight-bit program-counter
     relative 'bsr' and 'bra' instructions, respectively.

     'ld' also looks at all 16-bit extended addressing modes and
     transforms them in a direct addressing mode when the address is in
     page 0 (between 0 and 0x0ff).

_relaxing gcc instruction group_
     When 'gcc' is called with '-mrelax', it can emit group of
     instructions that the linker can optimize to use a 68HC11 direct
     addressing mode.  These instructions consists of 'bclr' or 'bset'
     instructions.

4.2.2 Trampoline Generation
---------------------------

For 68HC11 and 68HC12, 'ld' can generate trampoline code to call a far
function using a normal 'jsr' instruction.  The linker will also change
the relocation to some far function to use the trampoline address
instead of the function address.  This is typically the case when a
pointer to a function is taken.  The pointer will in fact point to the
function trampoline.

==============================================================================
File: ld.info,  Node: |ARM|,  Next: |HPPA_ELF32|,  Prev: |M68HC11/68HC12|,  Up: |Machine_Dependent|
==============================================================================



4.3 'ld' and the ARM family
---------------------------

For the ARM, 'ld' will generate code stubs to allow functions calls
between ARM and Thumb code.  These stubs only work with code that has
been compiled and assembled with the '-mthumb-interwork' command line
option.  If it is necessary to link with old ARM object files or
libraries, which have not been compiled with the -mthumb-interwork
option then the '--support-old-code' command line switch should be given
to the linker.  This will make it generate larger stub functions which
will work with non-interworking aware ARM code.  Note, however, the
linker does not support generating stubs for function calls to
non-interworking aware Thumb code.

   The '--thumb-entry' switch is a duplicate of the generic '--entry'
switch, in that it sets the program's starting address.  But it also
sets the bottom bit of the address, so that it can be branched to using
a BX instruction, and the program will start executing in Thumb mode
straight away.

   The '--use-nul-prefixed-import-tables' switch is specifying, that the
import tables idata4 and idata5 have to be generated with a zero element
prefix for import libraries.  This is the old style to generate import
tables.  By default this option is turned off.

   The '--be8' switch instructs 'ld' to generate BE8 format executables.
This option is only valid when linking big-endian objects - ie ones
which have been assembled with the '-EB' option.  The resulting image
will contain big-endian data and little-endian code.

   The 'R_ARM_TARGET1' relocation is typically used for entries in the
'.init_array' section.  It is interpreted as either 'R_ARM_REL32' or
'R_ARM_ABS32', depending on the target.  The '--target1-rel' and
'--target1-abs' switches override the default.

   The '--target2=type' switch overrides the default definition of the
'R_ARM_TARGET2' relocation.  Valid values for 'type', their meanings,
and target defaults are as follows:
'rel'
     'R_ARM_REL32' (arm--elf, arm*-*-eabi)
'abs'
     'R_ARM_ABS32' (arm--symbianelf)
'got-rel'
     'R_ARM_GOT_PREL' (arm--linux, arm*-*-*bsd)

   The 'R_ARM_V4BX' relocation (defined by the ARM AAELF specification)
enables objects compiled for the ARMv4 architecture to be
interworking-safe when linked with other objects compiled for ARMv4t,
but also allows pure ARMv4 binaries to be built from the same ARMv4
objects.

   In the latter case, the switch '--fix-v4bx' must be passed to the
linker, which causes v4t 'BX rM' instructions to be rewritten as 'MOV
PC,rM', since v4 processors do not have a 'BX' instruction.

   In the former case, the switch should not be used, and 'R_ARM_V4BX'
relocations are ignored.

   Replace 'BX rM' instructions identified by 'R_ARM_V4BX' relocations
with a branch to the following veneer:

     TST rM, #1
     MOVEQ PC, rM
     BX Rn

   This allows generation of libraries/applications that work on ARMv4
cores and are still interworking safe.  Note that the above veneer
clobbers the condition flags, so may cause incorrect program behavior in
rare cases.

   The '--use-blx' switch enables the linker to use ARM/Thumb BLX
instructions (available on ARMv5t and above) in various situations.
Currently it is used to perform calls via the PLT from Thumb code using
BLX rather than using BX and a mode-switching stub before each PLT
entry.  This should lead to such calls executing slightly faster.

   This option is enabled implicitly for SymbianOS, so there is no need
to specify it if you are using that target.

   The '--vfp11-denorm-fix' switch enables a link-time workaround for a
bug in certain VFP11 coprocessor hardware, which sometimes allows
instructions with denorm operands (which must be handled by support
code) to have those operands overwritten by subsequent instructions
before the support code can read the intended values.

   The bug may be avoided in scalar mode if you allow at least one
intervening instruction between a VFP11 instruction which uses a
register and another instruction which writes to the same register, or
at least two intervening instructions if vector mode is in use.  The bug
only affects full-compliance floating-point mode: you do not need this
workaround if you are using "runfast" mode.  Please contact ARM for
further details.

   If you know you are using buggy VFP11 hardware, you can enable this
workaround by specifying the linker option '--vfp-denorm-fix=scalar' if
you are using the VFP11 scalar mode only, or '--vfp-denorm-fix=vector'
if you are using vector mode (the latter also works for scalar code).
The default is '--vfp-denorm-fix=none'.

   If the workaround is enabled, instructions are scanned for
potentially-troublesome sequences, and a veneer is created for each such
sequence which may trigger the erratum.  The veneer consists of the
first instruction of the sequence and a branch back to the subsequent
instruction.  The original instruction is then replaced with a branch to
the veneer.  The extra cycles required to call and return from the
veneer are sufficient to avoid the erratum in both the scalar and vector
cases.

   The '--fix-arm1176' switch enables a link-time workaround for an
erratum in certain ARM1176 processors.  The workaround is enabled by
default if you are targeting ARM v6 (excluding ARM v6T2) or earlier.  It
can be disabled unconditionally by specifying '--no-fix-arm1176'.

   Further information is available in the "ARM1176JZ-S and ARM1176JZF-S
Programmer Advice Notice" available on the ARM documentation website at:
http://infocenter.arm.com/.

   The '--fix-stm32l4xx-629360' switch enables a link-time workaround
for a bug in the bus matrix / memory controller for some of the STM32
Cortex-M4 based products (STM32L4xx).  When accessing off-chip memory
via the affected bus for bus reads of 9 words or more, the bus can
generate corrupt data and/or abort.  These are only core-initiated
accesses (not DMA), and might affect any access: integer loads such as
LDM, POP and floating-point loads such as VLDM, VPOP. Stores are not
affected.

   The bug can be avoided by splitting memory accesses into the
necessary chunks to keep bus reads below 8 words.

   The workaround is not enabled by default, this is equivalent to use
'--fix-stm32l4xx-629360=none'.  If you know you are using buggy
STM32L4xx hardware, you can enable the workaround by specifying the
linker option '--fix-stm32l4xx-629360', or the equivalent
'--fix-stm32l4xx-629360=default'.

   If the workaround is enabled, instructions are scanned for
potentially-troublesome sequences, and a veneer is created for each such
sequence which may trigger the erratum.  The veneer consists in a
replacement sequence emulating the behaviour of the original one and a
branch back to the subsequent instruction.  The original instruction is
then replaced with a branch to the veneer.

   The workaround does not always preserve the memory access order for
the LDMDB instruction, when the instruction loads the PC.

   The workaround is not able to handle problematic instructions when
they are in the middle of an IT block, since a branch is not allowed
there.  In that case, the linker reports a warning and no replacement
occurs.

   The workaround is not able to replace problematic instructions with a
PC-relative branch instruction if the '.text' section is too large.  In
that case, when the branch that replaces the original code cannot be
encoded, the linker reports a warning and no replacement occurs.

   The '--no-enum-size-warning' switch prevents the linker from warning
when linking object files that specify incompatible EABI enumeration
size attributes.  For example, with this switch enabled, linking of an
object file using 32-bit enumeration values with another using
enumeration values fitted into the smallest possible space will not be
diagnosed.

   The '--no-wchar-size-warning' switch prevents the linker from warning
when linking object files that specify incompatible EABI 'wchar_t' size
attributes.  For example, with this switch enabled, linking of an object
file using 32-bit 'wchar_t' values with another using 16-bit 'wchar_t'
values will not be diagnosed.

   The '--pic-veneer' switch makes the linker use PIC sequences for
ARM/Thumb interworking veneers, even if the rest of the binary is not
PIC. This avoids problems on uClinux targets where '--emit-relocs' is
used to generate relocatable binaries.

   The linker will automatically generate and insert small sequences of
code into a linked ARM ELF executable whenever an attempt is made to
perform a function call to a symbol that is too far away.  The placement
of these sequences of instructions - called stubs - is controlled by the
command line option '--stub-group-size=N'.  The placement is important
because a poor choice can create a need for duplicate stubs, increasing
the code size.  The linker will try to group stubs together in order to
reduce interruptions to the flow of code, but it needs guidance as to
how big these groups should be and where they should be placed.

   The value of 'N', the parameter to the '--stub-group-size=' option
controls where the stub groups are placed.  If it is negative then all
stubs are placed after the first branch that needs them.  If it is
positive then the stubs can be placed either before or after the
branches that need them.  If the value of 'N' is 1 (either +1 or -1)
then the linker will choose exactly where to place groups of stubs,
using its built in heuristics.  A value of 'N' greater than 1 (or
smaller than -1) tells the linker that a single group of stubs can
service at most 'N' bytes from the input sections.

   The default, if '--stub-group-size=' is not specified, is 'N = +1'.

   Farcalls stubs insertion is fully supported for the ARM-EABI target
only, because it relies on object files properties not present
otherwise.

   The '--fix-cortex-a8' switch enables a link-time workaround for an
erratum in certain Cortex-A8 processors.  The workaround is enabled by
default if you are targeting the ARM v7-A architecture profile.  It can
be enabled otherwise by specifying '--fix-cortex-a8', or disabled
unconditionally by specifying '--no-fix-cortex-a8'.

   The erratum only affects Thumb-2 code.  Please contact ARM for
further details.

   The '--fix-cortex-a53-835769' switch enables a link-time workaround
for erratum 835769 present on certain early revisions of Cortex-A53
processors.  The workaround is disabled by default.  It can be enabled
by specifying '--fix-cortex-a53-835769', or disabled unconditionally by
specifying '--no-fix-cortex-a53-835769'.

   Please contact ARM for further details.

   The '--no-merge-exidx-entries' switch disables the merging of
adjacent exidx entries in debuginfo.

   The '--long-plt' option enables the use of 16 byte PLT entries which
support up to 4Gb of code.  The default is to use 12 byte PLT entries
which only support 512Mb of code.

   The '--no-apply-dynamic-relocs' option makes AArch64 linker do not
apply link-time values for dynamic relocations.

   All SG veneers are placed in the special output section
'.gnu.sgstubs'.  Its start address must be set, either with the command
line option '--section-start' or in a linker script, to indicate where
to place these veneers in memory.

   The '--cmse-implib' option requests that the import libraries
specified by the '--out-implib' and '--in-implib' options are secure
gateway import libraries, suitable for linking a non-secure executable
against secure code as per ARMv8-M Security Extensions.

   The '--in-implib=file' specifies an input import library whose
symbols must keep the same address in the executable being produced.  A
warning is given if no '--out-implib' is given but new symbols have been
introduced in the executable that should be listed in its import
library.  Otherwise, if '--out-implib' is specified, the symbols are
added to the output import library.  A warning is also given if some
symbols present in the input import library have disappeared from the
executable.  This option is only effective for Secure Gateway import
libraries, ie.  when '--cmse-implib' is specified.

==============================================================================
File: ld.info,  Node: |HPPA_ELF32|,  Next: |M68K|,  Prev: |ARM|,  Up: |Machine_Dependent|
==============================================================================



4.4 'ld' and HPPA 32-bit ELF Support
------------------------------------

When generating a shared library, 'ld' will by default generate import
stubs suitable for use with a single sub-space application.  The
'--multi-subspace' switch causes 'ld' to generate export stubs, and
different (larger) import stubs suitable for use with multiple
sub-spaces.

   Long branch stubs and import/export stubs are placed by 'ld' in stub
sections located between groups of input sections.  '--stub-group-size'
specifies the maximum size of a group of input sections handled by one
stub section.  Since branch offsets are signed, a stub section may serve
two groups of input sections, one group before the stub section, and one
group after it.  However, when using conditional branches that require
stubs, it may be better (for branch prediction) that stub sections only
serve one group of input sections.  A negative value for 'N' chooses
this scheme, ensuring that branches to stubs always use a negative
offset.  Two special values of 'N' are recognized, '1' and '-1'.  These
both instruct 'ld' to automatically size input section groups for the
branch types detected, with the same behaviour regarding stub placement
as other positive or negative values of 'N' respectively.

   Note that '--stub-group-size' does not split input sections.  A
single input section larger than the group size specified will of course
create a larger group (of one section).  If input sections are too
large, it may not be possible for a branch to reach its stub.

==============================================================================
File: ld.info,  Node: |M68K|,  Next: |MIPS|,  Prev: |HPPA_ELF32|,  Up: |Machine_Dependent|
==============================================================================



4.5 'ld' and the Motorola 68K family
------------------------------------

The '--got=TYPE' option lets you choose the GOT generation scheme.  The
choices are 'single', 'negative', 'multigot' and 'target'.  When
'target' is selected the linker chooses the default GOT generation
scheme for the current target.  'single' tells the linker to generate a
single GOT with entries only at non-negative offsets.  'negative'
instructs the linker to generate a single GOT with entries at both
negative and positive offsets.  Not all environments support such GOTs.
'multigot' allows the linker to generate several GOTs in the output
file.  All GOT references from a single input object file access the
same GOT, but references from different input object files might access
different GOTs.  Not all environments support such GOTs.

==============================================================================
File: ld.info,  Node: |MIPS|,  Next: |MMIX|,  Prev: |M68K|,  Up: |Machine_Dependent|
==============================================================================



4.6 'ld' and the MIPS family
----------------------------

The '--insn32' and '--no-insn32' options control the choice of microMIPS
instructions used in code generated by the linker, such as that in the
PLT or lazy binding stubs, or in relaxation.  If '--insn32' is used,
then the linker only uses 32-bit instruction encodings.  By default or
if '--no-insn32' is used, all instruction encodings are used, including
16-bit ones where possible.

   The '--ignore-branch-isa' and '--no-ignore-branch-isa' options
control branch relocation checks for invalid ISA mode transitions.  If
'--ignore-branch-isa' is used, then the linker accepts any branch
relocations and any ISA mode transition required is lost in relocation
calculation, except for some cases of 'BAL' instructions which meet
relaxation conditions and are converted to equivalent 'JALX'
instructions as the associated relocation is calculated.  By default or
if '--no-ignore-branch-isa' is used a check is made causing the loss of
an ISA mode transition to produce an error.

==============================================================================
File: ld.info,  Node: |MMIX|,  Next: |MSP430|,  Prev: |MIPS|,  Up: |Machine_Dependent|
==============================================================================



4.7 'ld' and MMIX
-----------------

For MMIX, there is a choice of generating 'ELF' object files or 'mmo'
object files when linking.  The simulator 'mmix' understands the 'mmo'
format.  The binutils 'objcopy' utility can translate between the two
formats.

   There is one special section, the '.MMIX.reg_contents' section.
Contents in this section is assumed to correspond to that of global
registers, and symbols referring to it are translated to special
symbols, equal to registers.  In a final link, the start address of the
'.MMIX.reg_contents' section corresponds to the first allocated global
register multiplied by 8.  Register '$255' is not included in this
section; it is always set to the program entry, which is at the symbol
'Main' for 'mmo' files.

   Global symbols with the prefix '__.MMIX.start.', for example
'__.MMIX.start..text' and '__.MMIX.start..data' are special.  The
default linker script uses these to set the default start address of a
section.

   Initial and trailing multiples of zero-valued 32-bit words in a
section, are left out from an mmo file.

==============================================================================
File: ld.info,  Node: |MSP430|,  Next: |NDS32|,  Prev: |MMIX|,  Up: |Machine_Dependent|
==============================================================================



4.8 'ld' and MSP430
-------------------

For the MSP430 it is possible to select the MPU architecture.  The flag
'-m [mpu type]' will select an appropriate linker script for selected
MPU type.  (To get a list of known MPUs just pass '-m help' option to
the linker).

   The linker will recognize some extra sections which are MSP430
specific:

''.vectors''
     Defines a portion of ROM where interrupt vectors located.

''.bootloader''
     Defines the bootloader portion of the ROM (if applicable).  Any
     code in this section will be uploaded to the MPU.

''.infomem''
     Defines an information memory section (if applicable).  Any code in
     this section will be uploaded to the MPU.

''.infomemnobits''
     This is the same as the '.infomem' section except that any code in
     this section will not be uploaded to the MPU.

''.noinit''
     Denotes a portion of RAM located above '.bss' section.

     The last two sections are used by gcc.

'--code-region=[either,lower,upper,none]'
     This will transform .text* sections to [either,lower,upper].text*
     sections.  The argument passed to GCC for -mcode-region is
     propagated to the linker using this option.

'--data-region=[either,lower,upper,none]'
     This will transform .data*, .bss* and .rodata* sections to
     [either,lower,upper].[data,bss,rodata]* sections.  The argument
     passed to GCC for -mdata-region is propagated to the linker using
     this option.

'--disable-sec-transformation'
     Prevent the transformation of sections as specified by the
     '--code-region' and '--data-region' options.  This is useful if you
     are compiling and linking using a single call to the GCC wrapper,
     and want to compile the source files using -m[code,data]-region but
     not transform the sections for prebuilt libraries and objects.

==============================================================================
File: ld.info,  Node: |NDS32|,  Next: |Nios_II|,  Prev: |MSP430|,  Up: |Machine_Dependent|
==============================================================================



4.9 'ld' and NDS32
------------------

For NDS32, there are some options to select relaxation behavior.  The
linker relaxes objects according to these options.

''--m[no-]fp-as-gp''
     Disable/enable fp-as-gp relaxation.

''--mexport-symbols=FILE''
     Exporting symbols and their address into FILE as linker script.

''--m[no-]ex9''
     Disable/enable link-time EX9 relaxation.

''--mexport-ex9=FILE''
     Export the EX9 table after linking.

''--mimport-ex9=FILE''
     Import the Ex9 table for EX9 relaxation.

''--mupdate-ex9''
     Update the existing EX9 table.

''--mex9-limit=NUM''
     Maximum number of entries in the ex9 table.

''--mex9-loop-aware''
     Avoid generating the EX9 instruction inside the loop.

''--m[no-]ifc''
     Disable/enable the link-time IFC optimization.

''--mifc-loop-aware''
     Avoid generating the IFC instruction inside the loop.

==============================================================================
File: ld.info,  Node: |Nios_II|,  Next: |PowerPC_ELF32|,  Prev: |NDS32|,  Up: |Machine_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *Nios_II*

4.10 'ld' and the Altera Nios II
--------------------------------

Call and immediate jump instructions on Nios II processors are limited
to transferring control to addresses in the same 256MB memory segment,
which may result in 'ld' giving 'relocation truncated to fit' errors
with very large programs.  The command-line option '--relax' enables the
generation of trampolines that can access the entire 32-bit address
space for calls outside the normal 'call' and 'jmpi' address range.
These trampolines are inserted at section boundaries, so may not
themselves be reachable if an input section and its associated call
trampolines are larger than 256MB.

   The '--relax' option is enabled by default unless '-r' is also
specified.  You can disable trampoline generation by using the
'--no-relax' linker option.  You can also disable this optimization
locally by using the 'set .noat' directive in assembly-language source
files, as the linker-inserted trampolines use the 'at' register as a
temporary.

   Note that the linker '--relax' option is independent of assembler
relaxation options, and that using the GNU assembler's '-relax-all'
option interferes with the linker's more selective call instruction
relaxation.

==============================================================================
File: ld.info,  Node: |PowerPC_ELF32|,  Next: |PowerPC64_ELF64|,  Prev: |Nios_II|,  Up: |Machine_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *PowerPC_ELF32*

4.11 'ld' and PowerPC 32-bit ELF Support
----------------------------------------

Branches on PowerPC processors are limited to a signed 26-bit
displacement, which may result in 'ld' giving 'relocation truncated to
fit' errors with very large programs.  '--relax' enables the generation
of trampolines that can access the entire 32-bit address space.  These
trampolines are inserted at section boundaries, so may not themselves be
reachable if an input section exceeds 33M in size.  You may combine '-r'
and '--relax' to add trampolines in a partial link.  In that case both
branches to undefined symbols and inter-section branches are also
considered potentially out of range, and trampolines inserted.

'--bss-plt'
     Current PowerPC GCC accepts a '-msecure-plt' option that generates
     code capable of using a newer PLT and GOT layout that has the
     security advantage of no executable section ever needing to be
     writable and no writable section ever being executable.  PowerPC
     'ld' will generate this layout, including stubs to access the PLT,
     if all input files (including startup and static libraries) were
     compiled with '-msecure-plt'.  '--bss-plt' forces the old BSS PLT
     (and GOT layout) which can give slightly better performance.

'--secure-plt'
     'ld' will use the new PLT and GOT layout if it is linking new
     '-fpic' or '-fPIC' code, but does not do so automatically when
     linking non-PIC code.  This option requests the new PLT and GOT
     layout.  A warning will be given if some object file requires the
     old style BSS PLT.

'--sdata-got'
     The new secure PLT and GOT are placed differently relative to other
     sections compared to older BSS PLT and GOT placement.  The location
     of '.plt' must change because the new secure PLT is an initialized
     section while the old PLT is uninitialized.  The reason for the
     '.got' change is more subtle: The new placement allows '.got' to be
     read-only in applications linked with '-z relro -z now'.  However,
     this placement means that '.sdata' cannot always be used in shared
     libraries, because the PowerPC ABI accesses '.sdata' in shared
     libraries from the GOT pointer.  '--sdata-got' forces the old GOT
     placement.  PowerPC GCC doesn't use '.sdata' in shared libraries,
     so this option is really only useful for other compilers that may
     do so.

'--emit-stub-syms'
     This option causes 'ld' to label linker stubs with a local symbol
     that encodes the stub type and destination.

'--no-tls-optimize'
     PowerPC 'ld' normally performs some optimization of code sequences
     used to access Thread-Local Storage.  Use this option to disable
     the optimization.

==============================================================================
File: ld.info,  Node: |PowerPC64_ELF64|,  Next: |S/390_ELF|,  Prev: |PowerPC_ELF32|,  Up: |Machine_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *PowerPC64_ELF64*

4.12 'ld' and PowerPC64 64-bit ELF Support
------------------------------------------

'--stub-group-size'
     Long branch stubs, PLT call stubs and TOC adjusting stubs are
     placed by 'ld' in stub sections located between groups of input
     sections.  '--stub-group-size' specifies the maximum size of a
     group of input sections handled by one stub section.  Since branch
     offsets are signed, a stub section may serve two groups of input
     sections, one group before the stub section, and one group after
     it.  However, when using conditional branches that require stubs,
     it may be better (for branch prediction) that stub sections only
     serve one group of input sections.  A negative value for 'N'
     chooses this scheme, ensuring that branches to stubs always use a
     negative offset.  Two special values of 'N' are recognized, '1' and
     '-1'.  These both instruct 'ld' to automatically size input section
     groups for the branch types detected, with the same behaviour
     regarding stub placement as other positive or negative values of
     'N' respectively.

     Note that '--stub-group-size' does not split input sections.  A
     single input section larger than the group size specified will of
     course create a larger group (of one section).  If input sections
     are too large, it may not be possible for a branch to reach its
     stub.

'--emit-stub-syms'
     This option causes 'ld' to label linker stubs with a local symbol
     that encodes the stub type and destination.

'--dotsyms'
'--no-dotsyms'
     These two options control how 'ld' interprets version patterns in a
     version script.  Older PowerPC64 compilers emitted both a function
     descriptor symbol with the same name as the function, and a code
     entry symbol with the name prefixed by a dot ('.').  To properly
     version a function 'foo', the version script thus needs to control
     both 'foo' and '.foo'.  The option '--dotsyms', on by default,
     automatically adds the required dot-prefixed patterns.  Use
     '--no-dotsyms' to disable this feature.

'--save-restore-funcs'
'--no-save-restore-funcs'
     These two options control whether PowerPC64 'ld' automatically
     provides out-of-line register save and restore functions used by
     '-Os' code.  The default is to provide any such referenced function
     for a normal final link, and to not do so for a relocatable link.

'--no-tls-optimize'
     PowerPC64 'ld' normally performs some optimization of code
     sequences used to access Thread-Local Storage.  Use this option to
     disable the optimization.

'--tls-get-addr-optimize'
'--no-tls-get-addr-optimize'
     These options control whether PowerPC64 'ld' uses a special stub to
     call __tls_get_addr.  PowerPC64 glibc 2.22 and later support an
     optimization that allows the second and subsequent calls to
     '__tls_get_addr' for a given symbol to be resolved by the special
     stub without calling in to glibc.  By default the linker enables
     this option when glibc advertises the availability of
     __tls_get_addr_opt.  Forcing this option on when using an older
     glibc won't do much besides slow down your applications, but may be
     useful if linking an application against an older glibc with the
     expectation that it will normally be used on systems having a newer
     glibc.

'--no-opd-optimize'
     PowerPC64 'ld' normally removes '.opd' section entries
     corresponding to deleted link-once functions, or functions removed
     by the action of '--gc-sections' or linker script '/DISCARD/'.  Use
     this option to disable '.opd' optimization.

'--non-overlapping-opd'
     Some PowerPC64 compilers have an option to generate compressed
     '.opd' entries spaced 16 bytes apart, overlapping the third word,
     the static chain pointer (unused in C) with the first word of the
     next entry.  This option expands such entries to the full 24 bytes.

'--no-toc-optimize'
     PowerPC64 'ld' normally removes unused '.toc' section entries.
     Such entries are detected by examining relocations that reference
     the TOC in code sections.  A reloc in a deleted code section marks
     a TOC word as unneeded, while a reloc in a kept code section marks
     a TOC word as needed.  Since the TOC may reference itself, TOC
     relocs are also examined.  TOC words marked as both needed and
     unneeded will of course be kept.  TOC words without any referencing
     reloc are assumed to be part of a multi-word entry, and are kept or
     discarded as per the nearest marked preceding word.  This works
     reliably for compiler generated code, but may be incorrect if
     assembly code is used to insert TOC entries.  Use this option to
     disable the optimization.

'--no-multi-toc'
     If given any toc option besides '-mcmodel=medium' or
     '-mcmodel=large', PowerPC64 GCC generates code for a TOC model
     where TOC entries are accessed with a 16-bit offset from r2.  This
     limits the total TOC size to 64K. PowerPC64 'ld' extends this limit
     by grouping code sections such that each group uses less than 64K
     for its TOC entries, then inserts r2 adjusting stubs between
     inter-group calls.  'ld' does not split apart input sections, so
     cannot help if a single input file has a '.toc' section that
     exceeds 64K, most likely from linking multiple files with 'ld -r'.
     Use this option to turn off this feature.

'--no-toc-sort'
     By default, 'ld' sorts TOC sections so that those whose file
     happens to have a section called '.init' or '.fini' are placed
     first, followed by TOC sections referenced by code generated with
     PowerPC64 gcc's '-mcmodel=small', and lastly TOC sections
     referenced only by code generated with PowerPC64 gcc's
     '-mcmodel=medium' or '-mcmodel=large' options.  Doing this results
     in better TOC grouping for multi-TOC. Use this option to turn off
     this feature.

'--plt-align'
'--no-plt-align'
     Use these options to control whether individual PLT call stubs are
     aligned to a 32-byte boundary, or to the specified power of two
     boundary when using '--plt-align='.  A negative value may be
     specified to pad PLT call stubs so that they do not cross the
     specified power of two boundary (or the minimum number of
     boundaries if a PLT stub is so large that it must cross a
     boundary).  By default PLT call stubs are aligned to 32-byte
     boundaries.

'--plt-static-chain'
'--no-plt-static-chain'
     Use these options to control whether PLT call stubs load the static
     chain pointer (r11).  'ld' defaults to not loading the static chain
     since there is never any need to do so on a PLT call.

'--plt-thread-safe'
'--no-plt-thread-safe'
     With power7's weakly ordered memory model, it is possible when
     using lazy binding for ld.so to update a plt entry in one thread
     and have another thread see the individual plt entry words update
     in the wrong order, despite ld.so carefully writing in the correct
     order and using memory write barriers.  To avoid this we need some
     sort of read barrier in the call stub, or use LD_BIND_NOW=1.  By
     default, 'ld' looks for calls to commonly used functions that
     create threads, and if seen, adds the necessary barriers.  Use
     these options to change the default behaviour.

'--plt-localentry'
'--no-localentry'
     ELFv2 functions with localentry:0 are those with a single entry
     point, ie.  global entry == local entry, and that have no
     requirement on r2 (the TOC/GOT pointer) or r12, and guarantee r2 is
     unchanged on return.  Such an external function can be called via
     the PLT without saving r2 or restoring it on return, avoiding a
     common load-hit-store for small functions.  The optimization is
     attractive, with up to 40% reduction in execution time for a small
     function, but can result in symbol interposition failures.  Also,
     minor changes in a shared library, including system libraries, can
     cause a function that was localentry:0 to become localentry:8.
     This will result in a dynamic loader complaint and failure to run.
     The option is experimental, use with care.  '--no-plt-localentry'
     is the default.

==============================================================================
File: ld.info,  Node: |S/390_ELF|,  Next: |SPU_ELF|,  Prev: |PowerPC64_ELF64|,  Up: |Machine_Dependent|
==============================================================================



4.13 'ld' and S/390 ELF Support
-------------------------------

'--s390-pgste'
     This option marks the result file with a 'PT_S390_PGSTE' segment.
     The Linux kernel is supposed to allocate 4k page tables for
     binaries marked that way.

==============================================================================
File: ld.info,  Node: |SPU_ELF|,  Next: |TI_COFF|,  Prev: |S/390_ELF|,  Up: |Machine_Dependent|
==============================================================================



4.14 'ld' and SPU ELF Support
-----------------------------

'--plugin'
     This option marks an executable as a PIC plugin module.

'--no-overlays'
     Normally, 'ld' recognizes calls to functions within overlay
     regions, and redirects such calls to an overlay manager via a stub.
     'ld' also provides a built-in overlay manager.  This option turns
     off all this special overlay handling.

'--emit-stub-syms'
     This option causes 'ld' to label overlay stubs with a local symbol
     that encodes the stub type and destination.

'--extra-overlay-stubs'
     This option causes 'ld' to add overlay call stubs on all function
     calls out of overlay regions.  Normally stubs are not added on
     calls to non-overlay regions.

'--local-store=lo:hi'
     'ld' usually checks that a final executable for SPU fits in the
     address range 0 to 256k.  This option may be used to change the
     range.  Disable the check entirely with '--local-store=0:0'.

'--stack-analysis'
     SPU local store space is limited.  Over-allocation of stack space
     unnecessarily limits space available for code and data, while
     under-allocation results in runtime failures.  If given this
     option, 'ld' will provide an estimate of maximum stack usage.  'ld'
     does this by examining symbols in code sections to determine the
     extents of functions, and looking at function prologues for stack
     adjusting instructions.  A call-graph is created by looking for
     relocations on branch instructions.  The graph is then searched for
     the maximum stack usage path.  Note that this analysis does not
     find calls made via function pointers, and does not handle
     recursion and other cycles in the call graph.  Stack usage may be
     under-estimated if your code makes such calls.  Also, stack usage
     for dynamic allocation, e.g.  alloca, will not be detected.  If a
     link map is requested, detailed information about each function's
     stack usage and calls will be given.

'--emit-stack-syms'
     This option, if given along with '--stack-analysis' will result in
     'ld' emitting stack sizing symbols for each function.  These take
     the form '__stack_<function_name>' for global functions, and
     '__stack_<number>_<function_name>' for static functions.
     '<number>' is the section id in hex.  The value of such symbols is
     the stack requirement for the corresponding function.  The symbol
     size will be zero, type 'STT_NOTYPE', binding 'STB_LOCAL', and
     section 'SHN_ABS'.

==============================================================================
File: ld.info,  Node: |TI_COFF|,  Next: |WIN32|,  Prev: |SPU_ELF|,  Up: |Machine_Dependent|
==============================================================================



4.15 'ld''s Support for Various TI COFF Versions
------------------------------------------------

The '--format' switch allows selection of one of the various TI COFF
versions.  The latest of this writing is 2; versions 0 and 1 are also
supported.  The TI COFF versions also vary in header byte-order format;
'ld' will read any version or byte order, but the output header format
depends on the default specified by the specific target.

==============================================================================
File: ld.info,  Node: |WIN32|,  Next: |Xtensa|,  Prev: |TI_COFF|,  Up: |Machine_Dependent|
==============================================================================



4.16 'ld' and WIN32 (cygwin/mingw)
----------------------------------

This section describes some of the win32 specific 'ld' issues.  See
*note Command Line Options: Options. for detailed description of the
command line options mentioned here.

_import libraries_
     The standard Windows linker creates and uses so-called import
     libraries, which contains information for linking to dll's.  They
     are regular static archives and are handled as any other static
     archive.  The cygwin and mingw ports of 'ld' have specific support
     for creating such libraries provided with the '--out-implib'
     command line option.

_exporting DLL symbols_
     The cygwin/mingw 'ld' has several ways to export symbols for dll's.

     _using auto-export functionality_
          By default 'ld' exports symbols with the auto-export
          functionality, which is controlled by the following command
          line options:

             * -export-all-symbols [This is the default]
             * -exclude-symbols
             * -exclude-libs
             * -exclude-modules-for-implib
             * -version-script

          When auto-export is in operation, 'ld' will export all the
          non-local (global and common) symbols it finds in a DLL, with
          the exception of a few symbols known to belong to the system's
          runtime and libraries.  As it will often not be desirable to
          export all of a DLL's symbols, which may include private
          functions that are not part of any public interface, the
          command-line options listed above may be used to filter
          symbols out from the list for exporting.  The '--output-def'
          option can be used in order to see the final list of exported
          symbols with all exclusions taken into effect.

          If '--export-all-symbols' is not given explicitly on the
          command line, then the default auto-export behavior will be
          _disabled_ if either of the following are true:

             * A DEF file is used.
             * Any symbol in any object file was marked with the
               __declspec(dllexport) attribute.

     _using a DEF file_
          Another way of exporting symbols is using a DEF file.  A DEF
          file is an ASCII file containing definitions of symbols which
          should be exported when a dll is created.  Usually it is named
          '<dll name>.def' and is added as any other object file to the
          linker's command line.  The file's name must end in '.def' or
          '.DEF'.

               gcc -o <output> <objectfiles> <dll name>.def

          Using a DEF file turns off the normal auto-export behavior,
          unless the '--export-all-symbols' option is also used.

          Here is an example of a DEF file for a shared library called
          'xyz.dll':

               LIBRARY "xyz.dll" BASE=0x20000000

               EXPORTS
               foo
               bar
               _bar = bar
               another_foo = abc.dll.afoo
               var1 DATA
               doo = foo == foo2
               eoo DATA == var1

          This example defines a DLL with a non-default base address and
          seven symbols in the export table.  The third exported symbol
          '_bar' is an alias for the second.  The fourth symbol,
          'another_foo' is resolved by "forwarding" to another module
          and treating it as an alias for 'afoo' exported from the DLL
          'abc.dll'.  The final symbol 'var1' is declared to be a data
          object.  The 'doo' symbol in export library is an alias of
          'foo', which gets the string name in export table 'foo2'.  The
          'eoo' symbol is an data export symbol, which gets in export
          table the name 'var1'.

          The optional 'LIBRARY <name>' command indicates the _internal_
          name of the output DLL. If '<name>' does not include a suffix,
          the default library suffix, '.DLL' is appended.

          When the .DEF file is used to build an application, rather
          than a library, the 'NAME <name>' command should be used
          instead of 'LIBRARY'.  If '<name>' does not include a suffix,
          the default executable suffix, '.EXE' is appended.

          With either 'LIBRARY <name>' or 'NAME <name>' the optional
          specification 'BASE = <number>' may be used to specify a
          non-default base address for the image.

          If neither 'LIBRARY <name>' nor 'NAME <name>' is specified, or
          they specify an empty string, the internal name is the same as
          the filename specified on the command line.

          The complete specification of an export symbol is:

               EXPORTS
                 ( (  ( <name1> [ = <name2> ] )
                    | ( <name1> = <module-name> . <external-name>))
                 [ @ <integer> ] [NONAME] [DATA] [CONSTANT] [PRIVATE] [== <name3>] ) *

          Declares '<name1>' as an exported symbol from the DLL, or
          declares '<name1>' as an exported alias for '<name2>'; or
          declares '<name1>' as a "forward" alias for the symbol
          '<external-name>' in the DLL '<module-name>'.  Optionally, the
          symbol may be exported by the specified ordinal '<integer>'
          alias.  The optional '<name3>' is the to be used string in
          import/export table for the symbol.

          The optional keywords that follow the declaration indicate:

          'NONAME': Do not put the symbol name in the DLL's export
          table.  It will still be exported by its ordinal alias (either
          the value specified by the .def specification or, otherwise,
          the value assigned by the linker).  The symbol name, however,
          does remain visible in the import library (if any), unless
          'PRIVATE' is also specified.

          'DATA': The symbol is a variable or object, rather than a
          function.  The import lib will export only an indirect
          reference to 'foo' as the symbol '_imp__foo' (ie, 'foo' must
          be resolved as '*_imp__foo').

          'CONSTANT': Like 'DATA', but put the undecorated 'foo' as well
          as '_imp__foo' into the import library.  Both refer to the
          read-only import address table's pointer to the variable, not
          to the variable itself.  This can be dangerous.  If the user
          code fails to add the 'dllimport' attribute and also fails to
          explicitly add the extra indirection that the use of the
          attribute enforces, the application will behave unexpectedly.

          'PRIVATE': Put the symbol in the DLL's export table, but do
          not put it into the static import library used to resolve
          imports at link time.  The symbol can still be imported using
          the 'LoadLibrary/GetProcAddress' API at runtime or by using
          the GNU ld extension of linking directly to the DLL without an
          import library.

          See ld/deffilep.y in the binutils sources for the full
          specification of other DEF file statements

          While linking a shared dll, 'ld' is able to create a DEF file
          with the '--output-def <file>' command line option.

     _Using decorations_
          Another way of marking symbols for export is to modify the
          source code itself, so that when building the DLL each symbol
          to be exported is declared as:

               __declspec(dllexport) int a_variable
               __declspec(dllexport) void a_function(int with_args)

          All such symbols will be exported from the DLL. If, however,
          any of the object files in the DLL contain symbols decorated
          in this way, then the normal auto-export behavior is disabled,
          unless the '--export-all-symbols' option is also used.

          Note that object files that wish to access these symbols must
          _not_ decorate them with dllexport.  Instead, they should use
          dllimport, instead:

               __declspec(dllimport) int a_variable
               __declspec(dllimport) void a_function(int with_args)

          This complicates the structure of library header files,
          because when included by the library itself the header must
          declare the variables and functions as dllexport, but when
          included by client code the header must declare them as
          dllimport.  There are a number of idioms that are typically
          used to do this; often client code can omit the __declspec()
          declaration completely.  See '--enable-auto-import' and
          'automatic data imports' for more information.

_automatic data imports_
     The standard Windows dll format supports data imports from dlls
     only by adding special decorations (dllimport/dllexport), which let
     the compiler produce specific assembler instructions to deal with
     this issue.  This increases the effort necessary to port existing
     Un*x code to these platforms, especially for large c++ libraries
     and applications.  The auto-import feature, which was initially
     provided by Paul Sokolovsky, allows one to omit the decorations to
     achieve a behavior that conforms to that on POSIX/Un*x platforms.
     This feature is enabled with the '--enable-auto-import'
     command-line option, although it is enabled by default on
     cygwin/mingw.  The '--enable-auto-import' option itself now serves
     mainly to suppress any warnings that are ordinarily emitted when
     linked objects trigger the feature's use.

     auto-import of variables does not always work flawlessly without
     additional assistance.  Sometimes, you will see this message

     "variable '<var>' can't be auto-imported.  Please read the
     documentation for ld's '--enable-auto-import' for details."

     The '--enable-auto-import' documentation explains why this error
     occurs, and several methods that can be used to overcome this
     difficulty.  One of these methods is the _runtime pseudo-relocs_
     feature, described below.

     For complex variables imported from DLLs (such as structs or
     classes), object files typically contain a base address for the
     variable and an offset (_addend_) within the variable-to specify a
     particular field or public member, for instance.  Unfortunately,
     the runtime loader used in win32 environments is incapable of
     fixing these references at runtime without the additional
     information supplied by dllimport/dllexport decorations.  The
     standard auto-import feature described above is unable to resolve
     these references.

     The '--enable-runtime-pseudo-relocs' switch allows these references
     to be resolved without error, while leaving the task of adjusting
     the references themselves (with their non-zero addends) to
     specialized code provided by the runtime environment.  Recent
     versions of the cygwin and mingw environments and compilers provide
     this runtime support; older versions do not.  However, the support
     is only necessary on the developer's platform; the compiled result
     will run without error on an older system.

     '--enable-runtime-pseudo-relocs' is not the default; it must be
     explicitly enabled as needed.

_direct linking to a dll_
     The cygwin/mingw ports of 'ld' support the direct linking,
     including data symbols, to a dll without the usage of any import
     libraries.  This is much faster and uses much less memory than does
     the traditional import library method, especially when linking
     large libraries or applications.  When 'ld' creates an import lib,
     each function or variable exported from the dll is stored in its
     own bfd, even though a single bfd could contain many exports.  The
     overhead involved in storing, loading, and processing so many bfd's
     is quite large, and explains the tremendous time, memory, and
     storage needed to link against particularly large or complex
     libraries when using import libs.

     Linking directly to a dll uses no extra command-line switches other
     than '-L' and '-l', because 'ld' already searches for a number of
     names to match each library.  All that is needed from the
     developer's perspective is an understanding of this search, in
     order to force ld to select the dll instead of an import library.

     For instance, when ld is called with the argument '-lxxx' it will
     attempt to find, in the first directory of its search path,

          libxxx.dll.a
          xxx.dll.a
          libxxx.a
          xxx.lib
          libxxx.lib
          cygxxx.dll (*)
          libxxx.dll
          xxx.dll

     before moving on to the next directory in the search path.

     (*) Actually, this is not 'cygxxx.dll' but in fact is
     '<prefix>xxx.dll', where '<prefix>' is set by the 'ld' option
     '--dll-search-prefix=<prefix>'.  In the case of cygwin, the
     standard gcc spec file includes '--dll-search-prefix=cyg', so in
     effect we actually search for 'cygxxx.dll'.

     Other win32-based unix environments, such as mingw or pw32, may use
     other '<prefix>'es, although at present only cygwin makes use of
     this feature.  It was originally intended to help avoid name
     conflicts among dll's built for the various win32/un*x
     environments, so that (for example) two versions of a zlib dll
     could coexist on the same machine.

     The generic cygwin/mingw path layout uses a 'bin' directory for
     applications and dll's and a 'lib' directory for the import
     libraries (using cygwin nomenclature):

          bin/
          	cygxxx.dll
          lib/
          	libxxx.dll.a   (in case of dll's)
          	libxxx.a       (in case of static archive)

     Linking directly to a dll without using the import library can be
     done two ways:

     1.  Use the dll directly by adding the 'bin' path to the link line
          gcc -Wl,-verbose  -o a.exe -L../bin/ -lxxx

     However, as the dll's often have version numbers appended to their
     names ('cygncurses-5.dll') this will often fail, unless one
     specifies '-L../bin -lncurses-5' to include the version.  Import
     libs are generally not versioned, and do not have this difficulty.

     2.  Create a symbolic link from the dll to a file in the 'lib'
     directory according to the above mentioned search pattern.  This
     should be used to avoid unwanted changes in the tools needed for
     making the app/dll.

          ln -s bin/cygxxx.dll lib/[cyg|lib|]xxx.dll[.a]

     Then you can link without any make environment changes.

          gcc -Wl,-verbose  -o a.exe -L../lib/ -lxxx

     This technique also avoids the version number problems, because the
     following is perfectly legal

          bin/
          	cygxxx-5.dll
          lib/
          	libxxx.dll.a -> ../bin/cygxxx-5.dll

     Linking directly to a dll without using an import lib will work
     even when auto-import features are exercised, and even when
     '--enable-runtime-pseudo-relocs' is used.

     Given the improvements in speed and memory usage, one might
     justifiably wonder why import libraries are used at all.  There are
     three reasons:

     1.  Until recently, the link-directly-to-dll functionality did
     _not_ work with auto-imported data.

     2.  Sometimes it is necessary to include pure static objects within
     the import library (which otherwise contains only bfd's for
     indirection symbols that point to the exports of a dll).  Again,
     the import lib for the cygwin kernel makes use of this ability, and
     it is not possible to do this without an import lib.

     3.  Symbol aliases can only be resolved using an import lib.  This
     is critical when linking against OS-supplied dll's (eg, the win32
     API) in which symbols are usually exported as undecorated aliases
     of their stdcall-decorated assembly names.

     So, import libs are not going away.  But the ability to replace
     true import libs with a simple symbolic link to (or a copy of) a
     dll, in many cases, is a useful addition to the suite of tools
     binutils makes available to the win32 developer.  Given the massive
     improvements in memory requirements during linking, storage
     requirements, and linking speed, we expect that many developers
     will soon begin to use this feature whenever possible.

_symbol aliasing_
     _adding additional names_
          Sometimes, it is useful to export symbols with additional
          names.  A symbol 'foo' will be exported as 'foo', but it can
          also be exported as '_foo' by using special directives in the
          DEF file when creating the dll.  This will affect also the
          optional created import library.  Consider the following DEF
          file:

               LIBRARY "xyz.dll" BASE=0x61000000

               EXPORTS
               foo
               _foo = foo

          The line '_foo = foo' maps the symbol 'foo' to '_foo'.

          Another method for creating a symbol alias is to create it in
          the source code using the "weak" attribute:

               void foo () { /* Do something.  */; }
               void _foo () __attribute__ ((weak, alias ("foo")));

          See the gcc manual for more information about attributes and
          weak symbols.

     _renaming symbols_
          Sometimes it is useful to rename exports.  For instance, the
          cygwin kernel does this regularly.  A symbol '_foo' can be
          exported as 'foo' but not as '_foo' by using special
          directives in the DEF file.  (This will also affect the import
          library, if it is created).  In the following example:

               LIBRARY "xyz.dll" BASE=0x61000000

               EXPORTS
               _foo = foo

          The line '_foo = foo' maps the exported symbol 'foo' to
          '_foo'.

     Note: using a DEF file disables the default auto-export behavior,
     unless the '--export-all-symbols' command line option is used.  If,
     however, you are trying to rename symbols, then you should list
     _all_ desired exports in the DEF file, including the symbols that
     are not being renamed, and do _not_ use the '--export-all-symbols'
     option.  If you list only the renamed symbols in the DEF file, and
     use '--export-all-symbols' to handle the other symbols, then the
     both the new names _and_ the original names for the renamed symbols
     will be exported.  In effect, you'd be aliasing those symbols, not
     renaming them, which is probably not what you wanted.

_weak externals_
     The Windows object format, PE, specifies a form of weak symbols
     called weak externals.  When a weak symbol is linked and the symbol
     is not defined, the weak symbol becomes an alias for some other
     symbol.  There are three variants of weak externals:
        * Definition is searched for in objects and libraries,
          historically called lazy externals.
        * Definition is searched for only in other objects, not in
          libraries.  This form is not presently implemented.
        * No search; the symbol is an alias.  This form is not presently
          implemented.
     As a GNU extension, weak symbols that do not specify an alternate
     symbol are supported.  If the symbol is undefined when linking, the
     symbol uses a default value.

_aligned common symbols_
     As a GNU extension to the PE file format, it is possible to specify
     the desired alignment for a common symbol.  This information is
     conveyed from the assembler or compiler to the linker by means of
     GNU-specific commands carried in the object file's '.drectve'
     section, which are recognized by 'ld' and respected when laying out
     the common symbols.  Native tools will be able to process object
     files employing this GNU extension, but will fail to respect the
     alignment instructions, and may issue noisy warnings about unknown
     linker directives.

==============================================================================
File: ld.info,  Node: |Xtensa|,  Prev: |WIN32|,  Up: |Machine_Dependent|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *Xtensa*

4.17 'ld' and Xtensa Processors
-------------------------------

The default 'ld' behavior for Xtensa processors is to interpret
'SECTIONS' commands so that lists of explicitly named sections in a
specification with a wildcard file will be interleaved when necessary to
keep literal pools within the range of PC-relative load offsets.  For
example, with the command:

     SECTIONS
     {
       .text : {
         *(.literal .text)
       }
     }

'ld' may interleave some of the '.literal' and '.text' sections from
different object files to ensure that the literal pools are within the
range of PC-relative load offsets.  A valid interleaving might place the
'.literal' sections from an initial group of files followed by the
'.text' sections of that group of files.  Then, the '.literal' sections
from the rest of the files and the '.text' sections from the rest of the
files would follow.

   Relaxation is enabled by default for the Xtensa version of 'ld' and
provides two important link-time optimizations.  The first optimization
is to combine identical literal values to reduce code size.  A redundant
literal will be removed and all the 'L32R' instructions that use it will
be changed to reference an identical literal, as long as the location of
the replacement literal is within the offset range of all the 'L32R'
instructions.  The second optimization is to remove unnecessary overhead
from assembler-generated "longcall" sequences of 'L32R'/'CALLXN' when
the target functions are within range of direct 'CALLN' instructions.

   For each of these cases where an indirect call sequence can be
optimized to a direct call, the linker will change the 'CALLXN'
instruction to a 'CALLN' instruction, remove the 'L32R' instruction, and
remove the literal referenced by the 'L32R' instruction if it is not
used for anything else.  Removing the 'L32R' instruction always reduces
code size but can potentially hurt performance by changing the alignment
of subsequent branch targets.  By default, the linker will always
preserve alignments, either by switching some instructions between
24-bit encodings and the equivalent density instructions or by inserting
a no-op in place of the 'L32R' instruction that was removed.  If code
size is more important than performance, the '--size-opt' option can be
used to prevent the linker from widening density instructions or
inserting no-ops, except in a few cases where no-ops are required for
correctness.

   The following Xtensa-specific command-line options can be used to
control the linker:

'--size-opt'
     When optimizing indirect calls to direct calls, optimize for code
     size more than performance.  With this option, the linker will not
     insert no-ops or widen density instructions to preserve branch
     target alignment.  There may still be some cases where no-ops are
     required to preserve the correctness of the code.

==============================================================================
File: ld.info,  Node: |BFD|,  Next: |Reporting_Bugs|,  Prev: |Machine_Dependent|,  Up: |Top|
==============================================================================



5 BFD
=====

The linker accesses object and archive files using the BFD libraries.
These libraries allow the linker to use the same routines to operate on
object files whatever the object file format.  A different object file
format can be supported simply by creating a new BFD back end and adding
it to the library.  To conserve runtime memory, however, the linker and
associated tools are usually configured to support only a subset of the
object file formats available.  You can use 'objdump -i' (*note objdump:
(binutils.info)objdump.) to list all the formats available for your
configuration.

   As with most implementations, BFD is a compromise between several
conflicting requirements.  The major factor influencing BFD design was
efficiency: any time used converting between formats is time which would
not have been spent had BFD not been involved.  This is partly offset by
abstraction payback; since BFD simplifies applications and back ends,
more time and care may be spent optimizing algorithms for a greater
speed.

   One minor artifact of the BFD solution which you should bear in mind
is the potential for information loss.  There are two places where
useful information can be lost using the BFD mechanism: during
conversion and during output.  *Note BFD information loss::.

MENU

* |BFD_outline|::                 How it works: an outline of BFD

==============================================================================
File: ld.info,  Node: |BFD_outline|,  Up: |BFD|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *BFD_outline*

5.1 How It Works: An Outline of BFD
-----------------------------------

When an object file is opened, BFD subroutines automatically determine
the format of the input object file.  They then build a descriptor in
memory with pointers to routines that will be used to access elements of
the object file's data structures.

   As different information from the object files is required, BFD reads
from different sections of the file and processes them.  For example, a
very common operation for the linker is processing symbol tables.  Each
BFD back end provides a routine for converting between the object file's
representation of symbols and an internal canonical format.  When the
linker asks for the symbol table of an object file, it calls through a
memory pointer to the routine from the relevant BFD back end which reads
and converts the table into a canonical form.  The linker then operates
upon the canonical form.  When the link is finished and the linker
writes the output file's symbol table, another BFD back end routine is
called to take the newly created symbol table and convert it into the
chosen output format.

MENU

* |BFD_information_loss|::	Information Loss
* |Canonical_format|::		The BFD	canonical object-file format

==============================================================================
File: ld.info,  Node: |BFD_information_loss|,  Next: |Canonical_format|,  Up: BFD outline
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *BFD_information_loss*

5.1.1 Information Loss
----------------------

_Information can be lost during output._  The output formats supported
by BFD do not provide identical facilities, and information which can be
described in one form has nowhere to go in another format.  One example
of this is alignment information in 'b.out'.  There is nowhere in an
'a.out' format file to store alignment information on the contained
data, so when a file is linked from 'b.out' and an 'a.out' image is
produced, alignment information will not propagate to the output file.
(The linker will still use the alignment information internally, so the
link is performed correctly).

   Another example is COFF section names.  COFF files may contain an
unlimited number of sections, each one with a textual section name.  If
the target of the link is a format which does not have many sections
(e.g., 'a.out') or has sections without names (e.g., the Oasys format),
the link cannot be done simply.  You can circumvent this problem by
describing the desired input-to-output section mapping with the linker
command language.

   _Information can be lost during canonicalization._  The BFD internal
canonical form of the external formats is not exhaustive; there are
structures in input formats for which there is no direct representation
internally.  This means that the BFD back ends cannot maintain all
possible data richness through the transformation between external to
internal and back to external formats.

   This limitation is only a problem when an application reads one
format and writes another.  Each BFD back end is responsible for
maintaining as much data as possible, and the internal BFD canonical
form has structures which are opaque to the BFD core, and exported only
to the back ends.  When a file is read in one format, the canonical form
is generated for BFD and the application.  At the same time, the back
end saves away any information which may otherwise be lost.  If the data
is then written back in the same format, the back end routine will be
able to use the canonical form provided by the BFD core as well as the
information it prepared earlier.  Since there is a great deal of
commonality between back ends, there is no information lost when linking
or copying big endian COFF to little endian COFF, or 'a.out' to 'b.out'.
When a mixture of formats is linked, the information is only lost from
the files whose format differs from the destination.

==============================================================================
File: ld.info,  Node: |Canonical_format|,  Prev: |BFD_information_loss|,  Up: |BFD_outline|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Canonical_format*

5.1.2 The BFD canonical object-file format
------------------------------------------

The greatest potential for loss of information occurs when there is the
least overlap between the information provided by the source format,
that stored by the canonical format, and that needed by the destination
format.  A brief description of the canonical form may help you
understand which kinds of data you can count on preserving across
conversions.

_files_
     Information stored on a per-file basis includes target machine
     architecture, particular implementation format type, a demand
     pageable bit, and a write protected bit.  Information like Unix
     magic numbers is not stored here--only the magic numbers' meaning,
     so a 'ZMAGIC' file would have both the demand pageable bit and the
     write protected text bit set.  The byte order of the target is
     stored on a per-file basis, so that big- and little-endian object
     files may be used with one another.

_sections_
     Each section in the input file contains the name of the section,
     the section's original address in the object file, size and
     alignment information, various flags, and pointers into other BFD
     data structures.

_symbols_
     Each symbol contains a pointer to the information for the object
     file which originally defined it, its name, its value, and various
     flag bits.  When a BFD back end reads in a symbol table, it
     relocates all symbols to make them relative to the base of the
     section where they were defined.  Doing this ensures that each
     symbol points to its containing section.  Each symbol also has a
     varying amount of hidden private data for the BFD back end.  Since
     the symbol points to the original file, the private data format for
     that symbol is accessible.  'ld' can operate on a collection of
     symbols of wildly different formats without problems.

     Normal global and simple local symbols are maintained on output, so
     an output file (no matter its format) will retain symbols pointing
     to functions and to global, static, and common variables.  Some
     symbol information is not worth retaining; in 'a.out', type
     information is stored in the symbol table as long symbol names.
     This information would be useless to most COFF debuggers; the
     linker has command line switches to allow users to throw it away.

     There is one word of type information within the symbol, so if the
     format supports symbol type information within symbols (for
     example, COFF, Oasys) and the type is simple enough to fit within
     one word (nearly everything but aggregates), the information will
     be preserved.

_relocation level_
     Each canonical BFD relocation record contains a pointer to the
     symbol to relocate to, the offset of the data to relocate, the
     section the data is in, and a pointer to a relocation type
     descriptor.  Relocation is performed by passing messages through
     the relocation type descriptor and the symbol pointer.  Therefore,
     relocations can be performed on output data using a relocation
     method that is only available in one of the input formats.  For
     instance, Oasys provides a byte relocation format.  A relocation
     record requesting this relocation type would point indirectly to a
     routine to perform this, so the relocation may be performed on a
     byte being written to a 68k COFF file, even though 68k COFF has no
     such relocation type.

_line numbers_
     Object formats can contain, for debugging purposes, some form of
     mapping between symbols, source line numbers, and addresses in the
     output file.  These addresses have to be relocated along with the
     symbol information.  Each symbol with an associated list of line
     number records points to the first record of the list.  The head of
     a line number list consists of a pointer to the symbol, which
     allows finding out the address of the function whose line number is
     being described.  The rest of the list is made up of pairs: offsets
     into the section and line numbers.  Any format which can simply
     derive this information can pass it successfully between formats.

==============================================================================
File: ld.info,  Node: |Reporting_Bugs|,  Next: |MRI|,  Prev: |BFD|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Reporting_Bugs*

6 Reporting Bugs
================

Your bug reports play an essential role in making 'ld' reliable.

   Reporting a bug may help you by bringing a solution to your problem,
or it may not.  But in any case the principal function of a bug report
is to help the entire community by making the next version of 'ld' work
better.  Bug reports are your contribution to the maintenance of 'ld'.

   In order for a bug report to serve its purpose, you must include the
information that enables us to fix the bug.

MENU

* |Bug_Criteria|::                Have you found a bug?
* |Bug_Reporting|::               How to report bugs

==============================================================================
File: ld.info,  Node: |Bug_Criteria|,  Next: |Bug_Reporting|,  Up: |Reporting_Bugs|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Bug_Criteria*

6.1 Have You Found a Bug?
-------------------------

If you are not sure whether you have found a bug, here are some
guidelines:

   * If the linker gets a fatal signal, for any input whatever, that is
     a 'ld' bug.  Reliable linkers never crash.

   * If 'ld' produces an error message for valid input, that is a bug.

   * If 'ld' does not produce an error message for invalid input, that
     may be a bug.  In the general case, the linker can not verify that
     object files are correct.

   * If you are an experienced user of linkers, your suggestions for
     improvement of 'ld' are welcome in any case.

==============================================================================
File: ld.info,  Node: |Bug_Reporting|,  Prev: |Bug_Criteria|,  Up: |Reporting_Bugs|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Bug_Reporting*

6.2 How to Report Bugs
----------------------

A number of companies and individuals offer support for GNU products.
If you obtained 'ld' from a support organization, we recommend you
contact that organization first.

   You can find contact information for many support companies and
individuals in the file 'etc/SERVICE' in the GNU Emacs distribution.

   Otherwise, send bug reports for 'ld' to
<http://www.sourceware.org/bugzilla/>.

   The fundamental principle of reporting bugs usefully is this: *report
all the facts*.  If you are not sure whether to state a fact or leave it
out, state it!

   Often people omit facts because they think they know what causes the
problem and assume that some details do not matter.  Thus, you might
assume that the name of a symbol you use in an example does not matter.
Well, probably it does not, but one cannot be sure.  Perhaps the bug is
a stray memory reference which happens to fetch from the location where
that name is stored in memory; perhaps, if the name were different, the
contents of that location would fool the linker into doing the right
thing despite the bug.  Play it safe and give a specific, complete
example.  That is the easiest thing for you to do, and the most helpful.

   Keep in mind that the purpose of a bug report is to enable us to fix
the bug if it is new to us.  Therefore, always write your bug reports on
the assumption that the bug has not been reported previously.

   Sometimes people give a few sketchy facts and ask, "Does this ring a
bell?"  This cannot help us fix a bug, so it is basically useless.  We
respond by asking for enough details to enable us to investigate.  You
might as well expedite matters by sending them to begin with.

   To enable us to fix the bug, you should include all these things:

   * The version of 'ld'.  'ld' announces it if you start it with the
     '--version' argument.

     Without this, we will not know whether there is any point in
     looking for the bug in the current version of 'ld'.

   * Any patches you may have applied to the 'ld' source, including any
     patches made to the 'BFD' library.

   * The type of machine you are using, and the operating system name
     and version number.

   * What compiler (and its version) was used to compile 'ld'--e.g.
     "'gcc-2.7'".

   * The command arguments you gave the linker to link your example and
     observe the bug.  To guarantee you will not omit something
     important, list them all.  A copy of the Makefile (or the output
     from make) is sufficient.

     If we were to try to guess the arguments, we would probably guess
     wrong and then we might not encounter the bug.

   * A complete input file, or set of input files, that will reproduce
     the bug.  It is generally most helpful to send the actual object
     files provided that they are reasonably small.  Say no more than
     10K. For bigger files you can either make them available by FTP or
     HTTP or else state that you are willing to send the object file(s)
     to whomever requests them.  (Note - your email will be going to a
     mailing list, so we do not want to clog it up with large
     attachments).  But small attachments are best.

     If the source files were assembled using 'gas' or compiled using
     'gcc', then it may be OK to send the source files rather than the
     object files.  In this case, be sure to say exactly what version of
     'gas' or 'gcc' was used to produce the object files.  Also say how
     'gas' or 'gcc' were configured.

   * A description of what behavior you observe that you believe is
     incorrect.  For example, "It gets a fatal signal."

     Of course, if the bug is that 'ld' gets a fatal signal, then we
     will certainly notice it.  But if the bug is incorrect output, we
     might not notice unless it is glaringly wrong.  You might as well
     not give us a chance to make a mistake.

     Even if the problem you experience is a fatal signal, you should
     still say so explicitly.  Suppose something strange is going on,
     such as, your copy of 'ld' is out of sync, or you have encountered
     a bug in the C library on your system.  (This has happened!)  Your
     copy might crash and ours would not.  If you told us to expect a
     crash, then when ours fails to crash, we would know that the bug
     was not happening for us.  If you had not told us to expect a
     crash, then we would not be able to draw any conclusion from our
     observations.

   * If you wish to suggest changes to the 'ld' source, send us context
     diffs, as generated by 'diff' with the '-u', '-c', or '-p' option.
     Always send diffs from the old file to the new file.  If you even
     discuss something in the 'ld' source, refer to it by context, not
     by line number.

     The line numbers in our development sources will not match those in
     your sources.  Your line numbers would convey no useful information
     to us.

   Here are some things that are not necessary:

   * A description of the envelope of the bug.

     Often people who encounter a bug spend a lot of time investigating
     which changes to the input file will make the bug go away and which
     changes will not affect it.

     This is often time consuming and not very useful, because the way
     we will find the bug is by running a single example under the
     debugger with breakpoints, not by pure deduction from a series of
     examples.  We recommend that you save your time for something else.

     Of course, if you can find a simpler example to report _instead_ of
     the original one, that is a convenience for us.  Errors in the
     output will be easier to spot, running under the debugger will take
     less time, and so on.

     However, simplification is not vital; if you do not want to do
     this, report the bug anyway and send us the entire test case you
     used.

   * A patch for the bug.

     A patch for the bug does help us if it is a good one.  But do not
     omit the necessary information, such as the test case, on the
     assumption that a patch is all we need.  We might see problems with
     your patch and decide to fix the problem another way, or we might
     not understand it at all.

     Sometimes with a program as complicated as 'ld' it is very hard to
     construct an example that will make the program follow a certain
     path through the code.  If you do not send us the example, we will
     not be able to construct one, so we will not be able to verify that
     the bug is fixed.

     And if we cannot understand what bug you are trying to fix, or why
     your patch should be an improvement, we will not install it.  A
     test case will help us to understand.

   * A guess about what the bug is or what it depends on.

     Such guesses are usually wrong.  Even we cannot guess right about
     such things without first using the debugger to find the facts.

==============================================================================
File: ld.info,  Node: |MRI|,  Next: |GNU_Free_Documentation_License|,  Prev: |Reporting_Bugs|,  Up: |Top|
==============================================================================



Appendix A MRI Compatible Script Files
======================================

To aid users making the transition to GNU 'ld' from the MRI linker, 'ld'
can use MRI compatible linker scripts as an alternative to the more
general-purpose linker scripting language described in *note Scripts::.
MRI compatible linker scripts have a much simpler command set than the
scripting language otherwise used with 'ld'.  GNU 'ld' supports the most
commonly used MRI linker commands; these commands are described here.

   In general, MRI scripts aren't of much use with the 'a.out' object
file format, since it only has three sections and MRI scripts lack some
features to make use of them.

   You can specify a file containing an MRI-compatible script using the
'-c' command-line option.

   Each command in an MRI-compatible script occupies its own line; each
command line starts with the keyword that identifies the command (though
blank lines are also allowed for punctuation).  If a line of an
MRI-compatible script begins with an unrecognized keyword, 'ld' issues a
warning message, but continues processing the script.

   Lines beginning with '*' are comments.

   You can write these commands using all upper-case letters, or all
lower case; for example, 'chip' is the same as 'CHIP'.  The following
list shows only the upper-case form of each command.

'ABSOLUTE SECNAME'
'ABSOLUTE SECNAME, SECNAME, ... SECNAME'
     Normally, 'ld' includes in the output file all sections from all
     the input files.  However, in an MRI-compatible script, you can use
     the 'ABSOLUTE' command to restrict the sections that will be
     present in your output program.  If the 'ABSOLUTE' command is used
     at all in a script, then only the sections named explicitly in
     'ABSOLUTE' commands will appear in the linker output.  You can
     still use other input sections (whatever you select on the command
     line, or using 'LOAD') to resolve addresses in the output file.

'ALIAS OUT-SECNAME, IN-SECNAME'
     Use this command to place the data from input section IN-SECNAME in
     a section called OUT-SECNAME in the linker output file.

     IN-SECNAME may be an integer.

'ALIGN SECNAME = EXPRESSION'
     Align the section called SECNAME to EXPRESSION.  The EXPRESSION
     should be a power of two.

'BASE EXPRESSION'
     Use the value of EXPRESSION as the lowest address (other than
     absolute addresses) in the output file.

'CHIP EXPRESSION'
'CHIP EXPRESSION, EXPRESSION'
     This command does nothing; it is accepted only for compatibility.

'END'
     This command does nothing whatever; it's only accepted for
     compatibility.

'FORMAT OUTPUT-FORMAT'
     Similar to the 'OUTPUT_FORMAT' command in the more general linker
     language, but restricted to S-records, if OUTPUT-FORMAT is 'S'

'LIST ANYTHING...'
     Print (to the standard output file) a link map, as produced by the
     'ld' command-line option '-M'.

     The keyword 'LIST' may be followed by anything on the same line,
     with no change in its effect.

'LOAD FILENAME'
'LOAD FILENAME, FILENAME, ... FILENAME'
     Include one or more object file FILENAME in the link; this has the
     same effect as specifying FILENAME directly on the 'ld' command
     line.

'NAME OUTPUT-NAME'
     OUTPUT-NAME is the name for the program produced by 'ld'; the
     MRI-compatible command 'NAME' is equivalent to the command-line
     option '-o' or the general script language command 'OUTPUT'.

'ORDER SECNAME, SECNAME, ... SECNAME'
'ORDER SECNAME SECNAME SECNAME'
     Normally, 'ld' orders the sections in its output file in the order
     in which they first appear in the input files.  In an
     MRI-compatible script, you can override this ordering with the
     'ORDER' command.  The sections you list with 'ORDER' will appear
     first in your output file, in the order specified.

'PUBLIC NAME=EXPRESSION'
'PUBLIC NAME,EXPRESSION'
'PUBLIC NAME EXPRESSION'
     Supply a value (EXPRESSION) for external symbol NAME used in the
     linker input files.

'SECT SECNAME, EXPRESSION'
'SECT SECNAME=EXPRESSION'
'SECT SECNAME EXPRESSION'
     You can use any of these three forms of the 'SECT' command to
     specify the start address (EXPRESSION) for section SECNAME.  If you
     have more than one 'SECT' statement for the same SECNAME, only the
     _first_ sets the start address.

==============================================================================
File: ld.info,  Node: |GNU_Free_Documentation_License|,  Next: |LD_Index|,  Prev: |MRI|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *GNU_Free_Documentation_License*

Appendix B GNU Free Documentation License
=========================================

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
----------------------------------------------------

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts."  line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.

==============================================================================
File: ld.info,  Node: |LD_Index|,  Prev: GNU Free Documentation License,  Up: Top
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *LD_Index*

LD Index
========


MENU

* ":                                     Symbols.            (line    6)
* -(:                                    Options.            (line  864)
* --accept-unknown-input-arch:           Options.            (line  882)
* --add-needed:                          Options.            (line  909)
* --add-stdcall-alias:                   Options.            (line 1869)
* --allow-multiple-definition:           Options.            (line 1215)
* --allow-shlib-undefined:               Options.            (line 1221)
* --as-needed:                           Options.            (line  892)
* --audit AUDITLIB:                      Options.            (line  111)
* --auxiliary=NAME:                      Options.            (line  242)
* --bank-window:                         Options.            (line 2316)
* --base-file:                           Options.            (line 1874)
* --be8:                                 ARM.                (line   28)
* --bss-plt:                             PowerPC ELF32.      (line   16)
* --build-id:                            Options.            (line 1831)
* --build-id=STYLE:                      Options.            (line 1831)
* --check-sections:                      Options.            (line  994)
* --cmse-implib:                         ARM.                (line  234)
* --code-region:                         MSP430.             (line   34)
* --compress-debug-sections=none:        Options.            (line 1789)
* --compress-debug-sections=zlib:        Options.            (line 1789)
* --compress-debug-sections=zlib-gabi:   Options.            (line 1789)
* --compress-debug-sections=zlib-gnu:    Options.            (line 1789)
* --copy-dt-needed-entries:              Options.            (line 1006)
* --cref:                                Options.            (line 1026)
* --data-region:                         MSP430.             (line   39)
* --default-imported-symver:             Options.            (line 1257)
* --default-script=SCRIPT:               Options.            (line  565)
* --default-symver:                      Options.            (line 1253)
* --defsym=SYMBOL=EXP:                   Options.            (line 1063)
* --demangle[=STYLE]:                    Options.            (line 1075)
* --depaudit AUDITLIB:                   Options.            (line  164)
* --disable-auto-image-base:             Options.            (line 2051)
* --disable-auto-import:                 Options.            (line 2190)
* --disable-large-address-aware:         Options.            (line 1999)
* --disable-long-section-names:          Options.            (line 1884)
* --disable-multiple-abs-defs:           Options.            (line 1106)
* --disable-new-dtags:                   Options.            (line 1765)
* --disable-runtime-pseudo-reloc:        Options.            (line 2203)
* --disable-sec-transformation:          MSP430.             (line   45)
* --disable-stdcall-fixup:               Options.            (line 1906)
* --discard-all:                         Options.            (line  650)
* --discard-locals:                      Options.            (line  654)
* --dll:                                 Options.            (line 1879)
* --dll-search-prefix:                   Options.            (line 2057)
* --dotsyms:                             PowerPC64 ELF64.    (line   33)
* --dsbt-index:                          Options.            (line 2294)
* --dsbt-size:                           Options.            (line 2289)
* --dynamic-linker=FILE:                 Options.            (line 1088)
* --dynamic-list-cpp-new:                Options.            (line  986)
* --dynamic-list-cpp-typeinfo:           Options.            (line  990)
* --dynamic-list-data:                   Options.            (line  983)
* --dynamic-list=DYNAMIC-LIST-FILE:      Options.            (line  970)
* --dynamicbase:                         Options.            (line 2243)
* --eh-frame-hdr:                        Options.            (line 1754)
* --embedded-relocs:                     Options.            (line 1101)
* --emit-relocs:                         Options.            (line  496)
* --emit-stack-syms:                     SPU ELF.            (line   46)
* --emit-stub-syms:                      PowerPC ELF32.      (line   47)
* --emit-stub-syms <1>:                  PowerPC64 ELF64.    (line   29)
* --emit-stub-syms <2>:                  SPU ELF.            (line   15)
* --enable-auto-image-base:              Options.            (line 2042)
* --enable-auto-import:                  Options.            (line 2066)
* --enable-extra-pe-debug:               Options.            (line 2208)
* --enable-long-section-names:           Options.            (line 1884)
* --enable-new-dtags:                    Options.            (line 1765)
* --enable-runtime-pseudo-reloc:         Options.            (line 2195)
* --enable-stdcall-fixup:                Options.            (line 1906)
* --entry=ENTRY:                         Options.            (line  174)
* --error-unresolved-symbols:            Options.            (line 1707)
* --exclude-all-symbols:                 Options.            (line 1959)
* --exclude-libs:                        Options.            (line  184)
* --exclude-modules-for-implib:          Options.            (line  195)
* --exclude-symbols:                     Options.            (line 1953)
* --export-all-symbols:                  Options.            (line 1929)
* --export-dynamic:                      Options.            (line  208)
* --extra-overlay-stubs:                 SPU ELF.            (line   19)
* --fatal-warnings:                      Options.            (line 1110)
* --file-alignment:                      Options.            (line 1963)
* --filter=NAME:                         Options.            (line  263)
* --fix-arm1176:                         ARM.                (line  111)
* --fix-cortex-a53-835769:               ARM.                (line  211)
* --fix-cortex-a8:                       ARM.                (line  202)
* --fix-stm32l4xx-629360:                ARM.                (line  120)
* --fix-v4bx:                            ARM.                (line   48)
* --fix-v4bx-interworking:               ARM.                (line   61)
* --force-dynamic:                       Options.            (line  505)
* --force-exe-suffix:                    Options.            (line 1115)
* --force-group-allocation:              Options.            (line 1055)
* --forceinteg:                          Options.            (line 2248)
* --format=FORMAT:                       Options.            (line  121)
* --format=VERSION:                      TI COFF.            (line    6)
* --gc-keep-exported:                    Options.            (line 1158)
* --gc-sections:                         Options.            (line 1125)
* --got:                                 Options.            (line 2328)
* --got=TYPE:                            M68K.               (line    6)
* --gpsize=VALUE:                        Options.            (line  295)
* --hash-size=NUMBER:                    Options.            (line 1775)
* --hash-style=STYLE:                    Options.            (line 1783)
* --heap:                                Options.            (line 1969)
* --help:                                Options.            (line 1186)
* --high-entropy-va:                     Options.            (line 2239)
* --ignore-branch-isa:                   Options.            (line 2349)
* --ignore-branch-isa <1>:               MIPS.               (line   13)
* --image-base:                          Options.            (line 1976)
* --in-implib=FILE:                      ARM.                (line  239)
* --insert-timestamp:                    Options.            (line 2271)
* --insn32:                              Options.            (line 2340)
* --insn32 <1>:                          MIPS.               (line    6)
* --just-symbols=FILE:                   Options.            (line  527)
* --kill-at:                             Options.            (line 1985)
* --large-address-aware:                 Options.            (line 1990)
* --ld-generated-unwind-info:            Options.            (line 1760)
* --leading-underscore:                  Options.            (line 1923)
* --library-path=DIR:                    Options.            (line  353)
* --library=NAMESPEC:                    Options.            (line  320)
* --local-store=lo:hi:                   SPU ELF.            (line   24)
* --long-plt:                            ARM.                (line  222)
* --major-image-version:                 Options.            (line 2006)
* --major-os-version:                    Options.            (line 2011)
* --major-subsystem-version:             Options.            (line 2015)
* --merge-exidx-entries:                 ARM.                (line  219)
* --minor-image-version:                 Options.            (line 2020)
* --minor-os-version:                    Options.            (line 2025)
* --minor-subsystem-version:             Options.            (line 2029)
* --mri-script=MRI-CMDFILE:              Options.            (line  145)
* --multi-subspace:                      HPPA ELF32.         (line    6)
* --nmagic:                              Options.            (line  422)
* --no-accept-unknown-input-arch:        Options.            (line  882)
* --no-add-needed:                       Options.            (line  909)
* --no-allow-shlib-undefined:            Options.            (line 1221)
* --no-apply-dynamic-relocs:             ARM.                (line  226)
* --no-as-needed:                        Options.            (line  892)
* --no-bind:                             Options.            (line 2262)
* --no-check-sections:                   Options.            (line  994)
* --no-copy-dt-needed-entries:           Options.            (line 1006)
* --no-define-common:                    Options.            (line 1039)
* --no-demangle:                         Options.            (line 1075)
* --no-dotsyms:                          PowerPC64 ELF64.    (line   33)
* --no-dynamic-linker:                   Options.            (line 1095)
* --no-eh-frame-hdr:                     Options.            (line 1754)
* --no-enum-size-warning:                ARM.                (line  158)
* --no-export-dynamic:                   Options.            (line  208)
* --no-fatal-warnings:                   Options.            (line 1110)
* --no-fix-arm1176:                      ARM.                (line  111)
* --no-fix-cortex-a53-835769:            ARM.                (line  211)
* --no-fix-cortex-a8:                    ARM.                (line  202)
* --no-gc-sections:                      Options.            (line 1125)
* --no-ignore-branch-isa:                Options.            (line 2350)
* --no-ignore-branch-isa <1>:            MIPS.               (line   13)
* --no-insn32:                           Options.            (line 2341)
* --no-insn32 <1>:                       MIPS.               (line    6)
* --no-isolation:                        Options.            (line 2255)
* --no-keep-memory:                      Options.            (line 1198)
* --no-leading-underscore:               Options.            (line 1923)
* --no-merge-exidx-entries:              Options.            (line 2301)
* --no-merge-exidx-entries <1>:          ARM.                (line  219)
* --no-multi-toc:                        PowerPC64 ELF64.    (line   96)
* --no-omagic:                           Options.            (line  437)
* --no-opd-optimize:                     PowerPC64 ELF64.    (line   70)
* --no-overlays:                         SPU ELF.            (line    9)
* --no-plt-align:                        PowerPC64 ELF64.    (line  118)
* --no-plt-localentry:                   PowerPC64 ELF64.    (line  147)
* --no-plt-static-chain:                 PowerPC64 ELF64.    (line  129)
* --no-plt-thread-safe:                  PowerPC64 ELF64.    (line  135)
* --no-print-gc-sections:                Options.            (line 1149)
* --no-save-restore-funcs:               PowerPC64 ELF64.    (line   44)
* --no-seh:                              Options.            (line 2258)
* --no-strip-discarded:                  Options.            (line  547)
* --no-tls-get-addr-optimize:            PowerPC64 ELF64.    (line   56)
* --no-tls-optimize:                     PowerPC ELF32.      (line   51)
* --no-tls-optimize <1>:                 PowerPC64 ELF64.    (line   51)
* --no-toc-optimize:                     PowerPC64 ELF64.    (line   82)
* --no-toc-sort:                         PowerPC64 ELF64.    (line  108)
* --no-trampoline:                       Options.            (line 2310)
* --no-undefined:                        Options.            (line 1205)
* --no-undefined-version:                Options.            (line 1248)
* --no-warn-mismatch:                    Options.            (line 1261)
* --no-warn-search-mismatch:             Options.            (line 1270)
* --no-wchar-size-warning:               ARM.                (line  165)
* --no-whole-archive:                    Options.            (line 1274)
* --noinhibit-exec:                      Options.            (line 1278)
* --non-overlapping-opd:                 PowerPC64 ELF64.    (line   76)
* --nxcompat:                            Options.            (line 2251)
* --oformat=OUTPUT-FORMAT:               Options.            (line 1289)
* --omagic:                              Options.            (line  428)
* --orphan-handling=MODE:                Options.            (line  609)
* --out-implib:                          Options.            (line 1302)
* --output-def:                          Options.            (line 2034)
* --output=OUTPUT:                       Options.            (line  443)
* --pic-executable:                      Options.            (line 1311)
* --pic-veneer:                          ARM.                (line  171)
* --plt-align:                           PowerPC64 ELF64.    (line  118)
* --plt-localentry:                      PowerPC64 ELF64.    (line  147)
* --plt-static-chain:                    PowerPC64 ELF64.    (line  129)
* --plt-thread-safe:                     PowerPC64 ELF64.    (line  135)
* --plugin:                              SPU ELF.            (line    6)
* --pop-state:                           Options.            (line  492)
* --print-gc-sections:                   Options.            (line 1149)
* --print-map:                           Options.            (line  388)
* --print-memory-usage:                  Options.            (line 1174)
* --print-output-format:                 Options.            (line 1168)
* --push-state:                          Options.            (line  474)
* --reduce-memory-overheads:             Options.            (line 1817)
* --relax:                               Options.            (line 1327)
* --relax on Nios II:                    Nios II.            (line    6)
* --relax on PowerPC:                    PowerPC ELF32.      (line    6)
* --relax on Xtensa:                     Xtensa.             (line   27)
* --relocatable:                         Options.            (line  509)
* --require-defined=SYMBOL:              Options.            (line  591)
* --retain-symbols-file=FILENAME:        Options.            (line 1353)
* --s390-pgste:                          S/390 ELF.          (line    6)
* --save-restore-funcs:                  PowerPC64 ELF64.    (line   44)
* --script=SCRIPT:                       Options.            (line  556)
* --sdata-got:                           PowerPC ELF32.      (line   33)
* --section-alignment:                   Options.            (line 2213)
* --section-start=SECTIONNAME=ORG:       Options.            (line 1521)
* --secure-plt:                          PowerPC ELF32.      (line   26)
* --sort-common:                         Options.            (line 1453)
* --sort-section=alignment:              Options.            (line 1468)
* --sort-section=name:                   Options.            (line 1464)
* --spare-dynamic-tags:                  Options.            (line 1472)
* --split-by-file:                       Options.            (line 1477)
* --split-by-reloc:                      Options.            (line 1482)
* --stack:                               Options.            (line 2219)
* --stack-analysis:                      SPU ELF.            (line   29)
* --stats:                               Options.            (line 1495)
* --strip-all:                           Options.            (line  538)
* --strip-debug:                         Options.            (line  542)
* --strip-discarded:                     Options.            (line  547)
* --stub-group-size:                     PowerPC64 ELF64.    (line    6)
* --stub-group-size=N:                   ARM.                (line  176)
* --stub-group-size=N <1>:               HPPA ELF32.         (line   12)
* --subsystem:                           Options.            (line 2226)
* --support-old-code:                    ARM.                (line    6)
* --sysroot=DIRECTORY:                   Options.            (line 1499)
* --target-help:                         Options.            (line 1190)
* --target1-abs:                         ARM.                (line   33)
* --target1-rel:                         ARM.                (line   33)
* --target2=TYPE:                        ARM.                (line   38)
* --task-link:                           Options.            (line 1504)
* --thumb-entry=ENTRY:                   ARM.                (line   17)
* --tls-get-addr-optimize:               PowerPC64 ELF64.    (line   56)
* --trace:                               Options.            (line  552)
* --trace-symbol=SYMBOL:                 Options.            (line  660)
* --traditional-format:                  Options.            (line 1509)
* --tsaware:                             Options.            (line 2268)
* --undefined=SYMBOL:                    Options.            (line  578)
* --unique[=SECTION]:                    Options.            (line  635)
* --unresolved-symbols:                  Options.            (line 1551)
* --use-blx:                             ARM.                (line   73)
* --use-nul-prefixed-import-tables:      ARM.                (line   23)
* --verbose[=NUMBER]:                    Options.            (line 1580)
* --version:                             Options.            (line  644)
* --version-script=VERSION-SCRIPTFILE:   Options.            (line 1588)
* --vfp11-denorm-fix:                    ARM.                (line   82)
* --warn-alternate-em:                   Options.            (line 1699)
* --warn-common:                         Options.            (line 1598)
* --warn-constructors:                   Options.            (line 1666)
* --warn-multiple-gp:                    Options.            (line 1671)
* --warn-once:                           Options.            (line 1685)
* --warn-section-align:                  Options.            (line 1689)
* --warn-shared-textrel:                 Options.            (line 1696)
* --warn-unresolved-symbols:             Options.            (line 1702)
* --wdmdriver:                           Options.            (line 2265)
* --whole-archive:                       Options.            (line 1711)
* --wrap=SYMBOL:                         Options.            (line 1725)
* -a KEYWORD:                            Options.            (line  104)
* -assert KEYWORD:                       Options.            (line  916)
* -b FORMAT:                             Options.            (line  121)
* -Bdynamic:                             Options.            (line  919)
* -Bgroup:                               Options.            (line  929)
* -Bshareable:                           Options.            (line 1446)
* -Bstatic:                              Options.            (line  936)
* -Bsymbolic:                            Options.            (line  950)
* -Bsymbolic-functions:                  Options.            (line  961)
* -c MRI-CMDFILE:                        Options.            (line  145)
* -call_shared:                          Options.            (line  919)
* -d:                                    Options.            (line  155)
* -dc:                                   Options.            (line  155)
* -dn:                                   Options.            (line  936)
* -dp:                                   Options.            (line  155)
* -dT SCRIPT:                            Options.            (line  565)
* -dy:                                   Options.            (line  919)
* -E:                                    Options.            (line  208)
* -e ENTRY:                              Options.            (line  174)
* -EB:                                   Options.            (line  235)
* -EL:                                   Options.            (line  238)
* -f NAME:                               Options.            (line  242)
* -F NAME:                               Options.            (line  263)
* -fini=NAME:                            Options.            (line  286)
* -g:                                    Options.            (line  292)
* -G VALUE:                              Options.            (line  295)
* -h NAME:                               Options.            (line  302)
* -i:                                    Options.            (line  311)
* -IFILE:                                Options.            (line 1088)
* -init=NAME:                            Options.            (line  314)
* -L DIR:                                Options.            (line  353)
* -l NAMESPEC:                           Options.            (line  320)
* -M:                                    Options.            (line  388)
* -m EMULATION:                          Options.            (line  378)
* -Map=MAPFILE:                          Options.            (line 1194)
* -n:                                    Options.            (line  422)
* -N:                                    Options.            (line  428)
* -no-relax:                             Options.            (line 1327)
* -non_shared:                           Options.            (line  936)
* -nostdlib:                             Options.            (line 1284)
* -O LEVEL:                              Options.            (line  449)
* -o OUTPUT:                             Options.            (line  443)
* -P AUDITLIB:                           Options.            (line  164)
* -pie:                                  Options.            (line 1311)
* -plugin NAME:                          Options.            (line  459)
* -q:                                    Options.            (line  496)
* -qmagic:                               Options.            (line 1321)
* -Qy:                                   Options.            (line 1324)
* -r:                                    Options.            (line  509)
* -R FILE:                               Options.            (line  527)
* -rpath-link=DIR:                       Options.            (line 1389)
* -rpath=DIR:                            Options.            (line 1367)
* -s:                                    Options.            (line  538)
* -S:                                    Options.            (line  542)
* -shared:                               Options.            (line 1446)
* -soname=NAME:                          Options.            (line  302)
* -static:                               Options.            (line  936)
* -t:                                    Options.            (line  552)
* -T SCRIPT:                             Options.            (line  556)
* -Tbss=ORG:                             Options.            (line 1530)
* -Tdata=ORG:                            Options.            (line 1530)
* -Tldata-segment=ORG:                   Options.            (line 1546)
* -Trodata-segment=ORG:                  Options.            (line 1540)
* -Ttext-segment=ORG:                    Options.            (line 1536)
* -Ttext=ORG:                            Options.            (line 1530)
* -u SYMBOL:                             Options.            (line  578)
* -Ur:                                   Options.            (line  599)
* -v:                                    Options.            (line  644)
* -V:                                    Options.            (line  644)
* -x:                                    Options.            (line  650)
* -X:                                    Options.            (line  654)
* -Y PATH:                               Options.            (line  669)
* -y SYMBOL:                             Options.            (line  660)
* -z defs:                               Options.            (line 1205)
* -z KEYWORD:                            Options.            (line  673)
* -z muldefs:                            Options.            (line 1215)
* -z undefs:                             Options.            (line 1205)
* .:                                     Location Counter.   (line    6)
* /DISCARD/:                             Output Section Discarding.
                                                             (line   26)
* 32-bit PLT entries:                    ARM.                (line  222)
* :PHDR:                                 Output Section Phdr.
                                                             (line    6)
* =FILLEXP:                              Output Section Fill.
                                                             (line    6)
* >REGION:                               Output Section Region.
                                                             (line    6)
* [COMMON]:                              Input Section Common.
                                                             (line   29)
* AArch64 rela addend:                   ARM.                (line  226)
* ABSOLUTE (MRI):                        MRI.                (line   32)
* absolute and relocatable symbols:      Expression Section. (line    6)
* absolute expressions:                  Expression Section. (line    6)
* ABSOLUTE(EXP):                         Builtin Functions.  (line   10)
* ADDR(SECTION):                         Builtin Functions.  (line   17)
* address, section:                      Output Section Address.
                                                             (line    6)
* ALIAS (MRI):                           MRI.                (line   43)
* ALIGN (MRI):                           MRI.                (line   49)
* align expression:                      Builtin Functions.  (line   38)
* align location counter:                Builtin Functions.  (line   38)
* ALIGN(ALIGN):                          Builtin Functions.  (line   38)
* ALIGN(EXP,ALIGN):                      Builtin Functions.  (line   38)
* ALIGN(SECTION_ALIGN):                  Forced Output Alignment.
                                                             (line    6)
* aligned common symbols:                WIN32.              (line  416)
* ALIGNOF(SECTION):                      Builtin Functions.  (line   63)
* allocating memory:                     MEMORY.             (line    6)
* architecture:                          Miscellaneous Commands.
                                                             (line  121)
* archive files, from cmd line:          Options.            (line  320)
* archive search path in linker script:  File Commands.      (line   77)
* arithmetic:                            Expressions.        (line    6)
* arithmetic operators:                  Operators.          (line    6)
* ARM interworking support:              ARM.                (line    6)
* ARM1176 erratum workaround:            ARM.                (line  111)
* ASSERT:                                Miscellaneous Commands.
                                                             (line    9)
* assertion in linker script:            Miscellaneous Commands.
                                                             (line    9)
* assignment in scripts:                 Assignments.        (line    6)
* AS_NEEDED(FILES):                      File Commands.      (line   57)
* AT(LMA):                               Output Section LMA. (line    6)
* AT>LMA_REGION:                         Output Section LMA. (line    6)
* automatic data imports:                WIN32.              (line  185)
* back end:                              BFD.                (line    6)
* BASE (MRI):                            MRI.                (line   53)
* BE8:                                   ARM.                (line   28)
* BFD canonical format:                  Canonical format.   (line   11)
* BFD requirements:                      BFD.                (line   16)
* big-endian objects:                    Options.            (line  235)
* binary input format:                   Options.            (line  121)
* BLOCK(EXP):                            Builtin Functions.  (line   76)
* bug criteria:                          Bug Criteria.       (line    6)
* bug reports:                           Bug Reporting.      (line    6)
* bugs in ld:                            Reporting Bugs.     (line    6)
* BYTE(EXPRESSION):                      Output Section Data.
                                                             (line    6)
* C++ constructors, arranging in link:   Output Section Keywords.
                                                             (line   19)
* CHIP (MRI):                            MRI.                (line   57)
* COLLECT_NO_DEMANGLE:                   Environment.        (line   29)
* combining symbols, warnings on:        Options.            (line 1598)
* COMDAT:                                Options.            (line 1055)
* COMDAT <1>:                            Miscellaneous Commands.
                                                             (line   56)
* command files:                         Scripts.            (line    6)
* command line:                          Options.            (line    6)
* common allocation:                     Options.            (line  155)
* common allocation <1>:                 Options.            (line 1039)
* common allocation in linker script:    Miscellaneous Commands.
                                                             (line   46)
* common allocation in linker script <1>: Miscellaneous Commands.
                                                             (line   51)
* common symbol placement:               Input Section Common.
                                                             (line    6)
* COMMONPAGESIZE:                        Symbolic Constants. (line   13)
* compatibility, MRI:                    Options.            (line  145)
* CONSTANT:                              Symbolic Constants. (line    6)
* constants in linker scripts:           Constants.          (line    6)
* constraints on output sections:        Output Section Constraint.
                                                             (line    6)
* constructors:                          Options.            (line  599)
* CONSTRUCTORS:                          Output Section Keywords.
                                                             (line   19)
* constructors, arranging in link:       Output Section Keywords.
                                                             (line   19)
* Cortex-A53 erratum 835769 workaround:  ARM.                (line  211)
* Cortex-A8 erratum workaround:          ARM.                (line  202)
* crash of linker:                       Bug Criteria.       (line    9)
* CREATE_OBJECT_SYMBOLS:                 Output Section Keywords.
                                                             (line    9)
* creating a DEF file:                   WIN32.              (line  153)
* cross reference table:                 Options.            (line 1026)
* cross references:                      Miscellaneous Commands.
                                                             (line   88)
* cross references <1>:                  Miscellaneous Commands.
                                                             (line  104)
* current output location:               Location Counter.   (line    6)
* data:                                  Output Section Data.
                                                             (line    6)
* DATA_SEGMENT_ALIGN(MAXPAGESIZE, COMMONPAGESIZE): Builtin Functions.
                                                             (line   81)
* DATA_SEGMENT_END(EXP):                 Builtin Functions.  (line  105)
* DATA_SEGMENT_RELRO_END(OFFSET, EXP):   Builtin Functions.  (line  111)
* dbx:                                   Options.            (line 1514)
* DEF files, creating:                   Options.            (line 2034)
* default emulation:                     Environment.        (line   21)
* default input format:                  Environment.        (line    9)
* defined symbol:                        Options.            (line  591)
* DEFINED(SYMBOL):                       Builtin Functions.  (line  124)
* deleting local symbols:                Options.            (line  650)
* demangling, default:                   Environment.        (line   29)
* demangling, from command line:         Options.            (line 1075)
* direct linking to a dll:               WIN32.              (line  233)
* discarding sections:                   Output Section Discarding.
                                                             (line    6)
* discontinuous memory:                  MEMORY.             (line    6)
* DLLs, creating:                        Options.            (line 1929)
* DLLs, creating <1>:                    Options.            (line 2034)
* DLLs, creating <2>:                    Options.            (line 2042)
* DLLs, linking to:                      Options.            (line 2057)
* dot:                                   Location Counter.   (line    6)
* dot inside sections:                   Location Counter.   (line   36)
* dot outside sections:                  Location Counter.   (line   66)
* dynamic linker, from command line:     Options.            (line 1088)
* dynamic symbol table:                  Options.            (line  208)
* ELF program headers:                   PHDRS.              (line    6)
* emulation:                             Options.            (line  378)
* emulation, default:                    Environment.        (line   21)
* END (MRI):                             MRI.                (line   61)
* endianness:                            Options.            (line  235)
* entry point:                           Entry Point.        (line    6)
* entry point, from command line:        Options.            (line  174)
* entry point, thumb:                    ARM.                (line   17)
* ENTRY(SYMBOL):                         Entry Point.        (line    6)
* error on valid input:                  Bug Criteria.       (line   12)
* example of linker script:              Simple Example.     (line    6)
* EXCLUDE_FILE:                          Input Section Basics.
                                                             (line   17)
* exporting DLL symbols:                 WIN32.              (line   19)
* expression evaluation order:           Evaluation.         (line    6)
* expression sections:                   Expression Section. (line    6)
* expression, absolute:                  Builtin Functions.  (line   10)
* expressions:                           Expressions.        (line    6)
* EXTERN:                                Miscellaneous Commands.
                                                             (line   39)
* fatal signal:                          Bug Criteria.       (line    9)
* file name wildcard patterns:           Input Section Wildcards.
                                                             (line    6)
* FILEHDR:                               PHDRS.              (line   62)
* filename symbols:                      Output Section Keywords.
                                                             (line    9)
* fill pattern, entire section:          Output Section Fill.
                                                             (line    6)
* FILL(EXPRESSION):                      Output Section Data.
                                                             (line   39)
* finalization function:                 Options.            (line  286)
* first input file:                      File Commands.      (line   85)
* first instruction:                     Entry Point.        (line    6)
* FIX_V4BX:                              ARM.                (line   48)
* FIX_V4BX_INTERWORKING:                 ARM.                (line   61)
* FORCE_COMMON_ALLOCATION:               Miscellaneous Commands.
                                                             (line   46)
* FORCE_GROUP_ALLOCATION:                Miscellaneous Commands.
                                                             (line   56)
* forcing input section alignment:       Forced Input Alignment.
                                                             (line    6)
* forcing output section alignment:      Forced Output Alignment.
                                                             (line    6)
* forcing the creation of dynamic sections: Options.         (line  505)
* FORMAT (MRI):                          MRI.                (line   65)
* functions in expressions:              Builtin Functions.  (line    6)
* garbage collection:                    Options.            (line 1125)
* garbage collection <1>:                Options.            (line 1149)
* garbage collection <2>:                Options.            (line 1158)
* garbage collection <3>:                Input Section Keep. (line    6)
* generating optimized output:           Options.            (line  449)
* GNU linker:                            Overview.           (line    6)
* GNUTARGET:                             Environment.        (line    9)
* group allocation in linker script:     Options.            (line 1055)
* group allocation in linker script <1>: Miscellaneous Commands.
                                                             (line   56)
* GROUP(FILES):                          File Commands.      (line   50)
* grouping input files:                  File Commands.      (line   50)
* groups of archives:                    Options.            (line  864)
* H8/300 support:                        H8/300.             (line    6)
* header size:                           Builtin Functions.  (line  191)
* heap size:                             Options.            (line 1969)
* help:                                  Options.            (line 1186)
* HIDDEN:                                HIDDEN.             (line    6)
* holes:                                 Location Counter.   (line   12)
* holes, filling:                        Output Section Data.
                                                             (line   39)
* HPPA multiple sub-space stubs:         HPPA ELF32.         (line    6)
* HPPA stub grouping:                    HPPA ELF32.         (line   12)
* image base:                            Options.            (line 1976)
* implicit linker scripts:               Implicit Linker Scripts.
                                                             (line    6)
* import libraries:                      WIN32.              (line   10)
* INCLUDE FILENAME:                      File Commands.      (line    9)
* including a linker script:             File Commands.      (line    9)
* including an entire archive:           Options.            (line 1711)
* incremental link:                      Options.            (line  311)
* INHIBIT_COMMON_ALLOCATION:             Miscellaneous Commands.
                                                             (line   51)
* initialization function:               Options.            (line  314)
* initialized data in ROM:               Output Section LMA. (line   39)
* input file format in linker script:    Format Commands.    (line   35)
* input filename symbols:                Output Section Keywords.
                                                             (line    9)
* input files in linker scripts:         File Commands.      (line   19)
* input files, displaying:               Options.            (line  552)
* input format:                          Options.            (line  121)
* input format <1>:                      Options.            (line  121)
* Input import library:                  ARM.                (line  239)
* input object files in linker scripts:  File Commands.      (line   19)
* input section alignment:               Forced Input Alignment.
                                                             (line    6)
* input section basics:                  Input Section Basics.
                                                             (line    6)
* input section wildcards:               Input Section Wildcards.
                                                             (line    6)
* input sections:                        Input Section.      (line    6)
* INPUT(FILES):                          File Commands.      (line   19)
* INSERT:                                Miscellaneous Commands.
                                                             (line   62)
* insert user script into default script: Miscellaneous Commands.
                                                             (line   62)
* integer notation:                      Constants.          (line    6)
* integer suffixes:                      Constants.          (line   15)
* internal object-file format:           Canonical format.   (line   11)
* invalid input:                         Bug Criteria.       (line   14)
* K and M integer suffixes:              Constants.          (line   15)
* KEEP:                                  Input Section Keep. (line    6)
* l =:                                   MEMORY.             (line   68)
* lazy evaluation:                       Evaluation.         (line    6)
* ld bugs, reporting:                    Bug Reporting.      (line    6)
* ldata segment origin, cmd line:        Options.            (line 1547)
* LDEMULATION:                           Environment.        (line   21)
* LD_FEATURE(STRING):                    Miscellaneous Commands.
                                                             (line  127)
* len =:                                 MEMORY.             (line   68)
* LENGTH =:                              MEMORY.             (line   68)
* LENGTH(MEMORY):                        Builtin Functions.  (line  141)
* library search path in linker script:  File Commands.      (line   77)
* link map:                              Options.            (line  388)
* link-time runtime library search path: Options.            (line 1389)
* linker crash:                          Bug Criteria.       (line    9)
* linker script concepts:                Basic Script Concepts.
                                                             (line    6)
* linker script example:                 Simple Example.     (line    6)
* linker script file commands:           File Commands.      (line    6)
* linker script format:                  Script Format.      (line    6)
* linker script input object files:      File Commands.      (line   19)
* linker script simple commands:         Simple Commands.    (line    6)
* linker scripts:                        Scripts.            (line    6)
* LIST (MRI):                            MRI.                (line   69)
* little-endian objects:                 Options.            (line  238)
* LOAD (MRI):                            MRI.                (line   76)
* load address:                          Output Section LMA. (line    6)
* LOADADDR(SECTION):                     Builtin Functions.  (line  144)
* loading, preventing:                   Output Section Type.
                                                             (line   21)
* local symbols, deleting:               Options.            (line  654)
* location counter:                      Location Counter.   (line    6)
* LOG2CEIL(EXP):                         Builtin Functions.  (line  148)
* LONG(EXPRESSION):                      Output Section Data.
                                                             (line    6)
* M and K integer suffixes:              Constants.          (line   15)
* M68HC11 and 68HC12 support:            M68HC11/68HC12.     (line    5)
* machine architecture:                  Miscellaneous Commands.
                                                             (line  121)
* machine dependencies:                  Machine Dependent.  (line    6)
* mapping input sections to output sections: Input Section.  (line    6)
* MAX:                                   Builtin Functions.  (line  151)
* MAXPAGESIZE:                           Symbolic Constants. (line   10)
* MEMORY:                                MEMORY.             (line    6)
* memory region attributes:              MEMORY.             (line   34)
* memory regions:                        MEMORY.             (line    6)
* memory regions and sections:           Output Section Region.
                                                             (line    6)
* memory usage:                          Options.            (line 1174)
* memory usage <1>:                      Options.            (line 1198)
* Merging exidx entries:                 ARM.                (line  219)
* MIN:                                   Builtin Functions.  (line  154)
* MIPS branch relocation check control:  MIPS.               (line   13)
* MIPS microMIPS instruction choice selection: MIPS.         (line    6)
* Motorola 68K GOT generation:           M68K.               (line    6)
* MRI compatibility:                     MRI.                (line    6)
* MSP430 extra sections:                 MSP430.             (line   11)
* MSP430 Options:                        MSP430.             (line   34)
* NAME (MRI):                            MRI.                (line   82)
* name, section:                         Output Section Name.
                                                             (line    6)
* names:                                 Symbols.            (line    6)
* naming the output file:                Options.            (line  443)
* NEXT(EXP):                             Builtin Functions.  (line  158)
* Nios II call relaxation:               Nios II.            (line    6)
* NMAGIC:                                Options.            (line  422)
* NOCROSSREFS(SECTIONS):                 Miscellaneous Commands.
                                                             (line   88)
* NOCROSSREFS_TO(TOSECTION FROMSECTIONS): Miscellaneous Commands.
                                                             (line  104)
* NOLOAD:                                Output Section Type.
                                                             (line   21)
* not enough room for program headers:   Builtin Functions.  (line  196)
* NO_ENUM_SIZE_WARNING:                  ARM.                (line  158)
* NO_WCHAR_SIZE_WARNING:                 ARM.                (line  165)
* o =:                                   MEMORY.             (line   63)
* objdump -i:                            BFD.                (line    6)
* object file management:                BFD.                (line    6)
* object files:                          Options.            (line   29)
* object formats available:              BFD.                (line    6)
* object size:                           Options.            (line  295)
* OMAGIC:                                Options.            (line  428)
* OMAGIC <1>:                            Options.            (line  437)
* ONLY_IF_RO:                            Output Section Constraint.
                                                             (line    6)
* ONLY_IF_RW:                            Output Section Constraint.
                                                             (line    6)
* opening object files:                  BFD outline.        (line    6)
* operators for arithmetic:              Operators.          (line    6)
* options:                               Options.            (line    6)
* ORDER (MRI):                           MRI.                (line   87)
* org =:                                 MEMORY.             (line   63)
* ORIGIN =:                              MEMORY.             (line   63)
* ORIGIN(MEMORY):                        Builtin Functions.  (line  164)
* orphan:                                Orphan Sections.    (line    6)
* orphan sections:                       Options.            (line  609)
* output file after errors:              Options.            (line 1278)
* output file format in linker script:   Format Commands.    (line   10)
* output file name in linker script:     File Commands.      (line   67)
* output format:                         Options.            (line 1168)
* output section alignment:              Forced Output Alignment.
                                                             (line    6)
* output section attributes:             Output Section Attributes.
                                                             (line    6)
* output section data:                   Output Section Data.
                                                             (line    6)
* OUTPUT(FILENAME):                      File Commands.      (line   67)
* OUTPUT_ARCH(BFDARCH):                  Miscellaneous Commands.
                                                             (line  121)
* OUTPUT_FORMAT(BFDNAME):                Format Commands.    (line   10)
* OVERLAY:                               Overlay Description.
                                                             (line    6)
* overlays:                              Overlay Description.
                                                             (line    6)
* partial link:                          Options.            (line  509)
* PE import table prefixing:             ARM.                (line   23)
* PHDRS:                                 PHDRS.              (line    6)
* PHDRS <1>:                             PHDRS.              (line   62)
* PIC_VENEER:                            ARM.                (line  171)
* Placement of SG veneers:               ARM.                (line  229)
* pop state governing input file handling: Options.          (line  492)
* position independent executables:      Options.            (line 1313)
* PowerPC ELF32 options:                 PowerPC ELF32.      (line   16)
* PowerPC GOT:                           PowerPC ELF32.      (line   33)
* PowerPC long branches:                 PowerPC ELF32.      (line    6)
* PowerPC PLT:                           PowerPC ELF32.      (line   16)
* PowerPC stub symbols:                  PowerPC ELF32.      (line   47)
* PowerPC TLS optimization:              PowerPC ELF32.      (line   51)
* PowerPC64 dot symbols:                 PowerPC64 ELF64.    (line   33)
* PowerPC64 ELF64 options:               PowerPC64 ELF64.    (line    6)
* PowerPC64 ELFv2 PLT localentry optimization: PowerPC64 ELF64.
                                                             (line  147)
* PowerPC64 multi-TOC:                   PowerPC64 ELF64.    (line   96)
* PowerPC64 OPD optimization:            PowerPC64 ELF64.    (line   70)
* PowerPC64 OPD spacing:                 PowerPC64 ELF64.    (line   76)
* PowerPC64 PLT call stub static chain:  PowerPC64 ELF64.    (line  129)
* PowerPC64 PLT call stub thread safety: PowerPC64 ELF64.    (line  135)
* PowerPC64 PLT stub alignment:          PowerPC64 ELF64.    (line  118)
* PowerPC64 register save/restore functions: PowerPC64 ELF64.
                                                             (line   44)
* PowerPC64 stub grouping:               PowerPC64 ELF64.    (line    6)
* PowerPC64 stub symbols:                PowerPC64 ELF64.    (line   29)
* PowerPC64 TLS optimization:            PowerPC64 ELF64.    (line   51)
* PowerPC64 TOC optimization:            PowerPC64 ELF64.    (line   82)
* PowerPC64 TOC sorting:                 PowerPC64 ELF64.    (line  108)
* PowerPC64 __tls_get_addr optimization: PowerPC64 ELF64.    (line   56)
* precedence in expressions:             Operators.          (line    6)
* prevent unnecessary loading:           Output Section Type.
                                                             (line   21)
* program headers:                       PHDRS.              (line    6)
* program headers and sections:          Output Section Phdr.
                                                             (line    6)
* program headers, not enough room:      Builtin Functions.  (line  196)
* program segments:                      PHDRS.              (line    6)
* PROVIDE:                               PROVIDE.            (line    6)
* PROVIDE_HIDDEN:                        PROVIDE_HIDDEN.     (line    6)
* PUBLIC (MRI):                          MRI.                (line   95)
* push state governing input file handling: Options.         (line  474)
* QUAD(EXPRESSION):                      Output Section Data.
                                                             (line    6)
* quoted symbol names:                   Symbols.            (line    6)
* read-only text:                        Options.            (line  422)
* read/write from cmd line:              Options.            (line  428)
* region alias:                          REGION_ALIAS.       (line    6)
* region names:                          REGION_ALIAS.       (line    6)
* regions of memory:                     MEMORY.             (line    6)
* REGION_ALIAS(ALIAS, REGION):           REGION_ALIAS.       (line    6)
* relative expressions:                  Expression Section. (line    6)
* relaxing addressing modes:             Options.            (line 1327)
* relaxing on H8/300:                    H8/300.             (line    9)
* relaxing on M68HC11:                   M68HC11/68HC12.     (line   12)
* relaxing on NDS32:                     NDS32.              (line    6)
* relaxing on Xtensa:                    Xtensa.             (line   27)
* relocatable and absolute symbols:      Expression Section. (line    6)
* relocatable output:                    Options.            (line  509)
* removing sections:                     Output Section Discarding.
                                                             (line    6)
* reporting bugs in ld:                  Reporting Bugs.     (line    6)
* requirements for BFD:                  BFD.                (line   16)
* retain relocations in final executable: Options.           (line  496)
* retaining specified symbols:           Options.            (line 1353)
* rodata segment origin, cmd line:       Options.            (line 1541)
* ROM initialized data:                  Output Section LMA. (line   39)
* round up expression:                   Builtin Functions.  (line   38)
* round up location counter:             Builtin Functions.  (line   38)
* runtime library name:                  Options.            (line  302)
* runtime library search path:           Options.            (line 1367)
* runtime pseudo-relocation:             WIN32.              (line  211)
* S/390:                                 S/390 ELF.          (line    6)
* S/390 ELF options:                     S/390 ELF.          (line    6)
* scaled integers:                       Constants.          (line   15)
* scommon section:                       Input Section Common.
                                                             (line   20)
* script files:                          Options.            (line  556)
* script files <1>:                      Options.            (line  565)
* scripts:                               Scripts.            (line    6)
* search directory, from cmd line:       Options.            (line  353)
* search path in linker script:          File Commands.      (line   77)
* SEARCH_DIR(PATH):                      File Commands.      (line   77)
* SECT (MRI):                            MRI.                (line  101)
* section address:                       Output Section Address.
                                                             (line    6)
* section address in expression:         Builtin Functions.  (line   17)
* section alignment:                     Builtin Functions.  (line   63)
* section alignment, warnings on:        Options.            (line 1689)
* section data:                          Output Section Data.
                                                             (line    6)
* section fill pattern:                  Output Section Fill.
                                                             (line    6)
* section groups:                        Options.            (line 1055)
* section groups <1>:                    Miscellaneous Commands.
                                                             (line   56)
* section load address:                  Output Section LMA. (line    6)
* section load address in expression:    Builtin Functions.  (line  144)
* section name:                          Output Section Name.
                                                             (line    6)
* section name wildcard patterns:        Input Section Wildcards.
                                                             (line    6)
* section size:                          Builtin Functions.  (line  175)
* section, assigning to memory region:   Output Section Region.
                                                             (line    6)
* section, assigning to program header:  Output Section Phdr.
                                                             (line    6)
* SECTIONS:                              SECTIONS.           (line    6)
* sections, discarding:                  Output Section Discarding.
                                                             (line    6)
* sections, orphan:                      Options.            (line  609)
* Secure gateway import library:         ARM.                (line  234)
* segment origins, cmd line:             Options.            (line 1530)
* segments, ELF:                         PHDRS.              (line    6)
* SEGMENT_START(SEGMENT, DEFAULT):       Builtin Functions.  (line  167)
* shared libraries:                      Options.            (line 1448)
* SHORT(EXPRESSION):                     Output Section Data.
                                                             (line    6)
* SIZEOF(SECTION):                       Builtin Functions.  (line  175)
* SIZEOF_HEADERS:                        Builtin Functions.  (line  191)
* small common symbols:                  Input Section Common.
                                                             (line   20)
* SORT:                                  Input Section Wildcards.
                                                             (line   62)
* SORT_BY_ALIGNMENT:                     Input Section Wildcards.
                                                             (line   51)
* SORT_BY_INIT_PRIORITY:                 Input Section Wildcards.
                                                             (line   57)
* SORT_BY_NAME:                          Input Section Wildcards.
                                                             (line   43)
* SORT_NONE:                             Input Section Wildcards.
                                                             (line   98)
* SPU:                                   SPU ELF.            (line   29)
* SPU <1>:                               SPU ELF.            (line   46)
* SPU ELF options:                       SPU ELF.            (line    6)
* SPU extra overlay stubs:               SPU ELF.            (line   19)
* SPU local store size:                  SPU ELF.            (line   24)
* SPU overlay stub symbols:              SPU ELF.            (line   15)
* SPU overlays:                          SPU ELF.            (line    9)
* SPU plugins:                           SPU ELF.            (line    6)
* SQUAD(EXPRESSION):                     Output Section Data.
                                                             (line    6)
* stack size:                            Options.            (line 2219)
* standard Unix system:                  Options.            (line    7)
* start of execution:                    Entry Point.        (line    6)
* STARTUP(FILENAME):                     File Commands.      (line   85)
* STM32L4xx erratum workaround:          ARM.                (line  120)
* strip all symbols:                     Options.            (line  538)
* strip debugger symbols:                Options.            (line  542)
* stripping all but some symbols:        Options.            (line 1353)
* STUB_GROUP_SIZE:                       ARM.                (line  176)
* SUBALIGN(SUBSECTION_ALIGN):            Forced Input Alignment.
                                                             (line    6)
* suffixes for integers:                 Constants.          (line   15)
* symbol defaults:                       Builtin Functions.  (line  124)
* symbol definition, scripts:            Assignments.        (line    6)
* symbol names:                          Symbols.            (line    6)
* symbol tracing:                        Options.            (line  660)
* symbol versions:                       VERSION.            (line    6)
* symbol-only input:                     Options.            (line  527)
* symbolic constants:                    Symbolic Constants. (line    6)
* symbols, from command line:            Options.            (line 1063)
* symbols, relocatable and absolute:     Expression Section. (line    6)
* symbols, require defined:              Options.            (line  591)
* symbols, retaining selectively:        Options.            (line 1353)
* synthesizing linker:                   Options.            (line 1327)
* synthesizing on H8/300:                H8/300.             (line   14)
* TARGET(BFDNAME):                       Format Commands.    (line   35)
* TARGET1:                               ARM.                (line   33)
* TARGET2:                               ARM.                (line   38)
* text segment origin, cmd line:         Options.            (line 1537)
* thumb entry point:                     ARM.                (line   17)
* TI COFF versions:                      TI COFF.            (line    6)
* traditional format:                    Options.            (line 1509)
* trampoline generation on M68HC11:      M68HC11/68HC12.     (line   30)
* trampoline generation on M68HC12:      M68HC11/68HC12.     (line   30)
* unallocated address, next:             Builtin Functions.  (line  158)
* undefined symbol:                      Options.            (line  578)
* undefined symbol in linker script:     Miscellaneous Commands.
                                                             (line   39)
* undefined symbols, warnings on:        Options.            (line 1685)
* uninitialized data placement:          Input Section Common.
                                                             (line    6)
* unspecified memory:                    Output Section Data.
                                                             (line   39)
* usage:                                 Options.            (line 1186)
* USE_BLX:                               ARM.                (line   73)
* using a DEF file:                      WIN32.              (line   52)
* using auto-export functionality:       WIN32.              (line   22)
* Using decorations:                     WIN32.              (line  157)
* variables, defining:                   Assignments.        (line    6)
* verbose[=NUMBER]:                      Options.            (line 1580)
* version:                               Options.            (line  644)
* version script:                        VERSION.            (line    6)
* version script, symbol versions:       Options.            (line 1588)
* VERSION {script text}:                 VERSION.            (line    6)
* versions of symbols:                   VERSION.            (line    6)
* VFP11_DENORM_FIX:                      ARM.                (line   82)
* warnings, on combining symbols:        Options.            (line 1598)
* warnings, on section alignment:        Options.            (line 1689)
* warnings, on undefined symbols:        Options.            (line 1685)
* weak externals:                        WIN32.              (line  401)
* what is this?:                         Overview.           (line    6)
* wildcard file name patterns:           Input Section Wildcards.
                                                             (line    6)
* Xtensa options:                        Xtensa.             (line   55)
* Xtensa processors:                     Xtensa.             (line    6)


vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
