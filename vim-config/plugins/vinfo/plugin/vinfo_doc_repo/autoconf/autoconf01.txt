     either your files may be used without being configured, or they
     are used during the configuration.  In most cases the traditional
     approach is enough.

     This macro caches its results in `ac_cv_have_decl_SYMBOL'
     variables, with characters not suitable for a variable name mapped
     to underscores.

 -- Macro: AC_CHECK_DECLS_ONCE (SYMBOLS)
     For each of the SYMBOLS (_comma_-separated list), define
     `HAVE_DECL_SYMBOL' (in all capitals) to `1' if SYMBOL is declared
     in the default include files, otherwise to `0'.  This is a
     once-only variant of `AC_CHECK_DECLS'.  It generates the checking
     code at most once, so that `configure' is smaller and faster; but
     the checks cannot be conditionalized and are always done once,
     early during the `configure' run.

==============================================================================
File: autoconf.info,  Node: |Structures|,  Next: |Types|,  Prev: |Declarations|,  Up: |Existing_Tests|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *Structures*

5.8 Structures
=====---------

The following macros check for the presence of certain members in C
structures.  If there is no macro specifically defined to check for a
member you need, then you can use the general structure-member macros
(*note Generic Structures::) or, for more complex tests, you may use
`AC_COMPILE_IFELSE' (*note Running the Compiler::).

MENU

* |Particular_Structures|::       Macros to check for certain structure members
* |Generic_Structures|::          How to find other structure members

==============================================================================
File: autoconf.info,  Node: |Particular_Structures|,  Next: |Generic_Structures|,  Up: |Structures|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *Particular_Structures*

5.8.1 Particular Structure Checks
---------------------------------

The following macros check for certain structures or structure members.

 -- Macro: AC_STRUCT_DIRENT_D_INO
     Perform all the actions of `AC_HEADER_DIRENT' (*note Particular
     Headers::).  Then, if `struct dirent' contains a `d_ino' member,
     define `HAVE_STRUCT_DIRENT_D_INO'.

     `HAVE_STRUCT_DIRENT_D_INO' indicates only the presence of `d_ino',
     not whether its contents are always reliable.  Traditionally, a
     zero `d_ino' indicated a deleted directory entry, though current
     systems hide this detail from the user and never return zero
     `d_ino' values.  Many current systems report an incorrect `d_ino'
     for a directory entry that is a mount point.

 -- Macro: AC_STRUCT_DIRENT_D_TYPE
     Perform all the actions of `AC_HEADER_DIRENT' (*note Particular
     Headers::).  Then, if `struct dirent' contains a `d_type' member,
     define `HAVE_STRUCT_DIRENT_D_TYPE'.

 -- Macro: AC_STRUCT_ST_BLOCKS
     If `struct stat' contains an `st_blocks' member, define
     `HAVE_STRUCT_STAT_ST_BLOCKS'.  Otherwise, require an `AC_LIBOBJ'
     replacement of `fileblocks'.  The former name, `HAVE_ST_BLOCKS' is
     to be avoided, as its support will cease in the future.

     This macro caches its result in the
     `ac_cv_member_struct_stat_st_blocks' variable.

 -- Macro: AC_STRUCT_TM
     If `time.h' does not define `struct tm', define `TM_IN_SYS_TIME',
     which means that including `sys/time.h' had better define `struct
     tm'.

     This macro is obsolescent, as `time.h' defines `struct tm' in
     current systems.  New programs need not use this macro.

 -- Macro: AC_STRUCT_TIMEZONE
     Figure out how to get the current timezone.  If `struct tm' has a
     `tm_zone' member, define `HAVE_STRUCT_TM_TM_ZONE' (and the
     obsoleted `HAVE_TM_ZONE').  Otherwise, if the external array
     `tzname' is found, define `HAVE_TZNAME'; if it is declared, define
     `HAVE_DECL_TZNAME'.

==============================================================================
File: autoconf.info,  Node: |Generic_Structures|,  Prev: |Particular_Structures|,  Up: |Structures|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *Generic_Structures*

5.8.2 Generic Structure Checks
------------------------------

These macros are used to find structure members not covered by the
"particular" test macros.

 -- Macro: AC_CHECK_MEMBER (AGGREGATE.MEMBER, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND], [INCLUDES = `AC_INCLUDES_DEFAULT'])
     Check whether MEMBER is a member of the aggregate AGGREGATE.  If
     no INCLUDES are specified, the default includes are used (*note
     Default Includes::).

          AC_CHECK_MEMBER([struct passwd.pw_gecos], [],
                          [AC_MSG_ERROR([we need `passwd.pw_gecos'])],
                          [[#include <pwd.h>]])

     You can use this macro for submembers:

          AC_CHECK_MEMBER(struct top.middle.bot)

     This macro caches its result in the
     `ac_cv_member_AGGREGATE_MEMBER' variable, with characters not
     suitable for a variable name mapped to underscores.

 -- Macro: AC_CHECK_MEMBERS (MEMBERS, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND], [INCLUDES = `AC_INCLUDES_DEFAULT'])
     Check for the existence of each `AGGREGATE.MEMBER' of MEMBERS
     using the previous macro.  When MEMBER belongs to AGGREGATE,
     define `HAVE_AGGREGATE_MEMBER' (in all capitals, with spaces and
     dots replaced by underscores).  If ACTION-IF-FOUND is given, it is
     executed for each of the found members.  If ACTION-IF-NOT-FOUND is
     given, it is executed for each of the members that could not be
     found.

     INCLUDES is a series of include directives, defaulting to
     `AC_INCLUDES_DEFAULT' (*note Default Includes::), which are used
     prior to the members under test.

     This macro uses M4 lists:
          AC_CHECK_MEMBERS([struct stat.st_rdev, struct stat.st_blksize])

==============================================================================
File: autoconf.info,  Node: |Types|,  Next: |Compilers_and_Preprocessors|,  Prev: |Structures|,  Up: |Existing_Tests|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *Types*

5.9 Types
=====----

The following macros check for C types, either builtin or typedefs.  If
there is no macro specifically defined to check for a type you need, and
you don't need to check for any special properties of it, then you can
use a general type-check macro.

MENU

* |Particular_Types|::            Special handling to find certain types
* |Generic_Types|::               How to find other types

==============================================================================
File: autoconf.info,  Node: |Particular_Types|,  Next: |Generic_Types|,  Up: |Types|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Particular_Types*

5.9.1 Particular Type Checks
----------------------------

These macros check for particular C types in `sys/types.h', `stdlib.h',
`stdint.h', `inttypes.h' and others, if they exist.

   The Gnulib `stdint' module is an alternate way to define many of
these symbols; it is useful if you prefer your code to assume a
C99-or-better environment.  *Note Gnulib::.

 -- Macro: AC_TYPE_GETGROUPS
     Define `GETGROUPS_T' to be whichever of `gid_t' or `int' is the
     base type of the array argument to `getgroups'.

     This macro caches the base type in the `ac_cv_type_getgroups'
     variable.

 -- Macro: AC_TYPE_INT8_T
     If `stdint.h' or `inttypes.h' does not define the type `int8_t',
     define `int8_t' to a signed integer type that is exactly 8 bits
     wide and that uses two's complement representation, if such a type
     exists.  If you are worried about porting to hosts that lack such
     a type, you can use the results of this macro in C89-or-later code
     as follows:

          #if HAVE_STDINT_H
          # include <stdint.h>
          #endif
          #if defined INT8_MAX || defined int8_t
           _code using int8_t_
          #else
           _complicated alternative using >8-bit 'signed char'_
          #endif

     This macro caches the type in the `ac_cv_c_int8_t' variable.

 -- Macro: AC_TYPE_INT16_T
     This is like `AC_TYPE_INT8_T', except for 16-bit integers.

 -- Macro: AC_TYPE_INT32_T
     This is like `AC_TYPE_INT8_T', except for 32-bit integers.

 -- Macro: AC_TYPE_INT64_T
     This is like `AC_TYPE_INT8_T', except for 64-bit integers.

 -- Macro: AC_TYPE_INTMAX_T
     If `stdint.h' or `inttypes.h' defines the type `intmax_t', define
     `HAVE_INTMAX_T'.  Otherwise, define `intmax_t' to the widest
     signed integer type.

 -- Macro: AC_TYPE_INTPTR_T
     If `stdint.h' or `inttypes.h' defines the type `intptr_t', define
     `HAVE_INTPTR_T'.  Otherwise, define `intptr_t' to a signed integer
     type wide enough to hold a pointer, if such a type exists.

 -- Macro: AC_TYPE_LONG_DOUBLE
     If the C compiler supports a working `long double' type, define
     `HAVE_LONG_DOUBLE'.  The `long double' type might have the same
     range and precision as `double'.

     This macro caches its result in the `ac_cv_type_long_double'
     variable.

     This macro is obsolescent, as current C compilers support `long
     double'.  New programs need not use this macro.

 -- Macro: AC_TYPE_LONG_DOUBLE_WIDER
     If the C compiler supports a working `long double' type with more
     range or precision than the `double' type, define
     `HAVE_LONG_DOUBLE_WIDER'.

     This macro caches its result in the `ac_cv_type_long_double_wider'
     variable.

 -- Macro: AC_TYPE_LONG_LONG_INT
     If the C compiler supports a working `long long int' type, define
     `HAVE_LONG_LONG_INT'.  However, this test does not test `long long
     int' values in preprocessor `#if' expressions, because too many
     compilers mishandle such expressions.  *Note Preprocessor
     Arithmetic::.

     This macro caches its result in the `ac_cv_type_long_long_int'
     variable.

 -- Macro: AC_TYPE_MBSTATE_T
     Define `HAVE_MBSTATE_T' if `<wchar.h>' declares the `mbstate_t'
     type.  Also, define `mbstate_t' to be a type if `<wchar.h>' does
     not declare it.

     This macro caches its result in the `ac_cv_type_mbstate_t'
     variable.

 -- Macro: AC_TYPE_MODE_T
     Define `mode_t' to a suitable type, if standard headers do not
     define it.

     This macro caches its result in the `ac_cv_type_mode_t' variable.

 -- Macro: AC_TYPE_OFF_T
     Define `off_t' to a suitable type, if standard headers do not
     define it.

     This macro caches its result in the `ac_cv_type_off_t' variable.

 -- Macro: AC_TYPE_PID_T
     Define `pid_t' to a suitable type, if standard headers do not
     define it.

     This macro caches its result in the `ac_cv_type_pid_t' variable.

 -- Macro: AC_TYPE_SIZE_T
     Define `size_t' to a suitable type, if standard headers do not
     define it.

     This macro caches its result in the `ac_cv_type_size_t' variable.

 -- Macro: AC_TYPE_SSIZE_T
     Define `ssize_t' to a suitable type, if standard headers do not
     define it.

     This macro caches its result in the `ac_cv_type_ssize_t' variable.

 -- Macro: AC_TYPE_UID_T
     Define `uid_t' and `gid_t' to suitable types, if standard headers
     do not define them.

     This macro caches its result in the `ac_cv_type_uid_t' variable.

 -- Macro: AC_TYPE_UINT8_T
     If `stdint.h' or `inttypes.h' does not define the type `uint8_t',
     define `uint8_t' to an unsigned integer type that is exactly 8
     bits wide, if such a type exists.  This is like `AC_TYPE_INT8_T',
     except for unsigned integers.

 -- Macro: AC_TYPE_UINT16_T
     This is like `AC_TYPE_UINT8_T', except for 16-bit integers.

 -- Macro: AC_TYPE_UINT32_T
     This is like `AC_TYPE_UINT8_T', except for 32-bit integers.

 -- Macro: AC_TYPE_UINT64_T
     This is like `AC_TYPE_UINT8_T', except for 64-bit integers.

 -- Macro: AC_TYPE_UINTMAX_T
     If `stdint.h' or `inttypes.h' defines the type `uintmax_t', define
     `HAVE_UINTMAX_T'.  Otherwise, define `uintmax_t' to the widest
     unsigned integer type.

 -- Macro: AC_TYPE_UINTPTR_T
     If `stdint.h' or `inttypes.h' defines the type `uintptr_t', define
     `HAVE_UINTPTR_T'.  Otherwise, define `uintptr_t' to an unsigned
     integer type wide enough to hold a pointer, if such a type exists.

 -- Macro: AC_TYPE_UNSIGNED_LONG_LONG_INT
     If the C compiler supports a working `unsigned long long int' type,
     define `HAVE_UNSIGNED_LONG_LONG_INT'.  However, this test does not
     test `unsigned long long int' values in preprocessor `#if'
     expressions, because too many compilers mishandle such expressions.
     *Note Preprocessor Arithmetic::.

     This macro caches its result in the
     `ac_cv_type_unsigned_long_long_int' variable.

==============================================================================
File: autoconf.info,  Node: |Generic_Types|,  Prev: |Particular_Types|,  Up: |Types|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Generic_Types*

5.9.2 Generic Type Checks
-------------------------

These macros are used to check for types not covered by the "particular"
test macros.

 -- Macro: AC_CHECK_TYPE (TYPE, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND], [INCLUDES = `AC_INCLUDES_DEFAULT'])
     Check whether TYPE is defined.  It may be a compiler builtin type
     or defined by the INCLUDES.  INCLUDES is a series of include
     directives, defaulting to `AC_INCLUDES_DEFAULT' (*note Default
     Includes::), which are used prior to the type under test.

     In C, TYPE must be a type-name, so that the expression `sizeof
     (TYPE)' is valid (but `sizeof ((TYPE))' is not).  The same test is
     applied when compiling for C++, which means that in C++ TYPE
     should be a type-id and should not be an anonymous `struct' or
     `union'.

     This macro caches its result in the `ac_cv_type_TYPE' variable,
     with `*' mapped to `p' and other characters not suitable for a
     variable name mapped to underscores.

 -- Macro: AC_CHECK_TYPES (TYPES, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND], [INCLUDES = `AC_INCLUDES_DEFAULT'])
     For each TYPE of the TYPES that is defined, define `HAVE_TYPE' (in
     all capitals).  Each TYPE must follow the rules of
     `AC_CHECK_TYPE'.  If no INCLUDES are specified, the default
     includes are used (*note Default Includes::).  If ACTION-IF-FOUND
     is given, it is additional shell code to execute when one of the
     types is found.  If ACTION-IF-NOT-FOUND is given, it is executed
     when one of the types is not found.

     This macro uses M4 lists:
          AC_CHECK_TYPES([ptrdiff_t])
          AC_CHECK_TYPES([unsigned long long int, uintmax_t])
          AC_CHECK_TYPES([float_t], [], [], [[#include <math.h>]])


   Autoconf, up to 2.13, used to provide to another version of
`AC_CHECK_TYPE', broken by design.  In order to keep backward
compatibility, a simple heuristic, quite safe but not totally, is
implemented.  In case of doubt, read the documentation of the former
`AC_CHECK_TYPE', see *note Obsolete Macros::.

==============================================================================
File: autoconf.info,  Node: |Compilers_and_Preprocessors|,  Next: |System_Services|,  Prev: |Types|,  Up: |Existing_Tests|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Compilers_and_Preprocessors*

5.10 Compilers and Preprocessors
=====---------------------------

All the tests for compilers (`AC_PROG_CC', `AC_PROG_CXX',
`AC_PROG_F77') define the output variable `EXEEXT' based on the output
of the compiler, typically to the empty string if Posix and `.exe' if a
DOS variant.

   They also define the output variable `OBJEXT' based on the output of
the compiler, after `.c' files have been excluded, typically to `o' if
Posix, `obj' if a DOS variant.

   If the compiler being used does not produce executables, the tests
fail.  If the executables can't be run, and cross-compilation is not
enabled, they fail too.  *Note Manual Configuration::, for more on
support for cross compiling.

MENU

* |Specific_Compiler_Characteristics|::  Some portability issues
* |Generic_Compiler_Characteristics|::  Language independent tests and features
* |C_Compiler|::                  Checking its characteristics
* |C++_Compiler|::                Likewise
* |Objective_C_Compiler|::        Likewise
* |Objective_C++_Compiler|::      Likewise
* |Erlang_Compiler_and_Interpreter|::  Likewise
* |Fortran_Compiler|::            Likewise
* |Go_Compiler|::                 Likewise

==============================================================================
File: autoconf.info,  Node: |Specific_Compiler_Characteristics|,  Next: |Generic_Compiler_Characteristics|,  Up: |Compilers_and_Preprocessors|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Specific_Compiler_Characteristics*

5.10.1 Specific Compiler Characteristics
----------------------------------------

Some compilers exhibit different behaviors.

Static/Dynamic Expressions
     Autoconf relies on a trick to extract one bit of information from
     the C compiler: using negative array sizes.  For instance the
     following excerpt of a C source demonstrates how to test whether
     `int' objects are 4 bytes wide:

          static int test_array[sizeof (int) == 4 ? 1 : -1];

     To our knowledge, there is a single compiler that does not support
     this trick: the HP C compilers (the real ones, not only the
     "bundled") on HP-UX 11.00.  They incorrectly reject the above
     program with the diagnostic "Variable-length arrays cannot have
     static storage."  This bug comes from HP compilers' mishandling of
     `sizeof (int)', not from the `? 1 : -1', and Autoconf works around
     this problem by casting `sizeof (int)' to `long int' before
     comparing it.

==============================================================================
File: autoconf.info,  Node: |Generic_Compiler_Characteristics|,  Next: |C_Compiler|,  Prev: |Specific_Compiler_Characteristics|,  Up: |Compilers_and_Preprocessors|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Generic_Compiler_Characteristics*

5.10.2 Generic Compiler Characteristics
---------------------------------------

 -- Macro: AC_CHECK_SIZEOF (TYPE-OR-EXPR, [UNUSED], [INCLUDES =
          `AC_INCLUDES_DEFAULT'])
     Define `SIZEOF_TYPE-OR-EXPR' (*note Standard Symbols::) to be the
     size in bytes of TYPE-OR-EXPR, which may be either a type or an
     expression returning a value that has a size.  If the expression
     `sizeof (TYPE-OR-EXPR)' is invalid, the result is 0.  INCLUDES is
     a series of include directives, defaulting to
     `AC_INCLUDES_DEFAULT' (*note Default Includes::), which are used
     prior to the expression under test.

     This macro now works even when cross-compiling.  The UNUSED
     argument was used when cross-compiling.

     For example, the call

          AC_CHECK_SIZEOF([int *])

     defines `SIZEOF_INT_P' to be 8 on DEC Alpha AXP systems.

     This macro caches its result in the `ac_cv_sizeof_TYPE-OR-EXPR'
     variable, with `*' mapped to `p' and other characters not suitable
     for a variable name mapped to underscores.

 -- Macro: AC_CHECK_ALIGNOF (TYPE, [INCLUDES = `AC_INCLUDES_DEFAULT'])
     Define `ALIGNOF_TYPE' (*note Standard Symbols::) to be the
     alignment in bytes of TYPE.  `TYPE y;' must be valid as a
     structure member declaration.  If `type' is unknown, the result is
     0.  If no INCLUDES are specified, the default includes are used
     (*note Default Includes::).

     This macro caches its result in the `ac_cv_alignof_TYPE-OR-EXPR'
     variable, with `*' mapped to `p' and other characters not suitable
     for a variable name mapped to underscores.

 -- Macro: AC_COMPUTE_INT (VAR, EXPRESSION, [INCLUDES =
          `AC_INCLUDES_DEFAULT'], [ACTION-IF-FAILS])
     Store into the shell variable VAR the value of the integer
     EXPRESSION.  The value should fit in an initializer in a C
     variable of type `signed long'.  To support cross compilation (in
     which case, the macro only works on hosts that use twos-complement
     arithmetic), it should be possible to evaluate the expression at
     compile-time.  If no INCLUDES are specified, the default includes
     are used (*note Default Includes::).

     Execute ACTION-IF-FAILS if the value cannot be determined
     correctly.

 -- Macro: AC_LANG_WERROR
     Normally Autoconf ignores warnings generated by the compiler,
     linker, and preprocessor.  If this macro is used, warnings count
     as fatal errors for the current language.  This macro is useful
     when the results of configuration are used where warnings are
     unacceptable; for instance, if parts of a program are built with
     the GCC `-Werror' option.  If the whole program is built using
     `-Werror' it is often simpler to put `-Werror' in the compiler
     flags (`CFLAGS', etc.).

 -- Macro: AC_OPENMP
     OpenMP (http://www.openmp.org/) specifies extensions of C, C++,
     and Fortran that simplify optimization of shared memory
     parallelism, which is a common problem on multicore CPUs.

     If the current language is C, the macro `AC_OPENMP' sets the
     variable `OPENMP_CFLAGS' to the C compiler flags needed for
     supporting OpenMP.  `OPENMP_CFLAGS' is set to empty if the
     compiler already supports OpenMP, if it has no way to activate
     OpenMP support, or if the user rejects OpenMP support by invoking
     `configure' with the `--disable-openmp' option.

     `OPENMP_CFLAGS' needs to be used when compiling programs, when
     preprocessing program source, and when linking programs.
     Therefore you need to add `$(OPENMP_CFLAGS)' to the `CFLAGS' of C
     programs that use OpenMP.  If you preprocess OpenMP-specific C
     code, you also need to add `$(OPENMP_CFLAGS)' to `CPPFLAGS'.  The
     presence of OpenMP support is revealed at compile time by the
     preprocessor macro `_OPENMP'.

     Linking a program with `OPENMP_CFLAGS' typically adds one more
     shared library to the program's dependencies, so its use is
     recommended only on programs that actually require OpenMP.

     If the current language is C++, `AC_OPENMP' sets the variable
     `OPENMP_CXXFLAGS', suitably for the C++ compiler.  The same remarks
     hold as for C.

     If the current language is Fortran 77 or Fortran, `AC_OPENMP' sets
     the variable `OPENMP_FFLAGS' or `OPENMP_FCFLAGS', respectively.
     Similar remarks as for C hold, except that `CPPFLAGS' is not used
     for Fortran, and no preprocessor macro signals OpenMP support.

     For portability, it is best to avoid spaces between `#' and
     `pragma omp'.  That is, write `#pragma omp', not `# pragma omp'.
     The Sun WorkShop 6.2 C compiler chokes on the latter.

     This macro caches its result in the `ac_cv_prog_c_openmp',
     `ac_cv_prog_cxx_openmp', `ac_cv_prog_f77_openmp', or
     `ac_cv_prog_fc_openmp' variable, depending on the current language.

==============================================================================
File: autoconf.info,  Node: |C_Compiler|,  Next: |C++_Compiler|,  Prev: |Generic_Compiler_Characteristics|,  Up: |Compilers_and_Preprocessors|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *C_Compiler*

5.10.3 C Compiler Characteristics
---------------------------------

The following macros provide ways to find and exercise a C Compiler.
There are a few constructs that ought to be avoided, but do not deserve
being checked for, since they can easily be worked around.

Don't use lines containing solitary backslashes
     They tickle a bug in the HP-UX C compiler (checked on HP-UX 10.20,
     11.00, and 11i).  When given the following source:

          #ifdef __STDC__
          /\
          * A comment with backslash-newlines in it.  %{ %} *\
          \
          /
          char str[] = "\\
          " A string with backslash-newlines in it %{ %} \\
          "";
          char apostrophe = '\\
          \
          '\
          ';
          #endif

     the compiler incorrectly fails with the diagnostics
     "Non-terminating comment at end of file" and "Missing `#endif' at
     end of file."  Removing the lines with solitary backslashes solves
     the problem.

Don't compile several files at once if output matters to you
     Some compilers, such as HP's, report names of files being compiled
     when given more than one file operand.  For instance:

          $ cc a.c b.c
          a.c:
          b.c:

     This can cause problems if you observe the output of the compiler
     to detect failures.  Invoking `cc -c a.c && cc -c b.c && cc -o c
     a.o b.o' solves the issue.

Don't rely on `#error' failing
     The IRIX C compiler does not fail when #error is preprocessed; it
     simply emits a diagnostic and continues, exiting successfully.  So,
     instead of an error directive like `#error "Unsupported word size"'
     it is more portable to use an invalid directive like `#Unsupported
     word size' in Autoconf tests.  In ordinary source code, `#error' is
     OK, since installers with inadequate compilers like IRIX can simply
     examine these compilers' diagnostic output.

Don't rely on correct `#line' support
     On Solaris, `c89' (at least Sun C 5.3 through 5.8) diagnoses
     `#line' directives whose line numbers are greater than 32767.
     Nothing in Posix makes this invalid.  That is why Autoconf stopped
     issuing `#line' directives.

 -- Macro: AC_PROG_CC ([COMPILER-SEARCH-LIST])
     Determine a C compiler to use.  If `CC' is not already set in the
     environment, check for `gcc' and `cc', then for other C compilers.
     Set output variable `CC' to the name of the compiler found.

     This macro may, however, be invoked with an optional first argument
     which, if specified, must be a blank-separated list of C compilers
     to search for.  This just gives the user an opportunity to specify
     an alternative search list for the C compiler.  For example, if
     you didn't like the default order, then you could invoke
     `AC_PROG_CC' like this:

          AC_PROG_CC([gcc cl cc])

     If the C compiler does not handle function prototypes correctly by
     default, try to add an option to output variable `CC' to make it
     so.  This macro tries various options that select
     standard-conformance modes on various systems.

     After calling this macro you can check whether the C compiler has
     been set to accept ANSI C89 (ISO C90); if not, the shell variable
     `ac_cv_prog_cc_c89' is set to `no'.  See also `AC_C_PROTOTYPES'
     below.

     If using the GNU C compiler, set shell variable `GCC' to `yes'.
     If output variable `CFLAGS' was not already set, set it to `-g
     -O2' for the GNU C compiler (`-O2' on systems where GCC does not
     accept `-g'), or `-g' for other compilers.  If your package does
     not like this default, then it is acceptable to insert the line `:
     ${CFLAGS=""}' after `AC_INIT' and before `AC_PROG_CC' to select an
     empty default instead.

     Many Autoconf macros use a compiler, and thus call
     `AC_REQUIRE([AC_PROG_CC])' to ensure that the compiler has been
     determined before the body of the outermost `AC_DEFUN' macro.
     Although `AC_PROG_CC' is safe to directly expand multiple times, it
     performs certain checks (such as the proper value of `EXEEXT') only
     on the first invocation.  Therefore, care must be used when
     invoking this macro from within another macro rather than at the
     top level (*note Expanded Before Required::).

 -- Macro: AC_PROG_CC_C_O
     If the C compiler does not accept the `-c' and `-o' options
     simultaneously, define `NO_MINUS_C_MINUS_O'.  This macro actually
     tests both the compiler found by `AC_PROG_CC', and, if different,
     the first `cc' in the path.  The test fails if one fails.  This
     macro was created for GNU Make to choose the default C compilation
     rule.

     For the compiler COMPILER, this macro caches its result in the
     `ac_cv_prog_cc_COMPILER_c_o' variable.

 -- Macro: AC_PROG_CPP
     Set output variable `CPP' to a command that runs the C
     preprocessor.  If `$CC -E' doesn't work, `/lib/cpp' is used.  It
     is only portable to run `CPP' on files with a `.c' extension.

     Some preprocessors don't indicate missing include files by the
     error status.  For such preprocessors an internal variable is set
     that causes other macros to check the standard error from the
     preprocessor and consider the test failed if any warnings have
     been reported.  For most preprocessors, though, warnings do not
     cause include-file tests to fail unless `AC_PROG_CPP_WERROR' is
     also specified.

 -- Macro: AC_PROG_CPP_WERROR
     This acts like `AC_PROG_CPP', except it treats warnings from the
     preprocessor as errors even if the preprocessor exit status
     indicates success.  This is useful for avoiding headers that
     generate mandatory warnings, such as deprecation notices.

   The following macros check for C compiler or machine architecture
features.  To check for characteristics not listed here, use
`AC_COMPILE_IFELSE' (*note Running the Compiler::) or `AC_RUN_IFELSE'
(*note Runtime::).

 -- Macro: AC_PROG_CC_STDC
     If the C compiler cannot compile ISO Standard C (currently C99),
     try to add an option to output variable `CC' to make it work.  If
     the compiler does not support C99, fall back to supporting ANSI
     C89 (ISO C90).

     After calling this macro you can check whether the C compiler has
     been set to accept Standard C; if not, the shell variable
     `ac_cv_prog_cc_stdc' is set to `no'.

 -- Macro: AC_PROG_CC_C89
     If the C compiler is not in ANSI C89 (ISO C90) mode by default,
     try to add an option to output variable `CC' to make it so.  This
     macro tries various options that select ANSI C89 on some system or
     another, preferring extended functionality modes over strict
     conformance modes.  It considers the compiler to be in ANSI C89
     mode if it handles function prototypes correctly.

     After calling this macro you can check whether the C compiler has
     been set to accept ANSI C89; if not, the shell variable
     `ac_cv_prog_cc_c89' is set to `no'.

     This macro is called automatically by `AC_PROG_CC'.

 -- Macro: AC_PROG_CC_C99
     If the C compiler is not in C99 mode by default, try to add an
     option to output variable `CC' to make it so.  This macro tries
     various options that select C99 on some system or another,
     preferring extended functionality modes over strict conformance
     modes.  It considers the compiler to be in C99 mode if it handles
     `_Bool', `//' comments, flexible array members, `inline', signed
     and unsigned `long long int', mixed code and declarations, named
     initialization of structs, `restrict', `va_copy', varargs macros,
     variable declarations in `for' loops, and variable length arrays.

     After calling this macro you can check whether the C compiler has
     been set to accept C99; if not, the shell variable
     `ac_cv_prog_cc_c99' is set to `no'.

 -- Macro: AC_C_BACKSLASH_A
     Define `HAVE_C_BACKSLASH_A' to 1 if the C compiler understands
     `\a'.

     This macro is obsolescent, as current C compilers understand `\a'.
     New programs need not use this macro.

 -- Macro: AC_C_BIGENDIAN ([ACTION-IF-TRUE], [ACTION-IF-FALSE],
          [ACTION-IF-UNKNOWN], [ACTION-IF-UNIVERSAL])
     If words are stored with the most significant byte first (like
     Motorola and SPARC CPUs), execute ACTION-IF-TRUE.  If words are
     stored with the least significant byte first (like Intel and VAX
     CPUs), execute ACTION-IF-FALSE.

     This macro runs a test-case if endianness cannot be determined
     from the system header files.  When cross-compiling, the test-case
     is not run but grep'ed for some magic values.  ACTION-IF-UNKNOWN
     is executed if the latter case fails to determine the byte sex of
     the host system.

     In some cases a single run of a compiler can generate code for
     multiple architectures.  This can happen, for example, when
     generating Mac OS X universal binary files, which work on both
     PowerPC and Intel architectures.  In this case, the different
     variants might be for different architectures whose endiannesses
     differ.  If `configure' detects this, it executes
     ACTION-IF-UNIVERSAL instead of ACTION-IF-UNKNOWN.

     The default for ACTION-IF-TRUE is to define `WORDS_BIGENDIAN'.
     The default for ACTION-IF-FALSE is to do nothing.  The default for
     ACTION-IF-UNKNOWN is to abort configure and tell the installer how
     to bypass this test.  And finally, the default for
     ACTION-IF-UNIVERSAL is to ensure that `WORDS_BIGENDIAN' is defined
     if and only if a universal build is detected and the current code
     is big-endian; this default works only if `autoheader' is used
     (*note autoheader Invocation::).

     If you use this macro without specifying ACTION-IF-UNIVERSAL, you
     should also use `AC_CONFIG_HEADERS'; otherwise `WORDS_BIGENDIAN'
     may be set incorrectly for Mac OS X universal binary files.

 -- Macro: AC_C_CONST
     If the C compiler does not fully support the `const' keyword,
     define `const' to be empty.  Some C compilers that do not define
     `__STDC__' do support `const'; some compilers that define
     `__STDC__' do not completely support `const'.  Programs can simply
     use `const' as if every C compiler supported it; for those that
     don't, the makefile or configuration header file defines it as
     empty.

     Occasionally installers use a C++ compiler to compile C code,
     typically because they lack a C compiler.  This causes problems
     with `const', because C and C++ treat `const' differently.  For
     example:

          const int foo;

     is valid in C but not in C++.  These differences unfortunately
     cannot be papered over by defining `const' to be empty.

     If `autoconf' detects this situation, it leaves `const' alone, as
     this generally yields better results in practice.  However, using a
     C++ compiler to compile C code is not recommended or supported, and
     installers who run into trouble in this area should get a C
     compiler like GCC to compile their C code.

     This macro caches its result in the `ac_cv_c_const' variable.

     This macro is obsolescent, as current C compilers support `const'.
     New programs need not use this macro.

 -- Macro: AC_C_RESTRICT
     If the C compiler recognizes a variant spelling for the `restrict'
     keyword (`__restrict', `__restrict__', or `_Restrict'), then
     define `restrict' to that; this is more likely to do the right
     thing with compilers that support language variants where plain
     `restrict' is not a keyword.  Otherwise, if the C compiler
     recognizes the `restrict' keyword, don't do anything.  Otherwise,
     define `restrict' to be empty.  Thus, programs may simply use
     `restrict' as if every C compiler supported it; for those that do
     not, the makefile or configuration header defines it away.

     Although support in C++ for the `restrict' keyword is not
     required, several C++ compilers do accept the keyword.  This macro
     works for them, too.

     This macro caches `no' in the `ac_cv_c_restrict' variable if
     `restrict' is not supported, and a supported spelling otherwise.

 -- Macro: AC_C_VOLATILE
     If the C compiler does not understand the keyword `volatile',
     define `volatile' to be empty.  Programs can simply use `volatile'
     as if every C compiler supported it; for those that do not, the
     makefile or configuration header defines it as empty.

     If the correctness of your program depends on the semantics of
     `volatile', simply defining it to be empty does, in a sense, break
     your code.  However, given that the compiler does not support
     `volatile', you are at its mercy anyway.  At least your program
     compiles, when it wouldn't before.  *Note Volatile Objects::, for
     more about `volatile'.

     In general, the `volatile' keyword is a standard C feature, so you
     might expect that `volatile' is available only when `__STDC__' is
     defined.  However, Ultrix 4.3's native compiler does support
     volatile, but does not define `__STDC__'.

     This macro is obsolescent, as current C compilers support
     `volatile'.  New programs need not use this macro.

 -- Macro: AC_C_INLINE
     If the C compiler supports the keyword `inline', do nothing.
     Otherwise define `inline' to `__inline__' or `__inline' if it
     accepts one of those, otherwise define `inline' to be empty.

 -- Macro: AC_C_CHAR_UNSIGNED
     If the C type `char' is unsigned, define `__CHAR_UNSIGNED__',
     unless the C compiler predefines it.

     These days, using this macro is not necessary.  The same
     information can be determined by this portable alternative, thus
     avoiding the use of preprocessor macros in the namespace reserved
     for the implementation.

          #include <limits.h>
          #if CHAR_MIN == 0
          # define CHAR_UNSIGNED 1
          #endif

 -- Macro: AC_C_STRINGIZE
     If the C preprocessor supports the stringizing operator, define
     `HAVE_STRINGIZE'.  The stringizing operator is `#' and is found in
     macros such as this:

          #define x(y) #y

     This macro is obsolescent, as current C compilers support the
     stringizing operator.  New programs need not use this macro.

 -- Macro: AC_C_FLEXIBLE_ARRAY_MEMBER
     If the C compiler supports flexible array members, define
     `FLEXIBLE_ARRAY_MEMBER' to nothing; otherwise define it to 1.
     That way, a declaration like this:

          struct s
            {
              size_t n_vals;
              double val[FLEXIBLE_ARRAY_MEMBER];
            };

     will let applications use the "struct hack" even with compilers
     that do not support flexible array members.  To allocate and use
     such an object, you can use code like this:

          size_t i;
          size_t n = compute_value_count ();
          struct s *p =
             malloc (offsetof (struct s, val)
                     + n * sizeof (double));
          p->n_vals = n;
          for (i = 0; i < n; i++)
            p->val[i] = compute_value (i);

 -- Macro: AC_C_VARARRAYS
     If the C compiler supports variable-length arrays, define
     `HAVE_C_VARARRAYS'.  A variable-length array is an array of
     automatic storage duration whose length is determined at run time,
     when the array is declared.

 -- Macro: AC_C_TYPEOF
     If the C compiler supports GCC's `typeof' syntax either directly or
     through a different spelling of the keyword (e.g., `__typeof__'),
     define `HAVE_TYPEOF'.  If the support is available only through a
     different spelling, define `typeof' to that spelling.

 -- Macro: AC_C_PROTOTYPES
     If function prototypes are understood by the compiler (as
     determined by `AC_PROG_CC'), define `PROTOTYPES' and
     `__PROTOTYPES'.  Defining `__PROTOTYPES' is for the benefit of
     header files that cannot use macros that infringe on user name
     space.

     This macro is obsolescent, as current C compilers support
     prototypes.  New programs need not use this macro.

 -- Macro: AC_PROG_GCC_TRADITIONAL
     Add `-traditional' to output variable `CC' if using the GNU C
     compiler and `ioctl' does not work properly without
     `-traditional'.  That usually happens when the fixed header files
     have not been installed on an old system.

     This macro is obsolescent, since current versions of the GNU C
     compiler fix the header files automatically when installed.

==============================================================================
File: autoconf.info,  Node: |C++_Compiler|,  Next: |Objective_C_Compiler|,  Prev: |C_Compiler|,  Up: |Compilers_and_Preprocessors|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *C++_Compiler*

5.10.4 C++ Compiler Characteristics
-----------------------------------

 -- Macro: AC_PROG_CXX ([COMPILER-SEARCH-LIST])
     Determine a C++ compiler to use.  Check whether the environment
     variable `CXX' or `CCC' (in that order) is set; if so, then set
     output variable `CXX' to its value.

     Otherwise, if the macro is invoked without an argument, then
     search for a C++ compiler under the likely names (first `g++' and
     `c++' then other names).  If none of those checks succeed, then as
     a last resort set `CXX' to `g++'.

     This macro may, however, be invoked with an optional first argument
     which, if specified, must be a blank-separated list of C++
     compilers to search for.  This just gives the user an opportunity
     to specify an alternative search list for the C++ compiler.  For
     example, if you didn't like the default order, then you could
     invoke `AC_PROG_CXX' like this:

          AC_PROG_CXX([gcc cl KCC CC cxx cc++ xlC aCC c++ g++])

     If using the GNU C++ compiler, set shell variable `GXX' to `yes'.
     If output variable `CXXFLAGS' was not already set, set it to `-g
     -O2' for the GNU C++ compiler (`-O2' on systems where G++ does not
     accept `-g'), or `-g' for other compilers.  If your package does
     not like this default, then it is acceptable to insert the line `:
     ${CXXFLAGS=""}' after `AC_INIT' and before `AC_PROG_CXX' to select
     an empty default instead.


 -- Macro: AC_PROG_CXXCPP
     Set output variable `CXXCPP' to a command that runs the C++
     preprocessor.  If `$CXX -E' doesn't work, `/lib/cpp' is used.  It
     is portable to run `CXXCPP' only on files with a `.c', `.C',
     `.cc', or `.cpp' extension.

     Some preprocessors don't indicate missing include files by the
     error status.  For such preprocessors an internal variable is set
     that causes other macros to check the standard error from the
     preprocessor and consider the test failed if any warnings have
     been reported.  However, it is not known whether such broken
     preprocessors exist for C++.

 -- Macro: AC_PROG_CXX_C_O
     Test whether the C++ compiler accepts the options `-c' and `-o'
     simultaneously, and define `CXX_NO_MINUS_C_MINUS_O', if it does
     not.

==============================================================================
File: autoconf.info,  Node: |Objective_C_Compiler|,  Next: |Objective_C++_Compiler|,  Prev: |C++_Compiler|,  Up: |Compilers_and_Preprocessors|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Objective_C_Compiler*

5.10.5 Objective C Compiler Characteristics
-------------------------------------------

 -- Macro: AC_PROG_OBJC ([COMPILER-SEARCH-LIST])
     Determine an Objective C compiler to use.  If `OBJC' is not already
     set in the environment, check for Objective C compilers.  Set
     output variable `OBJC' to the name of the compiler found.

     This macro may, however, be invoked with an optional first argument
     which, if specified, must be a blank-separated list of Objective C
     compilers to search for.  This just gives the user an opportunity
     to specify an alternative search list for the Objective C
     compiler.  For example, if you didn't like the default order, then
     you could invoke `AC_PROG_OBJC' like this:

          AC_PROG_OBJC([gcc objcc objc])

     If using the GNU Objective C compiler, set shell variable `GOBJC'
     to `yes'.  If output variable `OBJCFLAGS' was not already set, set
     it to `-g -O2' for the GNU Objective C compiler (`-O2' on systems
     where `gcc' does not accept `-g'), or `-g' for other compilers.

 -- Macro: AC_PROG_OBJCPP
     Set output variable `OBJCPP' to a command that runs the Objective C
     preprocessor.  If `$OBJC -E' doesn't work, `/lib/cpp' is used.

==============================================================================
File: autoconf.info,  Node: |Objective_C++_Compiler|,  Next: |Erlang_Compiler_and_Interpreter|,  Prev: |Objective_C_Compiler|,  Up: |Compilers_and_Preprocessors|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *Objective_C++_Compiler*

5.10.6 Objective C++ Compiler Characteristics
---------------------------------------------

 -- Macro: AC_PROG_OBJCXX ([COMPILER-SEARCH-LIST])
     Determine an Objective C++ compiler to use.  If `OBJCXX' is not
     already set in the environment, check for Objective C++ compilers.
     Set output variable `OBJCXX' to the name of the compiler found.

     This macro may, however, be invoked with an optional first argument
     which, if specified, must be a blank-separated list of Objective
     C++ compilers to search for.  This just gives the user an
     opportunity to specify an alternative search list for the
     Objective C++ compiler.  For example, if you didn't like the
     default order, then you could invoke `AC_PROG_OBJCXX' like this:

          AC_PROG_OBJCXX([gcc g++ objcc++ objcxx])

     If using the GNU Objective C++ compiler, set shell variable
     `GOBJCXX' to `yes'.  If output variable `OBJCXXFLAGS' was not
     already set, set it to `-g -O2' for the GNU Objective C++ compiler
     (`-O2' on systems where `gcc' does not accept `-g'), or `-g' for
     other compilers.

 -- Macro: AC_PROG_OBJCXXCPP
     Set output variable `OBJCXXCPP' to a command that runs the
     Objective C++ preprocessor.  If `$OBJCXX -E' doesn't work,
     `/lib/cpp' is used.

==============================================================================
File: autoconf.info,  Node: |Erlang_Compiler_and_Interpreter|,  Next: |Fortran_Compiler|,  Prev: |Objective_C++_Compiler|,  Up: |Compilers_and_Preprocessors|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *Erlang_Compiler_and_Interpreter*

5.10.7 Erlang Compiler and Interpreter Characteristics
------------------------------------------------------

Autoconf defines the following macros for determining paths to the
essential Erlang/OTP programs:

 -- Macro: AC_ERLANG_PATH_ERLC ([VALUE-IF-NOT-FOUND], [PATH = `$PATH'])
     Determine an Erlang compiler to use.  If `ERLC' is not already set
     in the environment, check for `erlc'.  Set output variable `ERLC'
     to the complete path of the compiler command found.  In addition,
     if `ERLCFLAGS' is not set in the environment, set it to an empty
     value.

     The two optional arguments have the same meaning as the two last
     arguments of macro `AC_PATH_PROG' for looking for the `erlc'
     program.  For example, to look for `erlc' only in the
     `/usr/lib/erlang/bin' directory:

          AC_ERLANG_PATH_ERLC([not found], [/usr/lib/erlang/bin])

 -- Macro: AC_ERLANG_NEED_ERLC ([PATH = `$PATH'])
     A simplified variant of the `AC_ERLANG_PATH_ERLC' macro, that
     prints an error message and exits the `configure' script if the
     `erlc' program is not found.

 -- Macro: AC_ERLANG_PATH_ERL ([VALUE-IF-NOT-FOUND], [PATH = `$PATH'])
     Determine an Erlang interpreter to use.  If `ERL' is not already
     set in the environment, check for `erl'.  Set output variable
     `ERL' to the complete path of the interpreter command found.

     The two optional arguments have the same meaning as the two last
     arguments of macro `AC_PATH_PROG' for looking for the `erl'
     program.  For example, to look for `erl' only in the
     `/usr/lib/erlang/bin' directory:

          AC_ERLANG_PATH_ERL([not found], [/usr/lib/erlang/bin])

 -- Macro: AC_ERLANG_NEED_ERL ([PATH = `$PATH'])
     A simplified variant of the `AC_ERLANG_PATH_ERL' macro, that
     prints an error message and exits the `configure' script if the
     `erl' program is not found.

==============================================================================
File: autoconf.info,  Node: |Fortran_Compiler|,  Next: |Go_Compiler|,  Prev: |Erlang_Compiler_and_Interpreter|,  Up: |Compilers_and_Preprocessors|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Fortran_Compiler*

5.10.8 Fortran Compiler Characteristics
---------------------------------------

The Autoconf Fortran support is divided into two categories: legacy
Fortran 77 macros (`F77'), and modern Fortran macros (`FC').  The
former are intended for traditional Fortran 77 code, and have output
variables like `F77', `FFLAGS', and `FLIBS'.  The latter are for newer
programs that can (or must) compile under the newer Fortran standards,
and have output variables like `FC', `FCFLAGS', and `FCLIBS'.

   Except for the macros `AC_FC_SRCEXT', `AC_FC_FREEFORM',
`AC_FC_FIXEDFORM', and `AC_FC_LINE_LENGTH' (see below), the `FC' and
`F77' macros behave almost identically, and so they are documented
together in this section.

 -- Macro: AC_PROG_F77 ([COMPILER-SEARCH-LIST])
     Determine a Fortran 77 compiler to use.  If `F77' is not already
     set in the environment, then check for `g77' and `f77', and then
     some other names.  Set the output variable `F77' to the name of
     the compiler found.

     This macro may, however, be invoked with an optional first argument
     which, if specified, must be a blank-separated list of Fortran 77
     compilers to search for.  This just gives the user an opportunity
     to specify an alternative search list for the Fortran 77 compiler.
     For example, if you didn't like the default order, then you could
     invoke `AC_PROG_F77' like this:

          AC_PROG_F77([fl32 f77 fort77 xlf g77 f90 xlf90])

     If using `g77' (the GNU Fortran 77 compiler), then set the shell
     variable `G77' to `yes'.  If the output variable `FFLAGS' was not
     already set in the environment, then set it to `-g -02' for `g77'
     (or `-O2' where `g77' does not accept `-g').  Otherwise, set
     `FFLAGS' to `-g' for all other Fortran 77 compilers.

     The result of the GNU test is cached in the
     `ac_cv_f77_compiler_gnu' variable, acceptance of `-g' in the
     `ac_cv_prog_f77_g' variable.

 -- Macro: AC_PROG_FC ([COMPILER-SEARCH-LIST], [DIALECT])
     Determine a Fortran compiler to use.  If `FC' is not already set in
     the environment, then `dialect' is a hint to indicate what Fortran
     dialect to search for; the default is to search for the newest
     available dialect.  Set the output variable `FC' to the name of
     the compiler found.

     By default, newer dialects are preferred over older dialects, but
     if `dialect' is specified then older dialects are preferred
     starting with the specified dialect.  `dialect' can currently be
     one of Fortran 77, Fortran 90, or Fortran 95.  However, this is
     only a hint of which compiler _name_ to prefer (e.g., `f90' or
     `f95'), and no attempt is made to guarantee that a particular
     language standard is actually supported.  Thus, it is preferable
     that you avoid the `dialect' option, and use AC_PROG_FC only for
     code compatible with the latest Fortran standard.

     This macro may, alternatively, be invoked with an optional first
     argument which, if specified, must be a blank-separated list of
     Fortran compilers to search for, just as in `AC_PROG_F77'.

     If using `gfortran' or `g77' (the GNU Fortran compilers), then set
     the shell variable `GFC' to `yes'.  If the output variable
     `FCFLAGS' was not already set in the environment, then set it to
     `-g -02' for GNU `g77' (or `-O2' where `g77' does not accept
     `-g').  Otherwise, set `FCFLAGS' to `-g' for all other Fortran
     compilers.

     The result of the GNU test is cached in the `ac_cv_fc_compiler_gnu'
     variable, acceptance of `-g' in the `ac_cv_prog_fc_g' variable.

 -- Macro: AC_PROG_F77_C_O
 -- Macro: AC_PROG_FC_C_O
     Test whether the Fortran compiler accepts the options `-c' and
     `-o' simultaneously, and define `F77_NO_MINUS_C_MINUS_O' or
     `FC_NO_MINUS_C_MINUS_O', respectively, if it does not.

     The result of the test is cached in the `ac_cv_prog_f77_c_o' or
     `ac_cv_prog_fc_c_o' variable, respectively.

   The following macros check for Fortran compiler characteristics.  To
check for characteristics not listed here, use `AC_COMPILE_IFELSE'
(*note Running the Compiler::) or `AC_RUN_IFELSE' (*note Runtime::),
making sure to first set the current language to Fortran 77 or Fortran
via `AC_LANG([Fortran 77])' or `AC_LANG(Fortran)' (*note Language
Choice::).

 -- Macro: AC_F77_LIBRARY_LDFLAGS
 -- Macro: AC_FC_LIBRARY_LDFLAGS
     Determine the linker flags (e.g., `-L' and `-l') for the "Fortran
     intrinsic and runtime libraries" that are required to successfully
     link a Fortran program or shared library.  The output variable
     `FLIBS' or `FCLIBS' is set to these flags (which should be
     included after `LIBS' when linking).

     This macro is intended to be used in those situations when it is
     necessary to mix, e.g., C++ and Fortran source code in a single
     program or shared library (*note Mixing Fortran 77 With C and C++:
     (automake)Mixing Fortran 77 With C and C++.).

     For example, if object files from a C++ and Fortran compiler must
     be linked together, then the C++ compiler/linker must be used for
     linking (since special C++-ish things need to happen at link time
     like calling global constructors, instantiating templates,
     enabling exception support, etc.).

     However, the Fortran intrinsic and runtime libraries must be
     linked in as well, but the C++ compiler/linker doesn't know by
     default how to add these Fortran 77 libraries.  Hence, this macro
     was created to determine these Fortran libraries.

     The macros `AC_F77_DUMMY_MAIN' and `AC_FC_DUMMY_MAIN' or
     `AC_F77_MAIN' and `AC_FC_MAIN' are probably also necessary to link
     C/C++ with Fortran; see below.  Further, it is highly recommended
     that you use `AC_CONFIG_HEADERS' (*note Configuration Headers::)
     because the complex defines that the function wrapper macros create
     may not work with C/C++ compiler drivers.

     These macros internally compute the flag needed to verbose linking
     output and cache it in `ac_cv_prog_f77_v' or `ac_cv_prog_fc_v'
     variables, respectively.  The computed linker flags are cached in
     `ac_cv_f77_libs' or `ac_cv_fc_libs', respectively.

 -- Macro: AC_F77_DUMMY_MAIN ([ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND =
          `AC_MSG_FAILURE'])
 -- Macro: AC_FC_DUMMY_MAIN ([ACTION-IF-FOUND], [ACTION-IF-NOT-FOUND =
          `AC_MSG_FAILURE'])
     With many compilers, the Fortran libraries detected by
     `AC_F77_LIBRARY_LDFLAGS' or `AC_FC_LIBRARY_LDFLAGS' provide their
     own `main' entry function that initializes things like Fortran
     I/O, and which then calls a user-provided entry function named
     (say) `MAIN__' to run the user's program.  The `AC_F77_DUMMY_MAIN'
     and `AC_FC_DUMMY_MAIN' or `AC_F77_MAIN' and `AC_FC_MAIN' macros
     figure out how to deal with this interaction.

     When using Fortran for purely numerical functions (no I/O, etc.)
     often one prefers to provide one's own `main' and skip the Fortran
     library initializations.  In this case, however, one may still
     need to provide a dummy `MAIN__' routine in order to prevent
     linking errors on some systems.  `AC_F77_DUMMY_MAIN' or
     `AC_FC_DUMMY_MAIN' detects whether any such routine is _required_
     for linking, and what its name is; the shell variable
     `F77_DUMMY_MAIN' or `FC_DUMMY_MAIN' holds this name, `unknown'
     when no solution was found, and `none' when no such dummy main is
     needed.

     By default, ACTION-IF-FOUND defines `F77_DUMMY_MAIN' or
     `FC_DUMMY_MAIN' to the name of this routine (e.g., `MAIN__') _if_
     it is required.  ACTION-IF-NOT-FOUND defaults to exiting with an
     error.

     In order to link with Fortran routines, the user's C/C++ program
     should then include the following code to define the dummy main if
     it is needed:

          #ifdef F77_DUMMY_MAIN
          #  ifdef __cplusplus
               extern "C"
          #  endif
             int F77_DUMMY_MAIN () { return 1; }
          #endif

     (Replace `F77' with `FC' for Fortran instead of Fortran 77.)

     Note that this macro is called automatically from `AC_F77_WRAPPERS'
     or `AC_FC_WRAPPERS'; there is generally no need to call it
     explicitly unless one wants to change the default actions.

     The result of this macro is cached in the `ac_cv_f77_dummy_main' or
     `ac_cv_fc_dummy_main' variable, respectively.

 -- Macro: AC_F77_MAIN
 -- Macro: AC_FC_MAIN
     As discussed above, many Fortran libraries allow you to provide an
     entry point called (say) `MAIN__' instead of the usual `main',
     which is then called by a `main' function in the Fortran libraries
     that initializes things like Fortran I/O.  The `AC_F77_MAIN' and
     `AC_FC_MAIN' macros detect whether it is _possible_ to utilize
     such an alternate main function, and defines `F77_MAIN' and
     `FC_MAIN' to the name of the function.  (If no alternate main
     function name is found, `F77_MAIN' and `FC_MAIN' are simply
     defined to `main'.)

     Thus, when calling Fortran routines from C that perform things
     like I/O, one should use this macro and declare the "main"
     function like so:

          #ifdef __cplusplus
            extern "C"
          #endif
          int F77_MAIN (int argc, char *argv[]);

     (Again, replace `F77' with `FC' for Fortran instead of Fortran 77.)

     The result of this macro is cached in the `ac_cv_f77_main' or
     `ac_cv_fc_main' variable, respectively.

 -- Macro: AC_F77_WRAPPERS
 -- Macro: AC_FC_WRAPPERS
     Defines C macros `F77_FUNC (name, NAME)', `FC_FUNC (name, NAME)',
     `F77_FUNC_(name, NAME)', and `FC_FUNC_(name, NAME)' to properly
     mangle the names of C/C++ identifiers, and identifiers with
     underscores, respectively, so that they match the name-mangling
     scheme used by the Fortran compiler.

     Fortran is case-insensitive, and in order to achieve this the
     Fortran compiler converts all identifiers into a canonical case
     and format.  To call a Fortran subroutine from C or to write a C
     function that is callable from Fortran, the C program must
     explicitly use identifiers in the format expected by the Fortran
     compiler.  In order to do this, one simply wraps all C identifiers
     in one of the macros provided by `AC_F77_WRAPPERS' or
     `AC_FC_WRAPPERS'.  For example, suppose you have the following
     Fortran 77 subroutine:

                subroutine foobar (x, y)
                double precision x, y
                y = 3.14159 * x
                return
                end

     You would then declare its prototype in C or C++ as:

          #define FOOBAR_F77 F77_FUNC (foobar, FOOBAR)
          #ifdef __cplusplus
          extern "C"  /* prevent C++ name mangling */
          #endif
          void FOOBAR_F77 (double *x, double *y);

     Note that we pass both the lowercase and uppercase versions of the
     function name to `F77_FUNC' so that it can select the right one.
     Note also that all parameters to Fortran 77 routines are passed as
     pointers (*note Mixing Fortran 77 With C and C++: (automake)Mixing
     Fortran 77 With C and C++.).

     (Replace `F77' with `FC' for Fortran instead of Fortran 77.)

     Although Autoconf tries to be intelligent about detecting the
     name-mangling scheme of the Fortran compiler, there may be Fortran
     compilers that it doesn't support yet.  In this case, the above
     code generates a compile-time error, but some other behavior
     (e.g., disabling Fortran-related features) can be induced by
     checking whether `F77_FUNC' or `FC_FUNC' is defined.

     Now, to call that routine from a C program, we would do something
     like:

          {
              double x = 2.7183, y;
              FOOBAR_F77 (&x, &y);
          }

     If the Fortran identifier contains an underscore (e.g., `foo_bar'),
     you should use `F77_FUNC_' or `FC_FUNC_' instead of `F77_FUNC' or
     `FC_FUNC' (with the same arguments).  This is because some Fortran
     compilers mangle names differently if they contain an underscore.

     The name mangling scheme is encoded in the `ac_cv_f77_mangling' or
     `ac_cv_fc_mangling' cache variable, respectively, and also used for
     the `AC_F77_FUNC' and `AC_FC_FUNC' macros described below.

 -- Macro: AC_F77_FUNC (NAME, [SHELLVAR])
 -- Macro: AC_FC_FUNC (NAME, [SHELLVAR])
     Given an identifier NAME, set the shell variable SHELLVAR to hold
     the mangled version NAME according to the rules of the Fortran
     linker (see also `AC_F77_WRAPPERS' or `AC_FC_WRAPPERS').  SHELLVAR
     is optional; if it is not supplied, the shell variable is simply
     NAME.  The purpose of this macro is to give the caller a way to
     access the name-mangling information other than through the C
     preprocessor as above, for example, to call Fortran routines from
     some language other than C/C++.

 -- Macro: AC_FC_SRCEXT (EXT, [ACTION-IF-SUCCESS], [ACTION-IF-FAILURE =
          `AC_MSG_FAILURE'])
 -- Macro: AC_FC_PP_SRCEXT (EXT, [ACTION-IF-SUCCESS],
          [ACTION-IF-FAILURE = `AC_MSG_FAILURE'])
     By default, the `FC' macros perform their tests using a `.f'
     extension for source-code files.  Some compilers, however, only
     enable newer language features for appropriately named files,
     e.g., Fortran 90 features only for `.f90' files, or preprocessing
     only with `.F' files or maybe other upper-case extensions.  On the
     other hand, some other compilers expect all source files to end in
     `.f' and require special flags to support other file name
     extensions.  The `AC_FC_SRCEXT' and `AC_FC_PP_SRCEXT' macros deal
     with these issues.

     The `AC_FC_SRCEXT' macro tries to get the `FC' compiler to accept
     files ending with the extension `.EXT' (i.e., EXT does _not_
     contain the dot).  If any special compiler flags are needed for
     this, it stores them in the output variable `FCFLAGS_EXT'.  This
     extension and these flags are then used for all subsequent `FC'
     tests (until `AC_FC_SRCEXT' or `AC_FC_PP_SRCEXT' is called another
     time).

     For example, you would use `AC_FC_SRCEXT(f90)' to employ the
     `.f90' extension in future tests, and it would set the
     `FCFLAGS_f90' output variable with any extra flags that are needed
     to compile such files.

     Similarly, the `AC_FC_PP_SRCEXT' macro tries to get the `FC'
     compiler to preprocess and compile files with the extension
     `.EXT'.  When both `fpp' and `cpp' style preprocessing are
     provided, the former is preferred, as the latter may treat
     continuation lines, `//' tokens, and white space differently from
     what some Fortran dialects expect.  Conversely, if you do not want
     files to be preprocessed, use only lower-case characters in the
     file name extension.  Like with `AC_FC_SRCEXT(f90)', any needed
     flags are stored in the `FCFLAGS_EXT' variable.

     The `FCFLAGS_EXT' flags can _not_ be simply absorbed into
     `FCFLAGS', for two reasons based on the limitations of some
     compilers.  First, only one `FCFLAGS_EXT' can be used at a time,
     so files with different extensions must be compiled separately.
     Second, `FCFLAGS_EXT' must appear _immediately_ before the
     source-code file name when compiling.  So, continuing the example
     above, you might compile a `foo.f90' file in your makefile with the
     command:

          foo.o: foo.f90
                 $(FC) -c $(FCFLAGS) $(FCFLAGS_f90) '$(srcdir)/foo.f90'

     If `AC_FC_SRCEXT' or `AC_FC_PP_SRCEXT' succeeds in compiling files
     with the EXT extension, it calls ACTION-IF-SUCCESS (defaults to
     nothing).  If it fails, and cannot find a way to make the `FC'
     compiler accept such files, it calls ACTION-IF-FAILURE (defaults
     to exiting with an error message).

     The `AC_FC_SRCEXT' and `AC_FC_PP_SRCEXT' macros cache their
     results in `ac_cv_fc_srcext_EXT' and `ac_cv_fc_pp_srcext_EXT'
     variables, respectively.

 -- Macro: AC_FC_PP_DEFINE ([ACTION-IF-SUCCESS], [ACTION-IF-FAILURE =
          `AC_MSG_FAILURE'])
     Find a flag to specify defines for preprocessed Fortran.  Not all
     Fortran compilers use `-D'.  Substitute `FC_DEFINE' with the
     result and call ACTION-IF-SUCCESS (defaults to nothing) if
     successful, and ACTION-IF-FAILURE (defaults to failing with an
     error message) if not.

     This macro calls `AC_FC_PP_SRCEXT([F])' in order to learn how to
     preprocess a `conftest.F' file, but restores a previously used
     Fortran source file extension afterwards again.

     The result of this test is cached in the `ac_cv_fc_pp_define'
     variable.

 -- Macro: AC_FC_FREEFORM ([ACTION-IF-SUCCESS], [ACTION-IF-FAILURE =
          `AC_MSG_FAILURE'])
     Try to ensure that the Fortran compiler (`$FC') allows free-format
     source code (as opposed to the older fixed-format style from
     Fortran 77).  If necessary, it may add some additional flags to
     `FCFLAGS'.

     This macro is most important if you are using the default `.f'
     extension, since many compilers interpret this extension as
     indicating fixed-format source unless an additional flag is
     supplied.  If you specify a different extension with
     `AC_FC_SRCEXT', such as `.f90', then `AC_FC_FREEFORM' ordinarily
     succeeds without modifying `FCFLAGS'.  For extensions which the
     compiler does not know about, the flag set by the `AC_FC_SRCEXT'
     macro might let the compiler assume Fortran 77 by default, however.

     If `AC_FC_FREEFORM' succeeds in compiling free-form source, it
     calls ACTION-IF-SUCCESS (defaults to nothing).  If it fails, it
     calls ACTION-IF-FAILURE (defaults to exiting with an error
     message).

     The result of this test, or `none' or `unknown', is cached in the
     `ac_cv_fc_freeform' variable.

 -- Macro: AC_FC_FIXEDFORM ([ACTION-IF-SUCCESS], [ACTION-IF-FAILURE =
          `AC_MSG_FAILURE'])
     Try to ensure that the Fortran compiler (`$FC') allows the old
     fixed-format source code (as opposed to free-format style).  If
     necessary, it may add some additional flags to `FCFLAGS'.

     This macro is needed for some compilers alias names like `xlf95'
     which assume free-form source code by default, and in case you
     want to use fixed-form source with an extension like `.f90' which
     many compilers interpret as free-form by default.  If you specify
     a different extension with `AC_FC_SRCEXT', such as `.f', then
     `AC_FC_FIXEDFORM' ordinarily succeeds without modifying `FCFLAGS'.

     If `AC_FC_FIXEDFORM' succeeds in compiling fixed-form source, it
     calls ACTION-IF-SUCCESS (defaults to nothing).  If it fails, it
     calls ACTION-IF-FAILURE (defaults to exiting with an error
     message).

     The result of this test, or `none' or `unknown', is cached in the
     `ac_cv_fc_fixedform' variable.

 -- Macro: AC_FC_LINE_LENGTH ([LENGTH], [ACTION-IF-SUCCESS],
          [ACTION-IF-FAILURE = `AC_MSG_FAILURE'])
     Try to ensure that the Fortran compiler (`$FC') accepts long source
     code lines.  The LENGTH argument may be given as 80, 132, or
     unlimited, and defaults to 132.  Note that line lengths above 254
     columns are not portable, and some compilers do not accept more
     than 132 columns at least for fixed format source.  If necessary,
     it may add some additional flags to `FCFLAGS'.

     If `AC_FC_LINE_LENGTH' succeeds in compiling fixed-form source, it
     calls ACTION-IF-SUCCESS (defaults to nothing).  If it fails, it
     calls ACTION-IF-FAILURE (defaults to exiting with an error
     message).

     The result of this test, or `none' or `unknown', is cached in the
     `ac_cv_fc_line_length' variable.

 -- Macro: AC_FC_CHECK_BOUNDS ([ACTION-IF-SUCCESS], [ACTION-IF-FAILURE
          = `AC_MSG_FAILURE'])
     The `AC_FC_CHECK_BOUNDS' macro tries to enable array bounds
     checking in the Fortran compiler.  If successful, the
     ACTION-IF-SUCCESS is called and any needed flags are added to
     `FCFLAGS'.  Otherwise, ACTION-IF-FAILURE is called, which defaults
     to failing with an error message.  The macro currently requires
     Fortran 90 or a newer dialect.

     The result of the macro is cached in the `ac_cv_fc_check_bounds'
     variable.

 -- Macro: AC_F77_IMPLICIT_NONE ([ACTION-IF-SUCCESS],
          [ACTION-IF-FAILURE = `AC_MSG_FAILURE'])
 -- Macro: AC_FC_IMPLICIT_NONE ([ACTION-IF-SUCCESS], [ACTION-IF-FAILURE
          = `AC_MSG_FAILURE'])
     Try to disallow implicit declarations in the Fortran compiler.  If
     successful, ACTION-IF-SUCCESS is called and any needed flags are
     added to `FFLAGS' or `FCFLAGS', respectively.  Otherwise,
     ACTION-IF-FAILURE is called, which defaults to failing with an
     error message.

     The result of these macros are cached in the
     `ac_cv_f77_implicit_none' and `ac_cv_fc_implicit_none' variables,
     respectively.

 -- Macro: AC_FC_MODULE_EXTENSION
     Find the Fortran 90 module file name extension.  Most Fortran 90
     compilers store module information in files separate from the
     object files.  The module files are usually named after the name
     of the module rather than the source file name, with characters
     possibly turned to upper case, plus an extension, often `.mod'.

     Not all compilers use module files at all, or by default.  The Cray
     Fortran compiler requires `-e m' in order to store and search
     module information in `.mod' files rather than in object files.
     Likewise, the Fujitsu Fortran compilers uses the `-Am' option to
     indicate how module information is stored.

     The `AC_FC_MODULE_EXTENSION' macro computes the module extension
     without the leading dot, and stores that in the `FC_MODEXT'
     variable.  If the compiler does not produce module files, or the
     extension cannot be determined, `FC_MODEXT' is empty.  Typically,
     the result of this macro may be used in cleanup `make' rules as
     follows:

          clean-modules:
                  -test -z "$(FC_MODEXT)" || rm -f *.$(FC_MODEXT)

     The extension, or `unknown', is cached in the
     `ac_cv_fc_module_ext' variable.

 -- Macro: AC_FC_MODULE_FLAG ([ACTION-IF-SUCCESS], [ACTION-IF-FAILURE =
          `AC_MSG_FAILURE'])
     Find the compiler flag to include Fortran 90 module information
     from another directory, and store that in the `FC_MODINC' variable.
     Call ACTION-IF-SUCCESS (defaults to nothing) if successful, and
     set `FC_MODINC' to empty and call ACTION-IF-FAILURE (defaults to
     exiting with an error message) if not.

     Most Fortran 90 compilers provide a way to specify module
     directories.  Some have separate flags for the directory to write
     module files to, and directories to search them in, whereas others
     only allow writing to the current directory or to the first
     directory specified in the include path.  Further, with some
     compilers, the module search path and the preprocessor search path
     can only be modified with the same flag.  Thus, for portability,
     write module files to the current directory only and list that as
     first directory in the search path.

     There may be no whitespace between `FC_MODINC' and the following
     directory name, but `FC_MODINC' may contain trailing white space.
     For example, if you use Automake and would like to search `../lib'
     for module files, you can use the following:

          AM_FCFLAGS = $(FC_MODINC). $(FC_MODINC)../lib

     Inside `configure' tests, you can use:

          if test -n "$FC_MODINC"; then
            FCFLAGS="$FCFLAGS $FC_MODINC. $FC_MODINC../lib"
          fi

     The flag is cached in the `ac_cv_fc_module_flag' variable.  The
     substituted value of `FC_MODINC' may refer to the `ac_empty' dummy
     placeholder empty variable, to avoid losing the significant
     trailing whitespace in a `Makefile'.

 -- Macro: AC_FC_MODULE_OUTPUT_FLAG ([ACTION-IF-SUCCESS],
          [ACTION-IF-FAILURE = `AC_MSG_FAILURE'])
     Find the compiler flag to write Fortran 90 module information to
     another directory, and store that in the `FC_MODOUT' variable.
     Call ACTION-IF-SUCCESS (defaults to nothing) if successful, and
     set `FC_MODOUT' to empty and call ACTION-IF-FAILURE (defaults to
     exiting with an error message) if not.

     Not all Fortran 90 compilers write module files, and of those that
     do, not all allow writing to a directory other than the current
     one, nor do all have separate flags for writing and reading; see
     the description of `AC_FC_MODULE_FLAG' above.  If you need to be
     able to write to another directory, for maximum portability use
     `FC_MODOUT' before any `FC_MODINC' and include both the current
     directory and the one you write to in the search path:

          AM_FCFLAGS = $(FC_MODOUT)../mod $(FC_MODINC)../mod $(FC_MODINC). ...

     The flag is cached in the `ac_cv_fc_module_output_flag' variable.
     The substituted value of `FC_MODOUT' may refer to the `ac_empty'
     dummy placeholder empty variable, to avoid losing the significant
     trailing whitespace in a `Makefile'.

==============================================================================
File: autoconf.info,  Node: |Go_Compiler|,  Prev: |Fortran_Compiler|,  Up: |Compilers_and_Preprocessors|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Go_Compiler*

5.10.9 Go Compiler Characteristics
----------------------------------

Autoconf provides basic support for the Go programming language when
using the `gccgo' compiler (there is currently no support for the `6g'
and `8g' compilers).

 -- Macro: AC_PROG_GO ([COMPILER-SEARCH-LIST])
     Find the Go compiler to use.  Check whether the environment
     variable `GOC' is set; if so, then set output variable `GOC' to its
     value.

     Otherwise, if the macro is invoked without an argument, then
     search for a Go compiler named `gccgo'.  If it is not found, then
     as a last resort set `GOC' to `gccgo'.

     This macro may be invoked with an optional first argument which, if
     specified, must be a blank-separated list of Go compilers to
     search for.

     If output variable `GOFLAGS' was not already set, set it to `-g
     -O2'.  If your package does not like this default, `GOFLAGS' may
     be set before `AC_PROG_GO'.

==============================================================================
File: autoconf.info,  Node: |System_Services|,  Next: |Posix_Variants|,  Prev: |Compilers_and_Preprocessors|,  Up: |Existing_Tests|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *System_Services*

5.11 System Services
=====---------------

The following macros check for operating system services or
capabilities.

 -- Macro: AC_PATH_X
     Try to locate the X Window System include files and libraries.  If
     the user gave the command line options `--x-includes=DIR' and
     `--x-libraries=DIR', use those directories.

     If either or both were not given, get the missing values by running
     `xmkmf' (or an executable pointed to by the `XMKMF' environment
     variable) on a trivial `Imakefile' and examining the makefile that
     it produces.  Setting `XMKMF' to `false' disables this method.

     If this method fails to find the X Window System, `configure'
     looks for the files in several directories where they often reside.
     If either method is successful, set the shell variables
     `x_includes' and `x_libraries' to their locations, unless they are
     in directories the compiler searches by default.

     If both methods fail, or the user gave the command line option
     `--without-x', set the shell variable `no_x' to `yes'; otherwise
     set it to the empty string.

 -- Macro: AC_PATH_XTRA
     An enhanced version of `AC_PATH_X'.  It adds the C compiler flags
     that X needs to output variable `X_CFLAGS', and the X linker flags
     to `X_LIBS'.  Define `X_DISPLAY_MISSING' if X is not available.

     This macro also checks for special libraries that some systems
     need in order to compile X programs.  It adds any that the system
     needs to output variable `X_EXTRA_LIBS'.  And it checks for
     special X11R6 libraries that need to be linked with before
     `-lX11', and adds any found to the output variable `X_PRE_LIBS'.


 -- Macro: AC_SYS_INTERPRETER
     Check whether the system supports starting scripts with a line of
     the form `#!/bin/sh' to select the interpreter to use for the
     script.  After running this macro, shell code in `configure.ac'
     can check the shell variable `interpval'; it is set to `yes' if
     the system supports `#!', `no' if not.

 -- Macro: AC_SYS_LARGEFILE
     Arrange for 64-bit file offsets, known as large-file support
     (http://www.unix-systems.org/version2/whatsnew/lfs20mar.html).  On
     some hosts, one must use special compiler options to build
     programs that can access large files.  Append any such options to
     the output variable `CC'.  Define `_FILE_OFFSET_BITS' and
     `_LARGE_FILES' if necessary.

     Large-file support can be disabled by configuring with the
     `--disable-largefile' option.

     If you use this macro, check that your program works even when
     `off_t' is wider than `long int', since this is common when
     large-file support is enabled.  For example, it is not correct to
     print an arbitrary `off_t' value `X' with `printf ("%ld", (long
     int) X)'.

     The LFS introduced the `fseeko' and `ftello' functions to replace
     their C counterparts `fseek' and `ftell' that do not use `off_t'.
     Take care to use `AC_FUNC_FSEEKO' to make their prototypes
     available when using them and large-file support is enabled.

 -- Macro: AC_SYS_LONG_FILE_NAMES
     If the system supports file names longer than 14 characters, define
     `HAVE_LONG_FILE_NAMES'.

 -- Macro: AC_SYS_POSIX_TERMIOS
     Check to see if the Posix termios headers and functions are
     available on the system.  If so, set the shell variable
     `ac_cv_sys_posix_termios' to `yes'.  If not, set the variable to
     `no'.

==============================================================================
File: autoconf.info,  Node: |Posix_Variants|,  Next: |Erlang_Libraries|,  Prev: |System_Services|,  Up: |Existing_Tests|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Posix_Variants*

5.12 Posix Variants
=====--------------

The following macro makes it possible to use features of Posix that are
extensions to C, as well as platform extensions not defined by Posix.

 -- Macro: AC_USE_SYSTEM_EXTENSIONS
     This macro was introduced in Autoconf 2.60.  If possible, enable
     extensions to C or Posix on hosts that normally disable the
     extensions, typically due to standards-conformance namespace
     issues.  This should be called before any macros that run the C
     compiler.  The following preprocessor macros are defined where
     appropriate:

    `_GNU_SOURCE'
          Enable extensions on GNU/Linux.

    `__EXTENSIONS__'
          Enable general extensions on Solaris.

    `_POSIX_PTHREAD_SEMANTICS'
          Enable threading extensions on Solaris.

    `_TANDEM_SOURCE'
          Enable extensions for the HP NonStop platform.

    `_ALL_SOURCE'
          Enable extensions for AIX 3, and for Interix.

    `_POSIX_SOURCE'
          Enable Posix functions for Minix.

    `_POSIX_1_SOURCE'
          Enable additional Posix functions for Minix.

    `_MINIX'
          Identify Minix platform.  This particular preprocessor macro
          is obsolescent, and may be removed in a future release of
          Autoconf.

==============================================================================
File: autoconf.info,  Node: |Erlang_Libraries|,  Prev: |Posix_Variants|,  Up: |Existing_Tests|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Erlang_Libraries*

5.13 Erlang Libraries
=====----------------

The following macros check for an installation of Erlang/OTP, and for
the presence of certain Erlang libraries.  All those macros require the
configuration of an Erlang interpreter and an Erlang compiler (*note
Erlang Compiler and Interpreter::).

 -- Macro: AC_ERLANG_SUBST_ERTS_VER
     Set the output variable `ERLANG_ERTS_VER' to the version of the
     Erlang runtime system (as returned by Erlang's
     `erlang:system_info(version)' function).  The result of this test
     is cached if caching is enabled when running `configure'.  The
     `ERLANG_ERTS_VER' variable is not intended to be used for testing
     for features of specific ERTS versions, but to be used for
     substituting the ERTS version in Erlang/OTP release resource files
     (`.rel' files), as shown below.

 -- Macro: AC_ERLANG_SUBST_ROOT_DIR
     Set the output variable `ERLANG_ROOT_DIR' to the path to the base
     directory in which Erlang/OTP is installed (as returned by Erlang's
     `code:root_dir/0' function).  The result of this test is cached if
     caching is enabled when running `configure'.

 -- Macro: AC_ERLANG_SUBST_LIB_DIR
     Set the output variable `ERLANG_LIB_DIR' to the path of the library
     directory of Erlang/OTP (as returned by Erlang's `code:lib_dir/0'
     function), which subdirectories each contain an installed
     Erlang/OTP library.  The result of this test is cached if caching
     is enabled when running `configure'.

 -- Macro: AC_ERLANG_CHECK_LIB (LIBRARY, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND])
     Test whether the Erlang/OTP library LIBRARY is installed by
     calling Erlang's `code:lib_dir/1' function.  The result of this
     test is cached if caching is enabled when running `configure'.
     ACTION-IF-FOUND is a list of shell commands to run if the library
     is installed; ACTION-IF-NOT-FOUND is a list of shell commands to
     run if it is not.  Additionally, if the library is installed, the
     output variable `ERLANG_LIB_DIR_LIBRARY' is set to the path to the
     library installation directory, and the output variable
     `ERLANG_LIB_VER_LIBRARY' is set to the version number that is part
     of the subdirectory name, if it is in the standard form
     (`LIBRARY-VERSION').  If the directory name does not have a
     version part, `ERLANG_LIB_VER_LIBRARY' is set to the empty string.
     If the library is not installed, `ERLANG_LIB_DIR_LIBRARY' and
     `ERLANG_LIB_VER_LIBRARY' are set to `"not found"'.  For example,
     to check if library `stdlib' is installed:

          AC_ERLANG_CHECK_LIB([stdlib],
            [echo "stdlib version \"$ERLANG_LIB_VER_stdlib\""
             echo "is installed in \"$ERLANG_LIB_DIR_stdlib\""],
            [AC_MSG_ERROR([stdlib was not found!])])

     The `ERLANG_LIB_VER_LIBRARY' variables (set by
     `AC_ERLANG_CHECK_LIB') and the `ERLANG_ERTS_VER' variable (set by
     `AC_ERLANG_SUBST_ERTS_VER') are not intended to be used for
     testing for features of specific versions of libraries or of the
     Erlang runtime system.  Those variables are intended to be
     substituted in Erlang release resource files (`.rel' files).  For
     instance, to generate a `example.rel' file for an application
     depending on the `stdlib' library, `configure.ac' could contain:

          AC_ERLANG_SUBST_ERTS_VER
          AC_ERLANG_CHECK_LIB([stdlib],
            [],
            [AC_MSG_ERROR([stdlib was not found!])])
          AC_CONFIG_FILES([example.rel])

     The `example.rel.in' file used to generate `example.rel' should
     contain:

          {release,
              {"@PACKAGE@", "@VERSION@"},
              {erts, "@ERLANG_ERTS_VER@"},
              [{stdlib, "@ERLANG_LIB_VER_stdlib@"},
               {@PACKAGE@, "@VERSION@"}]}.

   In addition to the above macros, which test installed Erlang
libraries, the following macros determine the paths to the directories
into which newly built Erlang libraries are to be installed:

 -- Macro: AC_ERLANG_SUBST_INSTALL_LIB_DIR
     Set the `ERLANG_INSTALL_LIB_DIR' output variable to the directory
     into which every built Erlang library should be installed in a
     separate subdirectory.  If this variable is not set in the
     environment when `configure' runs, its default value is
     `${libdir}/erlang/lib'.

 -- Macro: AC_ERLANG_SUBST_INSTALL_LIB_SUBDIR (LIBRARY, VERSION)
     Set the `ERLANG_INSTALL_LIB_DIR_LIBRARY' output variable to the
     directory into which the built Erlang library LIBRARY version
     VERSION should be installed.  If this variable is not set in the
     environment when `configure' runs, its default value is
     `$ERLANG_INSTALL_LIB_DIR/LIBRARY-VERSION', the value of the
     `ERLANG_INSTALL_LIB_DIR' variable being set by the
     `AC_ERLANG_SUBST_INSTALL_LIB_DIR' macro.

==============================================================================
File: autoconf.info,  Node: |Writing_Tests|,  Next: |Results|,  Prev: |Existing_Tests|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Writing_Tests*

6 Writing Tests
*****==========

If the existing feature tests don't do something you need, you have to
write new ones.  These macros are the building blocks.  They provide
ways for other macros to check whether various kinds of features are
available and report the results.

   This chapter contains some suggestions and some of the reasons why
the existing tests are written the way they are.  You can also learn a
lot about how to write Autoconf tests by looking at the existing ones.
If something goes wrong in one or more of the Autoconf tests, this
information can help you understand the assumptions behind them, which
might help you figure out how to best solve the problem.

   These macros check the output of the compiler system of the current
language (*note Language Choice::).  They do not cache the results of
their tests for future use (*note Caching Results::), because they don't
know enough about the information they are checking for to generate a
cache variable name.  They also do not print any messages, for the same
reason.  The checks for particular kinds of features call these macros
and do cache their results and print messages about what they're
checking for.

   When you write a feature test that could be applicable to more than
one software package, the best thing to do is encapsulate it in a new
macro.  *Note Writing Autoconf Macros::, for how to do that.

MENU

* |Language_Choice|::             Selecting which language to use for testing
* |Writing_Test_Programs|::       Forging source files for compilers
* |Running_the_Preprocessor|::    Detecting preprocessor symbols
* |Running_the_Compiler|::        Detecting language or header features
* |Running_the_Linker|::          Detecting library features
* |Runtime|::                     Testing for runtime features
* |Systemology|::                 A zoology of operating systems
* |Multiple_Cases|::              Tests for several possible values

==============================================================================
File: autoconf.info,  Node: |Language_Choice|,  Next: |Writing_Test_Programs|,  Up: |Writing_Tests|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *Language_Choice*

6.1 Language Choice
=====--------------

Autoconf-generated `configure' scripts check for the C compiler and its
features by default.  Packages that use other programming languages
(maybe more than one, e.g., C and C++) need to test features of the
compilers for the respective languages.  The following macros determine
which programming language is used in the subsequent tests in
`configure.ac'.

 -- Macro: AC_LANG (LANGUAGE)
     Do compilation tests using the compiler, preprocessor, and file
     extensions for the specified LANGUAGE.

     Supported languages are:

    `C'
          Do compilation tests using `CC' and `CPP' and use extension
          `.c' for test programs.  Use compilation flags: `CPPFLAGS'
          with `CPP', and both `CPPFLAGS' and `CFLAGS' with `CC'.

    `C++'
          Do compilation tests using `CXX' and `CXXCPP' and use
          extension `.C' for test programs.  Use compilation flags:
          `CPPFLAGS' with `CXXCPP', and both `CPPFLAGS' and `CXXFLAGS'
          with `CXX'.

    `Fortran 77'
          Do compilation tests using `F77' and use extension `.f' for
          test programs.  Use compilation flags: `FFLAGS'.

    `Fortran'
          Do compilation tests using `FC' and use extension `.f' (or
          whatever has been set by `AC_FC_SRCEXT') for test programs.
          Use compilation flags: `FCFLAGS'.

    `Erlang'
          Compile and execute tests using `ERLC' and `ERL' and use
          extension `.erl' for test Erlang modules.  Use compilation
          flags: `ERLCFLAGS'.

    `Objective C'
          Do compilation tests using `OBJC' and `OBJCPP' and use
          extension `.m' for test programs.  Use compilation flags:
          `CPPFLAGS' with `OBJCPP', and both `CPPFLAGS' and `OBJCFLAGS'
          with `OBJC'.

    `Objective C++'
          Do compilation tests using `OBJCXX' and `OBJCXXCPP' and use
          extension `.mm' for test programs.  Use compilation flags:
          `CPPFLAGS' with `OBJCXXCPP', and both `CPPFLAGS' and
          `OBJCXXFLAGS' with `OBJCXX'.

    `Go'
          Do compilation tests using `GOC' and use extension `.go' for
          test programs.  Use compilation flags `GOFLAGS'.

 -- Macro: AC_LANG_PUSH (LANGUAGE)
     Remember the current language (as set by `AC_LANG') on a stack, and
     then select the LANGUAGE.  Use this macro and `AC_LANG_POP' in
     macros that need to temporarily switch to a particular language.

 -- Macro: AC_LANG_POP ([LANGUAGE])
     Select the language that is saved on the top of the stack, as set
     by `AC_LANG_PUSH', and remove it from the stack.

     If given, LANGUAGE specifies the language we just _quit_.  It is a
     good idea to specify it when it's known (which should be the
     case...), since Autoconf detects inconsistencies.

          AC_LANG_PUSH([Fortran 77])
          # Perform some tests on Fortran 77.
          # ...
          AC_LANG_POP([Fortran 77])

 -- Macro: AC_LANG_ASSERT (LANGUAGE)
     Check statically that the current language is LANGUAGE.  You
     should use this in your language specific macros to avoid that
     they be called with an inappropriate language.

     This macro runs only at `autoconf' time, and incurs no cost at
     `configure' time.  Sadly enough and because Autoconf is a two
     layer language (1), the macros `AC_LANG_PUSH' and `AC_LANG_POP'
     cannot be "optimizing", therefore as much as possible you ought to
     avoid using them to wrap your code, rather, require from the user
     to run the macro with a correct current language, and check it
     with `AC_LANG_ASSERT'.  And anyway, that may help the user
     understand she is running a Fortran macro while expecting a result
     about her Fortran 77 compiler...

 -- Macro: AC_REQUIRE_CPP
     Ensure that whichever preprocessor would currently be used for
     tests has been found.  Calls `AC_REQUIRE' (*note Prerequisite
     Macros::) with an argument of either `AC_PROG_CPP' or
     `AC_PROG_CXXCPP', depending on which language is current.

   ---------- Footnotes ----------

   (1) Because M4 is not aware of Sh code, especially conditionals,
some optimizations that look nice statically may produce incorrect
results at runtime.

==============================================================================
File: autoconf.info,  Node: |Writing_Test_Programs|,  Next: |Running_the_Preprocessor|,  Prev: |Language_Choice|,  Up: |Writing_Tests|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *Writing_Test_Programs*

6.2 Writing Test Programs
=====--------------------

Autoconf tests follow a common scheme: feed some program with some
input, and most of the time, feed a compiler with some source file.
This section is dedicated to these source samples.

MENU

* |Guidelines|::                  General rules for writing test programs
* |Test_Functions|::              Avoiding pitfalls in test programs
* |Generating_Sources|::          Source program boilerplate

==============================================================================
File: autoconf.info,  Node: |Guidelines|,  Next: |Test_Functions|,  Up: |Writing_Test_Programs|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *Guidelines*

6.2.1 Guidelines for Test Programs
----------------------------------

The most important rule to follow when writing testing samples is:

                          _Look for realism._

   This motto means that testing samples must be written with the same
strictness as real programs are written.  In particular, you should
avoid "shortcuts" and simplifications.

   Don't just play with the preprocessor if you want to prepare a
compilation.  For instance, using `cpp' to check whether a header is
functional might let your `configure' accept a header which causes some
_compiler_ error.  Do not hesitate to check a header with other headers
included before, especially required headers.

   Make sure the symbols you use are properly defined, i.e., refrain
from simply declaring a function yourself instead of including the
proper header.

   Test programs should not write to standard output.  They should exit
with status 0 if the test succeeds, and with status 1 otherwise, so
that success can be distinguished easily from a core dump or other
failure; segmentation violations and other failures produce a nonzero
exit status.  Unless you arrange for `exit' to be declared, test
programs should `return', not `exit', from `main', because on many
systems `exit' is not declared by default.

   Test programs can use `#if' or `#ifdef' to check the values of
preprocessor macros defined by tests that have already run.  For
example, if you call `AC_HEADER_STDBOOL', then later on in
`configure.ac' you can have a test program that includes `stdbool.h'
conditionally:

     #ifdef HAVE_STDBOOL_H
     # include <stdbool.h>
     #endif

   Both `#if HAVE_STDBOOL_H' and `#ifdef HAVE_STDBOOL_H' will work with
any standard C compiler.  Some developers prefer `#if' because it is
easier to read, while others prefer `#ifdef' because it avoids
diagnostics with picky compilers like GCC with the `-Wundef' option.

   If a test program needs to use or create a data file, give it a name
that starts with `conftest', such as `conftest.data'.  The `configure'
script cleans up by running `rm -f -r conftest*' after running test
programs and if the script is interrupted.

==============================================================================
File: autoconf.info,  Node: |Test_Functions|,  Next: |Generating_Sources|,  Prev: |Guidelines|,  Up: |Writing_Test_Programs|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Test_Functions*

6.2.2 Test Functions
--------------------

These days it's safe to assume support for function prototypes
(introduced in C89).

   Functions that test programs declare should also be conditionalized
for C++, which requires `extern "C"' prototypes.  Make sure to not
include any header files containing clashing prototypes.

     #ifdef __cplusplus
     extern "C"
     #endif
     void *valloc (size_t);

   If a test program calls a function with invalid parameters (just to
see whether it exists), organize the program to ensure that it never
invokes that function.  You can do this by calling it in another
function that is never invoked.  You can't do it by putting it after a
call to `exit', because GCC version 2 knows that `exit' never returns
and optimizes out any code that follows it in the same block.

   If you include any header files, be sure to call the functions
relevant to them with the correct number of arguments, even if they are
just 0, to avoid compilation errors due to prototypes.  GCC version 2
has internal prototypes for several functions that it automatically
inlines; for example, `memcpy'.  To avoid errors when checking for
them, either pass them the correct number of arguments or redeclare them
with a different return type (such as `char').

==============================================================================
File: autoconf.info,  Node: |Generating_Sources|,  Prev: |Test_Functions|,  Up: |Writing_Test_Programs|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *Generating_Sources*

6.2.3 Generating Sources
------------------------

Autoconf provides a set of macros that can be used to generate test
source files.  They are written to be language generic, i.e., they
actually depend on the current language (*note Language Choice::) to
"format" the output properly.

 -- Macro: AC_LANG_CONFTEST (SOURCE)
     Save the SOURCE text in the current test source file:
     `conftest.EXTENSION' where the EXTENSION depends on the current
     language.  As of Autoconf 2.63b, the source file also contains the
     results of all of the `AC_DEFINE' performed so far.

     Note that the SOURCE is evaluated exactly once, like regular
     Autoconf macro arguments, and therefore (i) you may pass a macro
     invocation, (ii) if not, be sure to double quote if needed.

     This macro issues a warning during `autoconf' processing if SOURCE
     does not include an expansion of the macro
     `AC_LANG_DEFINES_PROVIDED' (note that both `AC_LANG_SOURCE' and
     `AC_LANG_PROGRAM' call this macro, and thus avoid the warning).

     This macro is seldom called directly, but is used under the hood
     by more common macros such as `AC_COMPILE_IFELSE' and
     `AC_RUN_IFELSE'.

 -- Macro: AC_LANG_DEFINES_PROVIDED
     This macro is called as a witness that the file
     `conftest.EXTENSION' appropriate for the current language is
     complete, including all previously determined results from
     `AC_DEFINE'.  This macro is seldom called directly, but exists if
     you have a compelling reason to write a conftest file without using
     `AC_LANG_SOURCE', yet still want to avoid a syntax warning from
     `AC_LANG_CONFTEST'.

 -- Macro: AC_LANG_SOURCE (SOURCE)
     Expands into the SOURCE, with the definition of all the
     `AC_DEFINE' performed so far.  This macro includes an expansion of
     `AC_LANG_DEFINES_PROVIDED'.

     In many cases, you may find it more convenient to use the wrapper
     `AC_LANG_PROGRAM'.

   For instance, executing (observe the double quotation!):

     AC_INIT([Hello], [1.0], [bug-hello@example.org], [],
             [http://www.example.org/])
     AC_DEFINE([HELLO_WORLD], ["Hello, World\n"],
       [Greetings string.])
     AC_LANG([C])
     AC_LANG_CONFTEST(
        [AC_LANG_SOURCE([[const char hw[] = "Hello, World\n";]])])
     gcc -E -dD conftest.c

on a system with `gcc' installed, results in:

     ...
     # 1 "conftest.c"

     #define PACKAGE_NAME "Hello"
     #define PACKAGE_TARNAME "hello"
     #define PACKAGE_VERSION "1.0"
     #define PACKAGE_STRING "Hello 1.0"
     #define PACKAGE_BUGREPORT "bug-hello@example.org"
     #define PACKAGE_URL "http://www.example.org/"
     #define HELLO_WORLD "Hello, World\n"

     const char hw[] = "Hello, World\n";

   When the test language is Fortran, Erlang, or Go, the `AC_DEFINE'
definitions are not automatically translated into constants in the
source code by this macro.

 -- Macro: AC_LANG_PROGRAM (PROLOGUE, BODY)
     Expands into a source file which consists of the PROLOGUE, and
     then BODY as body of the main function (e.g., `main' in C).  Since
     it uses `AC_LANG_SOURCE', the features of the latter are available.

   For instance:

     AC_INIT([Hello], [1.0], [bug-hello@example.org], [],
             [http://www.example.org/])
     AC_DEFINE([HELLO_WORLD], ["Hello, World\n"],
       [Greetings string.])
     AC_LANG_CONFTEST(
     [AC_LANG_PROGRAM([[const char hw[] = "Hello, World\n";]],
                      [[fputs (hw, stdout);]])])
     gcc -E -dD conftest.c

on a system with `gcc' installed, results in:

     ...
     # 1 "conftest.c"

     #define PACKAGE_NAME "Hello"
     #define PACKAGE_TARNAME "hello"
     #define PACKAGE_VERSION "1.0"
     #define PACKAGE_STRING "Hello 1.0"
     #define PACKAGE_BUGREPORT "bug-hello@example.org"
     #define PACKAGE_URL "http://www.example.org/"
     #define HELLO_WORLD "Hello, World\n"

     const char hw[] = "Hello, World\n";
     int
     main ()
     {
     fputs (hw, stdout);
       ;
       return 0;
     }

   In Erlang tests, the created source file is that of an Erlang module
called `conftest' (`conftest.erl').  This module defines and exports at
least one `start/0' function, which is called to perform the test.  The
PROLOGUE is optional code that is inserted between the module header and
the `start/0' function definition.  BODY is the body of the `start/0'
function without the final period (*note Runtime::, about constraints
on this function's behavior).

   For instance:

     AC_INIT([Hello], [1.0], [bug-hello@example.org])
     AC_LANG(Erlang)
     AC_LANG_CONFTEST(
     [AC_LANG_PROGRAM([[-define(HELLO_WORLD, "Hello, world!").]],
                      [[io:format("~s~n", [?HELLO_WORLD])]])])
     cat conftest.erl

results in:

     -module(conftest).
     -export([start/0]).
     -define(HELLO_WORLD, "Hello, world!").
     start() ->
     io:format("~s~n", [?HELLO_WORLD])
     .

 -- Macro: AC_LANG_CALL (PROLOGUE, FUNCTION)
     Expands into a source file which consists of the PROLOGUE, and
     then a call to the FUNCTION as body of the main function (e.g.,
     `main' in C).  Since it uses `AC_LANG_PROGRAM', the feature of the
     latter are available.

     This function will probably be replaced in the future by a version
     which would enable specifying the arguments.  The use of this
     macro is not encouraged, as it violates strongly the typing system.

     This macro cannot be used for Erlang tests.

 -- Macro: AC_LANG_FUNC_LINK_TRY (FUNCTION)
     Expands into a source file which uses the FUNCTION in the body of
     the main function (e.g., `main' in C).  Since it uses
     `AC_LANG_PROGRAM', the features of the latter are available.

     As `AC_LANG_CALL', this macro is documented only for completeness.
     It is considered to be severely broken, and in the future will be
     removed in favor of actual function calls (with properly typed
     arguments).

     This macro cannot be used for Erlang tests.

==============================================================================
File: autoconf.info,  Node: |Running_the_Preprocessor|,  Next: |Running_the_Compiler|,  Prev: |Writing_Test_Programs|,  Up: |Writing_Tests|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *Running_the_Preprocessor*

6.3 Running the Preprocessor
=====-----------------------

Sometimes one might need to run the preprocessor on some source file.
_Usually it is a bad idea_, as you typically need to _compile_ your
project, not merely run the preprocessor on it; therefore you certainly
want to run the compiler, not the preprocessor.  Resist the temptation
of following the easiest path.

   Nevertheless, if you need to run the preprocessor, then use
`AC_PREPROC_IFELSE'.

   The macros described in this section cannot be used for tests in
Erlang, Fortran, or Go, since those languages require no preprocessor.

 -- Macro: AC_PREPROC_IFELSE (INPUT, [ACTION-IF-TRUE],
          [ACTION-IF-FALSE])
     Run the preprocessor of the current language (*note Language
     Choice::) on the INPUT, run the shell commands ACTION-IF-TRUE on
     success, ACTION-IF-FALSE otherwise.  The INPUT can be made by
     `AC_LANG_PROGRAM' and friends.

     This macro uses `CPPFLAGS', but not `CFLAGS', because `-g', `-O',
     etc. are not valid options to many C preprocessors.

     It is customary to report unexpected failures with
     `AC_MSG_FAILURE'.  If needed, ACTION-IF-TRUE can further access
     the preprocessed output in the file `conftest.i'.

   For instance:

     AC_INIT([Hello], [1.0], [bug-hello@example.org])
     AC_DEFINE([HELLO_WORLD], ["Hello, World\n"],
       [Greetings string.])
     AC_PREPROC_IFELSE(
        [AC_LANG_PROGRAM([[const char hw[] = "Hello, World\n";]],
                         [[fputs (hw, stdout);]])],
        [AC_MSG_RESULT([OK])],
        [AC_MSG_FAILURE([unexpected preprocessor failure])])

results in:

     checking for gcc... gcc
     checking for C compiler default output file name... a.out
     checking whether the C compiler works... yes
     checking whether we are cross compiling... no
     checking for suffix of executables...
     checking for suffix of object files... o
     checking whether we are using the GNU C compiler... yes
     checking whether gcc accepts -g... yes
     checking for gcc option to accept ISO C89... none needed
     checking how to run the C preprocessor... gcc -E
     OK


   The macro `AC_TRY_CPP' (*note Obsolete Macros::) used to play the
role of `AC_PREPROC_IFELSE', but double quotes its argument, making it
impossible to use it to elaborate sources.  You are encouraged to get
rid of your old use of the macro `AC_TRY_CPP' in favor of
`AC_PREPROC_IFELSE', but, in the first place, are you sure you need to
run the _preprocessor_ and not the compiler?

 -- Macro: AC_EGREP_HEADER (PATTERN, HEADER-FILE, ACTION-IF-FOUND,
          [ACTION-IF-NOT-FOUND])
     If the output of running the preprocessor on the system header file
     HEADER-FILE matches the extended regular expression PATTERN,
     execute shell commands ACTION-IF-FOUND, otherwise execute
     ACTION-IF-NOT-FOUND.

 -- Macro: AC_EGREP_CPP (PATTERN, PROGRAM, [ACTION-IF-FOUND],
          [ACTION-IF-NOT-FOUND])
     PROGRAM is the text of a C or C++ program, on which shell
     variable, back quote, and backslash substitutions are performed.
     If the output of running the preprocessor on PROGRAM matches the
     extended regular expression PATTERN, execute shell commands
     ACTION-IF-FOUND, otherwise execute ACTION-IF-NOT-FOUND.

==============================================================================
File: autoconf.info,  Node: |Running_the_Compiler|,  Next: |Running_the_Linker|,  Prev: |Running_the_Preprocessor|,  Up: |Writing_Tests|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Running_the_Compiler*

6.4 Running the Compiler
=====-------------------

To check for a syntax feature of the current language's (*note Language
Choice::) compiler, such as whether it recognizes a certain keyword, or
simply to try some library feature, use `AC_COMPILE_IFELSE' to try to
compile a small program that uses that feature.

 -- Macro: AC_COMPILE_IFELSE (INPUT, [ACTION-IF-TRUE],
          [ACTION-IF-FALSE])
     Run the compiler and compilation flags of the current language
     (*note Language Choice::) on the INPUT, run the shell commands
     ACTION-IF-TRUE on success, ACTION-IF-FALSE otherwise.  The INPUT
     can be made by `AC_LANG_PROGRAM' and friends.

     It is customary to report unexpected failures with
     `AC_MSG_FAILURE'.  This macro does not try to link; use
     `AC_LINK_IFELSE' if you need to do that (*note Running the
     Linker::).  If needed, ACTION-IF-TRUE can further access the
     just-compiled object file `conftest.$OBJEXT'.

     This macro uses `AC_REQUIRE' for the compiler associated with the
     current language, which means that if the compiler has not yet been
     determined, the compiler determination will be made prior to the
     body of the outermost `AC_DEFUN' macro that triggered this macro to
     expand (*note Expanded Before Required::).

   For tests in Erlang, the INPUT must be the source code of a module
named `conftest'.  `AC_COMPILE_IFELSE' generates a `conftest.beam' file
that can be interpreted by the Erlang virtual machine (`ERL').  It is
recommended to use `AC_LANG_PROGRAM' to specify the test program, to
ensure that the Erlang module has the right name.

==============================================================================
File: autoconf.info,  Node: |Running_the_Linker|,  Next: |Runtime|,  Prev: |Running_the_Compiler|,  Up: |Writing_Tests|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *Running_the_Linker*

6.5 Running the Linker
=====-----------------

To check for a library, a function, or a global variable, Autoconf
`configure' scripts try to compile and link a small program that uses
it.  This is unlike Metaconfig, which by default uses `nm' or `ar' on
the C library to try to figure out which functions are available.
Trying to link with the function is usually a more reliable approach
because it avoids dealing with the variations in the options and output
formats of `nm' and `ar' and in the location of the standard libraries.
It also allows configuring for cross-compilation or checking a
function's runtime behavior if needed.  On the other hand, it can be
slower than scanning the libraries once, but accuracy is more important
than speed.

   `AC_LINK_IFELSE' is used to compile test programs to test for
functions and global variables.  It is also used by `AC_CHECK_LIB' to
check for libraries (*note Libraries::), by adding the library being
checked for to `LIBS' temporarily and trying to link a small program.

 -- Macro: AC_LINK_IFELSE (INPUT, [ACTION-IF-TRUE], [ACTION-IF-FALSE])
     Run the compiler (and compilation flags) and the linker of the
     current language (*note Language Choice::) on the INPUT, run the
     shell commands ACTION-IF-TRUE on success, ACTION-IF-FALSE
     otherwise.  The INPUT can be made by `AC_LANG_PROGRAM' and
     friends.  If needed, ACTION-IF-TRUE can further access the
     just-linked program file `conftest$EXEEXT'.

     `LDFLAGS' and `LIBS' are used for linking, in addition to the
     current compilation flags.

     It is customary to report unexpected failures with
     `AC_MSG_FAILURE'.  This macro does not try to execute the program;
     use `AC_RUN_IFELSE' if you need to do that (*note Runtime::).

   The `AC_LINK_IFELSE' macro cannot be used for Erlang tests, since
Erlang programs are interpreted and do not require linking.

==============================================================================
File: autoconf.info,  Node: |Runtime|,  Next: |Systemology|,  Prev: |Running_the_Linker|,  Up: |Writing_Tests|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *Runtime*

6.6 Checking Runtime Behavior
=====------------------------

Sometimes you need to find out how a system performs at runtime, such
as whether a given function has a certain capability or bug.  If you
can, make such checks when your program runs instead of when it is
configured.  You can check for things like the machine's endianness when
your program initializes itself.

   If you really need to test for a runtime behavior while configuring,
you can write a test program to determine the result, and compile and
run it using `AC_RUN_IFELSE'.  Avoid running test programs if possible,
because this prevents people from configuring your package for
cross-compiling.

 -- Macro: AC_RUN_IFELSE (INPUT, [ACTION-IF-TRUE], [ACTION-IF-FALSE],
          [ACTION-IF-CROSS-COMPILING = `AC_MSG_FAILURE'])
     Run the compiler (and compilation flags) and the linker of the
     current language (*note Language Choice::) on the INPUT, then
     execute the resulting program.  If the program returns an exit
     status of 0 when executed, run shell commands ACTION-IF-TRUE.
     Otherwise, run shell commands ACTION-IF-FALSE.

     The INPUT can be made by `AC_LANG_PROGRAM' and friends.  `LDFLAGS'
     and `LIBS' are used for linking, in addition to the compilation
     flags of the current language (*note Language Choice::).
     Additionally, ACTION-IF-TRUE can run `./conftest$EXEEXT' for
     further testing.

     In the ACTION-IF-FALSE section, the failing exit status is
     available in the shell variable `$?'.  This exit status might be
     that of a failed compilation, or it might be that of a failed
     program execution.

     If cross-compilation mode is enabled (this is the case if either
     the compiler being used does not produce executables that run on
     the system where `configure' is being run, or if the options
     `--build' and `--host' were both specified and their values are
     different), then the test program is not run.  If the optional
     shell commands ACTION-IF-CROSS-COMPILING are given, those commands
     are run instead; typically these commands provide pessimistic
     defaults that allow cross-compilation to work even if the guess
     was wrong.  If the fourth argument is empty or omitted, but
     cross-compilation is detected, then `configure' prints an error
     message and exits.  If you want your package to be useful in a
     cross-compilation scenario, you _should_ provide a non-empty
     ACTION-IF-CROSS-COMPILING clause, as well as wrap the
     `AC_RUN_IFELSE' compilation inside an `AC_CACHE_CHECK' (*note
     Caching Results::) which allows the user to override the
     pessimistic default if needed.

     It is customary to report unexpected failures with
     `AC_MSG_FAILURE'.

   `autoconf' prints a warning message when creating `configure' each
time it encounters a call to `AC_RUN_IFELSE' with no
ACTION-IF-CROSS-COMPILING argument given.  If you are not concerned
about users configuring your package for cross-compilation, you may
ignore the warning.  A few of the macros distributed with Autoconf
produce this warning message; but if this is a problem for you, please
report it as a bug, along with an appropriate pessimistic guess to use
instead.

   To configure for cross-compiling you can also choose a value for
those parameters based on the canonical system name (*note Manual
Configuration::).  Alternatively, set up a test results cache file with
the correct values for the host system (*note Caching Results::).

   To provide a default for calls of `AC_RUN_IFELSE' that are embedded
in other macros, including a few of the ones that come with Autoconf,
you can test whether the shell variable `cross_compiling' is set to
`yes', and then use an alternate method to get the results instead of
calling the macros.

   It is also permissible to temporarily assign to `cross_compiling' in
order to force tests to behave as though they are in a
cross-compilation environment, particularly since this provides a way to
test your ACTION-IF-CROSS-COMPILING even when you are not using a
cross-compiler.

     # We temporarily set cross-compile mode to force AC_COMPUTE_INT
     # to use the slow link-only method
     save_cross_compiling=$cross_compiling
     cross_compiling=yes
     AC_COMPUTE_INT([...])
     cross_compiling=$save_cross_compiling

   A C or C++ runtime test should be portable.  *Note Portable C and
C++::.

   Erlang tests must exit themselves the Erlang VM by calling the
`halt/1' function: the given status code is used to determine the
success of the test (status is `0') or its failure (status is different
than `0'), as explained above.  It must be noted that data output
through the standard output (e.g., using `io:format/2') may be
truncated when halting the VM.  Therefore, if a test must output
configuration information, it is recommended to create and to output
data into the temporary file named `conftest.out', using the functions
of module `file'.  The `conftest.out' file is automatically deleted by
the `AC_RUN_IFELSE' macro.  For instance, a simplified implementation
of Autoconf's `AC_ERLANG_SUBST_LIB_DIR' macro is:

     AC_INIT([LibdirTest], [1.0], [bug-libdirtest@example.org])
     AC_ERLANG_NEED_ERL
     AC_LANG(Erlang)
     AC_RUN_IFELSE(
       [AC_LANG_PROGRAM([], [dnl
         file:write_file("conftest.out", code:lib_dir()),
         halt(0)])],
       [echo "code:lib_dir() returned: `cat conftest.out`"],
       [AC_MSG_FAILURE([test Erlang program execution failed])])

==============================================================================
File: autoconf.info,  Node: |Systemology|,  Next: |Multiple_Cases|,  Prev: |Runtime|,  Up: |Writing_Tests|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Systemology*

6.7 Systemology
=====----------

This section aims at presenting some systems and pointers to
documentation.  It may help you addressing particular problems reported
by users.

   Posix-conforming systems (http://www.opengroup.org/susv3) are
derived from the Unix operating system
(http://www.bell-labs.com/history/unix/).

   The Rosetta Stone for Unix (http://bhami.com/rosetta.html) contains
a table correlating the features of various Posix-conforming systems.
Unix History (http://www.levenez.com/unix/) is a simplified diagram of
how many Unix systems were derived from each other.

   The Heirloom Project (http://heirloom.sourceforge.net/) provides
some variants of traditional implementations of Unix utilities.

Darwin
     Darwin is also known as Mac OS X.  Beware that the file system
     _can_ be case-preserving, but case insensitive.  This can cause
     nasty problems, since for instance the installation attempt for a
     package having an `INSTALL' file can result in `make install'
     report that nothing was to be done!

     That's all dependent on whether the file system is a UFS (case
     sensitive) or HFS+ (case preserving).  By default Apple wants you
     to install the OS on HFS+.  Unfortunately, there are some pieces of
     software which really need to be built on UFS.  We may want to
     rebuild Darwin to have both UFS and HFS+ available (and put the
     /local/build tree on the UFS).

QNX 4.25
     QNX is a realtime operating system running on Intel architecture
     meant to be scalable from the small embedded systems to the hundred
     processor super-computer.  It claims to be Posix certified.  More
     information is available on the QNX home page
     (http://www.qnx.com/).

Tru64
     Documentation of several versions of Tru64
     (http://h30097.www3.hp.com/docs/) is available in different
     formats.

Unix version 7
     Officially this was called the "Seventh Edition" of "the UNIX
     time-sharing system" but we use the more-common name "Unix version
     7".  Documentation is available in the Unix Seventh Edition Manual
     (http://plan9.bell-labs.com/7thEdMan/).  Previous versions of Unix
     are called "Unix version 6", etc., but they were not as widely
     used.

==============================================================================
File: autoconf.info,  Node: |Multiple_Cases|,  Prev: |Systemology|,  Up: |Writing_Tests|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Multiple_Cases*

6.8 Multiple Cases
=====-------------

Some operations are accomplished in several possible ways, depending on
the OS variant.  Checking for them essentially requires a "case
statement".  Autoconf does not directly provide one; however, it is
easy to simulate by using a shell variable to keep track of whether a
way to perform the operation has been found yet.

   Here is an example that uses the shell variable `fstype' to keep
track of whether the remaining cases need to be checked.  Note that
since the value of `fstype' is under our control, we don't have to use
the longer `test "x$fstype" = xno'.

     AC_MSG_CHECKING([how to get file system type])
     fstype=no
     # The order of these tests is important.
     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/statvfs.h>
     #include <sys/fstyp.h>]])],
                       [AC_DEFINE([FSTYPE_STATVFS], [1],
                          [Define if statvfs exists.])
                        fstype=SVR4])
     if test $fstype = no; then
       AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/statfs.h>
     #include <sys/fstyp.h>]])],
                       [AC_DEFINE([FSTYPE_USG_STATFS], [1],
                          [Define if USG statfs.])
                        fstype=SVR3])
     fi
     if test $fstype = no; then
       AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/statfs.h>
     #include <sys/vmount.h>]])]),
                       [AC_DEFINE([FSTYPE_AIX_STATFS], [1],
                          [Define if AIX statfs.])
                        fstype=AIX])
     fi
     # (more cases omitted here)
     AC_MSG_RESULT([$fstype])

==============================================================================
File: autoconf.info,  Node: |Results|,  Next: |Programming_in_M4|,  Prev: |Writing_Tests|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *Results*

7 Results of Tests
*****=============

Once `configure' has determined whether a feature exists, what can it
do to record that information?  There are four sorts of things it can
do: define a C preprocessor symbol, set a variable in the output files,
save the result in a cache file for future `configure' runs, and print
a message letting the user know the result of the test.

MENU

* |Defining_Symbols|::            Defining C preprocessor symbols
* |Setting_Output_Variables|::    Replacing variables in output files
* |Special_Chars_in_Variables|::  Characters to beware of in variables
* |Caching_Results|::             Speeding up subsequent `configure' runs
* |Printing_Messages|::           Notifying `configure' users

==============================================================================
File: autoconf.info,  Node: |Defining_Symbols|,  Next: |Setting_Output_Variables|,  Up: |Results|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Defining_Symbols*

7.1 Defining C Preprocessor Symbols
=====------------------------------

A common action to take in response to a feature test is to define a C
preprocessor symbol indicating the results of the test.  That is done by
calling `AC_DEFINE' or `AC_DEFINE_UNQUOTED'.

   By default, `AC_OUTPUT' places the symbols defined by these macros
into the output variable `DEFS', which contains an option
`-DSYMBOL=VALUE' for each symbol defined.  Unlike in Autoconf version
1, there is no variable `DEFS' defined while `configure' is running.
To check whether Autoconf macros have already defined a certain C
preprocessor symbol, test the value of the appropriate cache variable,
as in this example:

     AC_CHECK_FUNC([vprintf], [AC_DEFINE([HAVE_VPRINTF], [1],
                               [Define if vprintf exists.])])
     if test "x$ac_cv_func_vprintf" != xyes; then
       AC_CHECK_FUNC([_doprnt], [AC_DEFINE([HAVE_DOPRNT], [1],
                                 [Define if _doprnt exists.])])
     fi

   If `AC_CONFIG_HEADERS' has been called, then instead of creating
`DEFS', `AC_OUTPUT' creates a header file by substituting the correct
values into `#define' statements in a template file.  *Note
Configuration Headers::, for more information about this kind of output.

 -- Macro: AC_DEFINE (VARIABLE, VALUE, [DESCRIPTION])
 -- Macro: AC_DEFINE (VARIABLE)
     Define VARIABLE to VALUE (verbatim), by defining a C preprocessor
     macro for VARIABLE.  VARIABLE should be a C identifier, optionally
     suffixed by a parenthesized argument list to define a C
     preprocessor macro with arguments.  The macro argument list, if
     present, should be a comma-separated list of C identifiers,
     possibly terminated by an ellipsis `...' if C99 syntax is employed.
     VARIABLE should not contain comments, white space, trigraphs,
     backslash-newlines, universal character names, or non-ASCII
     characters.

     VALUE may contain backslash-escaped newlines, which will be
     preserved if you use `AC_CONFIG_HEADERS' but flattened if passed
     via `@DEFS@' (with no effect on the compilation, since the
     preprocessor sees only one line in the first place).  VALUE should
     not contain raw newlines.  If you are not using
     `AC_CONFIG_HEADERS', VALUE should not contain any `#' characters,
     as `make' tends to eat them.  To use a shell variable, use
     `AC_DEFINE_UNQUOTED' instead.

     DESCRIPTION is only useful if you are using `AC_CONFIG_HEADERS'.
     In this case, DESCRIPTION is put into the generated `config.h.in'
     as the comment before the macro define.  The following example
     defines the C preprocessor variable `EQUATION' to be the string
     constant `"$a > $b"':

          AC_DEFINE([EQUATION], ["$a > $b"],
            [Equation string.])

     If neither VALUE nor DESCRIPTION are given, then VALUE defaults to
     1 instead of to the empty string.  This is for backwards
     compatibility with older versions of Autoconf, but this usage is
     obsolescent and may be withdrawn in future versions of Autoconf.

     If the VARIABLE is a literal string, it is passed to
     `m4_pattern_allow' (*note Forbidden Patterns::).

     If multiple `AC_DEFINE' statements are executed for the same
     VARIABLE name (not counting any parenthesized argument list), the
     last one wins.

 -- Macro: AC_DEFINE_UNQUOTED (VARIABLE, VALUE, [DESCRIPTION])
 -- Macro: AC_DEFINE_UNQUOTED (VARIABLE)
     Like `AC_DEFINE', but three shell expansions are
     performed--once--on VARIABLE and VALUE: variable expansion (`$'),
     command substitution (``'), and backslash escaping (`\'), as if in
     an unquoted here-document.  Single and double quote characters in
     the value have no special meaning.  Use this macro instead of
     `AC_DEFINE' when VARIABLE or VALUE is a shell variable.  Examples:

          AC_DEFINE_UNQUOTED([config_machfile], ["$machfile"],
            [Configuration machine file.])
          AC_DEFINE_UNQUOTED([GETGROUPS_T], [$ac_cv_type_getgroups],
            [getgroups return type.])
          AC_DEFINE_UNQUOTED([$ac_tr_hdr], [1],
            [Translated header name.])

   Due to a syntactical bizarreness of the Bourne shell, do not use
semicolons to separate `AC_DEFINE' or `AC_DEFINE_UNQUOTED' calls from
other macro calls or shell code; that can cause syntax errors in the
resulting `configure' script.  Use either blanks or newlines.  That is,
do this:

     AC_CHECK_HEADER([elf.h],
       [AC_DEFINE([SVR4], [1], [System V Release 4]) LIBS="-lelf $LIBS"])

or this:

     AC_CHECK_HEADER([elf.h],
       [AC_DEFINE([SVR4], [1], [System V Release 4])
        LIBS="-lelf $LIBS"])

instead of this:

     AC_CHECK_HEADER([elf.h],
       [AC_DEFINE([SVR4], [1], [System V Release 4]); LIBS="-lelf $LIBS"])

==============================================================================
File: autoconf.info,  Node: |Setting_Output_Variables|,  Next: |Special_Chars_in_Variables|,  Prev: |Defining_Symbols|,  Up: |Results|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *Setting_Output_Variables*

7.2 Setting Output Variables
=====-----------------------

Another way to record the results of tests is to set "output
variables", which are shell variables whose values are substituted into
files that `configure' outputs.  The two macros below create new output
variables.  *Note Preset Output Variables::, for a list of output
variables that are always available.

 -- Macro: AC_SUBST (VARIABLE, [VALUE])
     Create an output variable from a shell variable.  Make `AC_OUTPUT'
     substitute the variable VARIABLE into output files (typically one
     or more makefiles).  This means that `AC_OUTPUT' replaces
     instances of `@VARIABLE@' in input files with the value that the
     shell variable VARIABLE has when `AC_OUTPUT' is called.  The value
     can contain any non-`NUL' character, including newline.  If you
     are using Automake 1.11 or newer, for newlines in values you might
     want to consider using `AM_SUBST_NOTMAKE' to prevent `automake'
     from adding a line `VARIABLE = @VARIABLE@' to the `Makefile.in'
     files (*note Automake: (automake)Optional.).

     Variable occurrences should not overlap: e.g., an input file should
     not contain `@VAR1@VAR2@' if VAR1 and VAR2 are variable names.
     The substituted value is not rescanned for more output variables;
     occurrences of `@VARIABLE@' in the value are inserted literally
     into the output file.  (The algorithm uses the special marker
     `|#_!!_#|' internally, so neither the substituted value nor the
     output file may contain `|#_!!_#|'.)

     If VALUE is given, in addition assign it to VARIABLE.

     The string VARIABLE is passed to `m4_pattern_allow' (*note
     Forbidden Patterns::).

 -- Macro: AC_SUBST_FILE (VARIABLE)
     Another way to create an output variable from a shell variable.
     Make `AC_OUTPUT' insert (without substitutions) the contents of
     the file named by shell variable VARIABLE into output files.  This
     means that `AC_OUTPUT' replaces instances of `@VARIABLE@' in
     output files (such as `Makefile.in') with the contents of the file
     that the shell variable VARIABLE names when `AC_OUTPUT' is called.
     Set the variable to `/dev/null' for cases that do not have a file
     to insert.  This substitution occurs only when the `@VARIABLE@' is
     on a line by itself, optionally surrounded by spaces and tabs.  The
     substitution replaces the whole line, including the spaces, tabs,
     and the terminating newline.

     This macro is useful for inserting makefile fragments containing
     special dependencies or other `make' directives for particular host
     or target types into makefiles.  For example, `configure.ac' could
     contain:

          AC_SUBST_FILE([host_frag])
          host_frag=$srcdir/conf/sun4.mh

     and then a `Makefile.in' could contain:

          @host_frag@

     The string VARIABLE is passed to `m4_pattern_allow' (*note
     Forbidden Patterns::).

   Running `configure' in varying environments can be extremely
dangerous.  If for instance the user runs `CC=bizarre-cc ./configure',
then the cache, `config.h', and many other output files depend upon
`bizarre-cc' being the C compiler.  If for some reason the user runs
`./configure' again, or if it is run via `./config.status --recheck',
(*Note Automatic Remaking::, and *note config.status Invocation::),
then the configuration can be inconsistent, composed of results
depending upon two different compilers.

   Environment variables that affect this situation, such as `CC'
above, are called "precious variables", and can be declared as such by
`AC_ARG_VAR'.

 -- Macro: AC_ARG_VAR (VARIABLE, DESCRIPTION)
     Declare VARIABLE is a precious variable, and include its
     DESCRIPTION in the variable section of `./configure --help'.

     Being precious means that
        - VARIABLE is substituted via `AC_SUBST'.

        - The value of VARIABLE when `configure' was launched is saved
          in the cache, including if it was not specified on the command
          line but via the environment.  Indeed, while `configure' can
          notice the definition of `CC' in `./configure CC=bizarre-cc',
          it is impossible to notice it in `CC=bizarre-cc ./configure',
          which, unfortunately, is what most users do.

          We emphasize that it is the _initial_ value of VARIABLE which
          is saved, not that found during the execution of `configure'.
          Indeed, specifying `./configure FOO=foo' and letting
          `./configure' guess that `FOO' is `foo' can be two different
          things.

        - VARIABLE is checked for consistency between two `configure'
          runs.  For instance:

               $ ./configure --silent --config-cache
               $ CC=cc ./configure --silent --config-cache
               configure: error: `CC' was not set in the previous run
               configure: error: changes in the environment can compromise \
               the build
               configure: error: run `make distclean' and/or \
               `rm config.cache' and start over

          and similarly if the variable is unset, or if its content is
          changed.  If the content has white space changes only, then
          the error is degraded to a warning only, but the old value is
          reused.

        - VARIABLE is kept during automatic reconfiguration (*note
          config.status Invocation::) as if it had been passed as a
          command line argument, including when no cache is used:

               $ CC=/usr/bin/cc ./configure var=raboof --silent
               $ ./config.status --recheck
               running CONFIG_SHELL=/bin/sh /bin/sh ./configure var=raboof \
                 CC=/usr/bin/cc  --no-create --no-recursion

==============================================================================
File: autoconf.info,  Node: |Special_Chars_in_Variables|,  Next: |Caching_Results|,  Prev: |Setting_Output_Variables|,  Up: |Results|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *Special_Chars_in_Variables*

7.3 Special Characters in Output Variables
=====-------------------------------------

Many output variables are intended to be evaluated both by `make' and
by the shell.  Some characters are expanded differently in these two
contexts, so to avoid confusion these variables' values should not
contain any of the following characters:

     " # $ & ' ( ) * ; < > ? [ \ ^ ` |

   Also, these variables' values should neither contain newlines, nor
start with `~', nor contain white space or `:' immediately followed by
`~'.  The values can contain nonempty sequences of white space
characters like tabs and spaces, but each such sequence might
arbitrarily be replaced by a single space during substitution.

   These restrictions apply both to the values that `configure'
computes, and to the values set directly by the user.  For example, the
following invocations of `configure' are problematic, since they
attempt to use special characters within `CPPFLAGS' and white space
within `$(srcdir)':

     CPPFLAGS='-DOUCH="&\"#$*?"' '../My Source/ouch-1.0/configure'

     '../My Source/ouch-1.0/configure' CPPFLAGS='-DOUCH="&\"#$*?"'

==============================================================================
File: autoconf.info,  Node: |Caching_Results|,  Next: |Printing_Messages|,  Prev: |Special_Chars_in_Variables|,  Up: |Results|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *Caching_Results*

7.4 Caching Results
=====--------------

To avoid checking for the same features repeatedly in various
`configure' scripts (or in repeated runs of one script), `configure'
can optionally save the results of many checks in a "cache file" (*note
Cache Files::).  If a `configure' script runs with caching enabled and
finds a cache file, it reads the results of previous runs from the
cache and avoids rerunning those checks.  As a result, `configure' can
then run much faster than if it had to perform all of the checks every
time.

 -- Macro: AC_CACHE_VAL (CACHE-ID, COMMANDS-TO-SET-IT)
     Ensure that the results of the check identified by CACHE-ID are
     available.  If the results of the check were in the cache file
     that was read, and `configure' was not given the `--quiet' or
     `--silent' option, print a message saying that the result was
     cached; otherwise, run the shell commands COMMANDS-TO-SET-IT.  If
     the shell commands are run to determine the value, the value is
     saved in the cache file just before `configure' creates its output
     files.  *Note Cache Variable Names::, for how to choose the name
     of the CACHE-ID variable.

     The COMMANDS-TO-SET-IT _must have no side effects_ except for
     setting the variable CACHE-ID, see below.

 -- Macro: AC_CACHE_CHECK (MESSAGE, CACHE-ID, COMMANDS-TO-SET-IT)
     A wrapper for `AC_CACHE_VAL' that takes care of printing the
     messages.  This macro provides a convenient shorthand for the most
     common way to use these macros.  It calls `AC_MSG_CHECKING' for
     MESSAGE, then `AC_CACHE_VAL' with the CACHE-ID and COMMANDS
     arguments, and `AC_MSG_RESULT' with CACHE-ID.

     The COMMANDS-TO-SET-IT _must have no side effects_ except for
     setting the variable CACHE-ID, see below.

   It is common to find buggy macros using `AC_CACHE_VAL' or
`AC_CACHE_CHECK', because people are tempted to call `AC_DEFINE' in the
COMMANDS-TO-SET-IT.  Instead, the code that _follows_ the call to
`AC_CACHE_VAL' should call `AC_DEFINE', by examining the value of the
cache variable.  For instance, the following macro is broken:

     AC_DEFUN([AC_SHELL_TRUE],
     [AC_CACHE_CHECK([whether true(1) works], [my_cv_shell_true_works],
                     [my_cv_shell_true_works=no
                      (true) 2>/dev/null && my_cv_shell_true_works=yes
                      if test "x$my_cv_shell_true_works" = xyes; then
                        AC_DEFINE([TRUE_WORKS], [1],
                                  [Define if `true(1)' works properly.])
                      fi])
     ])

This fails if the cache is enabled: the second time this macro is run,
`TRUE_WORKS' _will not be defined_.  The proper implementation is:

     AC_DEFUN([AC_SHELL_TRUE],
     [AC_CACHE_CHECK([whether true(1) works], [my_cv_shell_true_works],
                     [my_cv_shell_true_works=no
                      (true) 2>/dev/null && my_cv_shell_true_works=yes])
      if test "x$my_cv_shell_true_works" = xyes; then
        AC_DEFINE([TRUE_WORKS], [1],
                  [Define if `true(1)' works properly.])
      fi
     ])

   Also, COMMANDS-TO-SET-IT should not print any messages, for example
with `AC_MSG_CHECKING'; do that before calling `AC_CACHE_VAL', so the
messages are printed regardless of whether the results of the check are
retrieved from the cache or determined by running the shell commands.

MENU

* |Cache_Variable_Names|::        Shell variables used in caches
* |Cache_Files|::                 Files `configure' uses for caching
* |Cache_Checkpointing|::         Loading and saving the cache file

==============================================================================
File: autoconf.info,  Node: |Cache_Variable_Names|,  Next: |Cache_Files|,  Up: |Caching_Results|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Cache_Variable_Names*

7.4.1 Cache Variable Names
--------------------------

The names of cache variables should have the following format:

     PACKAGE-PREFIX_cv_VALUE-TYPE_SPECIFIC-VALUE_[ADDITIONAL-OPTIONS]

for example, `ac_cv_header_stat_broken' or
`ac_cv_prog_gcc_traditional'.  The parts of the variable name are:

PACKAGE-PREFIX
     An abbreviation for your package or organization; the same prefix
     you begin local Autoconf macros with, except lowercase by
     convention.  For cache values used by the distributed Autoconf
     macros, this value is `ac'.

`_cv_'
     Indicates that this shell variable is a cache value.  This string
     _must_ be present in the variable name, including the leading
     underscore.

VALUE-TYPE
     A convention for classifying cache values, to produce a rational
     naming system.  The values used in Autoconf are listed in *note
     Macro Names::.

SPECIFIC-VALUE
     Which member of the class of cache values this test applies to.
     For example, which function (`alloca'), program (`gcc'), or output
     variable (`INSTALL').

ADDITIONAL-OPTIONS
     Any particular behavior of the specific member that this test
     applies to.  For example, `broken' or `set'.  This part of the
     name may be omitted if it does not apply.

   The values assigned to cache variables may not contain newlines.
Usually, their values are Boolean (`yes' or `no') or the names of files
or functions; so this is not an important restriction.  *note Cache
Variable Index:: for an index of cache variables with documented
semantics.

==============================================================================
File: autoconf.info,  Node: |Cache_Files|,  Next: |Cache_Checkpointing|,  Prev: |Cache_Variable_Names|,  Up: |Caching_Results|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Cache_Files*

7.4.2 Cache Files
-----------------

A cache file is a shell script that caches the results of configure
tests run on one system so they can be shared between configure scripts
and configure runs.  It is not useful on other systems.  If its contents
are invalid for some reason, the user may delete or edit it, or override
documented cache variables on the `configure' command line.

   By default, `configure' uses no cache file, to avoid problems caused
by accidental use of stale cache files.

   To enable caching, `configure' accepts `--config-cache' (or `-C') to
cache results in the file `config.cache'.  Alternatively,
`--cache-file=FILE' specifies that FILE be the cache file.  The cache
file is created if it does not exist already.  When `configure' calls
`configure' scripts in subdirectories, it uses the `--cache-file'
argument so that they share the same cache.  *Note Subdirectories::,
for information on configuring subdirectories with the
`AC_CONFIG_SUBDIRS' macro.

   `config.status' only pays attention to the cache file if it is given
the `--recheck' option, which makes it rerun `configure'.

   It is wrong to try to distribute cache files for particular system
types.  There is too much room for error in doing that, and too much
administrative overhead in maintaining them.  For any features that
can't be guessed automatically, use the standard method of the canonical
system type and linking files (*note Manual Configuration::).

   The site initialization script can specify a site-wide cache file to
use, instead of the usual per-program cache.  In this case, the cache
file gradually accumulates information whenever someone runs a new
`configure' script.  (Running `configure' merges the new cache results
with the existing cache file.)  This may cause problems, however, if
the system configuration (e.g., the installed libraries or compilers)
changes and the stale cache file is not deleted.

   If `configure' is interrupted at the right time when it updates a
cache file outside of the build directory where the `configure' script
is run, it may leave behind a temporary file named after the cache file
with digits following it.  You may safely delete such a file.

==============================================================================
File: autoconf.info,  Node: |Cache_Checkpointing|,  Prev: |Cache_Files|,  Up: |Caching_Results|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *Cache_Checkpointing*

7.4.3 Cache Checkpointing
-------------------------

If your configure script, or a macro called from `configure.ac', happens
to abort the configure process, it may be useful to checkpoint the cache
a few times at key points using `AC_CACHE_SAVE'.  Doing so reduces the
amount of time it takes to rerun the configure script with (hopefully)
the error that caused the previous abort corrected.

 -- Macro: AC_CACHE_LOAD
     Loads values from existing cache file, or creates a new cache file
     if a cache file is not found.  Called automatically from `AC_INIT'.

 -- Macro: AC_CACHE_SAVE
     Flushes all cached values to the cache file.  Called automatically
     from `AC_OUTPUT', but it can be quite useful to call
     `AC_CACHE_SAVE' at key points in `configure.ac'.

   For instance:

      ... AC_INIT, etc. ...
     # Checks for programs.
     AC_PROG_CC
     AC_PROG_AWK
      ... more program checks ...
     AC_CACHE_SAVE

     # Checks for libraries.
     AC_CHECK_LIB([nsl], [gethostbyname])
     AC_CHECK_LIB([socket], [connect])
      ... more lib checks ...
     AC_CACHE_SAVE

     # Might abort...
     AM_PATH_GTK([1.0.2], [], [AC_MSG_ERROR([GTK not in path])])
     AM_PATH_GTKMM([0.9.5], [], [AC_MSG_ERROR([GTK not in path])])
      ... AC_OUTPUT, etc. ...

==============================================================================
File: autoconf.info,  Node: |Printing_Messages|,  Prev: Caching Results,  Up: |Results|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Printing_Messages*

7.5 Printing Messages
=====----------------

`configure' scripts need to give users running them several kinds of
information.  The following macros print messages in ways appropriate
for each kind.  The arguments to all of them get enclosed in shell
double quotes, so the shell performs variable and back-quote
substitution on them.

   These macros are all wrappers around the `echo' shell command.  They
direct output to the appropriate file descriptor (*note File Descriptor
Macros::).  `configure' scripts should rarely need to run `echo'
directly to print messages for the user.  Using these macros makes it
easy to change how and when each kind of message is printed; such
changes need only be made to the macro definitions and all the callers
change automatically.

   To diagnose static issues, i.e., when `autoconf' is run, see *note
Diagnostic Macros::.

 -- Macro: AC_MSG_CHECKING (FEATURE-DESCRIPTION)
     Notify the user that `configure' is checking for a particular
     feature.  This macro prints a message that starts with `checking '
     and ends with `...' and no newline.  It must be followed by a call
     to `AC_MSG_RESULT' to print the result of the check and the
     newline.  The FEATURE-DESCRIPTION should be something like
     `whether the Fortran compiler accepts C++ comments' or `for c89'.

     This macro prints nothing if `configure' is run with the `--quiet'
     or `--silent' option.

 -- Macro: AC_MSG_RESULT (RESULT-DESCRIPTION)
     Notify the user of the results of a check.  RESULT-DESCRIPTION is
     almost always the value of the cache variable for the check,
     typically `yes', `no', or a file name.  This macro should follow a
     call to `AC_MSG_CHECKING', and the RESULT-DESCRIPTION should be
     the completion of the message printed by the call to
     `AC_MSG_CHECKING'.

     This macro prints nothing if `configure' is run with the `--quiet'
     or `--silent' option.

 -- Macro: AC_MSG_NOTICE (MESSAGE)
     Deliver the MESSAGE to the user.  It is useful mainly to print a
     general description of the overall purpose of a group of feature
     checks, e.g.,

          AC_MSG_NOTICE([checking if stack overflow is detectable])

     This macro prints nothing if `configure' is run with the `--quiet'
     or `--silent' option.

 -- Macro: AC_MSG_ERROR (ERROR-DESCRIPTION, [EXIT-STATUS = `$?/1'])
     Notify the user of an error that prevents `configure' from
     completing.  This macro prints an error message to the standard
     error output and exits `configure' with EXIT-STATUS (`$?' by
     default, except that `0' is converted to `1').  ERROR-DESCRIPTION
     should be something like `invalid value $HOME for \$HOME'.

     The ERROR-DESCRIPTION should start with a lower-case letter, and
     "cannot" is preferred to "can't".

 -- Macro: AC_MSG_FAILURE (ERROR-DESCRIPTION, [EXIT-STATUS])
     This `AC_MSG_ERROR' wrapper notifies the user of an error that
     prevents `configure' from completing _and_ that additional details
     are provided in `config.log'.  This is typically used when
     abnormal results are found during a compilation.

 -- Macro: AC_MSG_WARN (PROBLEM-DESCRIPTION)
     Notify the `configure' user of a possible problem.  This macro
     prints the message to the standard error output; `configure'
     continues running afterward, so macros that call `AC_MSG_WARN'
     should provide a default (back-up) behavior for the situations
     they warn about.  PROBLEM-DESCRIPTION should be something like `ln
     -s seems to make hard links'.

==============================================================================
File: autoconf.info,  Node: |Programming_in_M4|,  Next: |Programming_in_M4sh|,  Prev: |Results|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Programming_in_M4*

8 Programming in M4
*****==============

Autoconf is written on top of two layers: "M4sugar", which provides
convenient macros for pure M4 programming, and "M4sh", which provides
macros dedicated to shell script generation.

   As of this version of Autoconf, these two layers still contain
experimental macros, whose interface might change in the future.  As a
matter of fact, _anything that is not documented must not be used_.

MENU

* |M4_Quotation|::                Protecting macros from unwanted expansion
* |Using_autom4te|::              The Autoconf executables backbone
* |Programming_in_M4sugar|::      Convenient pure M4 macros
* |Debugging_via_autom4te|::      Figuring out what M4 was doing

==============================================================================
File: autoconf.info,  Node: |M4_Quotation|,  Next: |Using_autom4te|,  Up: |Programming_in_M4|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *M4_Quotation*

8.1 M4 Quotation
=====-----------

The most common problem with existing macros is an improper quotation.
This section, which users of Autoconf can skip, but which macro writers
_must_ read, first justifies the quotation scheme that was chosen for
Autoconf and then ends with a rule of thumb.  Understanding the former
helps one to follow the latter.

MENU

* |Active_Characters|::           Characters that change the behavior of M4
* |One_Macro_Call|::              Quotation and one macro call
* |Quoting_and_Parameters|::      M4 vs. shell parameters
* |Quotation_and_Nested_Macros|::  Macros calling macros
* |Changequote_is_Evil|::         Worse than INTERCAL: M4 + changequote
* |Quadrigraphs|::                Another way to escape special characters
* |Balancing_Parentheses|::       Dealing with unbalanced parentheses
* |Quotation_Rule_Of_Thumb|::     One parenthesis, one quote

==============================================================================
File: autoconf.info,  Node: |Active_Characters|,  Next: |One_Macro_Call|,  Up: M4 Quotation
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Active_Characters*

8.1.1 Active Characters
-----------------------

To fully understand where proper quotation is important, you first need
to know what the special characters are in Autoconf: `#' introduces a
comment inside which no macro expansion is performed, `,' separates
arguments, `[' and `]' are the quotes themselves(1), `(' and `)' (which
M4 tries to match by pairs), and finally `$' inside a macro definition.

   In order to understand the delicate case of macro calls, we first
have to present some obvious failures.  Below they are "obvious-ified",
but when you find them in real life, they are usually in disguise.

   Comments, introduced by a hash and running up to the newline, are
opaque tokens to the top level: active characters are turned off, and
there is no macro expansion:

     # define([def], ine)
     =># define([def], ine)

   Each time there can be a macro expansion, there is a quotation
expansion, i.e., one level of quotes is stripped:

     int tab[10];
     =>int tab10;
     [int tab[10];]
     =>int tab[10];

   Without this in mind, the reader might try hopelessly to use her
macro `array':

     define([array], [int tab[10];])
     array
     =>int tab10;
     [array]
     =>array

How can you correctly output the intended results(2)?

   ---------- Footnotes ----------

   (1) By itself, M4 uses ``' and `''; it is the M4sugar layer that
sets up the preferred quotes of `[' and `]'.

   (2) Using `defn'.

==============================================================================
File: autoconf.info,  Node: |One_Macro_Call|,  Next: |Quoting_and_Parameters|,  Prev: |Active_Characters|,  Up: |M4_Quotation|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *One_Macro_Call*

8.1.2 One Macro Call
--------------------

Let's proceed on the interaction between active characters and macros
with this small macro, which just returns its first argument:

     define([car], [$1])

The two pairs of quotes above are not part of the arguments of
`define'; rather, they are understood by the top level when it tries to
find the arguments of `define'.  Therefore, assuming `car' is not
already defined, it is equivalent to write:

     define(car, $1)

But, while it is acceptable for a `configure.ac' to avoid unnecessary
quotes, it is bad practice for Autoconf macros which must both be more
robust and also advocate perfect style.

   At the top level, there are only two possibilities: either you quote
or you don't:

     car(foo, bar, baz)
     =>foo
     [car(foo, bar, baz)]
     =>car(foo, bar, baz)

   Let's pay attention to the special characters:

     car(#)
     error-->EOF in argument list

   The closing parenthesis is hidden in the comment; with a hypothetical
quoting, the top level understood it this way:

     car([#)]

Proper quotation, of course, fixes the problem:

     car([#])
     =>#

   Here are more examples:

     car(foo, bar)
     =>foo
     car([foo, bar])
     =>foo, bar
     car((foo, bar))
     =>(foo, bar)
     car([(foo], [bar)])
     =>(foo
     define([a], [b])
     =>
     car(a)
     =>b
     car([a])
     =>b
     car([[a]])
     =>a
     car([[[a]]])
     =>[a]

==============================================================================
File: autoconf.info,  Node: |Quoting_and_Parameters|,  Next: |Quotation_and_Nested_Macros|,  Prev: |One_Macro_Call|,  Up: |M4_Quotation|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *Quoting_and_Parameters*

8.1.3 Quoting and Parameters
----------------------------

When M4 encounters `$' within a macro definition, followed immediately
by a character it recognizes (`0'...`9', `#', `@', or `*'), it will
perform M4 parameter expansion.  This happens regardless of how many
layers of quotes the parameter expansion is nested within, or even if
it occurs in text that will be rescanned as a comment.

     define([none], [$1])
     =>
     define([one], [[$1]])
     =>
     define([two], [[[$1]]])
     =>
     define([comment], [# $1])
     =>
     define([active], [ACTIVE])
     =>
     none([active])
     =>ACTIVE
     one([active])
     =>active
     two([active])
     =>[active]
     comment([active])
     =># active

   On the other hand, since autoconf generates shell code, you often
want to output shell variable expansion, rather than performing M4
parameter expansion.  To do this, you must use M4 quoting to separate
the `$' from the next character in the definition of your macro.  If
the macro definition occurs in single-quoted text, then insert another
level of quoting; if the usage is already inside a double-quoted
string, then split it into concatenated strings.

     define([single], [a single-quoted $[]1 definition])
     =>
     define([double], [[a double-quoted $][1 definition]])
     =>
     single
     =>a single-quoted $1 definition
     double
     =>a double-quoted $1 definition

   Posix states that M4 implementations are free to provide
implementation extensions when `${' is encountered in a macro
definition.  Autoconf reserves the longer sequence `${{' for use with
planned extensions that will be available in the future GNU M4 2.0, but
guarantees that all other instances of `${' will be output literally.
Therefore, this idiom can also be used to output shell code parameter
references:

     define([first], [${1}])first
     =>${1}

   Posix also states that `$11' should expand to the first parameter
concatenated with a literal `1', although some versions of GNU M4
expand the eleventh parameter instead.  For portability, you should
only use single-digit M4 parameter expansion.

   With this in mind, we can explore the cases where macros invoke
macros...

==============================================================================
File: autoconf.info,  Node: |Quotation_and_Nested_Macros|,  Next: |Changequote_is_Evil|,  Prev: |Quoting_and_Parameters|,  Up: |M4_Quotation|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Quotation_and_Nested_Macros*

8.1.4 Quotation and Nested Macros
---------------------------------

The examples below use the following macros:

     define([car], [$1])
     define([active], [ACT, IVE])
     define([array], [int tab[10]])

   Each additional embedded macro call introduces other possible
interesting quotations:

     car(active)
     =>ACT
     car([active])
     =>ACT, IVE
     car([[active]])
     =>active

   In the first case, the top level looks for the arguments of `car',
and finds `active'.  Because M4 evaluates its arguments before applying
the macro, `active' is expanded, which results in:

     car(ACT, IVE)
     =>ACT

In the second case, the top level gives `active' as first and only
argument of `car', which results in:

     active
     =>ACT, IVE

i.e., the argument is evaluated _after_ the macro that invokes it.  In
the third case, `car' receives `[active]', which results in:

     [active]
     =>active

exactly as we already saw above.

   The example above, applied to a more realistic example, gives:

     car(int tab[10];)
     =>int tab10;
     car([int tab[10];])
     =>int tab10;
     car([[int tab[10];]])
     =>int tab[10];

Huh?  The first case is easily understood, but why is the second wrong,
and the third right?  To understand that, you must know that after M4
expands a macro, the resulting text is immediately subjected to macro
expansion and quote removal.  This means that the quote removal occurs
twice--first before the argument is passed to the `car' macro, and
second after the `car' macro expands to the first argument.

   As the author of the Autoconf macro `car', you then consider it to
be incorrect that your users have to double-quote the arguments of
`car', so you "fix" your macro.  Let's call it `qar' for quoted car:

     define([qar], [[$1]])

and check that `qar' is properly fixed:

     qar([int tab[10];])
     =>int tab[10];

Ahhh!  That's much better.

   But note what you've done: now that the result of `qar' is always a
literal string, the only time a user can use nested macros is if she
relies on an _unquoted_ macro call:

     qar(active)
     =>ACT
     qar([active])
     =>active

leaving no way for her to reproduce what she used to do with `car':

     car([active])
     =>ACT, IVE

Worse yet: she wants to use a macro that produces a set of `cpp' macros:

     define([my_includes], [#include <stdio.h>])
     car([my_includes])
     =>#include <stdio.h>
     qar(my_includes)
     error-->EOF in argument list

   This macro, `qar', because it double quotes its arguments, forces
its users to leave their macro calls unquoted, which is dangerous.
Commas and other active symbols are interpreted by M4 before they are
given to the macro, often not in the way the users expect.  Also,
because `qar' behaves differently from the other macros, it's an
exception that should be avoided in Autoconf.

==============================================================================
File: autoconf.info,  Node: |Changequote_is_Evil|,  Next: |Quadrigraphs|,  Prev: |Quotation_and_Nested_Macros|,  Up: |M4_Quotation|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *Changequote_is_Evil*

8.1.5 `changequote' is Evil
---------------------------

The temptation is often high to bypass proper quotation, in particular
when it's late at night.  Then, many experienced Autoconf hackers
finally surrender to the dark side of the force and use the ultimate
weapon: `changequote'.

   The M4 builtin `changequote' belongs to a set of primitives that
allow one to adjust the syntax of the language to adjust it to one's
needs.  For instance, by default M4 uses ``' and `'' as quotes, but in
the context of shell programming (and actually of most programming
languages), that's about the worst choice one can make: because of
strings and back-quoted expressions in shell code (such as `'this'' and
``that`'), and because of literal characters in usual programming
languages (as in `'0''), there are many unbalanced ``' and `''.  Proper
M4 quotation then becomes a nightmare, if not impossible.  In order to
make M4 useful in such a context, its designers have equipped it with
`changequote', which makes it possible to choose another pair of
quotes.  M4sugar, M4sh, Autoconf, and Autotest all have chosen to use
`[' and `]'.  Not especially because they are unlikely characters, but
_because they are characters unlikely to be unbalanced_.

   There are other magic primitives, such as `changecom' to specify
what syntactic forms are comments (it is common to see `changecom(<!--,
-->)' when M4 is used to produce HTML pages), `changeword' and
`changesyntax' to change other syntactic details (such as the character
to denote the Nth argument, `$' by default, the parentheses around
arguments, etc.).

   These primitives are really meant to make M4 more useful for specific
domains: they should be considered like command line options:
`--quotes', `--comments', `--words', and `--syntax'.  Nevertheless,
they are implemented as M4 builtins, as it makes M4 libraries self
contained (no need for additional options).

   There lies the problem...


   The problem is that it is then tempting to use them in the middle of
an M4 script, as opposed to its initialization.  This, if not carefully
thought out, can lead to disastrous effects: _you are changing the
language in the middle of the execution_.  Changing and restoring the
syntax is often not enough: if you happened to invoke macros in between,
these macros are lost, as the current syntax is probably not the one
they were implemented with.

==============================================================================
File: autoconf.info,  Node: |Quadrigraphs|,  Next: |Balancing_Parentheses|,  Prev: |Changequote_is_Evil|,  Up: |M4_Quotation|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Quadrigraphs*

8.1.6 Quadrigraphs
------------------

When writing an Autoconf macro you may occasionally need to generate
special characters that are difficult to express with the standard
Autoconf quoting rules.  For example, you may need to output the regular
expression `[^[]', which matches any character other than `['.  This
expression contains unbalanced brackets so it cannot be put easily into
an M4 macro.

   Additionally, there are a few m4sugar macros (such as `m4_split' and
`m4_expand') which internally use special markers in addition to the
regular quoting characters.  If the arguments to these macros contain
the literal strings `-=<{(' or `)}>=-', the macros might behave
incorrectly.

   You can work around these problems by using one of the following
"quadrigraphs":

`@<:@'
     `['

`@:>@'
     `]'

`@S|@'
     `$'

`@%:@'
     `#'

`@{:@'
     `('

`@:}@'
     `)'

`@&t@'
     Expands to nothing.

   Quadrigraphs are replaced at a late stage of the translation process,
after `m4' is run, so they do not get in the way of M4 quoting.  For
example, the string `^@<:@', independently of its quotation, appears as
`^[' in the output.

   The empty quadrigraph can be used:

   - to mark trailing spaces explicitly

     Trailing spaces are smashed by `autom4te'.  This is a feature.

   - to produce quadrigraphs and other strings reserved by m4sugar

     For instance `@<@&t@:@' produces `@<:@'.  For a more contrived
     example:

          m4_define([a], [A])m4_define([b], [B])m4_define([c], [C])dnl
          m4_split([a )}>=- b -=<{( c])
          =>[a], [], [B], [], [c]
          m4_split([a )}@&t@>=- b -=<@&t@{( c])
          =>[a], [)}>=-], [b], [-=<{(], [c]

   - to escape _occurrences_ of forbidden patterns

     For instance you might want to mention `AC_FOO' in a comment, while
     still being sure that `autom4te' still catches unexpanded `AC_*'.
     Then write `AC@&t@_FOO'.

   The name `@&t@' was suggested by Paul Eggert:

     I should give some credit to the `@&t@' pun.  The `&' is my own
     invention, but the `t' came from the source code of the ALGOL68C
     compiler, written by Steve Bourne (of Bourne shell fame), and
     which used `mt' to denote the empty string.  In C, it would have
     looked like something like:

          char const mt[] = "";

     but of course the source code was written in Algol 68.

     I don't know where he got `mt' from: it could have been his own
     invention, and I suppose it could have been a common pun around the
     Cambridge University computer lab at the time.

==============================================================================
File: autoconf.info,  Node: |Balancing_Parentheses|,  Next: |Quotation_Rule_Of_Thumb|,  Prev: |Quadrigraphs|,  Up: |M4_Quotation|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *Balancing_Parentheses*

8.1.7 Dealing with unbalanced parentheses
-----------------------------------------

One of the pitfalls of portable shell programming is that `case'
statements require unbalanced parentheses (*note Limitations of Shell
Builtins: case.).  With syntax highlighting editors, the presence of
unbalanced `)' can interfere with editors that perform syntax
highlighting of macro contents based on finding the matching `('.
Another concern is how much editing must be done when transferring code
snippets between shell scripts and macro definitions.  But most
importantly, the presence of unbalanced parentheses can introduce
expansion bugs.

   For an example, here is an underquoted attempt to use the macro
`my_case', which happens to expand to a portable `case' statement:

     AC_DEFUN([my_case],
     [case $file_name in
       *.c) echo "C source code";;
     esac])
     AS_IF(:, my_case)

In the above example, the `AS_IF' call underquotes its arguments.  As a
result, the unbalanced `)' generated by the premature expansion of
`my_case' results in expanding `AS_IF' with a truncated parameter, and
the expansion is syntactically invalid:

     if :; then
       case $file_name in
       *.c
     fi echo "C source code";;
     esac)

   If nothing else, this should emphasize the importance of the quoting
arguments to macro calls.  On the other hand, there are several
variations for defining `my_case' to be more robust, even when used
without proper quoting, each with some benefits and some drawbacks.

     Creative literal shell comment
          AC_DEFUN([my_case],
          [case $file_name in #(
            *.c) echo "C source code";;
          esac])
     This version provides balanced parentheses to several editors, and
     can be copied and pasted into a terminal as is.  Unfortunately, it
     is still unbalanced as an Autoconf argument, since `#(' is an M4
     comment that masks the normal properties of `('.

     Quadrigraph shell comment
          AC_DEFUN([my_case],
          [case $file_name in @%:@(
            *.c) echo "C source code";;
          esac])
     This version provides balanced parentheses to even more editors,
     and can be used as a balanced Autoconf argument.  Unfortunately,
     it requires some editing before it can be copied and pasted into a
     terminal, and the use of the quadrigraph `@%:@' for `#' reduces
     readability.

     Quoting just the parenthesis
          AC_DEFUN([my_case],
          [case $file_name in
            *.c[)] echo "C source code";;
          esac])
     This version quotes the `)', so that it can be used as a balanced
     Autoconf argument.  As written, this is not balanced to an editor,
     but it can be coupled with `[#(]' to meet that need, too.
     However, it still requires some edits before it can be copied and
     pasted into a terminal.

     Double-quoting the entire statement
          AC_DEFUN([my_case],
          [[case $file_name in #(
            *.c) echo "C source code";;
          esac]])
     Since the entire macro is double-quoted, there is no problem with
     using this as an Autoconf argument; and since the double-quoting
     is over the entire statement, this code can be easily copied and
     pasted into a terminal.  However, the double quoting prevents the
     expansion of any macros inside the case statement, which may cause
     its own set of problems.

     Using `AS_CASE'
          AC_DEFUN([my_case],
          [AS_CASE([$file_name],
            [*.c], [echo "C source code"])])
     This version avoids the balancing issue altogether, by relying on
     `AS_CASE' (*note Common Shell Constructs::); it also allows for the
     expansion of `AC_REQUIRE' to occur prior to the entire case
     statement, rather than within a branch of the case statement that
     might not be taken.  However, the abstraction comes with a penalty
     that it is no longer a quick copy, paste, and edit to get back to
     shell code.

==============================================================================
File: autoconf.info,  Node: |Quotation_Rule_Of_Thumb|,  Prev: |Balancing_Parentheses|,  Up: |M4_Quotation|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *Quotation_Rule_Of_Thumb*

8.1.8 Quotation Rule Of Thumb
-----------------------------

To conclude, the quotation rule of thumb is:

             _One pair of quotes per pair of parentheses._

   Never over-quote, never under-quote, in particular in the definition
of macros.  In the few places where the macros need to use brackets
(usually in C program text or regular expressions), properly quote _the
arguments_!

   It is common to read Autoconf programs with snippets like:

     AC_TRY_LINK(
     changequote(<<, >>)dnl
     <<#include <time.h>
     #ifndef tzname /* For SGI.  */
     extern char *tzname[]; /* RS6000 and others reject char **tzname.  */
     #endif>>,
     changequote([, ])dnl
     [atoi (*tzname);], ac_cv_var_tzname=yes, ac_cv_var_tzname=no)

which is incredibly useless since `AC_TRY_LINK' is _already_ double
quoting, so you just need:

     AC_TRY_LINK(
     [#include <time.h>
     #ifndef tzname /* For SGI.  */
     extern char *tzname[]; /* RS6000 and others reject char **tzname.  */
     #endif],
                 [atoi (*tzname);],
                 [ac_cv_var_tzname=yes],
                 [ac_cv_var_tzname=no])

The M4-fluent reader might note that these two examples are rigorously
equivalent, since M4 swallows both the `changequote(<<, >>)' and `<<'
`>>' when it "collects" the arguments: these quotes are not part of the
arguments!

   Simplified, the example above is just doing this:

     changequote(<<, >>)dnl
     <<[]>>
     changequote([, ])dnl

instead of simply:

     [[]]

   With macros that do not double quote their arguments (which is the
rule), double-quote the (risky) literals:

     AC_LINK_IFELSE([AC_LANG_PROGRAM(
     [[#include <time.h>
     #ifndef tzname /* For SGI.  */
     extern char *tzname[]; /* RS6000 and others reject char **tzname.  */
     #endif]],
                                     [atoi (*tzname);])],
                    [ac_cv_var_tzname=yes],
                    [ac_cv_var_tzname=no])

   Please note that the macro `AC_TRY_LINK' is obsolete, so you really
should be using `AC_LINK_IFELSE' instead.

   *Note Quadrigraphs::, for what to do if you run into a hopeless case
where quoting does not suffice.

   When you create a `configure' script using newly written macros,
examine it carefully to check whether you need to add more quotes in
your macros.  If one or more words have disappeared in the M4 output,
you need more quotes.  When in doubt, quote.

   However, it's also possible to put on too many layers of quotes.  If
this happens, the resulting `configure' script may contain unexpanded
macros.  The `autoconf' program checks for this problem by looking for
the string `AC_' in `configure'.  However, this heuristic does not work
in general: for example, it does not catch overquoting in `AC_DEFINE'
descriptions.

==============================================================================
File: autoconf.info,  Node: |Using_autom4te|,  Next: |Programming_in_M4sugar|,  Prev: |M4_Quotation|,  Up: |Programming_in_M4|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Using_autom4te*

8.2 Using `autom4te'
=====---------------

The Autoconf suite, including M4sugar, M4sh, and Autotest, in addition
to Autoconf per se, heavily rely on M4.  All these different uses
revealed common needs factored into a layer over M4: `autom4te'(1).

   `autom4te' is a preprocessor that is like `m4'.  It supports M4
extensions designed for use in tools like Autoconf.

MENU

* |autom4te_Invocation|::         A GNU M4 wrapper
* |Customizing_autom4te|::        Customizing the Autoconf package

   ---------- Footnotes ----------

   (1) Yet another great name from Lars J. Aas.

==============================================================================
File: autoconf.info,  Node: |autom4te_Invocation|,  Next: |Customizing_autom4te|,  Up: |Using_autom4te|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *autom4te_Invocation*

8.2.1 Invoking `autom4te'
-------------------------

The command line arguments are modeled after M4's:

     autom4te OPTIONS FILES

where the FILES are directly passed to `m4'.  By default, GNU M4 is
found during configuration, but the environment variable `M4' can be
set to tell `autom4te' where to look.  In addition to the regular
expansion, it handles the replacement of the quadrigraphs (*note
Quadrigraphs::), and of `__oline__', the current line in the output.
It supports an extended syntax for the FILES:

`FILE.m4f'
     This file is an M4 frozen file.  Note that _all the previous files
     are ignored_.  See the option `--melt' for the rationale.

`FILE?'
     If found in the library path, the FILE is included for expansion,
     otherwise it is ignored instead of triggering a failure.


   Of course, it supports the Autoconf common subset of options:

`--help'
`-h'
     Print a summary of the command line options and exit.

`--version'
`-V'
     Print the version number of Autoconf and exit.

`--verbose'
`-v'
     Report processing steps.

`--debug'
`-d'
     Don't remove the temporary files and be even more verbose.

`--include=DIR'
`-I DIR'
     Also look for input files in DIR.  Multiple invocations accumulate.

`--output=FILE'
`-o FILE'
     Save output (script or trace) to FILE.  The file `-' stands for
     the standard output.


   As an extension of `m4', it includes the following options:

`--warnings=CATEGORY'
`-W CATEGORY'
     Report the warnings related to CATEGORY (which can actually be a
     comma separated list).  *Note Reporting Messages::, macro
     `AC_DIAGNOSE', for a comprehensive list of categories.  Special
     values include:

    `all'
          report all the warnings

    `none'
          report none

    `error'
          treats warnings as errors

    `no-CATEGORY'
          disable warnings falling into CATEGORY

     Warnings about `syntax' are enabled by default, and the environment
     variable `WARNINGS', a comma separated list of categories, is
     honored.  `autom4te -W CATEGORY' actually behaves as if you had
     run:

          autom4te --warnings=syntax,$WARNINGS,CATEGORY

     For example, if you want to disable defaults and `WARNINGS' of
     `autom4te', but enable the warnings about obsolete constructs, you
     would use `-W none,obsolete'.

     `autom4te' displays a back trace for errors, but not for warnings;
     if you want them, just pass `-W error'.

`--melt'
`-M'
     Do not use frozen files.  Any argument `FILE.m4f' is replaced by
     `FILE.m4'.  This helps tracing the macros which are executed only
     when the files are frozen, typically `m4_define'.  For instance,
     running:

          autom4te --melt 1.m4 2.m4f 3.m4 4.m4f input.m4

     is roughly equivalent to running:

          m4 1.m4 2.m4 3.m4 4.m4 input.m4

     while

          autom4te 1.m4 2.m4f 3.m4 4.m4f input.m4

     is equivalent to:

          m4 --reload-state=4.m4f input.m4

`--freeze'
`-F'
     Produce a frozen state file.  `autom4te' freezing is stricter than
     M4's: it must produce no warnings, and no output other than empty
     lines (a line with white space is _not_ empty) and comments
     (starting with `#').  Unlike `m4''s similarly-named option, this
     option takes no argument:

          autom4te 1.m4 2.m4 3.m4 --freeze --output=3.m4f

     corresponds to

          m4 1.m4 2.m4 3.m4 --freeze-state=3.m4f

`--mode=OCTAL-MODE'
`-m OCTAL-MODE'
     Set the mode of the non-traces output to OCTAL-MODE; by default
     `0666'.


   As another additional feature over `m4', `autom4te' caches its
results.  GNU M4 is able to produce a regular output and traces at the
same time.  Traces are heavily used in the GNU Build System:
`autoheader' uses them to build `config.h.in', `autoreconf' to
determine what GNU Build System components are used, `automake' to
"parse" `configure.ac' etc.  To avoid recomputation, traces are cached
while performing regular expansion, and conversely.  This cache is
(actually, the caches are) stored in the directory `autom4te.cache'.
_It can safely be removed_ at any moment (especially if for some reason
`autom4te' considers it trashed).

`--cache=DIRECTORY'
`-C DIRECTORY'
     Specify the name of the directory where the result should be
     cached.  Passing an empty value disables caching.  Be sure to pass
     a relative file name, as for the time being, global caches are not
     supported.

`--no-cache'
     Don't cache the results.

`--force'
`-f'
     If a cache is used, consider it obsolete (but update it anyway).


   Because traces are so important to the GNU Build System, `autom4te'
provides high level tracing features as compared to M4, and helps
exploiting the cache:

`--trace=MACRO[:FORMAT]'
`-t MACRO[:FORMAT]'
     Trace the invocations of MACRO according to the FORMAT.  Multiple
     `--trace' arguments can be used to list several macros.  Multiple
     `--trace' arguments for a single macro are not cumulative;
     instead, you should just make FORMAT as long as needed.

     The FORMAT is a regular string, with newlines if desired, and
     several special escape codes.  It defaults to `$f:$l:$n:$%'.  It
     can use the following special escapes:

    `$$'
          The character `$'.

    `$f'
          The file name from which MACRO is called.

    `$l'
          The line number from which MACRO is called.

    `$d'
          The depth of the MACRO call.  This is an M4 technical detail
          that you probably don't want to know about.

    `$n'
          The name of the MACRO.

    `$NUM'
          The NUMth argument of the call to MACRO.

    `$@'
    `$SEP@'
    `${SEPARATOR}@'
          All the arguments passed to MACRO, separated by the character
          SEP or the string SEPARATOR (`,' by default).  Each argument
          is quoted, i.e., enclosed in a pair of square brackets.

    `$*'
    `$SEP*'
    `${SEPARATOR}*'
          As above, but the arguments are not quoted.

    `$%'
    `$SEP%'
    `${SEPARATOR}%'
          As above, but the arguments are not quoted, all new line
          characters in the arguments are smashed, and the default
          separator is `:'.

          The escape `$%' produces single-line trace outputs (unless
          you put newlines in the `separator'), while `$@' and `$*' do
          not.

     *Note autoconf Invocation::, for examples of trace uses.

`--preselect=MACRO'
`-p MACRO'
     Cache the traces of MACRO, but do not enable traces.  This is
     especially important to save CPU cycles in the future.  For
     instance, when invoked, `autoconf' preselects all the macros that
     `autoheader', `automake', `autoreconf', etc., trace, so that
     running `m4' is not needed to trace them: the cache suffices.
     This results in a huge speed-up.


   Finally, `autom4te' introduces the concept of "Autom4te libraries".
They consists in a powerful yet extremely simple feature: sets of
combined command line arguments:

`--language=LANGUAGE'
`-l LANGUAGE'
     Use the LANGUAGE Autom4te library.  Current languages include:

    `M4sugar'
          create M4sugar output.

    `M4sh'
          create M4sh executable shell scripts.

    `Autotest'
          create Autotest executable test suites.

    `Autoconf-without-aclocal-m4'
          create Autoconf executable configure scripts without reading
          `aclocal.m4'.

    `Autoconf'
          create Autoconf executable configure scripts.  This language
          inherits all the characteristics of
          `Autoconf-without-aclocal-m4' and additionally reads
          `aclocal.m4'.

`--prepend-include=DIR'
`-B DIR'
     Prepend directory DIR to the search path.  This is used to include
     the language-specific files before any third-party macros.


   As an example, if Autoconf is installed in its default location,
`/usr/local', the command `autom4te -l m4sugar foo.m4' is strictly
equivalent to the command:

     autom4te --prepend-include /usr/local/share/autoconf \
       m4sugar/m4sugar.m4f --warnings syntax foo.m4

Recursive expansion applies here: the command `autom4te -l m4sh foo.m4'
is the same as `autom4te --language M4sugar m4sugar/m4sh.m4f foo.m4',
i.e.:

     autom4te --prepend-include /usr/local/share/autoconf \
       m4sugar/m4sugar.m4f m4sugar/m4sh.m4f --mode 777 foo.m4

The definition of the languages is stored in `autom4te.cfg'.

==============================================================================
File: autoconf.info,  Node: |Customizing_autom4te|,  Prev: |autom4te_Invocation|,  Up: |Using_autom4te|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Customizing_autom4te*

8.2.2 Customizing `autom4te'
----------------------------

One can customize `autom4te' via `~/.autom4te.cfg' (i.e., as found in
the user home directory), and `./.autom4te.cfg' (i.e., as found in the
directory from which `autom4te' is run).  The order is first reading
`autom4te.cfg', then `~/.autom4te.cfg', then `./.autom4te.cfg', and
finally the command line arguments.

   In these text files, comments are introduced with `#', and empty
lines are ignored.  Customization is performed on a per-language basis,
wrapped in between a `begin-language: "LANGUAGE"', `end-language:
"LANGUAGE"' pair.

   Customizing a language stands for appending options (*note autom4te
Invocation::) to the current definition of the language.  Options, and
more generally arguments, are introduced by `args: ARGUMENTS'.  You may
use the traditional shell syntax to quote the ARGUMENTS.

   As an example, to disable Autoconf caches (`autom4te.cache')
globally, include the following lines in `~/.autom4te.cfg':

## ------------------ ##
## User Preferences.  ##
## ------------------ ##

begin-language: "Autoconf-without-aclocal-m4"
args: --no-cache
end-language: "Autoconf-without-aclocal-m4"

==============================================================================
File: autoconf.info,  Node: |Programming_in_M4sugar|,  Next: |Debugging_via_autom4te|,  Prev: |Using_autom4te|,  Up: |Programming_in_M4|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *Programming_in_M4sugar*

8.3 Programming in M4sugar
=====---------------------

M4 by itself provides only a small, but sufficient, set of all-purpose
macros.  M4sugar introduces additional generic macros.  Its name was
coined by Lars J. Aas: "Readability And Greater Understanding Stands 4
M4sugar".

   M4sugar reserves the macro namespace `^_m4_' for internal use, and
the macro namespace `^m4_' for M4sugar macros.  You should not define
your own macros into these namespaces.

MENU

* |Redefined_M4_Macros|::         M4 builtins changed in M4sugar
* |Diagnostic_Macros|::           Diagnostic messages from M4sugar
* |Diversion_support|::           Diversions in M4sugar
* |Conditional_constructs|::      Conditions in M4
* |Looping_constructs|::          Iteration in M4
* |Evaluation_Macros|::           More quotation and evaluation control
* |Text_processing_Macros|::      String manipulation in M4
* |Number_processing_Macros|::    Arithmetic computation in M4
* |Set_manipulation_Macros|::     Set manipulation in M4
* |Forbidden_Patterns|::          Catching unexpanded macros

==============================================================================
File: autoconf.info,  Node: |Redefined_M4_Macros|,  Next: |Diagnostic_Macros|,  Up: |Programming_in_M4sugar|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *Redefined_M4_Macros*

8.3.1 Redefined M4 Macros
-------------------------

With a few exceptions, all the M4 native macros are moved in the `m4_'
pseudo-namespace, e.g., M4sugar renames `define' as `m4_define' etc.

   The list of macros unchanged from M4, except for their name, is:
   - m4_builtin

   - m4_changecom

   - m4_changequote

   - m4_debugfile

   - m4_debugmode

   - m4_decr

   - m4_define

   - m4_divnum

   - m4_errprint

   - m4_esyscmd

   - m4_eval

   - m4_format

   - m4_ifdef

   - m4_incr

   - m4_index

   - m4_indir

   - m4_len

   - m4_pushdef

   - m4_shift

   - m4_substr

   - m4_syscmd

   - m4_sysval

   - m4_traceoff

   - m4_traceon

   - m4_translit

   Some M4 macros are redefined, and are slightly incompatible with
their native equivalent.

 -- Macro: __file__
 -- Macro: __line__
     All M4 macros starting with `__' retain their original name: for
     example, no `m4__file__' is defined.

 -- Macro: __oline__
     This is not technically a macro, but a feature of Autom4te.  The
     sequence `__oline__' can be used similarly to the other m4sugar
     location macros, but rather than expanding to the location of the
     input file, it is translated to the line number where it appears
     in the output file after all other M4 expansions.

 -- Macro: dnl
     This macro kept its original name: no `m4_dnl' is defined.

 -- Macro: m4_bpatsubst (STRING, REGEXP, [REPLACEMENT])
     This macro corresponds to `patsubst'.  The name `m4_patsubst' is
     kept for future versions of M4sugar, once GNU M4 2.0 is released
     and supports extended regular expression syntax.

 -- Macro: m4_bregexp (STRING, REGEXP, [REPLACEMENT])
     This macro corresponds to `regexp'.  The name `m4_regexp' is kept
     for future versions of M4sugar, once GNU M4 2.0 is released and
     supports extended regular expression syntax.

 -- Macro: m4_copy (SOURCE, DEST)
 -- Macro: m4_copy_force (SOURCE, DEST)
 -- Macro: m4_rename (SOURCE, DEST)
 -- Macro: m4_rename_force (SOURCE, DEST)
     These macros aren't directly builtins, but are closely related to
     `m4_pushdef' and `m4_defn'.  `m4_copy' and `m4_rename' ensure that
     DEST is undefined, while `m4_copy_force' and `m4_rename_force'
     overwrite any existing definition.  All four macros then proceed
     to copy the entire pushdef stack of definitions of SOURCE over to
     DEST.  `m4_copy' and `m4_copy_force' preserve the source
     (including in the special case where SOURCE is undefined), while
     `m4_rename' and `m4_rename_force' undefine the original macro name
     (making it an error to rename an undefined SOURCE).

     Note that attempting to invoke a renamed macro might not work,
     since the macro may have a dependence on helper macros accessed
     via composition of `$0' but that were not also renamed; likewise,
     other macros may have a hard-coded dependence on SOURCE and could
     break if SOURCE has been deleted.  On the other hand, it is always
     safe to rename a macro to temporarily move it out of the way, then
     rename it back later to restore original semantics.

 -- Macro: m4_defn (MACRO...)
     This macro fails if MACRO is not defined, even when using older
     versions of M4 that did not warn.  See `m4_undefine'.
     Unfortunately, in order to support these older versions of M4,
     there are some situations involving unbalanced quotes where
     concatenating multiple macros together will work in newer M4 but
     not in m4sugar; use quadrigraphs to work around this.

 -- Macro: m4_divert (DIVERSION)
     M4sugar relies heavily on diversions, so rather than behaving as a
     primitive, `m4_divert' behaves like:
          m4_divert_pop()m4_divert_push([DIVERSION])
     *Note Diversion support::, for more details about the use of the
     diversion stack.  In particular, this implies that DIVERSION
     should be a named diversion rather than a raw number.  But be
     aware that it is seldom necessary to explicitly change the
     diversion stack, and that when done incorrectly, it can lead to
     syntactically invalid scripts.

 -- Macro: m4_dumpdef (NAME...)
 -- Macro: m4_dumpdefs (NAME...)
     `m4_dumpdef' is like the M4 builtin, except that this version
     requires at least one argument, output always goes to standard
     error rather than the current debug file, no sorting is done on
     multiple arguments, and an error is issued if any NAME is
     undefined.  `m4_dumpdefs' is a convenience macro that calls
     `m4_dumpdef' for all of the `m4_pushdef' stack of definitions,
     starting with the current, and silently does nothing if NAME is
     undefined.

     Unfortunately, due to a limitation in M4 1.4.x, any macro defined
     as a builtin is output as the empty string.  This behavior is
     rectified by using M4 1.6 or newer.  However, this behavior
     difference means that `m4_dumpdef' should only be used while
     developing m4sugar macros, and never in the final published form
     of a macro.

 -- Macro: m4_esyscmd_s (COMMAND)
     Like `m4_esyscmd', this macro expands to the result of running
     COMMAND in a shell.  The difference is that any trailing newlines
     are removed, so that the output behaves more like shell command
     substitution.

 -- Macro: m4_exit (EXIT-STATUS)
     This macro corresponds to `m4exit'.

 -- Macro: m4_if (COMMENT)
 -- Macro: m4_if (STRING-1, STRING-2, EQUAL, [NOT-EQUAL])
 -- Macro: m4_if (STRING-1, STRING-2, EQUAL-1, STRING-3, STRING-4,
          EQUAL-2, ..., [NOT-EQUAL])
     This macro corresponds to `ifelse'.  STRING-1 and STRING-2 are
     compared literally, so usually one of the two arguments is passed
     unquoted.  *Note Conditional constructs::, for more conditional
     idioms.

 -- Macro: m4_include (FILE)
 -- Macro: m4_sinclude (FILE)
     Like the M4 builtins, but warn against multiple inclusions of FILE.

 -- Macro: m4_mkstemp (TEMPLATE)
 -- Macro: m4_maketemp (TEMPLATE)
     Posix requires `maketemp' to replace the trailing `X' characters
     in TEMPLATE with the process id, without regards to the existence
     of a file by that name, but this a security hole.  When this was
     pointed out to the Posix folks, they agreed to invent a new macro
     `mkstemp' that always creates a uniquely named file, but not all
     versions of GNU M4 support the new macro.  In M4sugar,
     `m4_maketemp' and `m4_mkstemp' are synonyms for each other, and
     both have the secure semantics regardless of which macro the
     underlying M4 provides.

 -- Macro: m4_popdef (MACRO...)
     This macro fails if MACRO is not defined, even when using older
     versions of M4 that did not warn.  See `m4_undefine'.

 -- Macro: m4_undefine (MACRO...)
     This macro fails if MACRO is not defined, even when using older
     versions of M4 that did not warn.  Use

          m4_ifdef([MACRO], [m4_undefine([MACRO])])

     if you are not sure whether MACRO is defined.

 -- Macro: m4_undivert (DIVERSION...)
     Unlike the M4 builtin, at least one DIVERSION must be specified.
     Also, since the M4sugar diversion stack prefers named diversions,
     the use of `m4_undivert' to include files is risky.  *Note
     Diversion support::, for more details about the use of the
     diversion stack.  But be aware that it is seldom necessary to
     explicitly change the diversion stack, and that when done
     incorrectly, it can lead to syntactically invalid scripts.

 -- Macro: m4_wrap (TEXT)
 -- Macro: m4_wrap_lifo (TEXT)
     These macros correspond to `m4wrap'.  Posix requires arguments of
     multiple wrap calls to be reprocessed at EOF in the same order as
     the original calls (first-in, first-out).  GNU M4 versions through
     1.4.10, however, reprocess them in reverse order (last-in,
     first-out).  Both orders are useful, therefore, you can rely on
     `m4_wrap' to provide FIFO semantics and `m4_wrap_lifo' for LIFO
     semantics, regardless of the underlying GNU M4 version.

     Unlike the GNU M4 builtin, these macros only recognize one
     argument, and avoid token pasting between consecutive invocations.
     On the other hand, nested calls to `m4_wrap' from within wrapped
     text work just as in the builtin.

==============================================================================
File: autoconf.info,  Node: |Diagnostic_Macros|,  Next: |Diversion_support|,  Prev: |Redefined_M4_Macros|,  Up: |Programming_in_M4sugar|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Diagnostic_Macros*

8.3.2 Diagnostic messages from M4sugar
--------------------------------------

When macros statically diagnose abnormal situations, benign or fatal,
they should report them using these macros.  For issuing dynamic issues,
i.e., when `configure' is run, see *note Printing Messages::.

 -- Macro: m4_assert (EXPRESSION, [EXIT-STATUS = `1'])
     Assert that the arithmetic EXPRESSION evaluates to non-zero.
     Otherwise, issue a fatal error, and exit `autom4te' with
     EXIT-STATUS.

 -- Macro: m4_errprintn (MESSAGE)
     Similar to the builtin `m4_errprint', except that a newline is
     guaranteed after MESSAGE.

 -- Macro: m4_fatal (MESSAGE)
     Report a severe error MESSAGE prefixed with the current location,
     and have `autom4te' die.

 -- Macro: m4_location
     Useful as a prefix in a message line.  Short for:
          __file__:__line__

 -- Macro: m4_warn (CATEGORY, MESSAGE)
     Report MESSAGE as a warning (or as an error if requested by the
     user) if warnings of the CATEGORY are turned on.  If the message
     is emitted, it is prefixed with the current location, and followed
     by a call trace of all macros defined via `AC_DEFUN' used to get
     to the current expansion.  You are encouraged to use standard
     categories, which currently include:

    `all'
          messages that don't fall into one of the following
          categories.  Use of an empty CATEGORY is equivalent.

    `cross'
          related to cross compilation issues.

    `obsolete'
          use of an obsolete construct.

    `syntax'
          dubious syntactic constructs, incorrectly ordered macro calls.

==============================================================================
File: autoconf.info,  Node: |Diversion_support|,  Next: |Conditional_constructs|,  Prev: |Diagnostic_Macros|,  Up: |Programming_in_M4sugar|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Diversion_support*

8.3.3 Diversion support
-----------------------

M4sugar makes heavy use of diversions under the hood, because it is
often the case that text that must appear early in the output is not
discovered until late in the input.  Additionally, some of the
topological sorting algorithms used in resolving macro dependencies use
diversions.  However, most macros should not need to change diversions
directly, but rather rely on higher-level M4sugar macros to manage
diversions transparently.  If you change diversions improperly, you
risk generating a syntactically invalid script, because an incorrect
diversion will violate assumptions made by many macros about whether
prerequisite text has been previously output.  In short, if you
manually change the diversion, you should not expect any macros
provided by the Autoconf package to work until you have restored the
diversion stack back to its original state.

   In the rare case that it is necessary to write a macro that
explicitly outputs text to a different diversion, it is important to be
aware of an M4 limitation regarding diversions: text only goes to a
diversion if it is not part of argument collection.  Therefore, any
macro that changes the current diversion cannot be used as an unquoted
argument to another macro, but must be expanded at the top level.  The
macro `m4_expand' will diagnose any attempt to change diversions, since
it is generally useful only as an argument to another macro.  The
following example shows what happens when diversion manipulation is
attempted within macro arguments:

     m4_do([normal text]
     m4_divert_push([KILL])unwanted[]m4_divert_pop([KILL])
     [m4_divert_push([KILL])discarded[]m4_divert_pop([KILL])])dnl
     =>normal text
     =>unwanted

Notice that the unquoted text `unwanted' is output, even though it was
processed while the current diversion was `KILL', because it was
collected as part of the argument to `m4_do'.  However, the text
`discarded' disappeared as desired, because the diversion changes were
single-quoted, and were not expanded until the top-level rescan of the
output of `m4_do'.

   To make diversion management easier, M4sugar uses the concept of
named diversions.  Rather than using diversion numbers directly, it is
nicer to associate a name with each diversion.  The diversion number
associated with a particular diversion name is an implementation
detail, and a syntax warning is issued if a diversion number is used
instead of a name.  In general, you should not output text to a named
diversion until after calling the appropriate initialization routine
for your language (`m4_init', `AS_INIT', `AT_INIT', ...), although
there are some exceptions documented below.

   M4sugar defines two named diversions.
`KILL'
     Text written to this diversion is discarded.  This is the default
     diversion once M4sugar is initialized.

`GROW'
     This diversion is used behind the scenes by topological sorting
     macros, such as `AC_REQUIRE'.

   M4sh adds several more named diversions.
`BINSH'
     This diversion is reserved for the `#!' interpreter line.

`HEADER-REVISION'
     This diversion holds text from `AC_REVISION'.

`HEADER-COMMENT'
     This diversion holds comments about the purpose of a file.

`HEADER-COPYRIGHT'
     This diversion is managed by `AC_COPYRIGHT'.

`M4SH-SANITIZE'
     This diversion contains M4sh sanitization code, used to ensure
     M4sh is executing in a reasonable shell environment.

`M4SH-INIT'
     This diversion contains M4sh initialization code, initializing
     variables that are required by other M4sh macros.

`BODY'
     This diversion contains the body of the shell code, and is the
     default diversion once M4sh is initialized.

   Autotest inherits diversions from M4sh, and changes the default
diversion from `BODY' back to `KILL'.  It also adds several more named
diversions, with the following subset designed for developer use.
`PREPARE_TESTS'
     This diversion contains initialization sequences which are executed
     after `atconfig' and `atlocal', and after all command line
     arguments have been parsed, but prior to running any tests.  It
     can be used to set up state that is required across all tests.
     This diversion will work even before `AT_INIT'.

   Autoconf inherits diversions from M4sh, and adds the following named
diversions which developers can utilize.
`DEFAULTS'
     This diversion contains shell variable assignments to set defaults
     that must be in place before arguments are parsed.  This diversion
     is placed early enough in `configure' that it is unsafe to expand
     any autoconf macros into this diversion.

`HELP_ENABLE'
     If `AC_PRESERVE_HELP_ORDER' was used, then text placed in this
     diversion will be included as part of a quoted here-doc providing
     all of the `--help' output of `configure' related to options
     created by `AC_ARG_WITH' and `AC_ARG_ENABLE'.

`INIT_PREPARE'
     This diversion occurs after all command line options have been
     parsed, but prior to the main body of the `configure' script.  This
     diversion is the last chance to insert shell code such as variable
     assignments or shell function declarations that will used by the
     expansion of other macros.

   For now, the remaining named diversions of Autoconf, Autoheader, and
Autotest are not documented.  In other words, intentionally outputting
text into an undocumented diversion is subject to breakage in a future
release of Autoconf.

 -- Macro: m4_cleardivert (DIVERSION...)
     Permanently discard any text that has been diverted into DIVERSION.

 -- Macro: m4_divert_once (DIVERSION, [CONTENT])
     Similar to `m4_divert_text', except that CONTENT is only output to
     DIVERSION if this is the first time that `m4_divert_once' has been
     called with its particular arguments.

 -- Macro: m4_divert_pop ([DIVERSION])
     If provided, check that the current diversion is indeed DIVERSION.
     Then change to the diversion located earlier on the stack, giving
     an error if an attempt is made to pop beyond the initial m4sugar
     diversion of `KILL'.

 -- Macro: m4_divert_push (DIVERSION)
     Remember the former diversion on the diversion stack, and output
     subsequent text into DIVERSION.  M4sugar maintains a diversion
     stack, and issues an error if there is not a matching pop for every
     push.

 -- Macro: m4_divert_text (DIVERSION, [CONTENT])
     Output CONTENT and a newline into DIVERSION, without affecting the
     current diversion.  Shorthand for:
          m4_divert_push([DIVERSION])CONTENT
          m4_divert_pop([DIVERSION])dnl

     One use of `m4_divert_text' is to develop two related macros, where
     macro `MY_A' does the work, but adjusts what work is performed
     based on whether the optional macro `MY_B' has also been expanded.
     Of course, it is possible to use `AC_BEFORE' within `MY_A' to
     require that `MY_B' occurs first, if it occurs at all.  But this
     imposes an ordering restriction on the user; it would be nicer if
     macros `MY_A' and `MY_B' can be invoked in either order.  The trick
     is to let `MY_B' leave a breadcrumb in an early diversion, which
     `MY_A' can then use to determine whether `MY_B' has been expanded.

          AC_DEFUN([MY_A],
          [# various actions
          if test -n "$b_was_used"; then
            # extra action
          fi])
          AC_DEFUN([MY_B],
          [AC_REQUIRE([MY_A])dnl
          m4_divert_text([INIT_PREPARE], [b_was_used=true])])


 -- Macro: m4_init
     Initialize the M4sugar environment, setting up the default named
     diversion to be `KILL'.

==============================================================================
File: autoconf.info,  Node: |Conditional_constructs|,  Next: |Looping_constructs|,  Prev: |Diversion_support|,  Up: |Programming_in_M4sugar|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *Conditional_constructs*

8.3.4 Conditional constructs
----------------------------

The following macros provide additional conditional constructs as
convenience wrappers around `m4_if'.

 -- Macro: m4_bmatch (STRING, REGEX-1, VALUE-1, [REGEX-2], [VALUE-2],
          ..., [DEFAULT])
     The string STRING is repeatedly compared against a series of REGEX
     arguments; if a match is found, the expansion is the corresponding
     VALUE, otherwise, the macro moves on to the next REGEX.  If no
     REGEX match, then the result is the optional DEFAULT, or nothing.

 -- Macro: m4_bpatsubsts (STRING, REGEX-1, SUBST-1, [REGEX-2],
          [SUBST-2], ...)
     The string STRING is altered by REGEX-1 and SUBST-1, as if by:
          m4_bpatsubst([[STRING]], [REGEX], [SUBST])

     The result of the substitution is then passed through the next set
     of REGEX and SUBST, and so forth.  An empty SUBST implies deletion
     of any matched portions in the current string.  Note that this
     macro over-quotes STRING; this behavior is intentional, so that
     the result of each step of the recursion remains as a quoted
     string.  However, it means that anchors (`^' and `$' in the REGEX
     will line up with the extra quotations, and not the characters of
     the original string.  The overquoting is removed after the final
     substitution.

 -- Macro: m4_case (STRING, VALUE-1, IF-VALUE-1, [VALUE-2],
          [IF-VALUE-2], ..., [DEFAULT])
     Test STRING against multiple VALUE possibilities, resulting in the
     first IF-VALUE for a match, or in the optional DEFAULT.  This is
     shorthand for:
          m4_if([STRING], [VALUE-1], [IF-VALUE-1],
                [STRING], [VALUE-2], [IF-VALUE-2], ...,
                [DEFAULT])

 -- Macro: m4_cond (TEST-1, VALUE-1, IF-VALUE-1, [TEST-2], [VALUE-2],
          [IF-VALUE-2], ..., [DEFAULT])
     This macro was introduced in Autoconf 2.62.  Similar to `m4_if',
     except that each TEST is expanded only when it is encountered.
     This is useful for short-circuiting expensive tests; while `m4_if'
     requires all its strings to be expanded up front before doing
     comparisons, `m4_cond' only expands a TEST when all earlier tests
     have failed.

     For an example, these two sequences give the same result, but in
     the case where `$1' does not contain a backslash, the `m4_cond'
     version only expands `m4_index' once, instead of five times, for
     faster computation if this is a common case for `$1'.  Notice that
     every third argument is unquoted for `m4_if', and quoted for
     `m4_cond':

          m4_if(m4_index([$1], [\]), [-1], [$2],
                m4_eval(m4_index([$1], [\\]) >= 0), [1], [$2],
                m4_eval(m4_index([$1], [\$]) >= 0), [1], [$2],
                m4_eval(m4_index([$1], [\`]) >= 0), [1], [$3],
                m4_eval(m4_index([$1], [\"]) >= 0), [1], [$3],
                [$2])
          m4_cond([m4_index([$1], [\])], [-1], [$2],
                  [m4_eval(m4_index([$1], [\\]) >= 0)], [1], [$2],
                  [m4_eval(m4_index([$1], [\$]) >= 0)], [1], [$2],
                  [m4_eval(m4_index([$1], [\`]) >= 0)], [1], [$3],
                  [m4_eval(m4_index([$1], [\"]) >= 0)], [1], [$3],
                  [$2])

 -- Macro: m4_default (EXPR-1, EXPR-2)
 -- Macro: m4_default_quoted (EXPR-1, EXPR-2)
 -- Macro: m4_default_nblank (EXPR-1, [EXPR-2])
 -- Macro: m4_default_nblank_quoted (EXPR-1, [EXPR-2])
     If EXPR-1 contains text, use it.  Otherwise, select EXPR-2.
     `m4_default' expands the result, while `m4_default_quoted' does
     not.  Useful for providing a fixed default if the expression that
     results in EXPR-1 would otherwise be empty.  The difference
     between `m4_default' and `m4_default_nblank' is whether an
     argument consisting of just blanks (space, tab, newline) is
     significant.  When using the expanding versions, note that an
     argument may contain text but still expand to an empty string.

          m4_define([active], [ACTIVE])dnl
          m4_define([empty], [])dnl
          m4_define([demo1], [m4_default([$1], [$2])])dnl
          m4_define([demo2], [m4_default_quoted([$1], [$2])])dnl
          m4_define([demo3], [m4_default_nblank([$1], [$2])])dnl
          m4_define([demo4], [m4_default_nblank_quoted([$1], [$2])])dnl
          demo1([active], [default])
          =>ACTIVE
          demo1([], [active])
          =>ACTIVE
          demo1([empty], [text])
          =>
          -demo1([ ], [active])-
          =>- -
          demo2([active], [default])
          =>active
          demo2([], [active])
          =>active
          demo2([empty], [text])
          =>empty
          -demo2([ ], [active])-
          =>- -
          demo3([active], [default])
          =>ACTIVE
          demo3([], [active])
          =>ACTIVE
          demo3([empty], [text])
          =>
          -demo3([ ], [active])-
          =>-ACTIVE-
          demo4([active], [default])
          =>active
          demo4([], [active])
          =>active
          demo4([empty], [text])
          =>empty
          -demo4([ ], [active])-
          =>-active-

 -- Macro: m4_define_default (MACRO, [DEFAULT-DEFINITION])
     If MACRO does not already have a definition, then define it to
     DEFAULT-DEFINITION.

 -- Macro: m4_ifblank (COND, [IF-BLANK], [IF-TEXT])
 -- Macro: m4_ifnblank (COND, [IF-TEXT], [IF-BLANK])
     If COND is empty or consists only of blanks (space, tab, newline),
     then expand IF-BLANK; otherwise, expand IF-TEXT.  Two variants
     exist, in order to make it easier to select the correct logical
     sense when using only two parameters.  Note that this is more
     efficient than the equivalent behavior of:
          m4_ifval(m4_normalize([COND]), IF-TEXT, IF-BLANK)

 -- Macro: m4_ifndef (MACRO, IF-NOT-DEFINED, [IF-DEFINED])
     This is shorthand for:
          m4_ifdef([MACRO], [IF-DEFINED], [IF-NOT-DEFINED])

 -- Macro: m4_ifset (MACRO, [IF-TRUE], [IF-FALSE])
     If MACRO is undefined, or is defined as the empty string, expand
     to IF-FALSE.  Otherwise, expands to IF-TRUE.  Similar to:
          m4_ifval(m4_defn([MACRO]), [IF-TRUE], [IF-FALSE])
     except that it is not an error if MACRO is undefined.

 -- Macro: m4_ifval (COND, [IF-TRUE], [IF-FALSE])
     Expands to IF-TRUE if COND is not empty, otherwise to IF-FALSE.
     This is shorthand for:
          m4_if([COND], [], [IF-FALSE], [IF-TRUE])

 -- Macro: m4_ifvaln (COND, [IF-TRUE], [IF-FALSE])
     Similar to `m4_ifval', except guarantee that a newline is present
     after any non-empty expansion.  Often followed by `dnl'.

 -- Macro: m4_n (TEXT)
     Expand to TEXT, and add a newline if TEXT is not empty.  Often
     followed by `dnl'.

==============================================================================
File: autoconf.info,  Node: |Looping_constructs|,  Next: |Evaluation_Macros|,  Prev: |Conditional_constructs|,  Up: |Programming_in_M4sugar|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *Looping_constructs*

8.3.5 Looping constructs
------------------------

The following macros are useful in implementing recursive algorithms in
M4, including loop operations.  An M4 list is formed by quoting a list
of quoted elements; generally the lists are comma-separated, although
`m4_foreach_w' is whitespace-separated.  For example, the list `[[a],
[b,c]]' contains two elements: `[a]' and `[b,c]'.  It is common to see
lists with unquoted elements when those elements are not likely to be
macro names, as in `[fputc_unlocked, fgetc_unlocked]'.

   Although not generally recommended, it is possible for quoted lists
to have side effects; all side effects are expanded only once, and
prior to visiting any list element.  On the other hand, the fact that
unquoted macros are expanded exactly once means that macros without
side effects can be used to generate lists.  For example,

     m4_foreach([i], [[1], [2], [3]m4_errprintn([hi])], [i])
     error-->hi
     =>123
     m4_define([list], [[1], [2], [3]])
     =>
     m4_foreach([i], [list], [i])
     =>123

 -- Macro: m4_argn (N, [ARG]...)
     Extracts argument N (larger than 0) from the remaining arguments.
     If there are too few arguments, the empty string is used.  For any
     N besides 1, this is more efficient than the similar
     `m4_car(m4_shiftn([N], [], [ARG...]))'.

 -- Macro: m4_car (ARG...)
     Expands to the quoted first ARG.  Can be used with `m4_cdr' to
     recursively iterate through a list.  Generally, when using quoted
     lists of quoted elements, `m4_car' should be called without any
     extra quotes.

 -- Macro: m4_cdr (ARG...)
     Expands to a quoted list of all but the first ARG, or the empty
     string if there was only one argument.  Generally, when using
     quoted lists of quoted elements, `m4_cdr' should be called without
     any extra quotes.

     For example, this is a simple implementation of `m4_map'; note how
     each iteration checks for the end of recursion, then merely
     applies the first argument to the first element of the list, then
     repeats with the rest of the list.  (The actual implementation in
     M4sugar is a bit more involved, to gain some speed and share code
     with `m4_map_sep', and also to avoid expanding side effects in
     `$2' twice).
          m4_define([m4_map], [m4_ifval([$2],
            [m4_apply([$1], m4_car($2))[]$0([$1], m4_cdr($2))])])dnl
          m4_map([ m4_eval], [[[1]], [[1+1]], [[10],[16]]])
          => 1 2 a

 -- Macro: m4_for (VAR, FIRST, LAST, [STEP], EXPRESSION)
     Loop over the numeric values between FIRST and LAST including
     bounds by increments of STEP.  For each iteration, expand
     EXPRESSION with the numeric value assigned to VAR.  If STEP is
     omitted, it defaults to `1' or `-1' depending on the order of the
     limits.  If given, STEP has to match this order.  The number of
     iterations is determined independently from definition of VAR;
     iteration cannot be short-circuited or lengthened by modifying VAR
     from within EXPRESSION.

 -- Macro: m4_foreach (VAR, LIST, EXPRESSION)
     Loop over the comma-separated M4 list LIST, assigning each value
     to VAR, and expand EXPRESSION.  The following example outputs two
     lines:

          m4_foreach([myvar], [[foo], [bar, baz]],
                     [echo myvar
          ])dnl
          =>echo foo
          =>echo bar, baz

     Note that for some forms of EXPRESSION, it may be faster to use
     `m4_map_args'.

 -- Macro: m4_foreach_w (VAR, LIST, EXPRESSION)
     Loop over the white-space-separated list LIST, assigning each value
     to VAR, and expand EXPRESSION.  If VAR is only referenced once in
     EXPRESSION, it is more efficient to use `m4_map_args_w'.

     The deprecated macro `AC_FOREACH' is an alias of `m4_foreach_w'.

 -- Macro: m4_map (MACRO, LIST)
 -- Macro: m4_mapall (MACRO, LIST)
 -- Macro: m4_map_sep (MACRO, SEPARATOR, LIST)
 -- Macro: m4_mapall_sep (MACRO, SEPARATOR, LIST)
     Loop over the comma separated quoted list of argument descriptions
     in LIST, and invoke MACRO with the arguments.  An argument
     description is in turn a comma-separated quoted list of quoted
     elements, suitable for `m4_apply'.  The macros `m4_map' and
     `m4_map_sep' ignore empty argument descriptions, while `m4_mapall'
     and `m4_mapall_sep' invoke MACRO with no arguments.  The macros
     `m4_map_sep' and `m4_mapall_sep' additionally expand SEPARATOR
     between invocations of MACRO.

     Note that SEPARATOR is expanded, unlike in `m4_join'.  When
     separating output with commas, this means that the map result can
     be used as a series of arguments, by using a single-quoted comma as
     SEPARATOR, or as a single string, by using a double-quoted comma.

          m4_map([m4_count], [])
          =>
          m4_map([ m4_count], [[],
                               [[1]],
                               [[1], [2]]])
          => 1 2
          m4_mapall([ m4_count], [[],
                                  [[1]],
                                  [[1], [2]]])
          => 0 1 2
          m4_map_sep([m4_eval], [,], [[[1+2]],
                                      [[10], [16]]])
          =>3,a
          m4_map_sep([m4_echo], [,], [[[a]], [[b]]])
          =>a,b
          m4_count(m4_map_sep([m4_echo], [,], [[[a]], [[b]]]))
          =>2
          m4_map_sep([m4_echo], [[,]], [[[a]], [[b]]])
          =>a,b
          m4_count(m4_map_sep([m4_echo], [[,]], [[[a]], [[b]]]))
          =>1

 -- Macro: m4_map_args (MACRO, ARG...)
     Repeatedly invoke MACRO with each successive ARG as its only
     argument.  In the following example, three solutions are presented
     with the same expansion; the solution using `m4_map_args' is the
     most efficient.
          m4_define([active], [ACTIVE])dnl
          m4_foreach([var], [[plain], [active]], [ m4_echo(m4_defn([var]))])
          => plain active
          m4_map([ m4_echo], [[[plain]], [[active]]])
          => plain active
          m4_map_args([ m4_echo], [plain], [active])
          => plain active

     In cases where it is useful to operate on additional parameters
     besides the list elements, the macro `m4_curry' can be used in
     MACRO to supply the argument currying necessary to generate the
     desired argument list.  In the following example, `list_add_n' is
     more efficient than `list_add_x'.  On the other hand, using
     `m4_map_args_sep' can be even more efficient.

          m4_define([list], [[1], [2], [3]])dnl
          m4_define([add], [m4_eval(([$1]) + ([$2]))])dnl
          dnl list_add_n(N, ARG...)
          dnl Output a list consisting of each ARG added to N
          m4_define([list_add_n],
          [m4_shift(m4_map_args([,m4_curry([add], [$1])], m4_shift($@)))])dnl
          list_add_n([1], list)
          =>2,3,4
          list_add_n([2], list)
          =>3,4,5
          m4_define([list_add_x],
          [m4_shift(m4_foreach([var], m4_dquote(m4_shift($@)),
            [,add([$1],m4_defn([var]))]))])dnl
          list_add_x([1], list)
          =>2,3,4

 -- Macro: m4_map_args_pair (MACRO, [MACRO-END = `macro'], ARG...)
     For every pair of arguments ARG, invoke MACRO with two arguments.
     If there is an odd number of arguments, invoke MACRO-END, which
     defaults to MACRO, with the remaining argument.

          m4_map_args_pair([, m4_reverse], [], [1], [2], [3])
          =>, 2, 1, 3
          m4_map_args_pair([, m4_reverse], [, m4_dquote], [1], [2], [3])
          =>, 2, 1, [3]
          m4_map_args_pair([, m4_reverse], [, m4_dquote], [1], [2], [3], [4])
          =>, 2, 1, 4, 3

 -- Macro: m4_map_args_sep ([PRE], [POST], [SEP], ARG...)
     Expand the sequence `PRE[ARG]POST' for each argument, additionally
     expanding SEP between arguments.  One common use of this macro is
     constructing a macro call, where the opening and closing
     parentheses are split between PRE and POST; in particular,
     `m4_map_args([MACRO], [ARG])' is equivalent to
     `m4_map_args_sep([MACRO(], [)], [], [ARG])'.  This macro provides
     the most efficient means for iterating over an arbitrary list of
     arguments, particularly when repeatedly constructing a macro call
     with more arguments than ARG.

 -- Macro: m4_map_args_w (STRING, [PRE], [POST], [SEP])
     Expand the sequence `PRE[word]POST' for each word in the
     whitespace-separated STRING, additionally expanding SEP between
     words.  This macro provides the most efficient means for iterating
     over a whitespace-separated string.  In particular,
     `m4_map_args_w([STRING], [ACTION(], [)])' is more efficient than
     `m4_foreach_w([var], [STRING], [ACTION(m4_defn([var]))])'.

 -- Macro: m4_shiftn (COUNT, ...)
 -- Macro: m4_shift2 (...)
 -- Macro: m4_shift3 (...)
     `m4_shiftn' performs COUNT iterations of `m4_shift', along with
     validation that enough arguments were passed in to match the shift
     count, and that the count is positive.  `m4_shift2' and
     `m4_shift3' are specializations of `m4_shiftn', introduced in
     Autoconf 2.62, and are more efficient for two and three shifts,
     respectively.

 -- Macro: m4_stack_foreach (MACRO, ACTION)
 -- Macro: m4_stack_foreach_lifo (MACRO, ACTION)
     For each of the `m4_pushdef' definitions of MACRO, expand ACTION
     with the single argument of a definition of MACRO.
     `m4_stack_foreach' starts with the oldest definition, while
     `m4_stack_foreach_lifo' starts with the current definition.
     ACTION should not push or pop definitions of MACRO, nor is there
     any guarantee that the current definition of MACRO matches the
     argument that was passed to ACTION.  The macro `m4_curry' can be
     used if ACTION needs more than one argument, although in that case
     it is more efficient to use M4_STACK_FOREACH_SEP.

     Due to technical limitations, there are a few low-level m4sugar
     functions, such as `m4_pushdef', that cannot be used as the MACRO
     argument.

          m4_pushdef([a], [1])m4_pushdef([a], [2])dnl
          m4_stack_foreach([a], [ m4_incr])
          => 2 3
          m4_stack_foreach_lifo([a], [ m4_curry([m4_substr], [abcd])])
          => cd bcd

 -- Macro: m4_stack_foreach_sep (MACRO, [PRE], [POST], [SEP])
 -- Macro: m4_stack_foreach_sep_lifo (MACRO, [PRE], [POST], [SEP])
     Expand the sequence `PRE[definition]POST' for each `m4_pushdef'
     definition of MACRO, additionally expanding SEP between
     definitions.  `m4_stack_foreach_sep' visits the oldest definition
     first, while `m4_stack_foreach_sep_lifo' visits the current
     definition first.  This macro provides the most efficient means
     for iterating over a pushdef stack.  In particular,
     `m4_stack_foreach([MACRO], [ACTION])' is short for
     `m4_stack_foreach_sep([MACRO], [ACTION(], [)])'.

==============================================================================
File: autoconf.info,  Node: |Evaluation_Macros|,  Next: |Text_processing_Macros|,  Prev: |Looping_constructs|,  Up: |Programming_in_M4sugar|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Evaluation_Macros*

8.3.6 Evaluation Macros
-----------------------

The following macros give some control over the order of the evaluation
by adding or removing levels of quotes.

 -- Macro: m4_apply (MACRO, LIST)
     Apply the elements of the quoted, comma-separated LIST as the
     arguments to MACRO.  If LIST is empty, invoke MACRO without
     arguments.  Note the difference between `m4_indir', which expects
     its first argument to be a macro name but can use names that are
     otherwise invalid, and `m4_apply', where MACRO can contain other
     text, but must end in a valid macro name.
          m4_apply([m4_count], [])
          =>0
          m4_apply([m4_count], [[]])
          =>1
          m4_apply([m4_count], [[1], [2]])
          =>2
          m4_apply([m4_join], [[|], [1], [2]])
          =>1|2

 -- Macro: m4_count (ARG, ...)
     This macro returns the decimal count of the number of arguments it
     was passed.

 -- Macro: m4_curry (MACRO, ARG...)
     This macro performs argument currying.  The expansion of this
     macro is another macro name that expects exactly one argument;
     that argument is then appended to the ARG list, and then MACRO is
     expanded with the resulting argument list.

          m4_curry([m4_curry], [m4_reverse], [1])([2])([3])
          =>3, 2, 1

     Unfortunately, due to a limitation in M4 1.4.x, it is not possible
     to pass the definition of a builtin macro as the argument to the
     output of `m4_curry'; the empty string is used instead of the
     builtin token.  This behavior is rectified by using M4 1.6 or
     newer.

 -- Macro: m4_do (ARG, ...)
     This macro loops over its arguments and expands each ARG in
     sequence.  Its main use is for readability; it allows the use of
     indentation and fewer `dnl' to result in the same expansion.  This
     macro guarantees that no expansion will be concatenated with
     subsequent text; to achieve full concatenation, use
     `m4_unquote(m4_join([], ARG...))'.

          m4_define([ab],[1])m4_define([bc],[2])m4_define([abc],[3])dnl
          m4_do([a],[b])c
          vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
