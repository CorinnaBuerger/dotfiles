versions of them, as the style is somewhat improved and they take
advantage of some new features.

   If you were doing tricky things with undocumented Autoconf internals
(macros, variables, diversions), check whether you need to change
anything to account for changes that have been made.  Perhaps you can
even use an officially supported technique in version 2 instead of
kludging.  Or perhaps not.

   To speed up your locally written feature tests, add caching to them.
See whether any of your tests are of general enough usefulness to
encapsulate them into macros that you can share.

==============================================================================
File: autoconf.info,  Node: |Autoconf_2.13|,  Prev: |Autoconf_1|,  Up: |Obsolete_Constructs|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Autoconf_2.13*

18.6 Upgrading From Version 2.13
--------------------------------

The introduction of the previous section (*note Autoconf 1::) perfectly
suits this section...

     Autoconf version 2.50 is mostly backward compatible with version
     2.13.  However, it introduces better ways to do some things, and
     doesn't support some of the ugly things in version 2.13.  So,
     depending on how sophisticated your `configure.ac' files are, you
     might have to do some manual work in order to upgrade to version
     2.50.  This chapter points out some problems to watch for when
     upgrading.  Also, perhaps your `configure' scripts could benefit
     from some of the new features in version 2.50; the changes are
     summarized in the file `NEWS' in the Autoconf distribution.

MENU

* |Changed_Quotation|::           Broken code which used to work
* |New_Macros|::                  Interaction with foreign macros
* |Hosts_and_Cross_Compilation|::  Bugward compatibility kludges
* |AC_LIBOBJ_vs_LIBOBJS|::        LIBOBJS is a forbidden token
* |AC_ACT_IFELSE_vs_AC_TRY_ACT|::  A more generic scheme for testing sources

==============================================================================
File: autoconf.info,  Node: |Changed_Quotation|,  Next: |New_Macros|,  Up: |Autoconf_2.13|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Changed_Quotation*

18.6.1 Changed Quotation
------------------------

The most important changes are invisible to you: the implementation of
most macros have completely changed.  This allowed more factorization of
the code, better error messages, a higher uniformity of the user's
interface etc.  Unfortunately, as a side effect, some construct which
used to (miraculously) work might break starting with Autoconf 2.50.
The most common culprit is bad quotation.

   For instance, in the following example, the message is not properly
quoted:

     AC_INIT
     AC_CHECK_HEADERS(foo.h, ,
       AC_MSG_ERROR(cannot find foo.h, bailing out))
     AC_OUTPUT

Autoconf 2.13 simply ignores it:

     $ autoconf-2.13; ./configure --silent
     creating cache ./config.cache
     configure: error: cannot find foo.h
     $

while Autoconf 2.50 produces a broken `configure':

     $ autoconf-2.50; ./configure --silent
     configure: error: cannot find foo.h
     ./configure: exit: bad non-numeric arg `bailing'
     ./configure: exit: bad non-numeric arg `bailing'
     $

   The message needs to be quoted, and the `AC_MSG_ERROR' invocation
too!

     AC_INIT([Example], [1.0], [bug-example@example.org])
     AC_CHECK_HEADERS([foo.h], [],
       [AC_MSG_ERROR([cannot find foo.h, bailing out])])
     AC_OUTPUT

   Many many (and many more) Autoconf macros were lacking proper
quotation, including no less than... `AC_DEFUN' itself!

     $ cat configure.in
     AC_DEFUN([AC_PROG_INSTALL],
     [# My own much better version
     ])
     AC_INIT
     AC_PROG_INSTALL
     AC_OUTPUT
     $ autoconf-2.13
     autoconf: Undefined macros:
     ***BUG in Autoconf--please report*** AC_FD_MSG
     ***BUG in Autoconf--please report*** AC_EPI
     configure.in:1:AC_DEFUN([AC_PROG_INSTALL],
     configure.in:5:AC_PROG_INSTALL
     $ autoconf-2.50
     $

==============================================================================
File: autoconf.info,  Node: |New_Macros|,  Next: |Hosts_and_Cross_Compilation|,  Prev: |Changed_Quotation|,  Up: |Autoconf_2.13|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *New_Macros*

18.6.2 New Macros
-----------------

While Autoconf was relatively dormant in the late 1990s, Automake
provided Autoconf-like macros for a while.  Starting with Autoconf 2.50
in 2001, Autoconf provided versions of these macros, integrated in the
`AC_' namespace, instead of `AM_'.  But in order to ease the upgrading
via `autoupdate', bindings to such `AM_' macros are provided.

   Unfortunately older versions of Automake (e.g., Automake 1.4) did
not quote the names of these macros.  Therefore, when `m4' finds
something like `AC_DEFUN(AM_TYPE_PTRDIFF_T, ...)' in `aclocal.m4',
`AM_TYPE_PTRDIFF_T' is expanded, replaced with its Autoconf definition.

   Fortunately Autoconf catches pre-`AC_INIT' expansions, and
complains, in its own words:

     $ cat configure.ac
     AC_INIT([Example], [1.0], [bug-example@example.org])
     AM_TYPE_PTRDIFF_T
     $ aclocal-1.4
     $ autoconf
     aclocal.m4:17: error: m4_defn: undefined macro: _m4_divert_diversion
     aclocal.m4:17: the top level
     autom4te: m4 failed with exit status: 1
     $

   Modern versions of Automake no longer define most of these macros,
and properly quote the names of the remaining macros.  If you must use
an old Automake, do not depend upon macros from Automake as it is
simply not its job to provide macros (but the one it requires itself):

     $ cat configure.ac
     AC_INIT([Example], [1.0], [bug-example@example.org])
     AM_TYPE_PTRDIFF_T
     $ rm aclocal.m4
     $ autoupdate
     autoupdate: `configure.ac' is updated
     $ cat configure.ac
     AC_INIT([Example], [1.0], [bug-example@example.org])
     AC_CHECK_TYPES([ptrdiff_t])
     $ aclocal-1.4
     $ autoconf
     $

==============================================================================
File: autoconf.info,  Node: |Hosts_and_Cross_Compilation|,  Next: |AC_LIBOBJ_vs_LIBOBJS|,  Prev: |New_Macros|,  Up: |Autoconf_2.13|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Hosts_and_Cross_Compilation*

18.6.3 Hosts and Cross-Compilation
----------------------------------

Based on the experience of compiler writers, and after long public
debates, many aspects of the cross-compilation chain have changed:

   - the relationship between the build, host, and target architecture
     types,

   - the command line interface for specifying them to `configure',

   - the variables defined in `configure',

   - the enabling of cross-compilation mode.


   The relationship between build, host, and target have been cleaned
up: the chain of default is now simply: target defaults to host, host to
build, and build to the result of `config.guess'.  Nevertheless, in
order to ease the transition from 2.13 to 2.50, the following
transition scheme is implemented.  _Do not rely on it_, as it will be
completely disabled in a couple of releases (we cannot keep it, as it
proves to cause more problems than it cures).

   They all default to the result of running `config.guess', unless you
specify either `--build' or `--host'.  In this case, the default
becomes the system type you specified.  If you specify both, and
they're different, `configure' enters cross compilation mode, so it
doesn't run any tests that require execution.

   Hint: if you mean to override the result of `config.guess', prefer
`--build' over `--host'.


   For backward compatibility, `configure' accepts a system type as an
option by itself.  Such an option overrides the defaults for build,
host, and target system types.  The following configure statement
configures a cross toolchain that runs on NetBSD/alpha but generates
code for GNU Hurd/sparc, which is also the build platform.

     ./configure --host=alpha-netbsd sparc-gnu


   In Autoconf 2.13 and before, the variables `build', `host', and
`target' had a different semantics before and after the invocation of
`AC_CANONICAL_BUILD' etc.  Now, the argument of `--build' is strictly
copied into `build_alias', and is left empty otherwise.  After the
`AC_CANONICAL_BUILD', `build' is set to the canonicalized build type.
To ease the transition, before, its contents is the same as that of
`build_alias'.  Do _not_ rely on this broken feature.

   For consistency with the backward compatibility scheme exposed above,
when `--host' is specified but `--build' isn't, the build system is
assumed to be the same as `--host', and `build_alias' is set to that
value.  Eventually, this historically incorrect behavior will go away.


   The former scheme to enable cross-compilation proved to cause more
harm than good, in particular, it used to be triggered too easily,
leaving regular end users puzzled in front of cryptic error messages.
`configure' could even enter cross-compilation mode only because the
compiler was not functional.  This is mainly because `configure' used
to try to detect cross-compilation, instead of waiting for an explicit
flag from the user.

   Now, `configure' enters cross-compilation mode if and only if
`--host' is passed.

   That's the short documentation.  To ease the transition between 2.13
and its successors, a more complicated scheme is implemented.  _Do not
rely on the following_, as it will be removed in the near future.

   If you specify `--host', but not `--build', when `configure'
performs the first compiler test it tries to run an executable produced
by the compiler.  If the execution fails, it enters cross-compilation
mode.  This is fragile.  Moreover, by the time the compiler test is
performed, it may be too late to modify the build-system type: other
tests may have already been performed.  Therefore, whenever you specify
`--host', be sure to specify `--build' too.

     ./configure --build=i686-pc-linux-gnu --host=m68k-coff

enters cross-compilation mode.  The former interface, which consisted
in setting the compiler to a cross-compiler without informing
`configure' is obsolete.  For instance, `configure' fails if it can't
run the code generated by the specified compiler if you configure as
follows:

     ./configure CC=m68k-coff-gcc

==============================================================================
File: autoconf.info,  Node: |AC_LIBOBJ_vs_LIBOBJS|,  Next: |AC_ACT_IFELSE_vs_AC_TRY_ACT|,  Prev: |Hosts_and_Cross_Compilation|,  Up: |Autoconf_2.13|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *AC_LIBOBJ_vs_LIBOBJS*

18.6.4 `AC_LIBOBJ' vs. `LIBOBJS'
--------------------------------

Up to Autoconf 2.13, the replacement of functions was triggered via the
variable `LIBOBJS'.  Since Autoconf 2.50, the macro `AC_LIBOBJ' should
be used instead (*note Generic Functions::).  Starting at Autoconf
2.53, the use of `LIBOBJS' is an error.

   This change is mandated by the unification of the GNU Build System
components.  In particular, the various fragile techniques used to parse
a `configure.ac' are all replaced with the use of traces.  As a
consequence, any action must be traceable, which obsoletes critical
variable assignments.  Fortunately, `LIBOBJS' was the only problem, and
it can even be handled gracefully (read, "without your having to change
something").

   There were two typical uses of `LIBOBJS': asking for a replacement
function, and adjusting `LIBOBJS' for Automake and/or Libtool.


   As for function replacement, the fix is immediate: use `AC_LIBOBJ'.
For instance:

     LIBOBJS="$LIBOBJS fnmatch.o"
     LIBOBJS="$LIBOBJS malloc.$ac_objext"

should be replaced with:

     AC_LIBOBJ([fnmatch])
     AC_LIBOBJ([malloc])


   When used with Automake 1.10 or newer, a suitable value for
`LIBOBJDIR' is set so that the `LIBOBJS' and `LTLIBOBJS' can be
referenced from any `Makefile.am'.  Even without Automake, arranging
for `LIBOBJDIR' to be set correctly enables referencing `LIBOBJS' and
`LTLIBOBJS' in another directory.  The `LIBOBJDIR' feature is
experimental.

==============================================================================
File: autoconf.info,  Node: |AC_ACT_IFELSE_vs_AC_TRY_ACT|,  Prev: |AC_LIBOBJ_vs_LIBOBJS|,  Up: |Autoconf_2.13|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *AC_ACT_IFELSE_vs_AC_TRY_ACT*

18.6.5 `AC_ACT_IFELSE' vs. `AC_TRY_ACT'
---------------------------------------

Since Autoconf 2.50, internal codes uses `AC_PREPROC_IFELSE',
`AC_COMPILE_IFELSE', `AC_LINK_IFELSE', and `AC_RUN_IFELSE' on one hand
and `AC_LANG_SOURCE', and `AC_LANG_PROGRAM' on the other hand instead
of the deprecated `AC_TRY_CPP', `AC_TRY_COMPILE', `AC_TRY_LINK', and
`AC_TRY_RUN'.  The motivations where:
   - a more consistent interface: `AC_TRY_COMPILE' etc. were double
     quoting their arguments;

   - the combinatoric explosion is solved by decomposing on the one
     hand the generation of sources, and on the other hand executing
     the program;

   - this scheme helps supporting more languages than plain C and C++.

   In addition to the change of syntax, the philosophy has changed too:
while emphasis was put on speed at the expense of accuracy, today's
Autoconf promotes accuracy of the testing framework at, ahem..., the
expense of speed.

   As a perfect example of what is _not_ to be done, here is how to
find out whether a header file contains a particular declaration, such
as a typedef, a structure, a structure member, or a function.  Use
`AC_EGREP_HEADER' instead of running `grep' directly on the header
file; on some systems the symbol might be defined in another header
file that the file you are checking includes.

   As a (bad) example, here is how you should not check for C
preprocessor symbols, either defined by header files or predefined by
the C preprocessor: using `AC_EGREP_CPP':

     AC_EGREP_CPP(yes,
     [#ifdef _AIX
       yes
     #endif
     ], is_aix=yes, is_aix=no)

   The above example, properly written would (i) use `AC_LANG_PROGRAM',
and (ii) run the compiler:

     AC_COMPILE_IFELSE([AC_LANG_PROGRAM(
     [[#ifndef _AIX
      error: This isn't AIX!
     #endif
     ]])],
                        [is_aix=yes],
                        [is_aix=no])

==============================================================================
File: autoconf.info,  Node: |Using_Autotest|,  Next: |FAQ|,  Prev: |Obsolete_Constructs|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Using_Autotest*

19 Generating Test Suites with Autotest
=======================================

     *N.B.: This section describes a feature which is still
     stabilizing.  Although we believe that Autotest is useful as-is, this
     documentation describes an interface which might change in the future:
     do not depend upon Autotest without subscribing to the Autoconf mailing
     lists.*

   It is paradoxical that portable projects depend on nonportable tools
to run their test suite.  Autoconf by itself is the paragon of this
problem: although it aims at perfectly portability, up to 2.13 its test
suite was using DejaGNU, a rich and complex testing framework, but
which is far from being standard on Posix systems.  Worse yet, it was
likely to be missing on the most fragile platforms, the very platforms
that are most likely to torture Autoconf and exhibit deficiencies.

   To circumvent this problem, many package maintainers have developed
their own testing framework, based on simple shell scripts whose sole
outputs are exit status values describing whether the test succeeded.
Most of these tests share common patterns, and this can result in lots
of duplicated code and tedious maintenance.

   Following exactly the same reasoning that yielded to the inception of
Autoconf, Autotest provides a test suite generation framework, based on
M4 macros building a portable shell script.  The suite itself is
equipped with automatic logging and tracing facilities which greatly
diminish the interaction with bug reporters, and simple timing reports.

   Autoconf itself has been using Autotest for years, and we do attest
that it has considerably improved the strength of the test suite and the
quality of bug reports.  Other projects are known to use some generation
of Autotest, such as Bison, Free Recode, Free Wdiff, GNU Tar, each of
them with different needs, and this usage has validated Autotest as a
general testing framework.

   Nonetheless, compared to DejaGNU, Autotest is inadequate for
interactive tool testing, which is probably its main limitation.

MENU

* |Using_an_Autotest_Test_Suite|::  Autotest and the user
* |Writing_Testsuites|::          Autotest macros
* |testsuite_Invocation|::        Running `testsuite' scripts
* |Making_testsuite_Scripts|::    Using autom4te to create `testsuite'

==============================================================================
File: autoconf.info,  Node: |Using_an_Autotest_Test_Suite|,  Next: |Writing_Testsuites|,  Up: |Using_Autotest|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Using_an_Autotest_Test_Suite*

19.1 Using an Autotest Test Suite
---------------------------------

MENU

* |testsuite_Scripts|::           The concepts of Autotest
* |Autotest_Logs|::               Their contents

==============================================================================
File: autoconf.info,  Node: |testsuite_Scripts|,  Next: |Autotest_Logs|,  Up: Using an Autotest Test Suite
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *testsuite_Scripts*

19.1.1 `testsuite' Scripts
--------------------------

Generating testing or validation suites using Autotest is rather easy.
The whole validation suite is held in a file to be processed through
`autom4te', itself using GNU M4 under the hood, to produce a
stand-alone Bourne shell script which then gets distributed.  Neither
`autom4te' nor GNU M4 are needed at the installer's end.

   Each test of the validation suite should be part of some test group.
A "test group" is a sequence of interwoven tests that ought to be
executed together, usually because one test in the group creates data
files that a later test in the same group needs to read.  Complex test
groups make later debugging more tedious.  It is much better to keep
only a few tests per test group.  Ideally there is only one test per
test group.

   For all but the simplest packages, some file such as `testsuite.at'
does not fully hold all test sources, as these are often easier to
maintain in separate files.  Each of these separate files holds a single
test group, or a sequence of test groups all addressing some common
functionality in the package.  In such cases, `testsuite.at' merely
initializes the validation suite, and sometimes does elementary health
checking, before listing include statements for all other test files.
The special file `package.m4', containing the identification of the
package, is automatically included if found.

   A convenient alternative consists in moving all the global issues
(local Autotest macros, elementary health checking, and `AT_INIT'
invocation) into the file `local.at', and making `testsuite.at' be a
simple list of `m4_include's of sub test suites.  In such case,
generating the whole test suite or pieces of it is only a matter of
choosing the `autom4te' command line arguments.

   The validation scripts that Autotest produces are by convention
called `testsuite'.  When run, `testsuite' executes each test group in
turn, producing only one summary line per test to say if that
particular test succeeded or failed.  At end of all tests, summarizing
counters get printed.  One debugging directory is left for each test
group which failed, if any: such directories are named
`testsuite.dir/NN', where NN is the sequence number of the test group,
and they include:

   * a debugging script named `run' which reruns the test in "debug
     mode" (*note testsuite Invocation::).  The automatic generation of
     debugging scripts has the purpose of easing the chase for bugs.

   * all the files created with `AT_DATA'

   * all the Erlang source code files created with `AT_CHECK_EUNIT'

   * a log of the run, named `testsuite.log'

   In the ideal situation, none of the tests fail, and consequently no
debugging directory is left behind for validation.

   It often happens in practice that individual tests in the validation
suite need to get information coming out of the configuration process.
Some of this information, common for all validation suites, is provided
through the file `atconfig', automatically created by
`AC_CONFIG_TESTDIR'.  For configuration information which your testing
environment specifically needs, you might prepare an optional file
named `atlocal.in', instantiated by `AC_CONFIG_FILES'.  The
configuration process produces `atconfig' and `atlocal' out of these
two input files, and these two produced files are automatically read by
the `testsuite' script.

   Here is a diagram showing the relationship between files.

Files used in preparing a software package for distribution:

                     [package.m4] -->.
                                      \
     subfile-1.at ->.  [local.at] ---->+
         ...         \                  \
     subfile-i.at ---->-- testsuite.at -->-- autom4te* -->testsuite
         ...         /
     subfile-n.at ->'

Files used in configuring a software package:

                                          .--> atconfig
                                         /
     [atlocal.in] -->  config.status* --<
                                         \
                                          `--> [atlocal]

Files created during test suite execution:

     atconfig -->.                    .--> testsuite.log
                  \                  /
                   >-- testsuite* --<
                  /                  \
     [atlocal] ->'                    `--> [testsuite.dir]

==============================================================================
File: autoconf.info,  Node: |Autotest_Logs|,  Prev: |testsuite_Scripts|,  Up: |Using_an_Autotest_Test_Suite|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Autotest_Logs*

19.1.2 Autotest Logs
--------------------

When run, the test suite creates a log file named after itself, e.g., a
test suite named `testsuite' creates `testsuite.log'.  It contains a
lot of information, usually more than maintainers actually need, but
therefore most of the time it contains all that is needed:

command line arguments
     A bad but unfortunately widespread habit consists of setting
     environment variables before the command, such as in
     `CC=my-home-grown-cc ./testsuite'.  The test suite does not know
     this change, hence (i) it cannot report it to you, and (ii) it
     cannot preserve the value of `CC' for subsequent runs.  Autoconf
     faced exactly the same problem, and solved it by asking users to
     pass the variable definitions as command line arguments.  Autotest
     requires this rule, too, but has no means to enforce it; the log
     then contains a trace of the variables that were changed by the
     user.

`ChangeLog' excerpts
     The topmost lines of all the `ChangeLog' files found in the source
     hierarchy.  This is especially useful when bugs are reported
     against development versions of the package, since the version
     string does not provide sufficient information to know the exact
     state of the sources the user compiled.  Of course, this relies on
     the use of a `ChangeLog'.

build machine
     Running a test suite in a cross-compile environment is not an easy
     task, since it would mean having the test suite run on a machine
     BUILD, while running programs on a machine HOST.  It is much
     simpler to run both the test suite and the programs on HOST, but
     then, from the point of view of the test suite, there remains a
     single environment, HOST = BUILD.  The log contains relevant
     information on the state of the BUILD machine, including some
     important environment variables.

tested programs
     The absolute file name and answers to `--version' of the tested
     programs (see *note Writing Testsuites::, `AT_TESTED').

configuration log
     The contents of `config.log', as created by `configure', are
     appended.  It contains the configuration flags and a detailed
     report on the configuration itself.

==============================================================================
File: autoconf.info,  Node: |Writing_Testsuites|,  Next: |testsuite_Invocation|,  Prev: |Using_an_Autotest_Test_Suite|,  Up: |Using_Autotest|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *Writing_Testsuites*

19.2 Writing `testsuite.at'
---------------------------

The `testsuite.at' is a Bourne shell script making use of special
Autotest M4 macros.  It often contains a call to `AT_INIT' near its
beginning followed by one call to `m4_include' per source file for
tests.  Each such included file, or the remainder of `testsuite.at' if
include files are not used, contain a sequence of test groups.  Each
test group begins with a call to `AT_SETUP', then an arbitrary number
of shell commands or calls to `AT_CHECK', and then completes with a
call to `AT_CLEANUP'.  Multiple test groups can be categorized by a
call to `AT_BANNER'.

   All of the public Autotest macros have all-uppercase names in the
namespace `^AT_' to prevent them from accidentally conflicting with
other text; Autoconf also reserves the namespace `^_AT_' for internal
macros.  All shell variables used in the testsuite for internal
purposes have mostly-lowercase names starting with `at_'.  Autotest
also uses here-document delimiters in the namespace `^_AT[A-Z]', and
makes use of the file system namespace `^at-'.

   Since Autoconf is built on top of M4sugar (*note Programming in
M4sugar::) and M4sh (*note Programming in M4sh::), you must also be
aware of those namespaces (`^_?\(m4\|AS\)_').  In general, you _should
not use_ the namespace of a package that does not own the macro or
shell code you are writing.

 -- Macro: AT_INIT ([NAME])
     Initialize Autotest.  Giving a NAME to the test suite is
     encouraged if your package includes several test suites.  Before
     this macro is called, `AT_PACKAGE_STRING' and
     `AT_PACKAGE_BUGREPORT' must be defined, which are used to display
     information about the testsuite to the user.  Typically, these
     macros are provided by a file `package.m4' built by `make' (*note
     Making testsuite Scripts::), in order to inherit the package name,
     version, and bug reporting address from `configure.ac'.

 -- Macro: AT_COPYRIGHT (COPYRIGHT-NOTICE)
     State that, in addition to the Free Software Foundation's
     copyright on the Autotest macros, parts of your test suite are
     covered by COPYRIGHT-NOTICE.

     The COPYRIGHT-NOTICE shows up in both the head of `testsuite' and
     in `testsuite --version'.

 -- Macro: AT_ARG_OPTION (OPTIONS, HELP-TEXT, [ACTION-IF-GIVEN],
          [ACTION-IF-NOT-GIVEN])
     Accept options from the space-separated list OPTIONS, a list that
     has leading dashes removed from the options.  Long options will be
     prefixed with `--', single-character options with `-'.  The first
     word in this list is the primary OPTION, any others are assumed to
     be short-hand aliases.  The variable associated with it is
     `at_arg_OPTION', with any dashes in OPTION replaced with
     underscores.

     If the user passes `--OPTION' to the `testsuite', the variable
     will be set to `:'.  If the user does not pass the option, or
     passes `--no-OPTION', then the variable will be set to `false'.

     ACTION-IF-GIVEN is run each time the option is encountered; here,
     the variable `at_optarg' will be set to `:' or `false' as
     appropriate.  `at_optarg' is actually just a copy of
     `at_arg_OPTION'.

     ACTION-IF-NOT-GIVEN will be run once after option parsing is
     complete and if no option from OPTIONS was used.

     HELP-TEXT is added to the end of the list of options shown in
     `testsuite --help' (*note AS_HELP_STRING::).

     It is recommended that you use a package-specific prefix to OPTIONS
     names in order to avoid clashes with future Autotest built-in
     options.

 -- Macro: AT_ARG_OPTION_ARG (OPTIONS, HELP-TEXT, [ACTION-IF-GIVEN],
          [ACTION-IF-NOT-GIVEN])
     Accept options with arguments from the space-separated list
     OPTIONS, a list that has leading dashes removed from the options.
     Long options will be prefixed with `--', single-character options
     with `-'.  The first word in this list is the primary OPTION, any
     others are assumed to be short-hand aliases.  The variable
     associated with it is `at_arg_OPTION', with any dashes in OPTION
     replaced with underscores.

     If the user passes `--OPTION=ARG' or `--OPTION ARG' to the
     `testsuite', the variable will be set to `ARG'.

     ACTION-IF-GIVEN is run each time the option is encountered; here,
     the variable `at_optarg' will be set to `ARG'.  `at_optarg' is
     actually just a copy of `at_arg_OPTION'.

     ACTION-IF-NOT-GIVEN will be run once after option parsing is
     complete and if no option from OPTIONS was used.

     HELP-TEXT is added to the end of the list of options shown in
     `testsuite --help' (*note AS_HELP_STRING::).

     It is recommended that you use a package-specific prefix to OPTIONS
     names in order to avoid clashes with future Autotest built-in
     options.

 -- Macro: AT_COLOR_TESTS
     Enable colored test results by default when the output is
     connected to a terminal.

 -- Macro: AT_TESTED (EXECUTABLES)
     Log the file name and answer to `--version' of each program in
     space-separated list EXECUTABLES.  Several invocations register
     new executables, in other words, don't fear registering one program
     several times.

     Autotest test suites rely on `PATH' to find the tested program.
     This avoids the need to generate absolute names of the various
     tools, and makes it possible to test installed programs.
     Therefore, knowing which programs are being exercised is crucial
     to understanding problems in the test suite itself, or its
     occasional misuses.  It is a good idea to also subscribe foreign
     programs you depend upon, to avoid incompatible diagnostics.


 -- Macro: AT_BANNER (TEST-CATEGORY-NAME)
     This macro identifies the start of a category of related test
     groups.  When the resulting `testsuite' is invoked with more than
     one test group to run, its output will include a banner containing
     TEST-CATEGORY-NAME prior to any tests run from that category.  The
     banner should be no more than about 40 or 50 characters.  A blank
     banner indicates uncategorized tests; an empty line will be
     inserted after tests from an earlier category, effectively ending
     that category.

 -- Macro: AT_SETUP (TEST-GROUP-NAME)
     This macro starts a group of related tests, all to be executed in
     the same subshell.  It accepts a single argument, which holds a
     few words (no more than about 30 or 40 characters) quickly
     describing the purpose of the test group being started.
     TEST-GROUP-NAME must not expand to unbalanced quotes, although
     quadrigraphs can be used.

 -- Macro: AT_KEYWORDS (KEYWORDS)
     Associate the space-separated list of KEYWORDS to the enclosing
     test group.  This makes it possible to run "slices" of the test
     suite.  For instance, if some of your test groups exercise some
     `foo' feature, then using `AT_KEYWORDS(foo)' lets you run
     `./testsuite -k foo' to run exclusively these test groups.  The
     TEST-GROUP-NAME of the test group is automatically recorded to
     `AT_KEYWORDS'.

     Several invocations within a test group accumulate new keywords.
     In other words, don't fear registering the same keyword several
     times in a test group.

 -- Macro: AT_CAPTURE_FILE (FILE)
     If the current test group fails, log the contents of FILE.
     Several identical calls within one test group have no additional
     effect.

 -- Macro: AT_FAIL_IF (SHELL-CONDITION)
     Make the test group fail and skip the rest of its execution, if
     SHELL-CONDITION is true.  SHELL-CONDITION is a shell expression
     such as a `test' command.  Tests before `AT_FAIL_IF' will be
     executed and may still cause the test group to be skipped.  You
     can instantiate this macro many times from within the same test
     group.

     You should use this macro only for very simple failure conditions.
     If the SHELL-CONDITION could emit any kind of output you should
     instead use `AT_CHECK' like
          AT_CHECK([if SHELL-CONDITION; then exit 99; fi])
     so that such output is properly recorded in the `testsuite.log'
     file.

 -- Macro: AT_SKIP_IF (SHELL-CONDITION)
     Determine whether the test should be skipped because it requires
     features that are unsupported on the machine under test.
     SHELL-CONDITION is a shell expression such as a `test' command.
     Tests before `AT_SKIP_IF' will be executed and may still cause the
     test group to fail.  You can instantiate this macro many times
     from within the same test group.

     You should use this macro only for very simple skip conditions.
     If the SHELL-CONDITION could emit any kind of output you should
     instead use `AT_CHECK' like
          AT_CHECK([if SHELL-CONDITION; then exit 77; fi])
     so that such output is properly recorded in the `testsuite.log'
     file.

 -- Macro: AT_XFAIL_IF (SHELL-CONDITION)
     Determine whether the test is expected to fail because it is a
     known bug (for unsupported features, you should skip the test).
     SHELL-CONDITION is a shell expression such as a `test' command;
     you can instantiate this macro many times from within the same
     test group, and one of the conditions is enough to turn the test
     into an expected failure.

 -- Macro: AT_CLEANUP
     End the current test group.


 -- Macro: AT_DATA (FILE, CONTENTS)
     Initialize an input data FILE with given CONTENTS.  Of course, the
     CONTENTS have to be properly quoted between square brackets to
     protect against included commas or spurious M4 expansion.
     CONTENTS must be empty or end with a newline.  FILE must be a
     single shell word that expands into a single file name.

 -- Macro: AT_CHECK (COMMANDS, [STATUS = `0'], [STDOUT], [STDERR],
          [RUN-IF-FAIL], [RUN-IF-PASS])
 -- Macro: AT_CHECK_UNQUOTED (COMMANDS, [STATUS = `0'], [STDOUT],
          [STDERR], [RUN-IF-FAIL], [RUN-IF-PASS])
     Execute a test by performing given shell COMMANDS in a subshell.
     COMMANDS is output as-is, so shell expansions are honored.  These
     commands should normally exit with STATUS, while producing expected
     STDOUT and STDERR contents.  If COMMANDS exit with unexpected
     status 77, then the rest of the test group is skipped.  If
     COMMANDS exit with unexpected status 99, then the test group is
     immediately failed.  Otherwise, if this test fails, run shell
     commands RUN-IF-FAIL or, if this test passes, run shell commands
     RUN-IF-PASS, both inside the current shell execution environment.
     At the beginning of RUN-IF-FAIL and RUN-IF-PASS, the status of
     COMMANDS is available in the `at_status' shell variable.

     This macro must be invoked in between `AT_SETUP' and `AT_CLEANUP'.

     If STATUS is the literal `ignore', then the corresponding exit
     status is not checked, except for the special cases of 77 (skip)
     and 99 (hard failure).  The existence of hard failures allows one
     to mark a test as an expected failure with `AT_XFAIL_IF' because a
     feature has not yet been implemented, but to still distinguish
     between gracefully handling the missing feature and dumping core.
     A hard failure also inhibits post-test actions in RUN-IF-FAIL.

     If the value of the STDOUT or STDERR parameter is one of the
     literals in the following table, then the test treats the output
     according to the rules of that literal.  Otherwise, the value of
     the parameter is treated as text that must exactly match the
     output given by COMMANDS on standard output and standard error
     (including an empty parameter for no output); any differences are
     captured in the testsuite log and the test is failed (unless an
     unexpected exit status of 77 skipped the test instead).  The
     difference between `AT_CHECK' and `AT_CHECK_UNQUOTED' is that only
     the latter performs shell variable expansion (`$'), command
     substitution (``'), and backslash escaping (`\') on comparison
     text given in the STDOUT and STDERR arguments; if the text
     includes a trailing newline, this would be the same as if it were
     specified via an unquoted here-document.  (However, there is no
     difference in the interpretation of COMMANDS).

    `ignore'
          The content of the output is ignored, but still captured in
          the test group log (if the testsuite is run with option `-v',
          the test group log is displayed as the test is run; if the
          test group later fails, the test group log is also copied
          into the overall testsuite log).  This action is valid for
          both STDOUT and STDERR.

    `ignore-nolog'
          The content of the output is ignored, and nothing is captured
          in the log files.  If COMMANDS are likely to produce binary
          output (including long lines) or large amounts of output,
          then logging the output can make it harder to locate details
          related to subsequent tests within the group, and could
          potentially corrupt terminal display of a user running
          `testsuite -v'.

    `stdout'
          For the STDOUT parameter, capture the content of standard
          output to both the file `stdout' and the test group log.
          Subsequent commands in the test group can then post-process
          the file.  This action is often used when it is desired to
          use `grep' to look for a substring in the output, or when the
          output must be post-processed to normalize error messages
          into a common form.

    `stderr'
          Like `stdout', except that it only works for the STDERR
          parameter, and the standard error capture file will be named
          `stderr'.

    `stdout-nolog'
    `stderr-nolog'
          Like `stdout' or `stderr', except that the captured output is
          not duplicated into the test group log.  This action is
          particularly useful for an intermediate check that produces
          large amounts of data, which will be followed by another
          check that filters down to the relevant data, as it makes it
          easier to locate details in the log.

    `expout'
          For the STDOUT parameter, compare standard output contents
          with the previously created file `expout', and list any
          differences in the testsuite log.

    `experr'
          Like `expout', except that it only works for the STDERR
          parameter, and the standard error contents are compared with
          `experr'.

 -- Macro: AT_CHECK_EUNIT (MODULE, TEST-SPEC, [ERLFLAGS],
          [RUN-IF-FAIL], [RUN-IF-PASS])
     Initialize and execute an Erlang module named MODULE that performs
     tests following the TEST-SPEC EUnit test specification.  TEST-SPEC
     must be a valid EUnit test specification, as defined in the EUnit
     Reference Manual (http://erlang.org/doc/apps/eunit/index.html).
     ERLFLAGS are optional command-line options passed to the Erlang
     interpreter to execute the test Erlang module.  Typically,
     ERLFLAGS defines at least the paths to directories containing the
     compiled Erlang modules under test, as `-pa path1 path2 ...'.

     For example, the unit tests associated with Erlang module `testme',
     which compiled code is in subdirectory `src', can be performed
     with:

          AT_CHECK_EUNIT([testme_testsuite], [{module, testme}],
                         [-pa "${abs_top_builddir}/src"])

     This macro must be invoked in between `AT_SETUP' and `AT_CLEANUP'.

     Variables `ERL', `ERLC', and (optionally) `ERLCFLAGS' must be
     defined as the path of the Erlang interpreter, the path of the
     Erlang compiler, and the command-line flags to pass to the
     compiler, respectively.  Those variables should be configured in
     `configure.ac' using the `AC_ERLANG_PATH_ERL' and
     `AC_ERLANG_PATH_ERLC' macros, and the configured values of those
     variables are automatically defined in the testsuite.  If `ERL' or
     `ERLC' is not defined, the test group is skipped.

     If the EUnit library cannot be found, i.e. if module `eunit' cannot
     be loaded, the test group is skipped.  Otherwise, if TEST-SPEC is
     an invalid EUnit test specification, the test group fails.
     Otherwise, if the EUnit test passes, shell commands RUN-IF-PASS
     are executed or, if the EUnit test fails, shell commands
     RUN-IF-FAIL are executed and the test group fails.

     Only the generated test Erlang module is automatically compiled and
     executed.  If TEST-SPEC involves testing other Erlang modules,
     e.g. module `testme' in the example above, those modules must be
     already compiled.

     If the testsuite is run in verbose mode, with option `--verbose',
     EUnit is also run in verbose mode to output more details about
     individual unit tests.

==============================================================================
File: autoconf.info,  Node: |testsuite_Invocation|,  Next: |Making_testsuite_Scripts|,  Prev: |Writing_Testsuites|,  Up: |Using_Autotest|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *testsuite_Invocation*

19.3 Running `testsuite' Scripts
--------------------------------

Autotest test suites support the following options:

`--help'
`-h'
     Display the list of options and exit successfully.

`--version'
`-V'
     Display the version of the test suite and exit successfully.

`--directory=DIR'
`-C DIR'
     Change the current directory to DIR before creating any files.
     Useful for running the testsuite in a subdirectory from a top-level
     Makefile.

`--jobs[=N]'
`-j[N]'
     Run N tests in parallel, if possible.  If N is not given, run all
     given tests in parallel.  Note that there should be no space
     before the argument to `-j', as `-j NUMBER' denotes the separate
     arguments `-j' and `NUMBER', see below.

     In parallel mode, the standard input device of the testsuite
     script is not available to commands inside a test group.
     Furthermore, banner lines are not printed, and the summary line
     for each test group is output after the test group completes.
     Summary lines may appear unordered.  If verbose and trace output
     are enabled (see below), they may appear intermixed from
     concurrently running tests.

     Parallel mode requires the `mkfifo' command to work, and will be
     silently disabled otherwise.

`--clean'
`-c'
     Remove all the files the test suite might have created and exit.
     Meant for `clean' Make targets.

`--list'
`-l'
     List all the tests (or only the selection), including their
     possible keywords.


   By default all tests are performed (or described with `--list')
silently in the default environment, but the environment, set of tests,
and verbosity level can be tuned:

`VARIABLE=VALUE'
     Set the environment VARIABLE to VALUE.  Use this rather than
     `FOO=foo ./testsuite' as debugging scripts would then run in a
     different environment.

     The variable `AUTOTEST_PATH' specifies the testing path to prepend
     to `PATH'.  Relative directory names (not starting with `/') are
     considered to be relative to the top level of the package being
     built.  All directories are made absolute, first starting from the
     top level _build_ tree, then from the _source_ tree.  For instance
     `./testsuite AUTOTEST_PATH=tests:bin' for a `/src/foo-1.0' source
     package built in `/tmp/foo' results in
     `/tmp/foo/tests:/tmp/foo/bin' and then
     `/src/foo-1.0/tests:/src/foo-1.0/bin' being prepended to `PATH'.

`NUMBER'
`NUMBER-NUMBER'
`NUMBER-'
`-NUMBER'
     Add the corresponding test groups, with obvious semantics, to the
     selection.

`--keywords=KEYWORDS'
`-k KEYWORDS'
     Add to the selection the test groups with title or keywords
     (arguments to `AT_SETUP' or `AT_KEYWORDS') that match _all_
     keywords of the comma separated list KEYWORDS, case-insensitively.
     Use `!' immediately before the keyword to invert the selection for
     this keyword.  By default, the keywords match whole words; enclose
     them in `.*' to also match parts of words.

     For example, running

          ./testsuite -k 'autoupdate,.FUNC.'

     selects all tests tagged `autoupdate' _and_ with tags containing
     `FUNC' (as in `AC_CHECK_FUNC', `AC_FUNC_ALLOCA', etc.), while

          ./testsuite -k '!autoupdate' -k '.FUNC.'

     selects all tests not tagged `autoupdate' _or_ with tags
     containing `FUNC'.

`--errexit'
`-e'
     If any test fails, immediately abort testing.  This implies
     `--debug': post test group clean up, and top-level logging are
     inhibited.  This option is meant for the full test suite, it is
     not really useful for generated debugging scripts.  If the
     testsuite is run in parallel mode using `--jobs', then
     concurrently running tests will finish before exiting.

`--verbose'
`-v'
     Force more verbosity in the detailed output of what is being done.
     This is the default for debugging scripts.

`--color'
`--color[=never|auto|always]'
     Enable colored test results.  Without an argument, or with
     `always', test results will be colored.  With `never', color mode
     is turned off.  Otherwise, if either the macro `AT_COLOR_TESTS' is
     used by the testsuite author, or the argument `auto' is given,
     then test results are colored if standard output is connected to a
     terminal.

`--debug'
`-d'
     Do not remove the files after a test group was performed--but they
     are still removed _before_, therefore using this option is sane
     when running several test groups.  Create debugging scripts.  Do
     not overwrite the top-level log (in order to preserve a supposedly
     existing full log file).  This is the default for debugging
     scripts, but it can also be useful to debug the testsuite itself.

`--recheck'
     Add to the selection all test groups that failed or passed
     unexpectedly during the last non-debugging test run.

`--trace'
`-x'
     Trigger shell tracing of the test groups.

   Besides these options accepted by every Autotest testsuite, the
testsuite author might have added package-specific options via the
`AT_ARG_OPTION' and `AT_ARG_OPTION_ARG' macros (*note Writing
Testsuites::); refer to `testsuite --help' and the package
documentation for details.

==============================================================================
File: autoconf.info,  Node: |Making_testsuite_Scripts|,  Prev: |testsuite_Invocation|,  Up: |Using_Autotest|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *Making_testsuite_Scripts*

19.4 Making `testsuite' Scripts
-------------------------------

For putting Autotest into movement, you need some configuration and
makefile machinery.  We recommend, at least if your package uses deep or
shallow hierarchies, that you use `tests/' as the name of the directory
holding all your tests and their makefile.  Here is a check list of
things to do.

   - Make sure to create the file `package.m4', which defines the
     identity of the package.  It must define `AT_PACKAGE_STRING', the
     full signature of the package, and `AT_PACKAGE_BUGREPORT', the
     address to which bug reports should be sent.  For sake of
     completeness, we suggest that you also define `AT_PACKAGE_NAME',
     `AT_PACKAGE_TARNAME', `AT_PACKAGE_VERSION', and `AT_PACKAGE_URL'.
     *Note Initializing configure::, for a description of these
     variables.  Be sure to distribute `package.m4' and to put it into
     the source hierarchy: the test suite ought to be shipped!  See
     below for an example `Makefile' excerpt.

   - Invoke `AC_CONFIG_TESTDIR'.

      -- Macro: AC_CONFIG_TESTDIR (DIRECTORY, [TEST-PATH = `directory'])
          An Autotest test suite is to be configured in DIRECTORY.  This
          macro causes `DIRECTORY/atconfig' to be created by
          `config.status' and sets the default `AUTOTEST_PATH' to
          TEST-PATH (*note testsuite Invocation::).

   - Still within `configure.ac', as appropriate, ensure that some
     `AC_CONFIG_FILES' command includes substitution for
     `tests/atlocal'.

   - The appropriate `Makefile' should be modified so the validation in
     your package is triggered by `make check'.  An example is provided
     below.

   With Automake, here is a minimal example for inclusion in
`tests/Makefile.am', in order to link `make check' with a validation
suite.

     # The `:;' works around a Bash 3.2 bug when the output is not writable.
     $(srcdir)/package.m4: $(top_srcdir)/configure.ac
             :;{ \
               echo '# Signature of the current package.' && \
               echo 'm4_define([AT_PACKAGE_NAME],' && \
               echo '  [$(PACKAGE_NAME)])' && \
               echo 'm4_define([AT_PACKAGE_TARNAME],' && \
               echo '  [$(PACKAGE_TARNAME)])' && \
               echo 'm4_define([AT_PACKAGE_VERSION],' && \
               echo '  [$(PACKAGE_VERSION)])' && \
               echo 'm4_define([AT_PACKAGE_STRING],' && \
               echo '  [$(PACKAGE_STRING)])' && \
               echo 'm4_define([AT_PACKAGE_BUGREPORT],' && \
               echo '  [$(PACKAGE_BUGREPORT)])'; \
               echo 'm4_define([AT_PACKAGE_URL],' && \
               echo '  [$(PACKAGE_URL)])'; \
             } >'$(srcdir)/package.m4'

     EXTRA_DIST = testsuite.at $(srcdir)/package.m4 $(TESTSUITE) atlocal.in
     TESTSUITE = $(srcdir)/testsuite

     check-local: atconfig atlocal $(TESTSUITE)
             $(SHELL) '$(TESTSUITE)' $(TESTSUITEFLAGS)

     installcheck-local: atconfig atlocal $(TESTSUITE)
             $(SHELL) '$(TESTSUITE)' AUTOTEST_PATH='$(bindir)' \
               $(TESTSUITEFLAGS)

     clean-local:
             test ! -f '$(TESTSUITE)' || \
              $(SHELL) '$(TESTSUITE)' --clean

     AUTOM4TE = $(SHELL) $(srcdir)/build-aux/missing --run autom4te
     AUTOTEST = $(AUTOM4TE) --language=autotest
     $(TESTSUITE): $(srcdir)/testsuite.at $(srcdir)/package.m4
             $(AUTOTEST) -I '$(srcdir)' -o $@.tmp $@.at
             mv $@.tmp $@

   Note that the built testsuite is distributed; this is necessary
because users might not have Autoconf installed, and thus would not be
able to rebuild it.  Likewise, the use of `missing' provides the user
with a nicer error message if they modify a source file to the
testsuite, and accidentally trigger the rebuild rules.

   You might want to list explicitly the dependencies, i.e., the list of
the files `testsuite.at' includes.

   If you don't use Automake, you should include the above example in
`tests/Makefile.in', along with additional lines inspired from the
following:

     subdir = tests
     PACKAGE_NAME = @PACKAGE_NAME@
     PACKAGE_TARNAME = @PACKAGE_TARNAME@
     PACKAGE_VERSION = @PACKAGE_VERSION@
     PACKAGE_STRING = @PACKAGE_STRING@
     PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
     PACKAGE_URL = @PACKAGE_URL@

     atconfig: $(top_builddir)/config.status
             cd $(top_builddir) && \
                $(SHELL) ./config.status $(subdir)/$@

     atlocal: $(srcdir)/atlocal.in $(top_builddir)/config.status
             cd $(top_builddir) && \
                $(SHELL) ./config.status $(subdir)/$@

and manage to have `$(EXTRA_DIST)' distributed.  You will also want to
distribute the file `build-aux/missing' from the Automake project; a
copy of this file resides in the Autoconf source tree.

   With all this in place, and if you have not initialized
`TESTSUITEFLAGS' within your makefile, you can fine-tune test suite
execution with this variable, for example:

     make check TESTSUITEFLAGS='-v -d -x 75 -k AC_PROG_CC CFLAGS=-g'

==============================================================================
File: autoconf.info,  Node: |FAQ|,  Next: |History|,  Prev: |Using_Autotest|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *FAQ*

20 Frequent Autoconf Questions, with answers
============================================

Several questions about Autoconf come up occasionally.  Here some of
them are addressed.

MENU

* |Distributing|::                Distributing `configure' scripts
* |Why_GNU_M4|::                  Why not use the standard M4?
* |Bootstrapping|::               Autoconf and GNU M4 require each other?
* |Why_Not_Imake|::               Why GNU uses `configure' instead of Imake
* |Defining_Directories|::        Passing `datadir' to program
* |Autom4te_Cache|::              What is it?  Can I remove it?
* |Present_But_Cannot_Be_Compiled|::  Compiler and Preprocessor Disagree
* |Expanded_Before_Required|::    Expanded Before Required
* |Debugging|::                   Debugging `configure' scripts

==============================================================================
File: autoconf.info,  Node: |Distributing|,  Next: |Why_GNU_M4|,  Up: |FAQ|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Distributing*

20.1 Distributing `configure' Scripts
-------------------------------------

     What are the restrictions on distributing `configure'
     scripts that Autoconf generates?  How does that affect my
     programs that use them?

   There are no restrictions on how the configuration scripts that
Autoconf produces may be distributed or used.  In Autoconf version 1,
they were covered by the GNU General Public License.  We still encourage
software authors to distribute their work under terms like those of the
GPL, but doing so is not required to use Autoconf.

   Of the other files that might be used with `configure',
`config.h.in' is under whatever copyright you use for your
`configure.ac'.  `config.sub' and `config.guess' have an exception to
the GPL when they are used with an Autoconf-generated `configure'
script, which permits you to distribute them under the same terms as
the rest of your package.  `install-sh' is from the X Consortium and is
not copyrighted.

==============================================================================
File: autoconf.info,  Node: |Why_GNU_M4|,  Next: |Bootstrapping|,  Prev: |Distributing|,  Up: |FAQ|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *Why_GNU_M4*

20.2 Why Require GNU M4?
------------------------

     Why does Autoconf require GNU M4?

   Many M4 implementations have hard-coded limitations on the size and
number of macros that Autoconf exceeds.  They also lack several builtin
macros that it would be difficult to get along without in a
sophisticated application like Autoconf, including:

     m4_builtin
     m4_indir
     m4_bpatsubst
     __file__
     __line__

   Autoconf requires version 1.4.6 or later of GNU M4.

   Since only software maintainers need to use Autoconf, and since GNU
M4 is simple to configure and install, it seems reasonable to require
GNU M4 to be installed also.  Many maintainers of GNU and other free
software already have most of the GNU utilities installed, since they
prefer them.

==============================================================================
File: autoconf.info,  Node: |Bootstrapping|,  Next: |Why_Not_Imake|,  Prev: |Why_GNU_M4|,  Up: |FAQ|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Bootstrapping*

20.3 How Can I Bootstrap?
-------------------------

     If Autoconf requires GNU M4 and GNU M4 has an Autoconf
     `configure' script, how do I bootstrap?  It seems like a chicken
     and egg problem!

   This is a misunderstanding.  Although GNU M4 does come with a
`configure' script produced by Autoconf, Autoconf is not required in
order to run the script and install GNU M4.  Autoconf is only required
if you want to change the M4 `configure' script, which few people have
to do (mainly its maintainer).

==============================================================================
File: autoconf.info,  Node: |Why_Not_Imake|,  Next: |Defining_Directories|,  Prev: |Bootstrapping|,  Up: |FAQ|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Why_Not_Imake*

20.4 Why Not Imake?
-------------------

     Why not use Imake instead of `configure' scripts?

   Several people have written addressing this question, so adaptations
of their explanations are included here.

   The following answer is based on one written by Richard Pixley:

     Autoconf generated scripts frequently work on machines that it has
     never been set up to handle before.  That is, it does a good job of
     inferring a configuration for a new system.  Imake cannot do this.

     Imake uses a common database of host specific data.  For X11, this
     makes sense because the distribution is made as a collection of
     tools, by one central authority who has control over the database.

     GNU tools are not released this way.  Each GNU tool has a
     maintainer; these maintainers are scattered across the world.
     Using a common database would be a maintenance nightmare.
     Autoconf may appear to be this kind of database, but in fact it is
     not.  Instead of listing host dependencies, it lists program
     requirements.

     If you view the GNU suite as a collection of native tools, then the
     problems are similar.  But the GNU development tools can be
     configured as cross tools in almost any host+target permutation.
     All of these configurations can be installed concurrently.  They
     can even be configured to share host independent files across
     hosts.  Imake doesn't address these issues.

     Imake templates are a form of standardization.  The GNU coding
     standards address the same issues without necessarily imposing the
     same restrictions.

   Here is some further explanation, written by Per Bothner:

     One of the advantages of Imake is that it is easy to generate large
     makefiles using the `#include' and macro mechanisms of `cpp'.
     However, `cpp' is not programmable: it has limited conditional
     facilities, and no looping.  And `cpp' cannot inspect its
     environment.

     All of these problems are solved by using `sh' instead of `cpp'.
     The shell is fully programmable, has macro substitution, can
     execute (or source) other shell scripts, and can inspect its
     environment.

   Paul Eggert elaborates more:

     With Autoconf, installers need not assume that Imake itself is
     already installed and working well.  This may not seem like much
     of an advantage to people who are accustomed to Imake.  But on
     many hosts Imake is not installed or the default installation is
     not working well, and requiring Imake to install a package hinders
     the acceptance of that package on those hosts.  For example, the
     Imake template and configuration files might not be installed
     properly on a host, or the Imake build procedure might wrongly
     assume that all source files are in one big directory tree, or the
     Imake configuration might assume one compiler whereas the package
     or the installer needs to use another, or there might be a version
     mismatch between the Imake expected by the package and the Imake
     supported by the host.  These problems are much rarer with
     Autoconf, where each package comes with its own independent
     configuration processor.

     Also, Imake often suffers from unexpected interactions between
     `make' and the installer's C preprocessor.  The fundamental problem
     here is that the C preprocessor was designed to preprocess C
     programs, not makefiles.  This is much less of a problem with
     Autoconf, which uses the general-purpose preprocessor M4, and
     where the package's author (rather than the installer) does the
     preprocessing in a standard way.

   Finally, Mark Eichin notes:

     Imake isn't all that extensible, either.  In order to add new
     features to Imake, you need to provide your own project template,
     and duplicate most of the features of the existing one.  This
     means that for a sophisticated project, using the vendor-provided
     Imake templates fails to provide any leverage--since they don't
     cover anything that your own project needs (unless it is an X11
     program).

     On the other side, though:

     The one advantage that Imake has over `configure': `Imakefile'
     files tend to be much shorter (likewise, less redundant) than
     `Makefile.in' files.  There is a fix to this, however--at least
     for the Kerberos V5 tree, we've modified things to call in common
     `post.in' and `pre.in' makefile fragments for the entire tree.
     This means that a lot of common things don't have to be
     duplicated, even though they normally are in `configure' setups.

==============================================================================
File: autoconf.info,  Node: |Defining_Directories|,  Next: |Autom4te_Cache|,  Prev: |Why_Not_Imake|,  Up: |FAQ|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Defining_Directories*

20.5 How Do I `#define' Installation Directories?
-------------------------------------------------

     My program needs library files, installed in `datadir' and
     similar.  If I use
          AC_DEFINE_UNQUOTED([DATADIR], [$datadir],
            [Define to the read-only architecture-independent
             data directory.])

     I get
          #define DATADIR "${prefix}/share"

As already explained, this behavior is on purpose, mandated by the GNU
Coding Standards, see *note Installation Directory Variables::.  There
are several means to achieve a similar goal:

   - Do not use `AC_DEFINE' but use your makefile to pass the actual
     value of `datadir' via compilation flags.  *Note Installation
     Directory Variables::, for the details.

   - This solution can be simplified when compiling a program: you may
     either extend the `CPPFLAGS':

          CPPFLAGS = -DDATADIR='"$(datadir)"' @CPPFLAGS@

     If you are using Automake, you should use `AM_CPPFLAGS' instead:

          AM_CPPFLAGS = -DDATADIR='"$(datadir)"'

     Alternatively, create a dedicated header file:

          DISTCLEANFILES = myprog-paths.h
          myprog-paths.h: Makefile
                  echo '#define DATADIR "$(datadir)"' >$@

     The gnulib module `configmake' provides such a header with all the
     standard directory variables defined, *note configmake:
     (gnulib)configmake.

   - Use `AC_DEFINE' but have `configure' compute the literal value of
     `datadir' and others.  Many people have wrapped macros to automate
     this task; for an example, see the macro `AC_DEFINE_DIR' from the
     Autoconf Macro Archive
     (http://www.gnu.org/software/autoconf-archive/).

     This solution does not conform to the GNU Coding Standards.

   - Note that all the previous solutions hard wire the absolute name of
     these directories in the executables, which is not a good
     property.  You may try to compute the names relative to `prefix',
     and try to find `prefix' at runtime, this way your package is
     relocatable.

==============================================================================
File: autoconf.info,  Node: |Autom4te_Cache|,  Next: |Present_But_Cannot_Be_Compiled|,  Prev: |Defining_Directories|,  Up: |FAQ|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Autom4te_Cache*

20.6 What is `autom4te.cache'?
------------------------------

     What is this directory `autom4te.cache'?  Can I safely remove it?

   In the GNU Build System, `configure.ac' plays a central role and is
read by many tools: `autoconf' to create `configure', `autoheader' to
create `config.h.in', `automake' to create `Makefile.in', `autoscan' to
check the completeness of `configure.ac', `autoreconf' to check the GNU
Build System components that are used.  To "read `configure.ac'"
actually means to compile it with M4, which can be a long process for
complex `configure.ac'.

   This is why all these tools, instead of running directly M4, invoke
`autom4te' (*note autom4te Invocation::) which, while answering to a
specific demand, stores additional information in `autom4te.cache' for
future runs.  For instance, if you run `autoconf', behind the scenes,
`autom4te' also stores information for the other tools, so that when
you invoke `autoheader' or `automake' etc., reprocessing `configure.ac'
is not needed.  The speed up is frequently 30%, and is increasing with
the size of `configure.ac'.

   But it is and remains being simply a cache: you can safely remove it.


     Can I permanently get rid of it?

   The creation of this cache can be disabled from `~/.autom4te.cfg',
see *note Customizing autom4te::, for more details.  You should be
aware that disabling the cache slows down the Autoconf test suite by
40%.  The more GNU Build System components are used, the more the cache
is useful; for instance running `autoreconf -f' on the Core Utilities
is twice slower without the cache _although `--force' implies that the
cache is not fully exploited_, and eight times slower than without
`--force'.

==============================================================================
File: autoconf.info,  Node: |Present_But_Cannot_Be_Compiled|,  Next: |Expanded_Before_Required|,  Prev: |Autom4te_Cache|,  Up: |FAQ|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Present_But_Cannot_Be_Compiled*

20.7 Header Present But Cannot Be Compiled
------------------------------------------

The most important guideline to bear in mind when checking for features
is to mimic as much as possible the intended use.  Unfortunately, old
versions of `AC_CHECK_HEADER' and `AC_CHECK_HEADERS' failed to follow
this idea, and called the preprocessor, instead of the compiler, to
check for headers.  As a result, incompatibilities between headers went
unnoticed during configuration, and maintainers finally had to deal
with this issue elsewhere.

   The transition began with Autoconf 2.56.  As of Autoconf 2.64 both
checks are performed, and `configure' complains loudly if the compiler
and the preprocessor do not agree.  However, only the compiler result
is considered.

   Consider the following example:

     $ cat number.h
     typedef int number;
     $ cat pi.h
     const number pi = 3;
     $ cat configure.ac
     AC_INIT([Example], [1.0], [bug-example@example.org])
     AC_CHECK_HEADERS([pi.h])
     $ autoconf -Wall
     $ ./configure
     checking for gcc... gcc
     checking for C compiler default output file name... a.out
     checking whether the C compiler works... yes
     checking whether we are cross compiling... no
     checking for suffix of executables...
     checking for suffix of object files... o
     checking whether we are using the GNU C compiler... yes
     checking whether gcc accepts -g... yes
     checking for gcc option to accept ISO C89... none needed
     checking how to run the C preprocessor... gcc -E
     checking for grep that handles long lines and -e... grep
     checking for egrep... grep -E
     checking for ANSI C header files... yes
     checking for sys/types.h... yes
     checking for sys/stat.h... yes
     checking for stdlib.h... yes
     checking for string.h... yes
     checking for memory.h... yes
     checking for strings.h... yes
     checking for inttypes.h... yes
     checking for stdint.h... yes
     checking for unistd.h... yes
     checking pi.h usability... no
     checking pi.h presence... yes
     configure: WARNING: pi.h: present but cannot be compiled
     configure: WARNING: pi.h:     check for missing prerequisite headers?
     configure: WARNING: pi.h: see the Autoconf documentation
     configure: WARNING: pi.h:     section "Present But Cannot Be Compiled"
     configure: WARNING: pi.h: proceeding with the compiler's result
     configure: WARNING:     ## -------------------------------------- ##
     configure: WARNING:     ## Report this to bug-example@example.org ##
     configure: WARNING:     ## -------------------------------------- ##
     checking for pi.h... yes

The proper way the handle this case is using the fourth argument (*note
Generic Headers::):

     $ cat configure.ac
     AC_INIT([Example], [1.0], [bug-example@example.org])
     AC_CHECK_HEADERS([number.h pi.h], [], [],
     [[#ifdef HAVE_NUMBER_H
     # include <number.h>
     #endif
     ]])
     $ autoconf -Wall
     $ ./configure
     checking for gcc... gcc
     checking for C compiler default output... a.out
     checking whether the C compiler works... yes
     checking whether we are cross compiling... no
     checking for suffix of executables...
     checking for suffix of object files... o
     checking whether we are using the GNU C compiler... yes
     checking whether gcc accepts -g... yes
     checking for gcc option to accept ANSI C... none needed
     checking for number.h... yes
     checking for pi.h... yes

   See *note Particular Headers::, for a list of headers with their
prerequisites.

==============================================================================
File: autoconf.info,  Node: |Expanded_Before_Required|,  Next: |Debugging|,  Prev: |Present_But_Cannot_Be_Compiled|,  Up: |FAQ|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *Expanded_Before_Required*

20.8 Expanded Before Required
-----------------------------

Older versions of Autoconf silently built files with incorrect ordering
between dependent macros if an outer macro first expanded, then later
indirectly required, an inner macro.  Starting with Autoconf 2.64, this
situation no longer generates out-of-order code, but results in
duplicate output and a syntax warning:

     $ cat configure.ac
     =>AC_DEFUN([TESTA], [[echo in A
     =>if test -n "$SEEN_A" ; then echo duplicate ; fi
     =>SEEN_A=:]])
     =>AC_DEFUN([TESTB], [AC_REQUIRE([TESTA])[echo in B
     =>if test -z "$SEEN_A" ; then echo bug ; fi]])
     =>AC_DEFUN([TESTC], [AC_REQUIRE([TESTB])[echo in C]])
     =>AC_DEFUN([OUTER], [[echo in OUTER]
     =>TESTA
     =>TESTC])
     =>AC_INIT
     =>OUTER
     =>AC_OUTPUT
     $ autoconf
     =>configure.ac:11: warning: AC_REQUIRE:
     => `TESTA' was expanded before it was required
     =>configure.ac:4: TESTB is expanded from...
     =>configure.ac:6: TESTC is expanded from...
     =>configure.ac:7: OUTER is expanded from...
     =>configure.ac:11: the top level

To avoid this warning, decide what purpose the macro in question serves.
If it only needs to be expanded once (for example, if it provides
initialization text used by later macros), then the simplest fix is to
change the macro to be declared with `AC_DEFUN_ONCE' (*note One-Shot
Macros::), although this only works in Autoconf 2.64 and newer.  A more
portable fix is to change all instances of direct calls to instead go
through `AC_REQUIRE' (*note Prerequisite Macros::).  If, instead, the
macro is parameterized by arguments or by the current definition of
other macros in the m4 environment, then the macro should always be
directly expanded instead of required.

   For another case study, consider this example trimmed down from an
actual package.  Originally, the package contained shell code and
multiple macro invocations at the top level of `configure.ac':

     AC_DEFUN([FOO], [AC_COMPILE_IFELSE([...])])
     foobar=
     AC_PROG_CC
     FOO

but that was getting complex, so the author wanted to offload some of
the text into a new macro in another file included via `aclocal.m4'.
The nai"ve approach merely wraps the text in a new macro:

     AC_DEFUN([FOO], [AC_COMPILE_IFELSE([...])])
     AC_DEFUN([BAR], [
     foobar=
     AC_PROG_CC
     FOO
     ])
     BAR

With older versions of Autoconf, the setting of `foobar=' occurs before
the single compiler check, as the author intended.  But with Autoconf
2.64, this issues the "expanded before it was required" warning for
`AC_PROG_CC', and outputs two copies of the compiler check, one before
`foobar=', and one after.  To understand why this is happening,
remember that the use of `AC_COMPILE_IFELSE' includes a call to
`AC_REQUIRE([AC_PROG_CC])' under the hood.  According to the documented
semantics of `AC_REQUIRE', this means that `AC_PROG_CC' _must_ occur
before the body of the outermost `AC_DEFUN', which in this case is
`BAR', thus preceding the use of `foobar='.  The older versions of
Autoconf were broken with regards to the rules of `AC_REQUIRE', which
explains why the code changed from one over to two copies of
`AC_PROG_CC' when upgrading autoconf.  In other words, the author was
unknowingly relying on a bug exploit to get the desired results, and
that exploit broke once the bug was fixed.

   So, what recourse does the author have, to restore their intended
semantics of setting `foobar=' prior to a single compiler check,
regardless of whether Autoconf 2.63 or 2.64 is used?  One idea is to
remember that only `AC_DEFUN' is impacted by `AC_REQUIRE'; there is
always the possibility of using the lower-level `m4_define':

     AC_DEFUN([FOO], [AC_COMPILE_IFELSE([...])])
     m4_define([BAR], [
     foobar=
     AC_PROG_CC
     FOO
     ])
     BAR

This works great if everything is in the same file.  However, it does
not help in the case where the author wants to have `aclocal' find the
definition of `BAR' from its own file, since `aclocal' requires the use
of `AC_DEFUN'.  In this case, a better fix is to recognize that if
`BAR' also uses `AC_REQUIRE', then there will no longer be direct
expansion prior to a subsequent require.  Then, by creating yet another
helper macro, the author can once again guarantee a single invocation of
`AC_PROG_CC', which will still occur after `foobar='.  The author can
also use `AC_BEFORE' to make sure no other macro appearing before `BAR'
has triggered an unwanted expansion of `AC_PROG_CC'.

     AC_DEFUN([FOO], [AC_COMPILE_IFELSE([...])])
     AC_DEFUN([BEFORE_CC], [
     foobar=
     ])
     AC_DEFUN([BAR], [
     AC_BEFORE([$0], [AC_PROG_CC])dnl
     AC_REQUIRE([BEFORE_CC])dnl
     AC_REQUIRE([AC_PROG_CC])dnl
     FOO
     ])
     BAR

==============================================================================
File: autoconf.info,  Node: |Debugging|,  Prev: |Expanded_Before_Required|,  Up: |FAQ|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *Debugging*

20.9 Debugging `configure' scripts
----------------------------------

While in general, `configure' scripts generated by Autoconf strive to
be fairly portable to various systems, compilers, shells, and other
tools, it may still be necessary to debug a failing test, broken script
or makefile, or fix or override an incomplete, faulty, or erroneous
test, especially during macro development.  Failures can occur at all
levels, in M4 syntax or semantics, shell script issues, or due to bugs
in the test or the tools invoked by `configure'.  Together with the
rather arcane error message that `m4' and `make' may produce when their
input contains syntax errors, this can make debugging rather painful.

   Nevertheless, here is a list of hints and strategies that may help:

   * When `autoconf' fails, common causes for error include:

        * mismatched or unbalanced parentheses or braces (*note
          Balancing Parentheses::),

        * under- or overquoted macro arguments (*note Autoconf
          Language::, *note Quoting and Parameters::, *note Quotation
          and Nested Macros::),

        * spaces between macro name and opening parenthesis (*note
          Autoconf Language::).

     Typically, it helps to go back to the last working version of the
     input and compare the differences for each of these errors.
     Another possibility is to sprinkle pairs of `m4_traceon' and
     `m4_traceoff' judiciously in the code, either without a parameter
     or listing some macro names and watch `m4' expand its input
     verbosely (*note Debugging via autom4te::).

   * Sometimes `autoconf' succeeds but the generated `configure' script
     has invalid shell syntax.  You can detect this case by running
     `bash -n configure' or `sh -n configure'.  If this command fails,
     the same tips apply, as if `autoconf' had failed.

   * Debugging `configure' script execution may be done by sprinkling
     pairs of `set -x' and `set +x' into the shell script before and
     after the region that contains a bug.  Running the whole script
     with `SHELL -vx ./configure 2>&1 | tee LOG-FILE' with a decent
     SHELL may work, but produces lots of output.  Here, it can help to
     search for markers like `checking for' a particular test in the
     LOG-FILE.

   * Alternatively, you might use a shell with debugging capabilities
     like bashdb (http://bashdb.sourceforge.net/).

   * When `configure' tests produce invalid results for your system, it
     may be necessary to override them:

        * For programs, tools or libraries variables, preprocessor,
          compiler, or linker flags, it is often sufficient to override
          them at `make' run time with some care (*note Macros and
          Submakes::).  Since this normally won't cause `configure' to
          be run again with these changed settings, it may fail if the
          changed variable would have caused different test results
          from `configure', so this may work only for simple
          differences.

        * Most tests which produce their result in a substituted
          variable allow to override the test by setting the variable
          on the `configure' command line (*note Compilers and
          Options::, *note Defining Variables::, *note Particular
          Systems::).

        * Many tests store their result in a cache variable (*note
          Caching Results::).  This lets you override them either on the
          `configure' command line as above, or through a primed cache
          or site file (*note Cache Files::, *note Site Defaults::).
          The name of a cache variable is documented with a test macro
          or may be inferred from *note Cache Variable Names::; the
          precise semantics of undocumented variables are often
          internal details, subject to change.

   * Alternatively, `configure' may produce invalid results because of
     uncaught programming errors, in your package or in an upstream
     library package.  For example, when `AC_CHECK_LIB' fails to find a
     library with a specified function, always check `config.log'.  This
     will reveal the exact error that produced the failing result: the
     library linked by `AC_CHECK_LIB' probably has a fatal bug.

   Conversely, as macro author, you can make it easier for users of your
macro:

   * by minimizing dependencies between tests and between test results
     as far as possible,

   * by using `make' variables to factorize and allow override of
     settings at `make' run time,

   * by honoring the GNU Coding Standards and not overriding flags
     reserved for the user except temporarily during `configure' tests,

   * by not requiring users of your macro to use the cache variables.
     Instead, expose the result of the test via RUN-IF-TRUE and
     RUN-IF-FALSE parameters.  If the result is not a boolean, then
     provide it through documented shell variables.

==============================================================================
File: autoconf.info,  Node: |History|,  Next: |GNU_Free_Documentation_License|,  Prev: |FAQ|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *History*

21 History of Autoconf
======================

_This chapter was written by the original author, David MacKenzie._

   You may be wondering, Why was Autoconf originally written?  How did
it get into its present form?  (Why does it look like gorilla spit?)  If
you're not wondering, then this chapter contains no information useful
to you, and you might as well skip it.  If you _are_ wondering, then
let there be light...

MENU

* |Genesis|::                     Prehistory and naming of `configure'
* |Exodus|::                      The plagues of M4 and Perl
* |Leviticus|::                   The priestly code of portability arrives
* |Numbers|::                     Growth and contributors
* |Deuteronomy|::                 Approaching the promises of easy configuration

==============================================================================
File: autoconf.info,  Node: |Genesis|,  Next: |Exodus|,  Up: |History|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *Genesis*

21.1 Genesis
------------

In June 1991 I was maintaining many of the GNU utilities for the Free
Software Foundation.  As they were ported to more platforms and more
programs were added, the number of `-D' options that users had to
select in the makefile (around 20) became burdensome.  Especially for
me--I had to test each new release on a bunch of different systems.  So
I wrote a little shell script to guess some of the correct settings for
the fileutils package, and released it as part of fileutils 2.0.  That
`configure' script worked well enough that the next month I adapted it
(by hand) to create similar `configure' scripts for several other GNU
utilities packages.  Brian Berliner also adapted one of my scripts for
his CVS revision control system.

   Later that summer, I learned that Richard Stallman and Richard Pixley
were developing similar scripts to use in the GNU compiler tools; so I
adapted my `configure' scripts to support their evolving interface:
using the file name `Makefile.in' as the templates; adding `+srcdir',
the first option (of many); and creating `config.status' files.

==============================================================================
File: autoconf.info,  Node: |Exodus|,  Next: |Leviticus|,  Prev: |Genesis|,  Up: |History|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *Exodus*

21.2 Exodus
-----------

As I got feedback from users, I incorporated many improvements, using
Emacs to search and replace, cut and paste, similar changes in each of
the scripts.  As I adapted more GNU utilities packages to use
`configure' scripts, updating them all by hand became impractical.
Rich Murphey, the maintainer of the GNU graphics utilities, sent me
mail saying that the `configure' scripts were great, and asking if I
had a tool for generating them that I could send him.  No, I thought,
but I should!  So I started to work out how to generate them.  And the
journey from the slavery of hand-written `configure' scripts to the
abundance and ease of Autoconf began.

   Cygnus `configure', which was being developed at around that time,
is table driven; it is meant to deal mainly with a discrete number of
system types with a small number of mainly unguessable features (such as
details of the object file format).  The automatic configuration system
that Brian Fox had developed for Bash takes a similar approach.  For
general use, it seems to me a hopeless cause to try to maintain an
up-to-date database of which features each variant of each operating
system has.  It's easier and more reliable to check for most features on
the fly--especially on hybrid systems that people have hacked on
locally or that have patches from vendors installed.

   I considered using an architecture similar to that of Cygnus
`configure', where there is a single `configure' script that reads
pieces of `configure.in' when run.  But I didn't want to have to
distribute all of the feature tests with every package, so I settled on
having a different `configure' made from each `configure.in' by a
preprocessor.  That approach also offered more control and flexibility.

   I looked briefly into using the Metaconfig package, by Larry Wall,
Harlan Stenn, and Raphael Manfredi, but I decided not to for several
reasons.  The `Configure' scripts it produces are interactive, which I
find quite inconvenient; I didn't like the ways it checked for some
features (such as library functions); I didn't know that it was still
being maintained, and the `Configure' scripts I had seen didn't work on
many modern systems (such as System V R4 and NeXT); it wasn't flexible
in what it could do in response to a feature's presence or absence; I
found it confusing to learn; and it was too big and complex for my
needs (I didn't realize then how much Autoconf would eventually have to
grow).

   I considered using Perl to generate my style of `configure' scripts,
but decided that M4 was better suited to the job of simple textual
substitutions: it gets in the way less, because output is implicit.
Plus, everyone already has it.  (Initially I didn't rely on the GNU
extensions to M4.)  Also, some of my friends at the University of
Maryland had recently been putting M4 front ends on several programs,
including `tvtwm', and I was interested in trying out a new language.

==============================================================================
File: autoconf.info,  Node: |Leviticus|,  Next: |Numbers|,  Prev: |Exodus|,  Up: |History|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *Leviticus*

21.3 Leviticus
--------------

Since my `configure' scripts determine the system's capabilities
automatically, with no interactive user intervention, I decided to call
the program that generates them Autoconfig.  But with a version number
tacked on, that name would be too long for old Unix file systems, so I
shortened it to Autoconf.

   In the fall of 1991 I called together a group of fellow questers
after the Holy Grail of portability (er, that is, alpha testers) to
give me feedback as I encapsulated pieces of my handwritten scripts in
M4 macros and continued to add features and improve the techniques used
in the checks.  Prominent among the testers were Franc,ois Pinard, who
came up with the idea of making an Autoconf shell script to run M4 and
check for unresolved macro calls; Richard Pixley, who suggested running
the compiler instead of searching the file system to find include files
and symbols, for more accurate results; Karl Berry, who got Autoconf to
configure TeX and added the macro index to the documentation; and Ian
Lance Taylor, who added support for creating a C header file as an
alternative to putting `-D' options in a makefile, so he could use
Autoconf for his UUCP package.  The alpha testers cheerfully adjusted
their files again and again as the names and calling conventions of the
Autoconf macros changed from release to release.  They all contributed
many specific checks, great ideas, and bug fixes.

==============================================================================
File: autoconf.info,  Node: |Numbers|,  Next: |Deuteronomy|,  Prev: |Leviticus|,  Up: |History|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *Numbers*

21.4 Numbers
------------

In July 1992, after months of alpha testing, I released Autoconf 1.0,
and converted many GNU packages to use it.  I was surprised by how
positive the reaction to it was.  More people started using it than I
could keep track of, including people working on software that wasn't
part of the GNU Project (such as TCL, FSP, and Kerberos V5).  Autoconf
continued to improve rapidly, as many people using the `configure'
scripts reported problems they encountered.

   Autoconf turned out to be a good torture test for M4 implementations.
Unix M4 started to dump core because of the length of the macros that
Autoconf defined, and several bugs showed up in GNU M4 as well.
Eventually, we realized that we needed to use some features that only
GNU M4 has.  4.3BSD M4, in particular, has an impoverished set of
builtin macros; the System V version is better, but still doesn't
provide everything we need.

   More development occurred as people put Autoconf under more stresses
(and to uses I hadn't anticipated).  Karl Berry added checks for X11.
david zuhn contributed C++ support.  Franc,ois Pinard made it diagnose
invalid arguments.  Jim Blandy bravely coerced it into configuring GNU
Emacs, laying the groundwork for several later improvements.  Roland
McGrath got it to configure the GNU C Library, wrote the `autoheader'
script to automate the creation of C header file templates, and added a
`--verbose' option to `configure'.  Noah Friedman added the
`--autoconf-dir' option and `AC_MACRODIR' environment variable.  (He
also coined the term "autoconfiscate" to mean "adapt a software package
to use Autoconf".)  Roland and Noah improved the quoting protection in
`AC_DEFINE' and fixed many bugs, especially when I got sick of dealing
with portability problems from February through June, 1993.

==============================================================================
File: autoconf.info,  Node: |Deuteronomy|,  Prev: |Numbers|,  Up: |History|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Deuteronomy*

21.5 Deuteronomy
----------------

A long wish list for major features had accumulated, and the effect of
several years of patching by various people had left some residual
cruft.  In April 1994, while working for Cygnus Support, I began a major
revision of Autoconf.  I added most of the features of the Cygnus
`configure' that Autoconf had lacked, largely by adapting the relevant
parts of Cygnus `configure' with the help of david zuhn and Ken
Raeburn.  These features include support for using `config.sub',
`config.guess', `--host', and `--target'; making links to files; and
running `configure' scripts in subdirectories.  Adding these features
enabled Ken to convert GNU `as', and Rob Savoye to convert DejaGNU, to
using Autoconf.

   I added more features in response to other peoples' requests.  Many
people had asked for `configure' scripts to share the results of the
checks between runs, because (particularly when configuring a large
source tree, like Cygnus does) they were frustratingly slow.  Mike
Haertel suggested adding site-specific initialization scripts.  People
distributing software that had to unpack on MS-DOS asked for a way to
override the `.in' extension on the file names, which produced file
names like `config.h.in' containing two dots.  Jim Avera did an
extensive examination of the problems with quoting in `AC_DEFINE' and
`AC_SUBST'; his insights led to significant improvements.  Richard
Stallman asked that compiler output be sent to `config.log' instead of
`/dev/null', to help people debug the Emacs `configure' script.

   I made some other changes because of my dissatisfaction with the
quality of the program.  I made the messages showing results of the
checks less ambiguous, always printing a result.  I regularized the
names of the macros and cleaned up coding style inconsistencies.  I
added some auxiliary utilities that I had developed to help convert
source code packages to use Autoconf.  With the help of Franc,ois
Pinard, I made the macros not interrupt each others' messages.  (That
feature revealed some performance bottlenecks in GNU M4, which he
hastily corrected!)  I reorganized the documentation around problems
people want to solve.  And I began a test suite, because experience had
shown that Autoconf has a pronounced tendency to regress when we change
it.

   Again, several alpha testers gave invaluable feedback, especially
Franc,ois Pinard, Jim Meyering, Karl Berry, Rob Savoye, Ken Raeburn,
and Mark Eichin.

   Finally, version 2.0 was ready.  And there was much rejoicing.  (And
I have free time again.  I think.  Yeah, right.)

==============================================================================
File: autoconf.info,  Node: |GNU_Free_Documentation_License|,  Next: |Indices|,  Prev: |History|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *GNU_Free_Documentation_License*

Appendix A GNU Free Documentation License
=========================================

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     `http://fsf.org/'

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it
     can be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You
     accept the license if you copy, modify or distribute the work in a
     way requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.  If a section does not fit the above definition of
     Secondary then it is not allowed to be designated as Invariant.
     The Document may contain zero Invariant Sections.  If the Document
     does not identify any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup, or absence of
     markup, has been arranged to thwart or discourage subsequent
     modification by readers is not Transparent.  An image format is
     not Transparent if used for any substantial amount of text.  A
     copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML, PostScript or PDF designed for
     human modification.  Examples of transparent image formats include
     PNG, XCF and JPG.  Opaque formats include proprietary formats that
     can be read and edited only by proprietary word processors, SGML or
     XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML, PostScript or PDF
     produced by some word processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a computer-network location from
     which the general network-using public has access to download
     using public-standard network protocols a complete Transparent
     copy of the Document, free of added material.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section Entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the
          section all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly
     and finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from
     you under this License.  If your rights have been terminated and
     not permanently reinstated, receipt of a copy of some or all of
     the same material does not give you any rights to use it.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.  If the Document specifies that a proxy
     can decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

 11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.


ADDENDUM: How to use this License for your documents
----------------------------------------------------

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.

==============================================================================
File: autoconf.info,  Node: |Indices|,  Prev: |GNU_Free_Documentation_License|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *Indices*

Appendix B Indices
==================

MENU

* |Environment_Variable_Index|::  Index of environment variables used
* |Output_Variable_Index|::       Index of variables set in output files
* |Preprocessor_Symbol_Index|::   Index of C preprocessor symbols defined
* |Cache_Variable_Index|::        Index of documented cache variables
* |Autoconf_Macro_Index|::        Index of Autoconf macros
* |M4_Macro_Index|::              Index of M4, M4sugar, and M4sh macros
* |Autotest_Macro_Index|::        Index of Autotest macros
* |Program_&_Function_Index|::    Index of those with portability problems
* |Concept_Index|::               General index

==============================================================================
File: autoconf.info,  Node: |Environment_Variable_Index|,  Next: |Output_Variable_Index|,  Up: |Indices|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *Environment_Variable_Index*

B.1 Environment Variable Index
------------------------------

This is an alphabetical list of the environment variables that might
influence Autoconf checks.


MENU

* _:                                     Special Shell Variables.
                                                              (line  36)
* BIN_SH:                                Special Shell Variables.
                                                              (line  40)
* CC:                                    C Compiler.          (line  61)
* CDPATH:                                Special Shell Variables.
                                                              (line  44)
* CFLAGS <1>:                            C Compiler.          (line  61)
* CFLAGS:                                Preset Output Variables.
                                                              (line  23)
* CLICOLOR_FORCE:                        Special Shell Variables.
                                                              (line  67)
* CONFIG_COMMANDS:                       Obsolete config.status Use.
                                                              (line  11)
* CONFIG_FILES:                          Obsolete config.status Use.
                                                              (line  15)
* CONFIG_HEADERS:                        Obsolete config.status Use.
                                                              (line  20)
* CONFIG_LINKS:                          Obsolete config.status Use.
                                                              (line  25)
* CONFIG_SHELL:                          config.status Invocation.
                                                              (line 102)
* CONFIG_SITE:                           Site Defaults.       (line  10)
* CONFIG_STATUS:                         config.status Invocation.
                                                              (line 108)
* CPP:                                   C Compiler.          (line 113)
* CPPFLAGS:                              Preset Output Variables.
                                                              (line  72)
* CXX:                                   C++ Compiler.        (line   7)
* CXXCPP:                                C++ Compiler.        (line  35)
* CXXFLAGS <1>:                          C++ Compiler.        (line   7)
* CXXFLAGS:                              Preset Output Variables.
                                                              (line  94)
* CYGWIN:                                Obsolete Macros.     (line 124)
* DUALCASE:                              Special Shell Variables.
                                                              (line  74)
* ENV:                                   Special Shell Variables.
                                                              (line  84)
* ERL:                                   Erlang Compiler and Interpreter.
                                                              (line  29)
* ERLC:                                  Erlang Compiler and Interpreter.
                                                              (line  10)
* ERLCFLAGS <1>:                         Erlang Compiler and Interpreter.
                                                              (line  10)
* ERLCFLAGS:                             Preset Output Variables.
                                                              (line 120)
* F77:                                   Fortran Compiler.    (line  19)
* FC:                                    Fortran Compiler.    (line  44)
* FCFLAGS <1>:                           Fortran Compiler.    (line  44)
* FCFLAGS:                               Preset Output Variables.
                                                              (line 126)
* FFLAGS <1>:                            Fortran Compiler.    (line  19)
* FFLAGS:                                Preset Output Variables.
                                                              (line 133)
* FPATH:                                 Special Shell Variables.
                                                              (line 101)
* GOFLAGS:                               Preset Output Variables.
                                                              (line 170)
* GREP_OPTIONS:                          Special Shell Variables.
                                                              (line 108)
* IFS:                                   Special Shell Variables.
                                                              (line 116)
* LANG:                                  Special Shell Variables.
                                                              (line 160)
* LANGUAGE:                              Special Shell Variables.
                                                              (line 167)
* LC_ADDRESS:                            Special Shell Variables.
                                                              (line 177)
* LC_ALL <1>:                            Special Shell Variables.
                                                              (line 160)
* LC_ALL:                                Initialization Macros.
                                                              (line  14)
* LC_COLLATE:                            Special Shell Variables.
                                                              (line 160)
* LC_CTYPE:                              Special Shell Variables.
                                                              (line 160)
* LC_IDENTIFICATION:                     Special Shell Variables.
                                                              (line 177)
* LC_MEASUREMENT:                        Special Shell Variables.
                                                              (line 177)
* LC_MESSAGES:                           Special Shell Variables.
                                                              (line 160)
* LC_MONETARY:                           Special Shell Variables.
                                                              (line 160)
* LC_NAME:                               Special Shell Variables.
                                                              (line 177)
* LC_NUMERIC:                            Special Shell Variables.
                                                              (line 160)
* LC_PAPER:                              Special Shell Variables.
                                                              (line 177)
* LC_TELEPHONE:                          Special Shell Variables.
                                                              (line 177)
* LC_TIME:                               Special Shell Variables.
                                                              (line 160)
* LDFLAGS:                               Preset Output Variables.
                                                              (line 140)
* LIBS:                                  Preset Output Variables.
                                                              (line 154)
* LINENO <1>:                            Special Shell Variables.
                                                              (line 182)
* LINENO:                                Initialization Macros.
                                                              (line  67)
* M4:                                    autom4te Invocation. (line  10)
* MAIL:                                  Special Shell Variables.
                                                              (line  84)
* MAILPATH:                              Special Shell Variables.
                                                              (line  84)
* NULLCMD:                               Special Shell Variables.
                                                              (line 311)
* OBJC:                                  Objective C Compiler.
                                                              (line   7)
* OBJCFLAGS <1>:                         Objective C Compiler.
                                                              (line   7)
* OBJCFLAGS:                             Preset Output Variables.
                                                              (line 162)
* OBJCPP:                                Objective C Compiler.
                                                              (line  26)
* OBJCXX:                                Objective C++ Compiler.
                                                              (line   7)
* OBJCXXCPP:                             Objective C++ Compiler.
                                                              (line  27)
* OBJCXXFLAGS <1>:                       Objective C++ Compiler.
                                                              (line   7)
* OBJCXXFLAGS:                           Preset Output Variables.
                                                              (line 166)
* options:                               Special Shell Variables.
                                                              (line 318)
* PATH_SEPARATOR:                        Special Shell Variables.
                                                              (line 322)
* POSIXLY_CORRECT:                       Special Shell Variables.
                                                              (line 331)
* PS1:                                   Special Shell Variables.
                                                              (line  84)
* PS2:                                   Special Shell Variables.
                                                              (line  84)
* PS4:                                   Special Shell Variables.
                                                              (line  84)
* PWD:                                   Special Shell Variables.
                                                              (line 346)
* RANDOM:                                Special Shell Variables.
                                                              (line 355)
* SHELL:                                 Initialization Macros.
                                                              (line  14)
* SIMPLE_BACKUP_SUFFIX:                  autoupdate Invocation.
                                                              (line  16)
* status:                                Special Shell Variables.
                                                              (line 363)
* TMPDIR:                                Initialization Macros.
                                                              (line  77)
* WARNINGS <1>:                          autom4te Invocation. (line  58)
* WARNINGS <2>:                          autoheader Invocation.
                                                              (line  83)
* WARNINGS <3>:                          autoreconf Invocation.
                                                              (line  97)
* WARNINGS:                              autoconf Invocation. (line  62)
* XMKMF:                                 System Services.     (line  10)
* YACC:                                  Particular Programs. (line 200)
* YFLAGS:                                Particular Programs. (line 200)

==============================================================================
File: autoconf.info,  Node: |Output_Variable_Index|,  Next: |Preprocessor_Symbol_Index|,  Prev: |Environment_Variable_Index|,  Up: |Indices|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *Output_Variable_Index*

B.2 Output Variable Index
-------------------------

This is an alphabetical list of the variables that Autoconf can
substitute into files that it creates, typically one or more makefiles.
*Note Setting Output Variables::, for more information on how this is
done.


MENU

* abs_builddir:                          Preset Output Variables.
                                                              (line 177)
* abs_srcdir:                            Preset Output Variables.
                                                              (line 199)
* abs_top_builddir:                      Preset Output Variables.
                                                              (line 192)
* abs_top_srcdir:                        Preset Output Variables.
                                                              (line 206)
* ac_empty:                              Fortran Compiler.    (line 465)
* ALLOCA:                                Particular Functions.
                                                              (line  10)
* AWK:                                   Particular Programs. (line  10)
* bindir:                                Installation Directory Variables.
                                                              (line  15)
* build:                                 Canonicalizing.      (line  26)
* build_alias:                           Canonicalizing.      (line   9)
* build_cpu:                             Canonicalizing.      (line  26)
* build_os:                              Canonicalizing.      (line  26)
* build_vendor:                          Canonicalizing.      (line  26)
* builddir:                              Preset Output Variables.
                                                              (line 174)
* CC <1>:                                System Services.     (line  49)
* CC:                                    C Compiler.          (line  61)
* CFLAGS <1>:                            C Compiler.          (line  61)
* CFLAGS:                                Preset Output Variables.
                                                              (line  23)
* configure_input:                       Preset Output Variables.
                                                              (line  58)
* CPP:                                   C Compiler.          (line 113)
* CPPFLAGS:                              Preset Output Variables.
                                                              (line  72)
* cross_compiling:                       Runtime.             (line  71)
* CXX:                                   C++ Compiler.        (line   7)
* CXXCPP:                                C++ Compiler.        (line  35)
* CXXFLAGS <1>:                          C++ Compiler.        (line   7)
* CXXFLAGS:                              Preset Output Variables.
                                                              (line  94)
* datadir:                               Installation Directory Variables.
                                                              (line  18)
* datarootdir:                           Installation Directory Variables.
                                                              (line  22)
* DEFS:                                  Preset Output Variables.
                                                              (line  98)
* docdir:                                Installation Directory Variables.
                                                              (line  26)
* dvidir:                                Installation Directory Variables.
                                                              (line  30)
* ECHO_C:                                Preset Output Variables.
                                                              (line 108)
* ECHO_N:                                Preset Output Variables.
                                                              (line 108)
* ECHO_T:                                Preset Output Variables.
                                                              (line 108)
* EGREP:                                 Particular Programs. (line  29)
* ERL <1>:                               Running the Compiler.
                                                              (line  30)
* ERL <2>:                               Language Choice.     (line  40)
* ERL:                                   Erlang Compiler and Interpreter.
                                                              (line  29)
* ERLANG_ERTS_VER:                       Erlang Libraries.    (line  12)
* ERLANG_INSTALL_LIB_DIR <1>:            Erlang Libraries.    (line  86)
* ERLANG_INSTALL_LIB_DIR:                Installation Directory Variables.
                                                              (line 201)
* ERLANG_INSTALL_LIB_DIR_LIBRARY <1>:    Erlang Libraries.    (line  93)
* ERLANG_INSTALL_LIB_DIR_LIBRARY:        Installation Directory Variables.
                                                              (line 206)
* ERLANG_LIB_DIR:                        Erlang Libraries.    (line  28)
* ERLANG_LIB_DIR_LIBRARY:                Erlang Libraries.    (line  36)
* ERLANG_LIB_VER_LIBRARY:                Erlang Libraries.    (line  36)
* ERLANG_ROOT_DIR:                       Erlang Libraries.    (line  22)
* ERLC <1>:                              Language Choice.     (line  40)
* ERLC:                                  Erlang Compiler and Interpreter.
                                                              (line  10)
* ERLCFLAGS <1>:                         Language Choice.     (line  40)
* ERLCFLAGS <2>:                         Erlang Compiler and Interpreter.
                                                              (line  10)
* ERLCFLAGS:                             Preset Output Variables.
                                                              (line 120)
* exec_prefix:                           Installation Directory Variables.
                                                              (line  33)
* EXEEXT <1>:                            Obsolete Macros.     (line 178)
* EXEEXT:                                Compilers and Preprocessors.
                                                              (line   6)
* F77:                                   Fortran Compiler.    (line  19)
* FC:                                    Fortran Compiler.    (line  44)
* FC_MODEXT:                             Fortran Compiler.    (line 438)
* FC_MODINC:                             Fortran Compiler.    (line 465)
* FC_MODOUT:                             Fortran Compiler.    (line 501)
* FCFLAGS <1>:                           Fortran Compiler.    (line  44)
* FCFLAGS:                               Preset Output Variables.
                                                              (line 126)
* FCLIBS:                                Fortran Compiler.    (line  92)
* FFLAGS <1>:                            Fortran Compiler.    (line  19)
* FFLAGS:                                Preset Output Variables.
                                                              (line 133)
* FGREP:                                 Particular Programs. (line  36)
* FLIBS:                                 Fortran Compiler.    (line  92)
* GETGROUPS_LIBS:                        Particular Functions.
                                                              (line 155)
* GETLOADAVG_LIBS:                       Particular Functions.
                                                              (line 161)
* GOFLAGS:                               Preset Output Variables.
                                                              (line 170)
* GREP:                                  Particular Programs. (line  20)
* host:                                  Canonicalizing.      (line  34)
* host_alias:                            Canonicalizing.      (line   9)
* host_cpu:                              Canonicalizing.      (line  34)
* host_os:                               Canonicalizing.      (line  34)
* host_vendor:                           Canonicalizing.      (line  34)
* htmldir:                               Installation Directory Variables.
                                                              (line  40)
* includedir:                            Installation Directory Variables.
                                                              (line  43)
* infodir:                               Installation Directory Variables.
                                                              (line  46)
* INSTALL:                               Particular Programs. (line  43)
* INSTALL_DATA:                          Particular Programs. (line  43)
* INSTALL_PROGRAM:                       Particular Programs. (line  43)
* INSTALL_SCRIPT:                        Particular Programs. (line  43)
* KMEM_GROUP:                            Particular Functions.
                                                              (line 161)
* LDFLAGS:                               Preset Output Variables.
                                                              (line 140)
* LEX:                                   Particular Programs. (line 114)
* LEX_OUTPUT_ROOT:                       Particular Programs. (line 114)
* LEXLIB:                                Particular Programs. (line 114)
* libdir:                                Installation Directory Variables.
                                                              (line  49)
* libexecdir:                            Installation Directory Variables.
                                                              (line  52)
* LIBOBJDIR:                             AC_LIBOBJ vs LIBOBJS.
                                                              (line  35)
* LIBOBJS <1>:                           Particular Structures.
                                                              (line  26)
* LIBOBJS <2>:                           Generic Functions.   (line  56)
* LIBOBJS:                               Particular Functions.
                                                              (line 161)
* LIBS <1>:                              Obsolete Macros.     (line 295)
* LIBS:                                  Preset Output Variables.
                                                              (line 154)
* LN_S:                                  Particular Programs. (line 168)
* localedir:                             Installation Directory Variables.
                                                              (line  55)
* localstatedir:                         Installation Directory Variables.
                                                              (line  60)
* mandir:                                Installation Directory Variables.
                                                              (line  63)
* MKDIR_P:                               Particular Programs. (line  80)
* NEED_SETGID:                           Particular Functions.
                                                              (line 161)
* OBJC:                                  Objective C Compiler.
                                                              (line   7)
* OBJCFLAGS <1>:                         Objective C Compiler.
                                                              (line   7)
* OBJCFLAGS:                             Preset Output Variables.
                                                              (line 162)
* OBJCPP:                                Objective C Compiler.
                                                              (line  26)
* OBJCXX:                                Objective C++ Compiler.
                                                              (line   7)
* OBJCXXCPP:                             Objective C++ Compiler.
                                                              (line  27)
* OBJCXXFLAGS <1>:                       Objective C++ Compiler.
                                                              (line   7)
* OBJCXXFLAGS:                           Preset Output Variables.
                                                              (line 166)
* OBJEXT <1>:                            Obsolete Macros.     (line 384)
* OBJEXT:                                Compilers and Preprocessors.
                                                              (line  11)
* oldincludedir:                         Installation Directory Variables.
                                                              (line  66)
* OPENMP_CFLAGS:                         Generic Compiler Characteristics.
                                                              (line  64)
* OPENMP_CXXFLAGS:                       Generic Compiler Characteristics.
                                                              (line  64)
* OPENMP_FCFLAGS:                        Generic Compiler Characteristics.
                                                              (line  64)
* OPENMP_FFLAGS:                         Generic Compiler Characteristics.
                                                              (line  64)
* PACKAGE_BUGREPORT:                     Initializing configure.
                                                              (line  57)
* PACKAGE_NAME:                          Initializing configure.
                                                              (line  45)
* PACKAGE_STRING:                        Initializing configure.
                                                              (line  54)
* PACKAGE_TARNAME:                       Initializing configure.
                                                              (line  48)
* PACKAGE_URL:                           Initializing configure.
                                                              (line  61)
* PACKAGE_VERSION:                       Initializing configure.
                                                              (line  51)
* pdfdir:                                Installation Directory Variables.
                                                              (line  69)
* POW_LIB:                               Particular Functions.
                                                              (line 408)
* prefix:                                Installation Directory Variables.
                                                              (line  72)
* program_transform_name:                Transforming Names.  (line  11)
* psdir:                                 Installation Directory Variables.
                                                              (line  77)
* RANLIB:                                Particular Programs. (line 187)
* sbindir:                               Installation Directory Variables.
                                                              (line  80)
* SED:                                   Particular Programs. (line 191)
* SET_MAKE:                              Output.              (line  45)
* sharedstatedir:                        Installation Directory Variables.
                                                              (line  84)
* srcdir:                                Preset Output Variables.
                                                              (line 195)
* subdirs:                               Subdirectories.      (line  12)
* sysconfdir:                            Installation Directory Variables.
                                                              (line  88)
* target:                                Canonicalizing.      (line  41)
* target_alias:                          Canonicalizing.      (line   9)
* target_cpu:                            Canonicalizing.      (line  41)
* target_os:                             Canonicalizing.      (line  41)
* target_vendor:                         Canonicalizing.      (line  41)
* tmp:                                   Initialization Macros.
                                                              (line  77)
* top_build_prefix:                      Preset Output Variables.
                                                              (line 184)
* top_builddir:                          Preset Output Variables.
                                                              (line 180)
* top_srcdir:                            Preset Output Variables.
                                                              (line 202)
* X_CFLAGS:                              System Services.     (line  30)
* X_EXTRA_LIBS:                          System Services.     (line  30)
* X_LIBS:                                System Services.     (line  30)
* X_PRE_LIBS:                            System Services.     (line  30)
* YACC:                                  Particular Programs. (line 200)

==============================================================================
File: autoconf.info,  Node: |Preprocessor_Symbol_Index|,  Next: |Cache_Variable_Index|,  Prev: |Output_Variable_Index|,  Up: |Indices|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *Preprocessor_Symbol_Index*

B.3 Preprocessor Symbol Index
-----------------------------

This is an alphabetical list of the C preprocessor symbols that the
Autoconf macros define.  To work with Autoconf, C source code needs to
use these names in `#if' or `#ifdef' directives.


MENU

* __CHAR_UNSIGNED__:                     C Compiler.          (line 291)
* __EXTENSIONS__:                        Posix Variants.      (line  10)
* __PROTOTYPES:                          C Compiler.          (line 351)
* _ALL_SOURCE <1>:                       Obsolete Macros.     (line  20)
* _ALL_SOURCE:                           Posix Variants.      (line  10)
* _FILE_OFFSET_BITS:                     System Services.     (line  49)
* _GNU_SOURCE <1>:                       Obsolete Macros.     (line 234)
* _GNU_SOURCE:                           Posix Variants.      (line  10)
* _LARGE_FILES:                          System Services.     (line  49)
* _LARGEFILE_SOURCE:                     Particular Functions.
                                                              (line 147)
* _MINIX <1>:                            Obsolete Macros.     (line 371)
* _MINIX:                                Posix Variants.      (line  10)
* _OPENMP:                               Generic Compiler Characteristics.
                                                              (line  64)
* _POSIX_1_SOURCE <1>:                   Obsolete Macros.     (line 371)
* _POSIX_1_SOURCE:                       Posix Variants.      (line  10)
* _POSIX_PTHREAD_SEMANTICS:              Posix Variants.      (line  10)
* _POSIX_SOURCE <1>:                     Obsolete Macros.     (line 371)
* _POSIX_SOURCE:                         Posix Variants.      (line  10)
* _POSIX_VERSION:                        Particular Headers.  (line 228)
* _TANDEM_SOURCE:                        Posix Variants.      (line  10)
* ALIGNOF_TYPE:                          Generic Compiler Characteristics.
                                                              (line  30)
* C_ALLOCA:                              Particular Functions.
                                                              (line  10)
* C_GETLOADAVG:                          Particular Functions.
                                                              (line 161)
* CLOSEDIR_VOID:                         Particular Functions.
                                                              (line  69)
* const:                                 C Compiler.          (line 217)
* CXX_NO_MINUS_C_MINUS_O:                C++ Compiler.        (line  48)
* DGUX:                                  Particular Functions.
                                                              (line 161)
* DIRENT:                                Obsolete Macros.     (line 158)
* F77_DUMMY_MAIN:                        Fortran Compiler.    (line 130)
* F77_FUNC:                              Fortran Compiler.    (line 202)
* F77_FUNC_:                             Fortran Compiler.    (line 202)
* F77_MAIN:                              Fortran Compiler.    (line 176)
* F77_NO_MINUS_C_MINUS_O:                Fortran Compiler.    (line  76)
* FC_DUMMY_MAIN:                         Fortran Compiler.    (line 130)
* FC_FUNC:                               Fortran Compiler.    (line 202)
* FC_FUNC_:                              Fortran Compiler.    (line 202)
* FC_MAIN:                               Fortran Compiler.    (line 176)
* FC_NO_MINUS_C_MINUS_O:                 Fortran Compiler.    (line  76)
* FLEXIBLE_ARRAY_MEMBER:                 C Compiler.          (line 315)
* GETGROUPS_T:                           Particular Types.    (line  14)
* GETLOADAVG_PRIVILEGED:                 Particular Functions.
                                                              (line 161)
* GETPGRP_VOID:                          Particular Functions.
                                                              (line 205)
* gid_t:                                 Particular Types.    (line 126)
* GWINSZ_IN_SYS_IOCTL:                   Particular Headers.  (line 270)
* HAVE__BOOL:                            Particular Headers.  (line  10)
* HAVE_AGGREGATE_MEMBER:                 Generic Structures.  (line  29)
* HAVE_ALLOCA_H:                         Particular Functions.
                                                              (line  10)
* HAVE_C_BACKSLASH_A:                    C Compiler.          (line 176)
* HAVE_C_VARARRAYS:                      C Compiler.          (line 339)
* HAVE_CHOWN:                            Particular Functions.
                                                              (line  63)
* HAVE_CONFIG_H:                         Configuration Headers.
                                                              (line  33)
* HAVE_DECL_STRERROR_R:                  Particular Functions.
                                                              (line 388)
* HAVE_DECL_SYMBOL:                      Generic Declarations.
                                                              (line  34)
* HAVE_DECL_TZNAME:                      Particular Structures.
                                                              (line  43)
* HAVE_DIRENT_H:                         Particular Headers.  (line  25)
* HAVE_DOPRNT:                           Particular Functions.
                                                              (line 443)
* HAVE_FSEEKO:                           Particular Functions.
                                                              (line 147)
* HAVE_FUNCTION:                         Generic Functions.   (line  27)
* HAVE_GETGROUPS:                        Particular Functions.
                                                              (line 155)
* HAVE_GETMNTENT:                        Particular Functions.
                                                              (line 195)
* HAVE_HEADER:                           Generic Headers.     (line  46)
* HAVE_INT16_T:                          Particular Types.    (line  40)
* HAVE_INT32_T:                          Particular Types.    (line  43)
* HAVE_INT64_T:                          Particular Types.    (line  46)
* HAVE_INT8_T:                           Particular Types.    (line  21)
* HAVE_INTMAX_T:                         Particular Types.    (line  49)
* HAVE_INTPTR_T:                         Particular Types.    (line  54)
* HAVE_LONG_DOUBLE <1>:                  Obsolete Macros.     (line  33)
* HAVE_LONG_DOUBLE:                      Particular Types.    (line  59)
* HAVE_LONG_DOUBLE_WIDER:                Particular Types.    (line  70)
* HAVE_LONG_FILE_NAMES:                  System Services.     (line  71)
* HAVE_LONG_LONG_INT:                    Particular Types.    (line  78)
* HAVE_LSTAT_EMPTY_STRING_BUG:           Particular Functions.
                                                              (line 363)
* HAVE_MALLOC:                           Particular Functions.
                                                              (line 247)
* HAVE_MBRTOWC:                          Particular Functions.
                                                              (line 279)
* HAVE_MMAP:                             Particular Functions.
                                                              (line 311)
* HAVE_NDIR_H:                           Particular Headers.  (line  25)
* HAVE_NLIST_H:                          Particular Functions.
                                                              (line 161)
* HAVE_OBSTACK:                          Particular Functions.
                                                              (line 319)
* HAVE_REALLOC:                          Particular Functions.
                                                              (line 326)
* HAVE_RESOLV_H:                         Particular Headers.  (line  73)
* HAVE_RESTARTABLE_SYSCALLS:             Obsolete Macros.     (line 548)
* HAVE_ST_BLKSIZE:                       Obsolete Macros.     (line 521)
* HAVE_ST_BLOCKS:                        Particular Structures.
                                                              (line  26)
* HAVE_ST_RDEV:                          Obsolete Macros.     (line 530)
* HAVE_STAT_EMPTY_STRING_BUG:            Particular Functions.
                                                              (line 363)
* HAVE_STDBOOL_H:                        Particular Headers.  (line 101)
* HAVE_STRCOLL:                          Particular Functions.
                                                              (line 379)
* HAVE_STRERROR_R:                       Particular Functions.
                                                              (line 388)
* HAVE_STRFTIME:                         Particular Functions.
                                                              (line 401)
* HAVE_STRINGIZE:                        C Compiler.          (line 305)
* HAVE_STRNLEN:                          Particular Functions.
                                                              (line 426)
* HAVE_STRTOLD:                          Particular Functions.
                                                              (line 420)
* HAVE_STRUCT_DIRENT_D_INO:              Particular Structures.
                                                              (line   9)
* HAVE_STRUCT_DIRENT_D_TYPE:             Particular Structures.
                                                              (line  21)
* HAVE_STRUCT_STAT_ST_BLKSIZE:           Obsolete Macros.     (line 521)
* HAVE_STRUCT_STAT_ST_BLOCKS:            Particular Structures.
                                                              (line  26)
* HAVE_STRUCT_STAT_ST_RDEV:              Obsolete Macros.     (line 530)
* HAVE_STRUCT_TM_TM_ZONE:                Particular Structures.
                                                              (line  43)
* HAVE_SYS_DIR_H:                        Particular Headers.  (line  25)
* HAVE_SYS_NDIR_H:                       Particular Headers.  (line  25)
* HAVE_SYS_WAIT_H:                       Particular Headers.  (line 204)
* HAVE_TM_ZONE:                          Particular Structures.
                                                              (line  43)
* HAVE_TYPE:                             Generic Types.       (line  28)
* HAVE_TYPEOF:                           C Compiler.          (line 345)
* HAVE_TZNAME:                           Particular Structures.
                                                              (line  43)
* HAVE_UINT16_T:                         Particular Types.    (line 138)
* HAVE_UINT32_T:                         Particular Types.    (line 141)
* HAVE_UINT64_T:                         Particular Types.    (line 144)
* HAVE_UINT8_T:                          Particular Types.    (line 132)
* HAVE_UINTMAX_T:                        Particular Types.    (line 147)
* HAVE_UINTPTR_T:                        Particular Types.    (line 152)
* HAVE_UNSIGNED_LONG_LONG_INT:           Particular Types.    (line 157)
* HAVE_UTIME_NULL:                       Particular Functions.
                                                              (line 433)
* HAVE_VFORK_H:                          Particular Functions.
                                                              (line 120)
* HAVE_VPRINTF:                          Particular Functions.
                                                              (line 443)
* HAVE_WAIT3:                            Obsolete Macros.     (line 216)
* HAVE_WORKING_FORK:                     Particular Functions.
                                                              (line 120)
* HAVE_WORKING_VFORK:                    Particular Functions.
                                                              (line 120)
* inline:                                C Compiler.          (line 286)
* int16_t:                               Particular Types.    (line  40)
* int32_t:                               Particular Types.    (line  43)
* int64_t:                               Particular Types.    (line  46)
* int8_t:                                Particular Types.    (line  21)
* INT_16_BITS:                           Obsolete Macros.     (line 275)
* intmax_t:                              Particular Types.    (line  49)
* intptr_t:                              Particular Types.    (line  54)
* LONG_64_BITS:                          Obsolete Macros.     (line 337)
* LSTAT_FOLLOWS_SLASHED_SYMLINK:         Particular Functions.
                                                              (line 228)
* MAJOR_IN_MKDEV:                        Particular Headers.  (line  68)
* MAJOR_IN_SYSMACROS:                    Particular Headers.  (line  68)
* malloc:                                Particular Functions.
                                                              (line 247)
* mbstate_t:                             Particular Types.    (line  88)
* mode_t:                                Particular Types.    (line  96)
* NDEBUG:                                Particular Headers.  (line  20)
* NDIR:                                  Obsolete Macros.     (line 158)
* NEED_MEMORY_H:                         Obsolete Macros.     (line 358)
* NEED_SETGID:                           Particular Functions.
                                                              (line 161)
* NLIST_NAME_UNION:                      Particular Functions.
                                                              (line 161)
* NO_MINUS_C_MINUS_O:                    C Compiler.          (line 102)
* off_t:                                 Particular Types.    (line 102)
* PACKAGE_BUGREPORT:                     Initializing configure.
                                                              (line  57)
* PACKAGE_NAME:                          Initializing configure.
                                                              (line  45)
* PACKAGE_STRING:                        Initializing configure.
                                                              (line  54)
* PACKAGE_TARNAME:                       Initializing configure.
                                                              (line  48)
* PACKAGE_URL:                           Initializing configure.
                                                              (line  61)
* PACKAGE_VERSION:                       Initializing configure.
                                                              (line  51)
* PARAMS:                                C Compiler.          (line 351)
* pid_t:                                 Particular Types.    (line 108)
* PROTOTYPES:                            C Compiler.          (line 351)
* realloc:                               Particular Functions.
                                                              (line 326)
* restrict:                              C Compiler.          (line 247)
* RETSIGTYPE:                            Obsolete Macros.     (line 662)
* SELECT_TYPE_ARG1:                      Particular Functions.
                                                              (line 337)
* SELECT_TYPE_ARG234:                    Particular Functions.
                                                              (line 337)
* SELECT_TYPE_ARG5:                      Particular Functions.
                                                              (line 337)
* SETPGRP_VOID:                          Particular Functions.
                                                              (line 348)
* SETVBUF_REVERSED:                      Obsolete Macros.     (line 208)
* size_t:                                Particular Types.    (line 114)
* SIZEOF_TYPE-OR-EXPR:                   Generic Compiler Characteristics.
                                                              (line   8)
* ssize_t:                               Particular Types.    (line 120)
* STAT_MACROS_BROKEN:                    Particular Headers.  (line  92)
* STDC_HEADERS:                          Particular Headers.  (line 135)
* STRERROR_R_CHAR_P:                     Particular Functions.
                                                              (line 388)
* SVR4:                                  Particular Functions.
                                                              (line 161)
* SYS_SIGLIST_DECLARED:                  Obsolete Macros.     (line 141)
* SYSDIR:                                Obsolete Macros.     (line 158)
* SYSNDIR:                               Obsolete Macros.     (line 158)
* TIME_WITH_SYS_TIME:                    Particular Headers.  (line 244)
* TM_IN_SYS_TIME:                        Particular Structures.
                                                              (line  35)
* typeof:                                C Compiler.          (line 345)
* uid_t:                                 Particular Types.    (line 126)
* uint16_t:                              Particular Types.    (line 138)
* uint32_t:                              Particular Types.    (line 141)
* uint64_t:                              Particular Types.    (line 144)
* uint8_t:                               Particular Types.    (line 132)
* uintmax_t:                             Particular Types.    (line 147)
* uintptr_t:                             Particular Types.    (line 152)
* UMAX:                                  Particular Functions.
                                                              (line 161)
* UMAX4_3:                               Particular Functions.
                                                              (line 161)
* USG:                                   Obsolete Macros.     (line 685)
* VARIABLE:                              Defining Symbols.    (line  32)
* vfork:                                 Particular Functions.
                                                              (line 120)
* volatile:                              C Compiler.          (line 265)
* WORDS_BIGENDIAN:                       C Compiler.          (line 184)
* X_DISPLAY_MISSING:                     System Services.     (line  30)
* YYTEXT_POINTER:                        Particular Programs. (line 114)

==============================================================================
File: autoconf.info,  Node: |Cache_Variable_Index|,  Next: |Autoconf_Macro_Index|,  Prev: |Preprocessor_Symbol_Index|,  Up: |Indices|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Cache_Variable_Index*

B.4 Cache Variable Index
------------------------

This is an alphabetical list of documented cache variables used by
macros defined in Autoconf.  Autoconf macros may use additional cache
variables internally.


MENU

* ac_cv_alignof_TYPE-OR-EXPR:            Generic Compiler Characteristics.
                                                              (line  30)
* ac_cv_c_const:                         C Compiler.          (line 217)
* ac_cv_c_int16_t:                       Particular Types.    (line  40)
* ac_cv_c_int32_t:                       Particular Types.    (line  43)
* ac_cv_c_int64_t:                       Particular Types.    (line  46)
* ac_cv_c_int8_t:                        Particular Types.    (line  21)
* ac_cv_c_restrict:                      C Compiler.          (line 247)
* ac_cv_c_uint16_t:                      Particular Types.    (line 138)
* ac_cv_c_uint32_t:                      Particular Types.    (line 141)
* ac_cv_c_uint64_t:                      Particular Types.    (line 144)
* ac_cv_c_uint8_t:                       Particular Types.    (line 132)
* ac_cv_f77_compiler_gnu:                Fortran Compiler.    (line  19)
* ac_cv_f77_dummy_main:                  Fortran Compiler.    (line 130)
* ac_cv_f77_implicit_none:               Fortran Compiler.    (line 427)
* ac_cv_f77_libs:                        Fortran Compiler.    (line  92)
* ac_cv_f77_main:                        Fortran Compiler.    (line 176)
* ac_cv_f77_mangling:                    Fortran Compiler.    (line 202)
* ac_cv_fc_check_bounds:                 Fortran Compiler.    (line 413)
* ac_cv_fc_compiler_gnu:                 Fortran Compiler.    (line  44)
* ac_cv_fc_dummy_main:                   Fortran Compiler.    (line 130)
* ac_cv_fc_fixedform:                    Fortran Compiler.    (line 375)
* ac_cv_fc_freeform:                     Fortran Compiler.    (line 351)
* ac_cv_fc_implicit_none:                Fortran Compiler.    (line 427)
* ac_cv_fc_libs:                         Fortran Compiler.    (line  92)
* ac_cv_fc_line_length:                  Fortran Compiler.    (line 396)
* ac_cv_fc_main:                         Fortran Compiler.    (line 176)
* ac_cv_fc_mangling:                     Fortran Compiler.    (line 202)
* ac_cv_fc_module_ext:                   Fortran Compiler.    (line 438)
* ac_cv_fc_module_flag:                  Fortran Compiler.    (line 465)
* ac_cv_fc_module_output_flag:           Fortran Compiler.    (line 501)
* ac_cv_fc_pp_define:                    Fortran Compiler.    (line 336)
* ac_cv_fc_pp_srcext_EXT:                Fortran Compiler.    (line 279)
* ac_cv_fc_srcext_EXT:                   Fortran Compiler.    (line 279)
* ac_cv_file_FILE:                       Files.               (line  13)
* ac_cv_func_chown_works:                Particular Functions.
                                                              (line  63)
* ac_cv_func_closedir_void:              Particular Functions.
                                                              (line  69)
* ac_cv_func_fnmatch_gnu:                Particular Functions.
                                                              (line 109)
* ac_cv_func_fnmatch_works:              Particular Functions.
                                                              (line  94)
* ac_cv_func_FUNCTION:                   Generic Functions.   (line  15)
* ac_cv_func_getgroups_works:            Particular Functions.
                                                              (line 155)
* ac_cv_func_getpgrp_void:               Particular Functions.
                                                              (line 205)
* ac_cv_func_lstat_dereferences_slashed_symlink: Particular Functions.
                                                              (line 228)
* ac_cv_func_lstat_empty_string_bug:     Particular Functions.
                                                              (line 363)
* ac_cv_func_malloc_0_nonnull:           Particular Functions.
                                                              (line 247)
* ac_cv_func_mbrtowc:                    Particular Functions.
                                                              (line 279)
* ac_cv_func_memcmp_working:             Particular Functions.
                                                              (line 286)
* ac_cv_func_mmap_fixed_mapped:          Particular Functions.
                                                              (line 311)
* ac_cv_func_obstack:                    Particular Functions.
                                                              (line 319)
* ac_cv_func_pow:                        Particular Functions.
                                                              (line 408)
* ac_cv_func_realloc_0_nonnull:          Particular Functions.
                                                              (line 326)
* ac_cv_func_setpgrp_void:               Particular Functions.
                                                              (line 348)
* ac_cv_func_stat_empty_string_bug:      Particular Functions.
                                                              (line 363)
* ac_cv_func_strcoll_works:              Particular Functions.
                                                              (line 379)
* ac_cv_func_strerror_r_char_p:          Particular Functions.
                                                              (line 388)
* ac_cv_func_strnlen_working:            Particular Functions.
                                                              (line 426)
* ac_cv_func_strtod:                     Particular Functions.
                                                              (line 408)
* ac_cv_func_strtold:                    Particular Functions.
                                                              (line 420)
* ac_cv_func_utime_null:                 Particular Functions.
                                                              (line 433)
* ac_cv_func_working_mktime:             Particular Functions.
                                                              (line 299)
* ac_cv_have_decl_SYMBOL:                Generic Declarations.
                                                              (line  11)
* ac_cv_header_HEADER-FILE:              Generic Headers.     (line  13)
* ac_cv_header_stdbool_h:                Particular Headers.  (line  10)
* ac_cv_header_stdc:                     Particular Headers.  (line 135)
* ac_cv_header_sys_wait_h:               Particular Headers.  (line 204)
* ac_cv_header_time:                     Particular Headers.  (line 244)
* ac_cv_lib_error_at_line:               Particular Functions.
                                                              (line  84)
* ac_cv_lib_LIBRARY_FUNCTION:            Libraries.           (line  11)
* ac_cv_member_AGGREGATE_MEMBER:         Generic Structures.  (line  11)
* ac_cv_member_struct_stat_st_blocks:    Particular Structures.
                                                              (line  26)
* ac_cv_path_install:                    Particular Programs. (line  43)
* ac_cv_path_mkdir:                      Particular Programs. (line  80)
* ac_cv_path_SED:                        Particular Programs. (line 191)
* ac_cv_path_VARIABLE:                   Generic Programs.    (line 108)
* ac_cv_prog_AWK:                        Particular Programs. (line  10)
* ac_cv_prog_c_openmp:                   Generic Compiler Characteristics.
                                                              (line  64)
* ac_cv_prog_cc_c89:                     C Compiler.          (line  61)
* ac_cv_prog_cc_c99:                     C Compiler.          (line 161)
* ac_cv_prog_cc_COMPILER_c_o:            C Compiler.          (line 102)
* ac_cv_prog_cc_stdc:                    C Compiler.          (line 137)
* ac_cv_prog_cxx_openmp:                 Generic Compiler Characteristics.
                                                              (line  64)
* ac_cv_prog_EGREP:                      Particular Programs. (line  29)
* ac_cv_prog_f77_c_o:                    Fortran Compiler.    (line  76)
* ac_cv_prog_f77_g:                      Fortran Compiler.    (line  19)
* ac_cv_prog_f77_openmp:                 Generic Compiler Characteristics.
                                                              (line  64)
* ac_cv_prog_f77_v:                      Fortran Compiler.    (line  92)
* ac_cv_prog_fc_c_o:                     Fortran Compiler.    (line  76)
* ac_cv_prog_fc_g:                       Fortran Compiler.    (line  44)
* ac_cv_prog_fc_openmp:                  Generic Compiler Characteristics.
                                                              (line  64)
* ac_cv_prog_fc_v:                       Fortran Compiler.    (line  92)
* ac_cv_prog_FGREP:                      Particular Programs. (line  36)
* ac_cv_prog_GREP:                       Particular Programs. (line  20)
* ac_cv_prog_LEX:                        Particular Programs. (line 114)
* ac_cv_prog_VARIABLE:                   Generic Programs.    (line  24)
* ac_cv_prog_YACC:                       Particular Programs. (line 200)
* ac_cv_search_FUNCTION:                 Libraries.           (line  52)
* ac_cv_search_getmntent:                Particular Functions.
                                                              (line 195)
* ac_cv_sizeof_TYPE-OR-EXPR:             Generic Compiler Characteristics.
                                                              (line   8)
* ac_cv_sys_posix_termios:               System Services.     (line  75)
* ac_cv_type_getgroups:                  Particular Types.    (line  14)
* ac_cv_type_long_double:                Particular Types.    (line  59)
* ac_cv_type_long_double_wider:          Particular Types.    (line  70)
* ac_cv_type_long_long_int:              Particular Types.    (line  78)
* ac_cv_type_mbstate_t:                  Particular Types.    (line  88)
* ac_cv_type_mode_t:                     Particular Types.    (line  96)
* ac_cv_type_off_t:                      Particular Types.    (line 102)
* ac_cv_type_pid_t:                      Particular Types.    (line 108)
* ac_cv_type_size_t:                     Particular Types.    (line 114)
* ac_cv_type_ssize_t:                    Particular Types.    (line 120)
* ac_cv_type_TYPE:                       Generic Types.       (line  11)
* ac_cv_type_uid_t:                      Particular Types.    (line 126)
* ac_cv_type_unsigned_long_long_int:     Particular Types.    (line 157)

==============================================================================
File: autoconf.info,  Node: |Autoconf_Macro_Index|,  Next: |M4_Macro_Index|,  Prev: |Cache_Variable_Index|,  Up: |Indices|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Autoconf_Macro_Index*

B.5 Autoconf Macro Index
------------------------

This is an alphabetical list of the Autoconf macros.


MENU

* AC_ACT_IFELSE:                         AC_ACT_IFELSE vs AC_TRY_ACT.
                                                              (line   6)
* AC_AIX:                                Obsolete Macros.     (line  20)
* AC_ALLOCA:                             Obsolete Macros.     (line  24)
* AC_ARG_ARRAY:                          Obsolete Macros.     (line  27)
* AC_ARG_ENABLE:                         Package Options.     (line  35)
* AC_ARG_PROGRAM:                        Transforming Names.  (line  11)
* AC_ARG_VAR:                            Setting Output Variables.
                                                              (line  79)
* AC_ARG_WITH:                           External Software.   (line  36)
* AC_AUTOCONF_VERSION:                   Versioning.          (line  21)
* AC_BEFORE:                             Suggested Ordering.  (line  28)
* AC_C_BACKSLASH_A:                      C Compiler.          (line 176)
* AC_C_BIGENDIAN:                        C Compiler.          (line 184)
* AC_C_CHAR_UNSIGNED:                    C Compiler.          (line 291)
* AC_C_CONST:                            C Compiler.          (line 217)
* AC_C_CROSS:                            Obsolete Macros.     (line  30)
* AC_C_FLEXIBLE_ARRAY_MEMBER:            C Compiler.          (line 315)
* AC_C_INLINE:                           C Compiler.          (line 286)
* AC_C_LONG_DOUBLE:                      Obsolete Macros.     (line  33)
* AC_C_PROTOTYPES:                       C Compiler.          (line 351)
* AC_C_RESTRICT:                         C Compiler.          (line 247)
* AC_C_STRINGIZE:                        C Compiler.          (line 305)
* AC_C_TYPEOF:                           C Compiler.          (line 345)
* AC_C_VARARRAYS:                        C Compiler.          (line 339)
* AC_C_VOLATILE:                         C Compiler.          (line 265)
* AC_CACHE_CHECK:                        Caching Results.     (line  30)
* AC_CACHE_LOAD:                         Cache Checkpointing. (line  13)
* AC_CACHE_SAVE:                         Cache Checkpointing. (line  17)
* AC_CACHE_VAL:                          Caching Results.     (line  16)
* AC_CANONICAL_BUILD:                    Canonicalizing.      (line  26)
* AC_CANONICAL_HOST:                     Canonicalizing.      (line  34)
* AC_CANONICAL_SYSTEM:                   Obsolete Macros.     (line  41)
* AC_CANONICAL_TARGET:                   Canonicalizing.      (line  41)
* AC_CHAR_UNSIGNED:                      Obsolete Macros.     (line  51)
* AC_CHECK_ALIGNOF:                      Generic Compiler Characteristics.
                                                              (line  30)
* AC_CHECK_DECL:                         Generic Declarations.
                                                              (line  11)
* AC_CHECK_DECLS:                        Generic Declarations.
                                                              (line  34)
* AC_CHECK_DECLS_ONCE:                   Generic Declarations.
                                                              (line  79)
* AC_CHECK_FILE:                         Files.               (line  13)
* AC_CHECK_FILES:                        Files.               (line  21)
* AC_CHECK_FUNC:                         Generic Functions.   (line  15)
* AC_CHECK_FUNCS:                        Generic Functions.   (line  27)
* AC_CHECK_FUNCS_ONCE:                   Generic Functions.   (line  38)
* AC_CHECK_HEADER:                       Generic Headers.     (line  13)
* AC_CHECK_HEADER_STDBOOL:               Particular Headers.  (line  10)
* AC_CHECK_HEADERS:                      Generic Headers.     (line  46)
* AC_CHECK_HEADERS_ONCE:                 Generic Headers.     (line  87)
* AC_CHECK_LIB:                          Libraries.           (line  11)
* AC_CHECK_MEMBER:                       Generic Structures.  (line  11)
* AC_CHECK_MEMBERS:                      Generic Structures.  (line  29)
* AC_CHECK_PROG:                         Generic Programs.    (line  24)
* AC_CHECK_PROGS:                        Generic Programs.    (line  36)
* AC_CHECK_SIZEOF:                       Generic Compiler Characteristics.
                                                              (line   8)
* AC_CHECK_TARGET_TOOL:                  Generic Programs.    (line  48)
* AC_CHECK_TARGET_TOOLS:                 Generic Programs.    (line  79)
* AC_CHECK_TOOL:                         Generic Programs.    (line  64)
* AC_CHECK_TOOLS:                        Generic Programs.    (line  92)
* AC_CHECK_TYPE <1>:                     Obsolete Macros.     (line  54)
* AC_CHECK_TYPE:                         Generic Types.       (line  11)
* AC_CHECK_TYPES:                        Generic Types.       (line  28)
* AC_CHECKING:                           Obsolete Macros.     (line 101)
* AC_COMPILE_CHECK:                      Obsolete Macros.     (line 109)
* AC_COMPILE_IFELSE:                     Running the Compiler.
                                                              (line  13)
* AC_COMPUTE_INT:                        Generic Compiler Characteristics.
                                                              (line  42)
* AC_CONFIG_AUX_DIR:                     Input.               (line  20)
* AC_CONFIG_COMMANDS:                    Configuration Commands.
                                                              (line  13)
* AC_CONFIG_COMMANDS_POST:               Configuration Commands.
                                                              (line  41)
* AC_CONFIG_COMMANDS_PRE:                Configuration Commands.
                                                              (line  35)
* AC_CONFIG_FILES:                       Configuration Files. (line   9)
* AC_CONFIG_HEADERS:                     Configuration Headers.
                                                              (line  33)
* AC_CONFIG_ITEMS:                       Configuration Actions.
                                                              (line  12)
* AC_CONFIG_LIBOBJ_DIR:                  Generic Functions.   (line  97)
* AC_CONFIG_LINKS:                       Configuration Links. (line  12)
* AC_CONFIG_MACRO_DIR:                   Input.               (line  48)
* AC_CONFIG_SRCDIR:                      Input.               (line   7)
* AC_CONFIG_SUBDIRS:                     Subdirectories.      (line  12)
* AC_CONFIG_TESTDIR:                     Making testsuite Scripts.
                                                              (line  26)
* AC_CONST:                              Obsolete Macros.     (line 117)
* AC_COPYRIGHT:                          Notices.             (line  10)
* AC_CROSS_CHECK:                        Obsolete Macros.     (line 120)
* AC_CYGWIN:                             Obsolete Macros.     (line 124)
* AC_DATAROOTDIR_CHECKED:                Changed Directory Variables.
                                                              (line  58)
* AC_DECL_SYS_SIGLIST:                   Obsolete Macros.     (line 141)
* AC_DECL_YYTEXT:                        Obsolete Macros.     (line 154)
* AC_DEFINE:                             Defining Symbols.    (line  32)
* AC_DEFINE_UNQUOTED:                    Defining Symbols.    (line  74)
* AC_DEFUN:                              Macro Definitions.   (line   7)
* AC_DEFUN_ONCE:                         One-Shot Macros.     (line  14)
* AC_DIAGNOSE:                           Reporting Messages.  (line  18)
* AC_DIR_HEADER:                         Obsolete Macros.     (line 158)
* AC_DISABLE_OPTION_CHECKING:            Option Checking.     (line  28)
* AC_DYNIX_SEQ:                          Obsolete Macros.     (line 170)
* AC_EGREP_CPP:                          Running the Preprocessor.
                                                              (line  74)
* AC_EGREP_HEADER:                       Running the Preprocessor.
                                                              (line  67)
* AC_EMXOS2:                             Obsolete Macros.     (line 183)
* AC_ENABLE:                             Obsolete Macros.     (line 189)
* AC_ERLANG_CHECK_LIB:                   Erlang Libraries.    (line  36)
* AC_ERLANG_NEED_ERL:                    Erlang Compiler and Interpreter.
                                                              (line  41)
* AC_ERLANG_NEED_ERLC:                   Erlang Compiler and Interpreter.
                                                              (line  24)
* AC_ERLANG_PATH_ERL:                    Erlang Compiler and Interpreter.
                                                              (line  29)
* AC_ERLANG_PATH_ERLC:                   Erlang Compiler and Interpreter.
                                                              (line  10)
* AC_ERLANG_SUBST_ERTS_VER:              Erlang Libraries.    (line  12)
* AC_ERLANG_SUBST_INSTALL_LIB_DIR <1>:   Erlang Libraries.    (line  86)
* AC_ERLANG_SUBST_INSTALL_LIB_DIR:       Installation Directory Variables.
                                                              (line 201)
* AC_ERLANG_SUBST_INSTALL_LIB_SUBDIR <1>: Erlang Libraries.   (line  93)
* AC_ERLANG_SUBST_INSTALL_LIB_SUBDIR:    Installation Directory Variables.
                                                              (line 206)
* AC_ERLANG_SUBST_LIB_DIR:               Erlang Libraries.    (line  28)
* AC_ERLANG_SUBST_ROOT_DIR:              Erlang Libraries.    (line  22)
* AC_ERROR:                              Obsolete Macros.     (line 193)
* AC_EXEEXT:                             Obsolete Macros.     (line 178)
* AC_F77_DUMMY_MAIN:                     Fortran Compiler.    (line 130)
* AC_F77_FUNC:                           Fortran Compiler.    (line 266)
* AC_F77_IMPLICIT_NONE:                  Fortran Compiler.    (line 427)
* AC_F77_LIBRARY_LDFLAGS:                Fortran Compiler.    (line  92)
* AC_F77_MAIN:                           Fortran Compiler.    (line 176)
* AC_F77_WRAPPERS:                       Fortran Compiler.    (line 202)
* AC_FATAL:                              Reporting Messages.  (line  34)
* AC_FC_CHECK_BOUNDS:                    Fortran Compiler.    (line 413)
* AC_FC_DUMMY_MAIN:                      Fortran Compiler.    (line 130)
* AC_FC_FIXEDFORM:                       Fortran Compiler.    (line 375)
* AC_FC_FREEFORM:                        Fortran Compiler.    (line 351)
* AC_FC_FUNC:                            Fortran Compiler.    (line 266)
* AC_FC_IMPLICIT_NONE:                   Fortran Compiler.    (line 427)
* AC_FC_LIBRARY_LDFLAGS:                 Fortran Compiler.    (line  92)
* AC_FC_LINE_LENGTH:                     Fortran Compiler.    (line 396)
* AC_FC_MAIN:                            Fortran Compiler.    (line 176)
* AC_FC_MODULE_EXTENSION:                Fortran Compiler.    (line 438)
* AC_FC_MODULE_FLAG:                     Fortran Compiler.    (line 465)
* AC_FC_MODULE_OUTPUT_FLAG:              Fortran Compiler.    (line 501)
* AC_FC_PP_DEFINE:                       Fortran Compiler.    (line 336)
* AC_FC_PP_SRCEXT:                       Fortran Compiler.    (line 279)
* AC_FC_SRCEXT:                          Fortran Compiler.    (line 279)
* AC_FC_WRAPPERS:                        Fortran Compiler.    (line 202)
* AC_FIND_X:                             Obsolete Macros.     (line 196)
* AC_FIND_XTRA:                          Obsolete Macros.     (line 199)
* AC_FOREACH:                            Obsolete Macros.     (line 202)
* AC_FUNC_ALLOCA:                        Particular Functions.
                                                              (line  10)
* AC_FUNC_CHECK:                         Obsolete Macros.     (line 205)
* AC_FUNC_CHOWN:                         Particular Functions.
                                                              (line  63)
* AC_FUNC_CLOSEDIR_VOID:                 Particular Functions.
                                                              (line  69)
* AC_FUNC_ERROR_AT_LINE:                 Particular Functions.
                                                              (line  84)
* AC_FUNC_FNMATCH:                       Particular Functions.
                                                              (line  94)
* AC_FUNC_FNMATCH_GNU:                   Particular Functions.
                                                              (line 109)
* AC_FUNC_FORK:                          Particular Functions.
                                                              (line 120)
* AC_FUNC_FSEEKO:                        Particular Functions.
                                                              (line 147)
* AC_FUNC_GETGROUPS:                     Particular Functions.
                                                              (line 155)
* AC_FUNC_GETLOADAVG:                    Particular Functions.
                                                              (line 161)
* AC_FUNC_GETMNTENT:                     Particular Functions.
                                                              (line 195)
* AC_FUNC_GETPGRP:                       Particular Functions.
                                                              (line 205)
* AC_FUNC_LSTAT:                         Particular Functions.
                                                              (line 363)
* AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK: Particular Functions.
                                                              (line 228)
* AC_FUNC_MALLOC:                        Particular Functions.
                                                              (line 247)
* AC_FUNC_MBRTOWC:                       Particular Functions.
                                                              (line 279)
* AC_FUNC_MEMCMP:                        Particular Functions.
                                                              (line 286)
* AC_FUNC_MKTIME:                        Particular Functions.
                                                              (line 299)
* AC_FUNC_MMAP:                          Particular Functions.
                                                              (line 311)
* AC_FUNC_OBSTACK:                       Particular Functions.
                                                              (line 319)
* AC_FUNC_REALLOC:                       Particular Functions.
                                                              (line 326)
* AC_FUNC_SELECT_ARGTYPES:               Particular Functions.
                                                              (line 337)
* AC_FUNC_SETPGRP:                       Particular Functions.
                                                              (line 348)
* AC_FUNC_SETVBUF_REVERSED:              Obsolete Macros.     (line 208)
* AC_FUNC_STAT:                          Particular Functions.
                                                              (line 363)
* AC_FUNC_STRCOLL:                       Particular Functions.
                                                              (line 379)
* AC_FUNC_STRERROR_R:                    Particular Functions.
                                                              (line 388)
* AC_FUNC_STRFTIME:                      Particular Functions.
                                                              (line 401)
* AC_FUNC_STRNLEN:                       Particular Functions.
                                                              (line 426)
* AC_FUNC_STRTOD:                        Particular Functions.
                                                              (line 408)
* AC_FUNC_STRTOLD:                       Particular Functions.
                                                              (line 420)
* AC_FUNC_UTIME_NULL:                    Particular Functions.
                                                              (line 433)
* AC_FUNC_VPRINTF:                       Particular Functions.
                                                              (line 443)
* AC_FUNC_WAIT3:                         Obsolete Macros.     (line 216)
* AC_GCC_TRADITIONAL:                    Obsolete Macros.     (line 224)
* AC_GETGROUPS_T:                        Obsolete Macros.     (line 228)
* AC_GETLOADAVG:                         Obsolete Macros.     (line 231)
* AC_GNU_SOURCE:                         Obsolete Macros.     (line 234)
* AC_HAVE_FUNCS:                         Obsolete Macros.     (line 238)
* AC_HAVE_HEADERS:                       Obsolete Macros.     (line 241)
* AC_HAVE_LIBRARY:                       Obsolete Macros.     (line 245)
* AC_HAVE_POUNDBANG:                     Obsolete Macros.     (line 252)
* AC_HEADER_ASSERT:                      Particular Headers.  (line  20)
* AC_HEADER_CHECK:                       Obsolete Macros.     (line 255)
* AC_HEADER_DIRENT:                      Particular Headers.  (line  25)
* AC_HEADER_EGREP:                       Obsolete Macros.     (line 258)
* AC_HEADER_MAJOR:                       Particular Headers.  (line  68)
* AC_HEADER_RESOLV:                      Particular Headers.  (line  73)
* AC_HEADER_STAT:                        Particular Headers.  (line  92)
* AC_HEADER_STDBOOL:                     Particular Headers.  (line 101)
* AC_HEADER_STDC:                        Particular Headers.  (line 135)
* AC_HEADER_SYS_WAIT:                    Particular Headers.  (line 204)
* AC_HEADER_TIME:                        Particular Headers.  (line 244)
* AC_HEADER_TIOCGWINSZ:                  Particular Headers.  (line 270)
* AC_HELP_STRING:                        Obsolete Macros.     (line 261)
* AC_INCLUDES_DEFAULT:                   Default Includes.    (line  29)
* AC_INIT <1>:                           Obsolete Macros.     (line 264)
* AC_INIT:                               Initializing configure.
                                                              (line  14)
* AC_INLINE:                             Obsolete Macros.     (line 272)
* AC_INT_16_BITS:                        Obsolete Macros.     (line 275)
* AC_IRIX_SUN:                           Obsolete Macros.     (line 279)
* AC_ISC_POSIX:                          Obsolete Macros.     (line 295)
* AC_LANG:                               Language Choice.     (line  14)
* AC_LANG_ASSERT:                        Language Choice.     (line  79)
* AC_LANG_C:                             Obsolete Macros.     (line 302)
* AC_LANG_CALL:                          Generating Sources.  (line 142)
* AC_LANG_CONFTEST:                      Generating Sources.  (line  12)
* AC_LANG_CPLUSPLUS:                     Obsolete Macros.     (line 305)
* AC_LANG_DEFINES_PROVIDED:              Generating Sources.  (line  31)
* AC_LANG_FORTRAN77:                     Obsolete Macros.     (line 308)
* AC_LANG_FUNC_LINK_TRY:                 Generating Sources.  (line 154)
* AC_LANG_POP:                           Language Choice.     (line  66)
* AC_LANG_PROGRAM:                       Generating Sources.  (line  78)
* AC_LANG_PUSH:                          Language Choice.     (line  61)
* AC_LANG_RESTORE:                       Obsolete Macros.     (line 311)
* AC_LANG_SAVE:                          Obsolete Macros.     (line 317)
* AC_LANG_SOURCE:                        Generating Sources.  (line  40)
* AC_LANG_WERROR:                        Generic Compiler Characteristics.
                                                              (line  54)
* AC_LIBOBJ:                             Generic Functions.   (line  56)
* AC_LIBSOURCE:                          Generic Functions.   (line  65)
* AC_LIBSOURCES:                         Generic Functions.   (line  89)
* AC_LINK_FILES:                         Obsolete Macros.     (line 322)
* AC_LINK_IFELSE:                        Running the Linker.  (line  24)
* AC_LN_S:                               Obsolete Macros.     (line 334)
* AC_LONG_64_BITS:                       Obsolete Macros.     (line 337)
* AC_LONG_DOUBLE:                        Obsolete Macros.     (line 342)
* AC_LONG_FILE_NAMES:                    Obsolete Macros.     (line 350)
* AC_MAJOR_HEADER:                       Obsolete Macros.     (line 355)
* AC_MEMORY_H:                           Obsolete Macros.     (line 358)
* AC_MINGW32:                            Obsolete Macros.     (line 365)
* AC_MINIX:                              Obsolete Macros.     (line 371)
* AC_MINUS_C_MINUS_O:                    Obsolete Macros.     (line 375)
* AC_MMAP:                               Obsolete Macros.     (line 378)
* AC_MODE_T:                             Obsolete Macros.     (line 381)
* AC_MSG_CHECKING:                       Printing Messages.   (line  24)
* AC_MSG_ERROR:                          Printing Messages.   (line  56)
* AC_MSG_FAILURE:                        Printing Messages.   (line  66)
* AC_MSG_NOTICE:                         Printing Messages.   (line  46)
* AC_MSG_RESULT:                         Printing Messages.   (line  35)
* AC_MSG_WARN:                           Printing Messages.   (line  72)
* AC_OBJEXT:                             Obsolete Macros.     (line 384)
* AC_OBSOLETE:                           Obsolete Macros.     (line 390)
* AC_OFF_T:                              Obsolete Macros.     (line 405)
* AC_OPENMP:                             Generic Compiler Characteristics.
                                                              (line  64)
* AC_OUTPUT <1>:                         Obsolete Macros.     (line 408)
* AC_OUTPUT:                             Output.              (line  13)
* AC_OUTPUT_COMMANDS:                    Obsolete Macros.     (line 420)
* AC_PACKAGE_BUGREPORT:                  Initializing configure.
                                                              (line  57)
* AC_PACKAGE_NAME:                       Initializing configure.
                                                              (line  45)
* AC_PACKAGE_STRING:                     Initializing configure.
                                                              (line  54)
* AC_PACKAGE_TARNAME:                    Initializing configure.
                                                              (line  48)
* AC_PACKAGE_URL:                        Initializing configure.
                                                              (line  61)
* AC_PACKAGE_VERSION:                    Initializing configure.
                                                              (line  51)
* AC_PATH_PROG:                          Generic Programs.    (line 108)
* AC_PATH_PROGS:                         Generic Programs.    (line 115)
* AC_PATH_PROGS_FEATURE_CHECK:           Generic Programs.    (line 123)
* AC_PATH_TARGET_TOOL:                   Generic Programs.    (line 159)
* AC_PATH_TOOL:                          Generic Programs.    (line 164)
* AC_PATH_X:                             System Services.     (line  10)
* AC_PATH_XTRA:                          System Services.     (line  30)
* AC_PID_T:                              Obsolete Macros.     (line 450)
* AC_PREFIX:                             Obsolete Macros.     (line 453)
* AC_PREFIX_DEFAULT:                     Default Prefix.      (line  16)
* AC_PREFIX_PROGRAM:                     Default Prefix.      (line  25)
* AC_PREPROC_IFELSE:                     Running the Preprocessor.
                                                              (line  20)
* AC_PREREQ:                             Versioning.          (line  11)
* AC_PRESERVE_HELP_ORDER:                Help Formatting.     (line  20)
* AC_PROG_AWK:                           Particular Programs. (line  10)
* AC_PROG_CC:                            C Compiler.          (line  61)
* AC_PROG_CC_C89:                        C Compiler.          (line 147)
* AC_PROG_CC_C99:                        C Compiler.          (line 161)
* AC_PROG_CC_C_O:                        C Compiler.          (line 102)
* AC_PROG_CC_STDC:                       C Compiler.          (line 137)
* AC_PROG_CPP:                           C Compiler.          (line 113)
* AC_PROG_CPP_WERROR:                    C Compiler.          (line 126)
* AC_PROG_CXX:                           C++ Compiler.        (line   7)
* AC_PROG_CXX_C_O:                       C++ Compiler.        (line  48)
* AC_PROG_CXXCPP:                        C++ Compiler.        (line  35)
* AC_PROG_EGREP:                         Particular Programs. (line  29)
* AC_PROG_F77:                           Fortran Compiler.    (line  19)
* AC_PROG_F77_C_O:                       Fortran Compiler.    (line  76)
* AC_PROG_FC:                            Fortran Compiler.    (line  44)
* AC_PROG_FC_C_O:                        Fortran Compiler.    (line  76)
* AC_PROG_FGREP:                         Particular Programs. (line  36)
* AC_PROG_GCC_TRADITIONAL:               C Compiler.          (line 361)
* AC_PROG_GREP:                          Particular Programs. (line  20)
* AC_PROG_INSTALL:                       Particular Programs. (line  43)
* AC_PROG_LEX:                           Particular Programs. (line 114)
* AC_PROG_LN_S:                          Particular Programs. (line 168)
* AC_PROG_MAKE_SET:                      Output.              (line  45)
* AC_PROG_MKDIR_P:                       Particular Programs. (line  80)
* AC_PROG_OBJC:                          Objective C Compiler.
                                                              (line   7)
* AC_PROG_OBJCPP:                        Objective C Compiler.
                                                              (line  26)
* AC_PROG_OBJCXX:                        Objective C++ Compiler.
                                                              (line   7)
* AC_PROG_OBJCXXCPP:                     Objective C++ Compiler.
                                                              (line  27)
* AC_PROG_RANLIB:                        Particular Programs. (line 187)
* AC_PROG_SED:                           Particular Programs. (line 191)
* AC_PROG_YACC:                          Particular Programs. (line 200)
* AC_PROGRAM_CHECK:                      Obsolete Macros.     (line 462)
* AC_PROGRAM_EGREP:                      Obsolete Macros.     (line 465)
* AC_PROGRAM_PATH:                       Obsolete Macros.     (line 468)
* AC_PROGRAMS_CHECK:                     Obsolete Macros.     (line 456)
* AC_PROGRAMS_PATH:                      Obsolete Macros.     (line 459)
* AC_REMOTE_TAPE:                        Obsolete Macros.     (line 471)
* AC_REPLACE_FNMATCH:                    Particular Functions.
                                                              (line 452)
* AC_REPLACE_FUNCS:                      Generic Functions.   (line 117)
* AC_REQUIRE:                            Prerequisite Macros. (line  17)
* AC_REQUIRE_AUX_FILE:                   Input.               (line  37)
* AC_REQUIRE_CPP:                        Language Choice.     (line  94)
* AC_RESTARTABLE_SYSCALLS:               Obsolete Macros.     (line 474)
* AC_RETSIGTYPE:                         Obsolete Macros.     (line 482)
* AC_REVISION:                           Notices.             (line  18)
* AC_RSH:                                Obsolete Macros.     (line 486)
* AC_RUN_IFELSE:                         Runtime.             (line  20)
* AC_SCO_INTL:                           Obsolete Macros.     (line 489)
* AC_SEARCH_LIBS:                        Libraries.           (line  52)
* AC_SET_MAKE:                           Obsolete Macros.     (line 503)
* AC_SETVBUF_REVERSED:                   Obsolete Macros.     (line 498)
* AC_SIZE_T:                             Obsolete Macros.     (line 509)
* AC_SIZEOF_TYPE:                        Obsolete Macros.     (line 506)
* AC_ST_BLKSIZE:                         Obsolete Macros.     (line 539)
* AC_ST_BLOCKS:                          Obsolete Macros.     (line 542)
* AC_ST_RDEV:                            Obsolete Macros.     (line 545)
* AC_STAT_MACROS_BROKEN:                 Obsolete Macros.     (line 512)
* AC_STDC_HEADERS:                       Obsolete Macros.     (line 515)
* AC_STRCOLL:                            Obsolete Macros.     (line 518)
* AC_STRUCT_DIRENT_D_INO:                Particular Structures.
                                                              (line   9)
* AC_STRUCT_DIRENT_D_TYPE:               Particular Structures.
                                                              (line  21)
* AC_STRUCT_ST_BLKSIZE:                  Obsolete Macros.     (line 521)
* AC_STRUCT_ST_BLOCKS:                   Particular Structures.
                                                              (line  26)
* AC_STRUCT_ST_RDEV:                     Obsolete Macros.     (line 530)
* AC_STRUCT_TIMEZONE:                    Particular Structures.
                                                              (line  43)
* AC_STRUCT_TM:                          Particular Structures.
                                                              (line  35)
* AC_SUBST:                              Setting Output Variables.
                                                              (line  13)
* AC_SUBST_FILE:                         Setting Output Variables.
                                                              (line  38)
* AC_SYS_INTERPRETER:                    System Services.     (line  42)
* AC_SYS_LARGEFILE:                      System Services.     (line  49)
* AC_SYS_LONG_FILE_NAMES:                System Services.     (line  71)
* AC_SYS_POSIX_TERMIOS:                  System Services.     (line  75)
* AC_SYS_RESTARTABLE_SYSCALLS:           Obsolete Macros.     (line 548)
* AC_SYS_SIGLIST_DECLARED:               Obsolete Macros.     (line 563)
* AC_TEST_CPP:                           Obsolete Macros.     (line 568)
* AC_TEST_PROGRAM:                       Obsolete Macros.     (line 572)
* AC_TIME_WITH_SYS_TIME:                 Obsolete Macros.     (line 579)
* AC_TIMEZONE:                           Obsolete Macros.     (line 576)
* AC_TRY_ACT:                            AC_ACT_IFELSE vs AC_TRY_ACT.
                                                              (line   6)
* AC_TRY_COMPILE:                        Obsolete Macros.     (line 583)
* AC_TRY_CPP:                            Obsolete Macros.     (line 602)
* AC_TRY_LINK:                           Obsolete Macros.     (line 615)
* AC_TRY_LINK_FUNC:                      Obsolete Macros.     (line 644)
* AC_TRY_RUN:                            Obsolete Macros.     (line 651)
* AC_TYPE_GETGROUPS:                     Particular Types.    (line  14)
* AC_TYPE_INT16_T:                       Particular Types.    (line  40)
* AC_TYPE_INT32_T:                       Particular Types.    (line  43)
* AC_TYPE_INT64_T:                       Particular Types.    (line  46)
* AC_TYPE_INT8_T:                        Particular Types.    (line  21)
* AC_TYPE_INTMAX_T:                      Particular Types.    (line  49)
* AC_TYPE_INTPTR_T:                      Particular Types.    (line  54)
* AC_TYPE_LONG_DOUBLE:                   Particular Types.    (line  59)
* AC_TYPE_LONG_DOUBLE_WIDER:             Particular Types.    (line  70)
* AC_TYPE_LONG_LONG_INT:                 Particular Types.    (line  78)
* AC_TYPE_MBSTATE_T:                     Particular Types.    (line  88)
* AC_TYPE_MODE_T:                        Particular Types.    (line  96)
* AC_TYPE_OFF_T:                         Particular Types.    (line 102)
* AC_TYPE_PID_T:                         Particular Types.    (line 108)
* AC_TYPE_SIGNAL:                        Obsolete Macros.     (line 662)
* AC_TYPE_SIZE_T:                        Particular Types.    (line 114)
* AC_TYPE_SSIZE_T:                       Particular Types.    (line 120)
* AC_TYPE_UID_T:                         Particular Types.    (line 126)
* AC_TYPE_UINT16_T:                      Particular Types.    (line 138)
* AC_TYPE_UINT32_T:                      Particular Types.    (line 141)
* AC_TYPE_UINT64_T:                      Particular Types.    (line 144)
* AC_TYPE_UINT8_T:                       Particular Types.    (line 132)
* AC_TYPE_UINTMAX_T:                     Particular Types.    (line 147)
* AC_TYPE_UINTPTR_T:                     Particular Types.    (line 152)
* AC_TYPE_UNSIGNED_LONG_LONG_INT:        Particular Types.    (line 157)
* AC_UID_T:                              Obsolete Macros.     (line 679)
* AC_UNISTD_H:                           Obsolete Macros.     (line 682)
* AC_USE_SYSTEM_EXTENSIONS:              Posix Variants.      (line  10)
* AC_USG:                                Obsolete Macros.     (line 685)
* AC_UTIME_NULL:                         Obsolete Macros.     (line 690)
* AC_VALIDATE_CACHED_SYSTEM_TUPLE:       Obsolete Macros.     (line 693)
* AC_VERBOSE:                            Obsolete Macros.     (line 698)
* AC_VFORK:                              Obsolete Macros.     (line 701)
* AC_VPRINTF:                            Obsolete Macros.     (line 704)
* AC_WAIT3:                              Obsolete Macros.     (line 707)
* AC_WARN:                               Obsolete Macros.     (line 712)
* AC_WARNING:                            Reporting Messages.  (line  26)
* AC_WITH:                               Obsolete Macros.     (line 715)
* AC_WORDS_BIGENDIAN:                    Obsolete Macros.     (line 719)
* AC_XENIX_DIR:                          Obsolete Macros.     (line 722)
* AC_YYTEXT_POINTER:                     Obsolete Macros.     (line 739)
* AH_BOTTOM:                             Autoheader Macros.   (line  50)
* AH_HEADER:                             Configuration Headers.
                                                              (line  54)
* AH_TEMPLATE:                           Autoheader Macros.   (line  19)
* AH_TOP:                                Autoheader Macros.   (line  47)
* AH_VERBATIM:                           Autoheader Macros.   (line  40)
* AU_ALIAS:                              Obsoleting Macros.   (line  34)
* AU_DEFUN:                              Obsoleting Macros.   (line  18)

==============================================================================
File: autoconf.info,  Node: |M4_Macro_Index|,  Next: |Autotest_Macro_Index|,  Prev: |Autoconf_Macro_Index|,  Up: |Indices|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *M4_Macro_Index*

B.6 M4 Macro Index
------------------

This is an alphabetical list of the M4, M4sugar, and M4sh macros.


MENU

* __file__:                              Redefined M4 Macros. (line  65)
* __line__:                              Redefined M4 Macros. (line  65)
* __oline__:                             Redefined M4 Macros. (line  69)
* AS_BOURNE_COMPATIBLE:                  Initialization Macros.
                                                              (line   7)
* AS_BOX:                                Common Shell Constructs.
                                                              (line  10)
* AS_CASE:                               Common Shell Constructs.
                                                              (line  19)
* AS_DIRNAME:                            Common Shell Constructs.
                                                              (line  26)
* AS_ECHO:                               Common Shell Constructs.
                                                              (line  34)
* AS_ECHO_N:                             Common Shell Constructs.
                                                              (line  42)
* AS_ESCAPE:                             Common Shell Constructs.
                                                              (line  50)
* AS_EXECUTABLE_P:                       Common Shell Constructs.
                                                              (line  90)
* AS_EXIT:                               Common Shell Constructs.
                                                              (line  95)
* AS_HELP_STRING:                        Pretty Help Strings. (line  15)
* AS_IF:                                 Common Shell Constructs.
                                                              (line 101)
* AS_INIT:                               Initialization Macros.
                                                              (line  14)
* AS_INIT_GENERATED:                     Initialization Macros.
                                                              (line  26)
* AS_LINENO_PREPARE:                     Initialization Macros.
                                                              (line  67)
* AS_LITERAL_IF:                         Polymorphic Variables.
                                                              (line  21)
* AS_LITERAL_WORD_IF:                    Polymorphic Variables.
                                                              (line  21)
* AS_ME_PREPARE:                         Initialization Macros.
                                                              (line  72)
* AS_MESSAGE_FD:                         File Descriptor Macros.
                                                              (line  17)
* AS_MESSAGE_LOG_FD:                     File Descriptor Macros.
                                                              (line  29)
* AS_MKDIR_P:                            Common Shell Constructs.
                                                              (line 115)
* AS_ORIGINAL_STDIN_FD:                  File Descriptor Macros.
                                                              (line  39)
* AS_SET_CATFILE:                        Common Shell Constructs.
                                                              (line 155)
* AS_SET_STATUS:                         Common Shell Constructs.
                                                              (line 127)
* AS_SHELL_SANITIZE:                     Initialization Macros.
                                                              (line 101)
* AS_TMPDIR:                             Initialization Macros.
                                                              (line  77)
* AS_TR_CPP:                             Common Shell Constructs.
                                                              (line 135)
* AS_TR_SH:                              Common Shell Constructs.
                                                              (line 144)
* AS_UNSET:                              Common Shell Constructs.
                                                              (line 159)
* AS_VAR_APPEND:                         Polymorphic Variables.
                                                              (line  63)
* AS_VAR_ARITH:                          Polymorphic Variables.
                                                              (line  85)
* AS_VAR_COPY:                           Polymorphic Variables.
                                                              (line 103)
* AS_VAR_IF:                             Polymorphic Variables.
                                                              (line 122)
* AS_VAR_POPDEF:                         Polymorphic Variables.
                                                              (line 131)
* AS_VAR_PUSHDEF:                        Polymorphic Variables.
                                                              (line 131)
* AS_VAR_SET:                            Polymorphic Variables.
                                                              (line 173)
* AS_VAR_SET_IF:                         Polymorphic Variables.
                                                              (line 183)
* AS_VAR_TEST_SET:                       Polymorphic Variables.
                                                              (line 188)
* AS_VERSION_COMPARE:                    Common Shell Constructs.
                                                              (line 165)
* dnl:                                   Redefined M4 Macros. (line  76)
* m4_append:                             Text processing Macros.
                                                              (line  16)
* m4_append_uniq:                        Text processing Macros.
                                                              (line  16)
* m4_append_uniq_w:                      Text processing Macros.
                                                              (line  69)
* m4_apply:                              Evaluation Macros.   (line  10)
* m4_argn:                               Looping constructs.  (line  29)
* m4_assert:                             Diagnostic Macros.   (line  11)
* m4_bmatch:                             Conditional constructs.
                                                              (line  11)
* m4_bpatsubst:                          Redefined M4 Macros. (line  79)
* m4_bpatsubsts:                         Conditional constructs.
                                                              (line  18)
* m4_bregexp:                            Redefined M4 Macros. (line  84)
* m4_builtin:                            Redefined M4 Macros. (line   6)
* m4_car:                                Looping constructs.  (line  35)
* m4_case:                               Conditional constructs.
                                                              (line  33)
* m4_cdr:                                Looping constructs.  (line  41)
* m4_changecom:                          Redefined M4 Macros. (line   6)
* m4_changequote:                        Redefined M4 Macros. (line   6)
* m4_chomp:                              Text processing Macros.
                                                              (line  80)
* m4_chomp_all:                          Text processing Macros.
                                                              (line  80)
* m4_cleardivert:                        Diversion support.   (line 125)
* m4_cmp:                                Number processing Macros.
                                                              (line  11)
* m4_combine:                            Text processing Macros.
                                                              (line  88)
* m4_cond:                               Conditional constructs.
                                                              (line  42)
* m4_copy:                               Redefined M4 Macros. (line  92)
* m4_copy_force:                         Redefined M4 Macros. (line  92)
* m4_count:                              Evaluation Macros.   (line  26)
* m4_curry:                              Evaluation Macros.   (line  30)
* m4_debugfile:                          Redefined M4 Macros. (line   6)
* m4_debugmode:                          Redefined M4 Macros. (line   6)
* m4_decr:                               Redefined M4 Macros. (line   6)
* m4_default:                            Conditional constructs.
                                                              (line  73)
* m4_default_nblank:                     Conditional constructs.
                                                              (line  73)
* m4_default_nblank_quoted:              Conditional constructs.
                                                              (line  73)
* m4_default_quoted:                     Conditional constructs.
                                                              (line  73)
* m4_define:                             Redefined M4 Macros. (line   6)
* m4_define_default:                     Conditional constructs.
                                                              (line 122)
* m4_defn:                               Redefined M4 Macros. (line 111)
* m4_divert:                             Redefined M4 Macros. (line 119)
* m4_divert_once:                        Diversion support.   (line 128)
* m4_divert_pop:                         Diversion support.   (line 133)
* m4_divert_push:                        Diversion support.   (line 139)
* m4_divert_text:                        Diversion support.   (line 145)
* m4_divnum:                             Redefined M4 Macros. (line   6)
* m4_do:                                 Evaluation Macros.   (line  45)
* m4_dquote:                             Evaluation Macros.   (line  65)
* m4_dquote_elt:                         Evaluation Macros.   (line  70)
* m4_dumpdef:                            Redefined M4 Macros. (line 131)
* m4_dumpdefs:                           Redefined M4 Macros. (line 131)
* m4_echo:                               Evaluation Macros.   (line  75)
* m4_errprint:                           Redefined M4 Macros. (line   6)
* m4_errprintn:                          Diagnostic Macros.   (line  16)
* m4_escape:                             Text processing Macros.
                                                              (line 108)
* m4_esyscmd:                            Redefined M4 Macros. (line   6)
* m4_esyscmd_s:                          Redefined M4 Macros. (line 148)
* m4_eval:                               Redefined M4 Macros. (line   6)
* m4_exit:                               Redefined M4 Macros. (line 154)
* m4_expand:                             Evaluation Macros.   (line  79)
* m4_fatal:                              Diagnostic Macros.   (line  20)
* m4_flatten:                            Text processing Macros.
                                                              (line 113)
* m4_for:                                Looping constructs.  (line  59)
* m4_foreach:                            Looping constructs.  (line  69)
* m4_foreach_w:                          Looping constructs.  (line  83)
* m4_format:                             Redefined M4 Macros. (line   6)
* m4_if:                                 Redefined M4 Macros. (line 160)
* m4_ifblank:                            Conditional constructs.
                                                              (line 127)
* m4_ifdef:                              Redefined M4 Macros. (line   6)
* m4_ifnblank:                           Conditional constructs.
                                                              (line 127)
* m4_ifndef:                             Conditional constructs.
                                                              (line 135)
* m4_ifset:                              Conditional constructs.
                                                              (line 139)
* m4_ifval:                              Conditional constructs.
                                                              (line 145)
* m4_ifvaln:                             Conditional constructs.
                                                              (line 150)
* m4_ignore:                             Evaluation Macros.   (line 129)
* m4_include:                            Redefined M4 Macros. (line 167)
* m4_incr:                               Redefined M4 Macros. (line   6)
* m4_index:                              Redefined M4 Macros. (line   6)
* m4_indir:                              Redefined M4 Macros. (line   6)
* m4_init:                               Diversion support.   (line 171)
* m4_join:                               Text processing Macros.
                                                              (line 119)
* m4_joinall:                            Text processing Macros.
                                                              (line 119)
* m4_len:                                Redefined M4 Macros. (line   6)
* m4_list_cmp:                           Number processing Macros.
                                                              (line  16)
* m4_location:                           Diagnostic Macros.   (line  24)
* m4_make_list:                          Evaluation Macros.   (line 142)
* m4_maketemp:                           Redefined M4 Macros. (line 171)
* m4_map:                                Looping constructs.  (line  93)
* m4_map_args:                           Looping constructs.  (line 130)
* m4_map_args_pair:                      Looping constructs.  (line 166)
* m4_map_args_sep:                       Looping constructs.  (line 178)
* m4_map_args_w:                         Looping constructs.  (line 189)
* m4_map_sep:                            Looping constructs.  (line  93)
* m4_mapall:                             Looping constructs.  (line  93)
* m4_mapall_sep:                         Looping constructs.  (line  93)
* m4_max:                                Number processing Macros.
                                                              (line  38)
* m4_min:                                Number processing Macros.
                                                              (line  42)
* m4_mkstemp:                            Redefined M4 Macros. (line 171)
* m4_n:                                  Conditional constructs.
                                                              (line 154)
* m4_newline:                            Text processing Macros.
                                                              (line 134)
* m4_normalize:                          Text processing Macros.
                                                              (line 140)
* m4_pattern_allow:                      Forbidden Patterns.  (line  30)
* m4_pattern_forbid:                     Forbidden Patterns.  (line  17)
* m4_popdef:                             Redefined M4 Macros. (line 182)
* m4_pushdef:                            Redefined M4 Macros. (line   6)
* m4_quote:                              Evaluation Macros.   (line 161)
* m4_re_escape:                          Text processing Macros.
                                                              (line 148)
* m4_rename:                             Redefined M4 Macros. (line  92)
* m4_rename_force:                       Redefined M4 Macros. (line  92)
* m4_reverse:                            Evaluation Macros.   (line 167)
* m4_set_add:                            Set manipulation Macros.
                                                              (line  19)
* m4_set_add_all:                        Set manipulation Macros.
                                                              (line  25)
* m4_set_contains:                       Set manipulation Macros.
                                                              (line  29)
* m4_set_contents:                       Set manipulation Macros.
                                                              (line  49)
* m4_set_delete:                         Set manipulation Macros.
                                                              (line  79)
* m4_set_difference:                     Set manipulation Macros.
                                                              (line  86)
* m4_set_dump:                           Set manipulation Macros.
                                                              (line  49)
* m4_set_empty:                          Set manipulation Macros.
                                                              (line 109)
* m4_set_foreach:                        Set manipulation Macros.
                                                              (line 115)
* m4_set_intersection:                   Set manipulation Macros.
                                                              (line  86)
* m4_set_list:                           Set manipulation Macros.
                                                              (line 136)
* m4_set_listc:                          Set manipulation Macros.
                                                              (line 136)
* m4_set_map:                            Set manipulation Macros.
                                                              (line 171)
* m4_set_map_sep:                        Set manipulation Macros.
                                                              (line 184)
* m4_set_remove:                         Set manipulation Macros.
                                                              (line 195)
* m4_set_size:                           Set manipulation Macros.
                                                              (line 206)
* m4_set_union:                          Set manipulation Macros.
                                                              (line  86)
* m4_shift:                              Redefined M4 Macros. (line   6)
* m4_shift2:                             Looping constructs.  (line 199)
* m4_shift3:                             Looping constructs.  (line 199)
* m4_shiftn:                             Looping constructs.  (line 199)
* m4_sign:                               Number processing Macros.
                                                              (line  46)
* m4_sinclude:                           Redefined M4 Macros. (line 167)
* m4_split:                              Text processing Macros.
                                                              (line 152)
* m4_stack_foreach:                      Looping constructs.  (line 208)
* m4_stack_foreach_lifo:                 Looping constructs.  (line 208)
* m4_stack_foreach_sep:                  Looping constructs.  (line 230)
* m4_stack_foreach_sep_lifo:             Looping constructs.  (line 230)
* m4_strip:                              Text processing Macros.
                                                              (line 158)
* m4_substr:                             Redefined M4 Macros. (line   6)
* m4_syscmd:                             Redefined M4 Macros. (line   6)
* m4_sysval:                             Redefined M4 Macros. (line   6)
* m4_text_box:                           Text processing Macros.
                                                              (line 167)
* m4_text_wrap:                          Text processing Macros.
                                                              (line 182)
* m4_tolower:                            Text processing Macros.
                                                              (line 213)
* m4_toupper:                            Text processing Macros.
                                                              (line 213)
* m4_traceoff:                           Redefined M4 Macros. (line   6)
* m4_traceon:                            Redefined M4 Macros. (line   6)
* m4_translit:                           Redefined M4 Macros. (line   6)
* m4_undefine:                           Redefined M4 Macros. (line 186)
* m4_undivert:                           Redefined M4 Macros. (line 194)
* m4_unquote:                            Evaluation Macros.   (line 176)
* m4_version_compare:                    Number processing Macros.
                                                              (line  50)
* m4_version_prereq:                     Number processing Macros.
                                                              (line  90)
* m4_warn:                               Diagnostic Macros.   (line  28)
* m4_wrap:                               Redefined M4 Macros. (line 204)
* m4_wrap_lifo:                          Redefined M4 Macros. (line 204)

==============================================================================
File: autoconf.info,  Node: |Autotest_Macro_Index|,  Next: |Program_&_Function_Index|,  Prev: |M4_Macro_Index|,  Up: |Indices|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Autotest_Macro_Index*

B.7 Autotest Macro Index
------------------------

This is an alphabetical list of the Autotest macros.


MENU

* AT_ARG_OPTION:                         Writing Testsuites.  (line  50)
* AT_ARG_OPTION_ARG:                     Writing Testsuites.  (line  79)
* AT_BANNER:                             Writing Testsuites.  (line 124)
* AT_CAPTURE_FILE:                       Writing Testsuites.  (line 155)
* AT_CHECK:                              Writing Testsuites.  (line 212)
* AT_CHECK_EUNIT:                        Writing Testsuites.  (line 302)
* AT_CHECK_UNQUOTED:                     Writing Testsuites.  (line 212)
* AT_CLEANUP:                            Writing Testsuites.  (line 198)
* AT_COLOR_TESTS:                        Writing Testsuites.  (line 105)
* AT_COPYRIGHT:                          Writing Testsuites.  (line  41)
* AT_DATA:                               Writing Testsuites.  (line 202)
* AT_FAIL_IF:                            Writing Testsuites.  (line 160)
* AT_INIT:                               Writing Testsuites.  (line  31)
* AT_KEYWORDS:                           Writing Testsuites.  (line 142)
* AT_PACKAGE_BUGREPORT:                  Making testsuite Scripts.
                                                              (line  12)
* AT_PACKAGE_NAME:                       Making testsuite Scripts.
                                                              (line  12)
* AT_PACKAGE_STRING:                     Making testsuite Scripts.
                                                              (line  12)
* AT_PACKAGE_TARNAME:                    Making testsuite Scripts.
                                                              (line  12)
* AT_PACKAGE_URL:                        Making testsuite Scripts.
                                                              (line  12)
* AT_PACKAGE_VERSION:                    Making testsuite Scripts.
                                                              (line  12)
* AT_SETUP:                              Writing Testsuites.  (line 134)
* AT_SKIP_IF:                            Writing Testsuites.  (line 175)
* AT_TESTED:                             Writing Testsuites.  (line 109)
* AT_XFAIL_IF:                           Writing Testsuites.  (line 190)

==============================================================================
File: autoconf.info,  Node: |Program_&_Function_Index|,  Next: |Concept_Index|,  Prev: |Autotest_Macro_Index|,  Up: |Indices|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *Program_&_Function_Index*

B.8 Program and Function Index
------------------------------

This is an alphabetical list of the programs and functions whose
portability is discussed in this document.


MENU

* !:                                     Limitations of Builtins.
                                                              (line  41)
* .:                                     Limitations of Builtins.
                                                              (line  17)
* /usr/bin/ksh on Solaris:               Shellology.          (line  63)
* /usr/dt/bin/dtksh on Solaris:          Shellology.          (line  66)
* /usr/xpg4/bin/sh on Solaris:           Shellology.          (line  64)
* alloca:                                Particular Functions.
                                                              (line  10)
* alloca.h:                              Particular Functions.
                                                              (line  10)
* assert.h:                              Particular Headers.  (line  20)
* awk:                                   Limitations of Usual Tools.
                                                              (line  10)
* basename:                              Limitations of Usual Tools.
                                                              (line 142)
* break:                                 Limitations of Builtins.
                                                              (line 107)
* case:                                  Limitations of Builtins.
                                                              (line 110)
* cat:                                   Limitations of Usual Tools.
                                                              (line 146)
* cc:                                    Limitations of Usual Tools.
                                                              (line 149)
* cd:                                    Limitations of Builtins.
                                                              (line 203)
* chgrp:                                 Limitations of Usual Tools.
                                                              (line 183)
* chmod:                                 Limitations of Usual Tools.
                                                              (line 187)
* chown <1>:                             Limitations of Usual Tools.
                                                              (line 183)
* chown:                                 Particular Functions.
                                                              (line  63)
* closedir:                              Particular Functions.
                                                              (line  69)
* cmp:                                   Limitations of Usual Tools.
                                                              (line 197)
* cp:                                    Limitations of Usual Tools.
                                                              (line 204)
* ctype.h:                               Particular Headers.  (line 135)
* date:                                  Limitations of Usual Tools.
                                                              (line 264)
* diff:                                  Limitations of Usual Tools.
                                                              (line 274)
* dirent.h:                              Particular Headers.  (line  25)
* dirname:                               Limitations of Usual Tools.
                                                              (line 280)
* echo:                                  Limitations of Builtins.
                                                              (line 233)
* egrep:                                 Limitations of Usual Tools.
                                                              (line 287)
* error_at_line:                         Particular Functions.
                                                              (line  84)
* eval:                                  Limitations of Builtins.
                                                              (line 270)
* exec:                                  Limitations of Builtins.
                                                              (line 315)
* exit <1>:                              Limitations of Builtins.
                                                              (line 355)
* exit:                                  Function Portability.
                                                              (line  17)
* export:                                Limitations of Builtins.
                                                              (line 380)
* expr:                                  Limitations of Usual Tools.
                                                              (line 312)
* expr (|):                              Limitations of Usual Tools.
                                                              (line 326)
* false:                                 Limitations of Builtins.
                                                              (line 428)
* fgrep:                                 Limitations of Usual Tools.
                                                              (line 435)
* find:                                  Limitations of Usual Tools.
                                                              (line 444)
* float.h:                               Particular Headers.  (line 135)
* fnmatch:                               Particular Functions.
                                                              (line  94)
* fnmatch.h:                             Particular Functions.
                                                              (line 452)
* for:                                   Limitations of Builtins.
                                                              (line 432)
* fork:                                  Particular Functions.
                                                              (line 120)
* free:                                  Function Portability.
                                                              (line  27)
* fseeko:                                Particular Functions.
                                                              (line 147)
* ftello:                                Particular Functions.
                                                              (line 147)
* getgroups:                             Particular Functions.
                                                              (line 155)
* getloadavg:                            Particular Functions.
                                                              (line 161)
* getmntent:                             Particular Functions.
                                                              (line 195)
* getpgid:                               Particular Functions.
                                                              (line 205)
* getpgrp:                               Particular Functions.
                                                              (line 205)
* grep:                                  Limitations of Usual Tools.
                                                              (line 458)
* if:                                    Limitations of Builtins.
                                                              (line 477)
* inttypes.h <1>:                        Particular Types.    (line   6)
* inttypes.h:                            Header Portability.  (line  20)
* isinf:                                 Function Portability.
                                                              (line  32)
* isnan:                                 Function Portability.
                                                              (line  32)
* join:                                  Limitations of Usual Tools.
                                                              (line 526)
* ksh:                                   Shellology.          (line  57)
* ksh88:                                 Shellology.          (line  57)
* ksh93:                                 Shellology.          (line  57)
* linux/irda.h:                          Header Portability.  (line  27)
* linux/random.h:                        Header Portability.  (line  30)
* ln:                                    Limitations of Usual Tools.
                                                              (line 543)
* ls:                                    Limitations of Usual Tools.
                                                              (line 555)
* lstat:                                 Particular Functions.
                                                              (line 228)
* make:                                  Portable Make.       (line   6)
* malloc <1>:                            Particular Functions.
                                                              (line 247)
* malloc:                                Function Portability.
                                                              (line  82)
* mbrtowc:                               Particular Functions.
                                                              (line 279)
* memcmp:                                Particular Functions.
                                                              (line 286)
* mkdir:                                 Limitations of Usual Tools.
                                                              (line 577)
* mkfifo:                                Limitations of Usual Tools.
                                                              (line 611)
* mknod:                                 Limitations of Usual Tools.
                                                              (line 611)
* mktemp:                                Limitations of Usual Tools.
                                                              (line 621)
* mktime:                                Particular Functions.
                                                              (line 299)
* mmap:                                  Particular Functions.
                                                              (line 311)
* mv:                                    Limitations of Usual Tools.
                                                              (line 646)
* ndir.h:                                Particular Headers.  (line  25)
* net/if.h:                              Header Portability.  (line  33)
* netinet/if_ether.h:                    Header Portability.  (line  53)
* nlist.h:                               Particular Functions.
                                                              (line 178)
* od:                                    Limitations of Usual Tools.
                                                              (line 678)
* pdksh:                                 Shellology.          (line  77)
* printf:                                Limitations of Builtins.
                                                              (line 516)
* putenv:                                Function Portability.
                                                              (line  89)
* pwd:                                   Limitations of Builtins.
                                                              (line 543)
* read:                                  Limitations of Builtins.
                                                              (line 574)
* realloc <1>:                           Particular Functions.
                                                              (line 326)
* realloc:                               Function Portability.
                                                              (line 105)
* resolv.h:                              Particular Headers.  (line  73)
* rm:                                    Limitations of Usual Tools.
                                                              (line 687)
* rmdir:                                 Limitations of Usual Tools.
                                                              (line 706)
* sed:                                   Limitations of Usual Tools.
                                                              (line 710)
* sed (t):                               Limitations of Usual Tools.
                                                              (line 905)
* select:                                Particular Functions.
                                                              (line 337)
* set:                                   Limitations of Builtins.
                                                              (line 580)
* setpgrp:                               Particular Functions.
                                                              (line 348)
* setvbuf:                               Obsolete Macros.     (line 208)
* shift:                                 Limitations of Builtins.
                                                              (line 732)
* sigaction:                             Function Portability.
                                                              (line 110)
* signal:                                Function Portability.
                                                              (line 110)
* signal.h:                              Obsolete Macros.     (line 662)
* sleep:                                 Limitations of Usual Tools.
                                                              (line 965)
* snprintf:                              Function Portability.
                                                              (line 124)
* sort:                                  Limitations of Usual Tools.
                                                              (line 971)
* source:                                Limitations of Builtins.
                                                              (line 740)
* sprintf:                               Function Portability.
                                                              (line 135)
* sscanf:                                Function Portability.
                                                              (line 141)
* stat:                                  Particular Functions.
                                                              (line 363)
* stdarg.h:                              Particular Headers.  (line 135)
* stdbool.h:                             Particular Headers.  (line  10)
* stdint.h <1>:                          Particular Types.    (line   6)
* stdint.h:                              Header Portability.  (line  20)
* stdlib.h <1>:                          Particular Types.    (line   6)
* stdlib.h <2>:                          Particular Headers.  (line 135)
* stdlib.h:                              Header Portability.  (line  76)
* strcoll:                               Particular Functions.
                                                              (line 379)
* strerror_r <1>:                        Particular Functions.
                                                              (line 388)
* strerror_r:                            Function Portability.
                                                              (line 149)
* strftime:                              Particular Functions.
                                                              (line 401)
* string.h:                              Particular Headers.  (line 135)
* strings.h:                             Particular Headers.  (line 154)
* strnlen <1>:                           Particular Functions.
                                                              (line 426)
* strnlen:                               Function Portability.
                                                              (line 155)
* strtod:                                Particular Functions.
                                                              (line 408)
* strtold:                               Particular Functions.
                                                              (line 420)
* sys/dir.h:                             Particular Headers.  (line  25)
* sys/ioctl.h:                           Particular Headers.  (line 270)
* sys/mkdev.h:                           Particular Headers.  (line  68)
* sys/mount.h:                           Header Portability.  (line  79)
* sys/ndir.h:                            Particular Headers.  (line  25)
* sys/ptem.h:                            Header Portability.  (line  83)
* sys/socket.h:                          Header Portability.  (line  86)
* sys/stat.h:                            Particular Headers.  (line  92)
* sys/sysmacros.h:                       Particular Headers.  (line  68)
* sys/time.h <1>:                        Particular Structures.
                                                              (line  35)
* sys/time.h:                            Particular Headers.  (line 244)
* sys/types.h:                           Particular Types.    (line   6)
* sys/ucred.h:                           Header Portability.  (line  89)
* sys/wait.h:                            Particular Headers.  (line 204)
* sysconf:                               Function Portability.
                                                              (line 170)
* tar:                                   Limitations of Usual Tools.
                                                              (line 976)
* termios.h:                             Particular Headers.  (line 270)
* test:                                  Limitations of Builtins.
                                                              (line 744)
* time.h <1>:                            Particular Structures.
                                                              (line  35)
* time.h:                                Particular Headers.  (line 244)
* touch:                                 Limitations of Usual Tools.
                                                              (line 981)
* tr:                                    Limitations of Usual Tools.
                                                              (line 994)
* trap:                                  Limitations of Builtins.
                                                              (line 856)
* true:                                  Limitations of Builtins.
                                                              (line 930)
* unistd.h:                              Particular Headers.  (line 228)
* unlink:                                Function Portability.
                                                              (line 174)
* unset:                                 Limitations of Builtins.
                                                              (line 946)
* unsetenv:                              Function Portability.
                                                              (line 180)
* utime:                                 Particular Functions.
                                                              (line 433)
* va_copy:                               Function Portability.
                                                              (line 185)
* va_list:                               Function Portability.
                                                              (line 192)
* vfork:                                 Particular Functions.
                                                              (line 120)
* vfork.h:                               Particular Functions.
                                                              (line 120)
* vprintf:                               Particular Functions.
                                                              (line 443)
* vsnprintf:                             Function Portability.
                                                              (line 124)
* vsprintf <1>:                          Particular Functions.
                                                              (line 443)
* vsprintf:                              Function Portability.
                                                              (line 135)
* wait:                                  Limitations of Builtins.
                                                              (line 973)
* wait3:                                 Obsolete Macros.     (line 216)
* wchar.h:                               Particular Types.    (line  88)
* X11/extensions/scrnsaver.h:            Header Portability.  (line  92)
* {...}:                                 Limitations of Builtins.
                                                              (line  74)

==============================================================================
File: autoconf.info,  Node: |Concept_Index|,  Prev: Program & Function Index,  Up: Indices
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Concept_Index*

B.9 Concept Index
-----------------

This is an alphabetical list of the files, tools, and concepts
introduced in this document.


MENU

* "$@":                                  Shell Substitutions. (line  70)
* $((EXPRESSION)):                       Shell Substitutions. (line 456)
* $(COMMANDS):                           Shell Substitutions. (line 423)
* $<, explicit rules, and VPATH:         $< in Explicit Rules.
                                                              (line   6)
* ${#VAR}:                               Shell Substitutions. (line 369)
* ${VAR##WORD}:                          Shell Substitutions. (line 369)
* ${VAR#WORD}:                           Shell Substitutions. (line 369)
* ${VAR%%WORD}:                          Shell Substitutions. (line 369)
* ${VAR%WORD}:                           Shell Substitutions. (line 369)
* ${VAR+VALUE}:                          Shell Substitutions. (line 148)
* ${VAR-VALUE}:                          Shell Substitutions. (line 140)
* ${VAR=EXPANDED-VALUE}:                 Shell Substitutions. (line 319)
* ${VAR=LITERAL}:                        Shell Substitutions. (line 295)
* ${VAR=VALUE}:                          Shell Substitutions. (line 215)
* 64-bit libraries:                      Site Defaults.       (line  97)
* @&t@:                                  Quadrigraphs.        (line   6)
* @S|@:                                  Quadrigraphs.        (line   6)
* ^ quoting:                             Shell Substitutions. (line 496)
* _m4_divert_diversion:                  New Macros.          (line   6)
* `COMMANDS`:                            Shell Substitutions. (line 377)
* abs_builddir:                          Preset Output Variables.
                                                              (line 177)
* abs_srcdir:                            Preset Output Variables.
                                                              (line 199)
* abs_top_builddir:                      Preset Output Variables.
                                                              (line 192)
* abs_top_srcdir:                        Preset Output Variables.
                                                              (line 206)
* absolute file names, detect:           File System Conventions.
                                                              (line  52)
* ac_objext:                             Generic Functions.   (line  59)
* ac_path_VARIABLE:                      Generic Programs.    (line 123)
* ac_path_VARIABLE_found:                Generic Programs.    (line 123)
* ac_srcdir:                             Configuration Actions.
                                                              (line  85)
* ac_top_build_prefix:                   Configuration Actions.
                                                              (line  80)
* ac_top_srcdir:                         Configuration Actions.
                                                              (line  76)
* acconfig.h:                            acconfig Header.     (line   6)
* aclocal.m4:                            Making configure Scripts.
                                                              (line   6)
* Ash:                                   Shellology.          (line  16)
* at_arg_OPTION:                         Writing Testsuites.  (line  50)
* at_optarg:                             Writing Testsuites.  (line  62)
* at_optarg_OPTION:                      Writing Testsuites.  (line  62)
* at_status:                             Writing Testsuites.  (line 212)
* autoconf:                              autoconf Invocation. (line   6)
* Autoconf upgrading <1>:                Autoconf 2.13.       (line   6)
* Autoconf upgrading:                    Autoconf 1.          (line   6)
* Autoconf version:                      Versioning.          (line   6)
* autoheader:                            autoheader Invocation.
                                                              (line   6)
* Autoheader macros:                     Autoheader Macros.   (line   6)
* autom4te debugging tips:               Debugging via autom4te.
                                                              (line   6)
* Autom4te Library:                      autom4te Invocation. (line 225)
* autom4te.cache:                        autom4te Invocation. (line 130)
* autom4te.cfg:                          autom4te Invocation. (line 258)
* Automake:                              Automake.            (line  19)
* Automatic remaking:                    Automatic Remaking.  (line   6)
* automatic rule rewriting and VPATH:    Automatic Rule Rewriting.
                                                              (line   6)
* autopoint:                             autoreconf Invocation.
                                                              (line  30)
* autoreconf:                            autoreconf Invocation.
                                                              (line   6)
* autoscan:                              autoscan Invocation. (line   6)
* Autotest:                              Using Autotest.      (line   6)
* AUTOTEST_PATH:                         testsuite Invocation.
                                                              (line  60)
* autoupdate:                            autoupdate Invocation.
                                                              (line   6)
* Back trace <1>:                        autom4te Invocation. (line  86)
* Back trace:                            autoconf Invocation. (line  86)
* balancing parentheses:                 Balancing Parentheses.
                                                              (line   6)
* Bash:                                  Shellology.          (line  43)
* Bash 2.05 and later:                   Shellology.          (line  49)
* bindir:                                Installation Directory Variables.
                                                              (line  15)
* Bootstrap:                             Bootstrapping.       (line   6)
* BSD make and obj/:                     obj/ and Make.       (line   6)
* buffer overruns:                       Buffer Overruns.     (line   6)
* Build directories:                     Build Directories.   (line   6)
* builddir:                              Preset Output Variables.
                                                              (line 174)
* C function portability:                Function Portability.
                                                              (line   6)
* C types:                               Types.               (line   6)
* Cache:                                 Caching Results.     (line   6)
* Cache variable:                        Cache Variable Names.
                                                              (line   6)
* Cache, enabling:                       configure Invocation.
                                                              (line  25)
* Canonical system type:                 Canonicalizing.      (line   6)
* carriage return, deleting:             Limitations of Usual Tools.
                                                              (line 994)
* CFLAGS:                                Preset Output Variables.
                                                              (line  23)
* changequote:                           Changequote is Evil. (line   6)
* Coding style:                          Coding Style.        (line   6)
* Command Substitution:                  Shell Substitutions. (line 377)
* command-line, macros set on:           Command-line Macros and whitespace.
                                                              (line   6)
* Commands for configuration:            Configuration Commands.
                                                              (line   6)
* Comments in Makefile macros:           Comments in Make Macros.
                                                              (line   6)
* Comments in Makefile rules:            Comments in Make Rules.
                                                              (line   6)
* Common autoconf behavior:              Common Behavior.     (line   6)
* Compilers:                             Compilers and Preprocessors.
                                                              (line   6)
* composing variable names:              Polymorphic Variables.
                                                              (line 131)
* config.h:                              Configuration Headers.
                                                              (line   6)
* config.h.bot:                          acconfig Header.     (line   6)
* config.h.in:                           Header Templates.    (line   6)
* config.h.top:                          acconfig Header.     (line   6)
* config.site:                           Site Defaults.       (line   6)
* config.status:                         config.status Invocation.
                                                              (line   6)
* config.sub:                            Specifying Target Triplets.
                                                              (line  59)
* CONFIG_COMMANDS:                       Obsolete config.status Use.
                                                              (line  11)
* CONFIG_FILES:                          Obsolete config.status Use.
                                                              (line  15)
* CONFIG_HEADERS:                        Obsolete config.status Use.
                                                              (line  20)
* CONFIG_LINKS:                          Obsolete config.status Use.
                                                              (line  25)
* CONFIG_SHELL:                          config.status Invocation.
                                                              (line 102)
* CONFIG_STATUS:                         config.status Invocation.
                                                              (line 108)
* Configuration actions:                 Configuration Actions.
                                                              (line   6)
* Configuration commands:                Configuration Commands.
                                                              (line   6)
* Configuration file creation:           Configuration Files. (line   6)
* Configuration Header:                  Configuration Headers.
                                                              (line   6)
* Configuration Header Template:         Header Templates.    (line   6)
* Configuration links:                   Configuration Links. (line   6)
* configure <1>:                         Running configure Scripts.
                                                              (line   6)
* configure:                             Making configure Scripts.
                                                              (line   6)
* Configure subdirectories:              Subdirectories.      (line   6)
* configure.ac:                          Making configure Scripts.
                                                              (line  27)
* configure.in:                          Making configure Scripts.
                                                              (line  27)
* configure_input:                       Preset Output Variables.
                                                              (line  58)
* Copyright Notice <1>:                  Writing Testsuites.  (line  41)
* Copyright Notice:                      Notices.             (line  10)
* CPPFLAGS:                              Preset Output Variables.
                                                              (line  72)
* Creating configuration files:          Configuration Files. (line   6)
* Creating temporary files:              Limitations of Usual Tools.
                                                              (line 621)
* Cross compilation:                     Hosts and Cross-Compilation.
                                                              (line   6)
* CXXFLAGS:                              Preset Output Variables.
                                                              (line  94)
* Darwin:                                Systemology.         (line  23)
* Data structure, set:                   Set manipulation Macros.
                                                              (line   6)
* datadir:                               Installation Directory Variables.
                                                              (line  18)
* datarootdir <1>:                       Changed Directory Variables.
                                                              (line   6)
* datarootdir:                           Installation Directory Variables.
                                                              (line  22)
* debugging tips:                        Debugging via autom4te.
                                                              (line   6)
* Declaration, checking:                 Declarations.        (line   6)
* Default includes:                      Default Includes.    (line   6)
* DEFS:                                  Preset Output Variables.
                                                              (line  98)
* deleting carriage return:              Limitations of Usual Tools.
                                                              (line 994)
* Dependencies between macros:           Dependencies Between Macros.
                                                              (line   6)
* Descriptors:                           File Descriptors.    (line   6)
* descriptors:                           File Descriptor Macros.
                                                              (line   6)
* Directories, build:                    Build Directories.   (line   6)
* Directories, installation:             Installation Directory Variables.
                                                              (line   6)
* division, integer:                     Signed Integer Division.
                                                              (line   6)
* dnl <1>:                               Coding Style.        (line  42)
* dnl:                                   Macro Definitions.   (line  51)
* docdir:                                Installation Directory Variables.
                                                              (line  26)
* double-colon rules and VPATH:          VPATH and Double-colon.
                                                              (line   6)
* dvidir:                                Installation Directory Variables.
                                                              (line  30)
* ECHO_C:                                Preset Output Variables.
                                                              (line 106)
* ECHO_N:                                Preset Output Variables.
                                                              (line 107)
* ECHO_T:                                Preset Output Variables.
                                                              (line 108)
* Endianness:                            C Compiler.          (line 184)
* environment, macros set from:          Command-line Macros and whitespace.
                                                              (line   6)
* Erlang:                                Erlang Compiler and Interpreter.
                                                              (line   6)
* Erlang, Library, checking:             Erlang Libraries.    (line   6)
* ERLANG_INSTALL_LIB_DIR:                Installation Directory Variables.
                                                              (line 201)
* ERLANG_INSTALL_LIB_DIR_:               Installation Directory Variables.
                                                              (line 206)
* ERLCFLAGS:                             Preset Output Variables.
                                                              (line 120)
* exec_prefix:                           Installation Directory Variables.
                                                              (line  33)
* exiting portably:                      Exiting Portably.    (line   6)
* expanded before required:              Expanded Before Required.
                                                              (line   6)
* explicit rules, $<, and VPATH:         $< in Explicit Rules.
                                                              (line   6)
* External software:                     External Software.   (line   6)
* F77:                                   Fortran Compiler.    (line   6)
* FCFLAGS:                               Preset Output Variables.
                                                              (line 126)
* FFLAGS:                                Preset Output Variables.
                                                              (line 133)
* FHS:                                   Site Defaults.       (line  83)
* File descriptors:                      File Descriptors.    (line   6)
* file descriptors:                      File Descriptor Macros.
                                                              (line   6)
* File system conventions:               File System Conventions.
                                                              (line   6)
* File, checking:                        Files.               (line   6)
* Filesystem Hierarchy Standard:         Site Defaults.       (line  83)
* floating point:                        Floating Point Portability.
                                                              (line   6)
* Forbidden patterns:                    Forbidden Patterns.  (line   6)
* Fortran:                               Fortran Compiler.    (line   6)
* Function, checking:                    Particular Functions.
                                                              (line   6)
* Gettext:                               autoreconf Invocation.
                                                              (line  30)
* GNU build system:                      The GNU Build System.
                                                              (line   6)
* Gnulib:                                Gnulib.              (line  11)
* Go:                                    Go Compiler.         (line   6)
* GOFLAGS:                               Preset Output Variables.
                                                              (line 170)
* Header portability:                    Header Portability.  (line   6)
* Header templates:                      Header Templates.    (line   6)
* Header, checking:                      Header Files.        (line   6)
* Help strings:                          Pretty Help Strings. (line   6)
* Here-documents:                        Here-Documents.      (line   6)
* History of autoconf:                   History.             (line   6)
* htmldir:                               Installation Directory Variables.
                                                              (line  40)
* ifnames:                               ifnames Invocation.  (line   6)
* Imake:                                 Why Not Imake.       (line   6)
* includedir:                            Installation Directory Variables.
                                                              (line  43)
* Includes, default:                     Default Includes.    (line   6)
* indirection, variable name:            Polymorphic Variables.
                                                              (line   6)
* infodir:                               Installation Directory Variables.
                                                              (line  46)
* input:                                 File Descriptor Macros.
                                                              (line   6)
* Install prefix:                        Default Prefix.      (line   6)
* Installation directories:              Installation Directory Variables.
                                                              (line   6)
* Instantiation:                         Output.              (line  13)
* integer overflow <1>:                  Signed Overflow Advice.
                                                              (line   6)
* integer overflow <2>:                  Signed Overflow Examples.
                                                              (line   6)
* integer overflow <3>:                  Integer Overflow Basics.
                                                              (line   6)
* integer overflow:                      Integer Overflow.    (line   6)
* Introduction:                          Introduction.        (line   6)
* invoking the shell:                    Invoking the Shell.  (line   6)
* Korn shell:                            Shellology.          (line  57)
* Ksh:                                   Shellology.          (line  57)
* Language:                              Language Choice.     (line   6)
* Large file support:                    System Services.     (line  49)
* LDFLAGS:                               Preset Output Variables.
                                                              (line 140)
* LFS:                                   System Services.     (line  49)
* lib64:                                 Site Defaults.       (line  97)
* libdir:                                Installation Directory Variables.
                                                              (line  49)
* libexecdir:                            Installation Directory Variables.
                                                              (line  52)
* Library, checking:                     Libraries.           (line   6)
* LIBS:                                  Preset Output Variables.
                                                              (line 154)
* Libtool:                               Libtool.             (line  14)
* License:                               Distributing.        (line   6)
* Limitations of make:                   Portable Make.       (line   6)
* Limitations of shell builtins:         Limitations of Builtins.
                                                              (line   6)
* Limitations of usual tools:            Limitations of Usual Tools.
                                                              (line   6)
* Links:                                 Configuration Links. (line  12)
* Links for configuration:               Configuration Links. (line   6)
* Listing directories:                   Limitations of Usual Tools.
                                                              (line 555)
* localedir:                             Installation Directory Variables.
                                                              (line  55)
* localstatedir:                         Installation Directory Variables.
                                                              (line  60)
* loop induction:                        Optimization and Wraparound.
                                                              (line   6)
* low-level output:                      File Descriptor Macros.
                                                              (line   6)
* M4:                                    Programming in M4.   (line   6)
* M4 quotation:                          M4 Quotation.        (line   6)
* M4sugar:                               Programming in M4sugar.
                                                              (line   6)
* m4sugar debugging tips:                Debugging via autom4te.
                                                              (line   6)
* Macro invocation stack <1>:            autom4te Invocation. (line  86)
* Macro invocation stack:                autoconf Invocation. (line  86)
* Macros, called once:                   One-Shot Macros.     (line   6)
* Macros, obsoleting:                    Obsoleting Macros.   (line   6)
* Macros, ordering:                      Suggested Ordering.  (line   6)
* Macros, prerequisites:                 Prerequisite Macros. (line   6)
* make -k:                               make -k Status.      (line   6)
* make and MAKEFLAGS:                    The Make Macro MAKEFLAGS.
                                                              (line   6)
* make and SHELL:                        The Make Macro SHELL.
                                                              (line   6)
* Makefile macros and comments:          Comments in Make Macros.
                                                              (line   6)
* Makefile macros and whitespace:        Trailing whitespace in Make Macros.
                                                              (line   6)
* Makefile rules and comments:           Comments in Make Rules.
                                                              (line   6)
* Makefile rules and newlines:           Newlines in Make Rules.
                                                              (line   6)
* Makefile substitutions:                Makefile Substitutions.
                                                              (line   6)
* MAKEFLAGS and make:                    The Make Macro MAKEFLAGS.
                                                              (line   6)
* Making directories:                    Limitations of Usual Tools.
                                                              (line 577)
* mandir:                                Installation Directory Variables.
                                                              (line  63)
* Messages, from autoconf:               Reporting Messages.  (line   6)
* Messages, from configure:              Printing Messages.   (line   6)
* Messages, from M4sugar:                Diagnostic Macros.   (line   6)
* Moving open files:                     Limitations of Usual Tools.
                                                              (line 646)
* newline, deleting:                     Limitations of Usual Tools.
                                                              (line 994)
* Newlines in Makefile rules:            Newlines in Make Rules.
                                                              (line   6)
* Notices in configure:                  Notices.             (line   6)
* null pointers:                         Null Pointers.       (line   6)
* obj/, subdirectory:                    obj/ and Make.       (line   6)
* OBJCFLAGS:                             Preset Output Variables.
                                                              (line 162)
* OBJCXXFLAGS:                           Preset Output Variables.
                                                              (line 166)
* Obsolete constructs:                   Obsolete Constructs. (line   6)
* Obsoleting macros:                     Obsoleting Macros.   (line   6)
* obstack:                               Particular Functions.
                                                              (line 319)
* oldincludedir:                         Installation Directory Variables.
                                                              (line  66)
* One-shot macros:                       One-Shot Macros.     (line   6)
* Options, Package:                      Option Checking.     (line   6)
* Options, package:                      Package Options.     (line   6)
* Ordering macros:                       Suggested Ordering.  (line   6)
* Output variables <1>:                  Setting Output Variables.
                                                              (line   6)
* Output variables:                      Preset Output Variables.
                                                              (line   6)
* Output variables, special characters in: Special Chars in Variables.
                                                              (line   6)
* output, low-level:                     File Descriptor Macros.
                                                              (line   6)
* Outputting files:                      Output.              (line   6)
* overflow, signed integer <1>:          Signed Overflow Advice.
                                                              (line   6)
* overflow, signed integer <2>:          Signed Overflow Examples.
                                                              (line   6)
* overflow, signed integer <3>:          Integer Overflow Basics.
                                                              (line   6)
* overflow, signed integer:              Integer Overflow.    (line   6)
* Package options:                       Package Options.     (line   6)
* package.m4:                            Making testsuite Scripts.
                                                              (line  12)
* Parallel make:                         Parallel Make.       (line   6)
* parentheses, balancing:                Balancing Parentheses.
                                                              (line   6)
* Patterns, forbidden:                   Forbidden Patterns.  (line   6)
* pdfdir:                                Installation Directory Variables.
                                                              (line  69)
* polymorphic variable name:             Polymorphic Variables.
                                                              (line   6)
* portability:                           Varieties of Unportability.
                                                              (line   6)
* Portability of C functions:            Function Portability.
                                                              (line   6)
* Portability of headers:                Header Portability.  (line   6)
* Portable C and C++ programming:        Portable C and C++.  (line   6)
* Portable shell programming:            Portable Shell.      (line   6)
* positional parameters:                 Shell Substitutions. (line 121)
* Posix termios headers:                 System Services.     (line  75)
* Precious Variable:                     Setting Output Variables.
                                                              (line  65)
* prefix:                                Installation Directory Variables.
                                                              (line  72)
* Prefix for install:                    Default Prefix.      (line   6)
* preprocessor arithmetic:               Preprocessor Arithmetic.
                                                              (line   6)
* Preprocessors:                         Compilers and Preprocessors.
                                                              (line   6)
* prerequisite directories and VPATH:    Tru64 Directory Magic.
                                                              (line   6)
* Prerequisite macros:                   Prerequisite Macros. (line   6)
* Program names, transforming:           Transforming Names.  (line   6)
* Programs, checking:                    Alternative Programs.
                                                              (line   6)
* psdir:                                 Installation Directory Variables.
                                                              (line  77)
* QNX 4.25:                              Systemology.         (line  37)
* quadrigraphs:                          Quadrigraphs.        (line   6)
* quotation <1>:                         M4 Quotation.        (line   6)
* quotation:                             Autoconf Language.   (line   6)
* Remaking automatically:                Automatic Remaking.  (line   6)
* Revision:                              Notices.             (line  18)
* Rule, Single Suffix Inference:         Single Suffix Rules. (line   6)
* sbindir:                               Installation Directory Variables.
                                                              (line  80)
* Separated Dependencies:                Single Suffix Rules. (line   9)
* set -b:                                Limitations of Builtins.
                                                              (line 689)
* set -e:                                Limitations of Builtins.
                                                              (line 605)
* set -m:                                Limitations of Builtins.
                                                              (line 689)
* set -n:                                Limitations of Builtins.
                                                              (line 713)
* Set manipulation:                      Set manipulation Macros.
                                                              (line   6)
* sharedstatedir:                        Installation Directory Variables.
                                                              (line  84)
* SHELL and make:                        The Make Macro SHELL.
                                                              (line   6)
* Shell assignments:                     Assignments.         (line   6)
* Shell builtins:                        Limitations of Builtins.
                                                              (line   6)
* Shell file descriptors:                File Descriptors.    (line   6)
* Shell Functions:                       Shell Functions.     (line   6)
* Shell here-documents:                  Here-Documents.      (line   6)
* shell invocation:                      Invoking the Shell.  (line   6)
* Shell parentheses:                     Parentheses.         (line   6)
* Shell pattern matching:                Shell Pattern Matching.
                                                              (line   6)
* Shell slashes:                         Slashes.             (line   6)
* Shell substitutions:                   Shell Substitutions. (line   6)
* Shell variables:                       Special Shell Variables.
                                                              (line   6)
* Shellology:                            Shellology.          (line   6)
* Signal handling in the shell:          Signal Handling.     (line   6)
* Signals, shells and:                   Signal Handling.     (line   6)
* signed integer overflow <1>:           Signed Overflow Advice.
                                                              (line   6)
* signed integer overflow <2>:           Signed Overflow Examples.
                                                              (line   6)
* signed integer overflow <3>:           Integer Overflow Basics.
                                                              (line   6)
* signed integer overflow:               Integer Overflow.    (line   6)
* Single Suffix Inference Rule:          Single Suffix Rules. (line   6)
* Site defaults:                         Site Defaults.       (line   6)
* Site details:                          Site Details.        (line   6)
* Special shell variables:               Special Shell Variables.
                                                              (line   6)
* srcdir <1>:                            Preset Output Variables.
                                                              (line 195)
* srcdir:                                Configuration Actions.
                                                              (line  71)
* standard input:                        File Descriptor Macros.
                                                              (line   6)
* Standard symbols:                      Standard Symbols.    (line   6)
* Structure, checking:                   Structures.          (line   6)
* Subdirectory configure:                Subdirectories.      (line   6)
* Substitutions in makefiles:            Makefile Substitutions.
                                                              (line   6)
* Symbolic links:                        Limitations of Usual Tools.
                                                              (line 543)
* sysconfdir:                            Installation Directory Variables.
                                                              (line  88)
* System type <1>:                       Canonicalizing.      (line   6)
* System type:                           Specifying Target Triplets.
                                                              (line   6)
* Systemology:                           Systemology.         (line   6)
* Target triplet:                        Specifying Target Triplets.
                                                              (line   6)
* termios Posix headers:                 System Services.     (line  75)
* test group:                            testsuite Scripts.   (line  12)
* testsuite <1>:                         testsuite Invocation.
                                                              (line   6)
* testsuite:                             testsuite Scripts.   (line   6)
* timestamp resolution <1>:              Timestamps and Make. (line   6)
* timestamp resolution:                  Limitations of Usual Tools.
                                                              (line 226)
* tmp:                                   Configuration Actions.
                                                              (line  89)
* top_build_prefix:                      Preset Output Variables.
                                                              (line 184)
* top_builddir:                          Preset Output Variables.
                                                              (line 180)
* top_srcdir:                            Preset Output Variables.
                                                              (line 202)
* Transforming program names:            Transforming Names.  (line   6)
* Tru64:                                 Systemology.         (line  44)
* Types:                                 Types.               (line   6)
* unbalanced parentheses, managing:      Balancing Parentheses.
                                                              (line   6)
* undefined macro:                       New Macros.          (line   6)
* Unix version 7:                        Systemology.         (line  49)
* Unordered set manipulation:            Set manipulation Macros.
                                                              (line   6)
* Upgrading autoconf <1>:                Autoconf 2.13.       (line   6)
* Upgrading autoconf:                    Autoconf 1.          (line   6)
* V7:                                    Systemology.         (line  49)
* variable name indirection:             Polymorphic Variables.
                                                              (line   6)
* variable names, composing:             Polymorphic Variables.
                                                              (line 131)
* Variable, Precious:                    Setting Output Variables.
                                                              (line  65)
* variables and VPATH:                   Variables listed in VPATH.
                                                              (line   6)
* Version:                               Versioning.          (line  11)
* version, Autoconf:                     Versioning.          (line   6)
* volatile objects:                      Volatile Objects.    (line   6)
* VPATH:                                 VPATH and Make.      (line   6)
* VPATH and automatic rule rewriting:    Automatic Rule Rewriting.
                                                              (line   6)
* VPATH and double-colon rules:          VPATH and Double-colon.
                                                              (line   6)
* VPATH and prerequisite directories:    Tru64 Directory Magic.
                                                              (line   6)
* VPATH and variables:                   Variables listed in VPATH.
                                                              (line   6)
* VPATH, explicit rules, and $<:         $< in Explicit Rules.
                                                              (line   6)
* VPATH, resolving target pathnames:     Make Target Lookup.  (line   6)
* whitespace in command-line macros:     Command-line Macros and whitespace.
                                                              (line   6)
* whitespace in Makefile macros:         Trailing whitespace in Make Macros.
                                                              (line   6)
* wraparound arithmetic <1>:             Signed Overflow Advice.
                                                              (line   6)
* wraparound arithmetic <2>:             Signed Overflow Examples.
                                                              (line   6)
* wraparound arithmetic <3>:             Integer Overflow Basics.
                                                              (line   6)
* wraparound arithmetic:                 Integer Overflow.    (line   6)
* X Window System:                       System Services.     (line  10)
* Zsh:                                   Shellology.          (line  87)


vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
