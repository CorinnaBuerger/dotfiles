     functions will not work when using the HP assembler.  There simply
     is no way for GCC to specify what registers hold arguments for
     static functions when using the HP assembler.  GAS for the PA does
     not have this problem.

   * In extremely rare cases involving some very large functions you may
     receive errors from the HP linker complaining about an out of
     bounds unconditional branch offset.  This used to occur more often
     in previous versions of GCC, but is now exceptionally rare.  If you
     should run into it, you can work around by making your function
     smaller.

   * GCC compiled code sometimes emits warnings from the HP-UX assembler
     of the form:

          (warning) Use of GR3 when
            frame >= 8192 may cause conflict.

     These warnings are harmless and can be safely ignored.

   * In extremely rare cases involving some very large functions you may
     receive errors from the AIX Assembler complaining about a
     displacement that is too large.  If you should run into it, you can
     work around by making your function smaller.

   * The 'libstdc++.a' library in GCC relies on the SVR4 dynamic linker
     semantics which merges global symbols between libraries and
     applications, especially necessary for C++ streams functionality.
     This is not the default behavior of AIX shared libraries and
     dynamic linking.  'libstdc++.a' is built on AIX with
     "runtime-linking" enabled so that symbol merging can occur.  To
     utilize this feature, the application linked with 'libstdc++.a'
     must include the '-Wl,-brtl' flag on the link line.  G++ cannot
     impose this because this option may interfere with the semantics of
     the user program and users may not always use 'g++' to link his or
     her application.  Applications are not required to use the
     '-Wl,-brtl' flag on the link line--the rest of the 'libstdc++.a'
     library which is not dependent on the symbol merging semantics will
     continue to function correctly.

   * An application can interpose its own definition of functions for
     functions invoked by 'libstdc++.a' with "runtime-linking" enabled
     on AIX.  To accomplish this the application must be linked with
     "runtime-linking" option and the functions explicitly must be
     exported by the application ('-Wl,-brtl,-bE:exportfile').

   * AIX on the RS/6000 provides support (NLS) for environments outside
     of the United States.  Compilers and assemblers use NLS to support
     locale-specific representations of various objects including
     floating-point numbers ('.' vs ',' for separating decimal
     fractions).  There have been problems reported where the library
     linked with GCC does not produce the same floating-point formats
     that the assembler accepts.  If you have this problem, set the
     'LANG' environment variable to 'C' or 'En_US'.

   * Even if you specify '-fdollars-in-identifiers', you cannot
     successfully use '$' in identifiers on the RS/6000 due to a
     restriction in the IBM assembler.  GAS supports these identifiers.

==============================================================================
File: gcc.info,  Node: |Incompatibilities|,  Next: |Fixed_Headers|,  Prev: |Interoperation|,  Up: |Trouble|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Incompatibilities*

13.3 Incompatibilities of GCC
=====------------------------

There are several noteworthy incompatibilities between GNU C and K&R
(non-ISO) versions of C.

   * GCC normally makes string constants read-only.  If several
     identical-looking string constants are used, GCC stores only one
     copy of the string.

     One consequence is that you cannot call 'mktemp' with a string
     constant argument.  The function 'mktemp' always alters the string
     its argument points to.

     Another consequence is that 'sscanf' does not work on some very old
     systems when passed a string constant as its format control string
     or input.  This is because 'sscanf' incorrectly tries to write into
     the string constant.  Likewise 'fscanf' and 'scanf'.

     The solution to these problems is to change the program to use
     'char'-array variables with initialization strings for these
     purposes instead of string constants.

   * '-2147483648' is positive.

     This is because 2147483648 cannot fit in the type 'int', so
     (following the ISO C rules) its data type is 'unsigned long int'.
     Negating this value yields 2147483648 again.

   * GCC does not substitute macro arguments when they appear inside of
     string constants.  For example, the following macro in GCC

          #define foo(a) "a"

     will produce output '"a"' regardless of what the argument A is.

   * When you use 'setjmp' and 'longjmp', the only automatic variables
     guaranteed to remain valid are those declared 'volatile'.  This is
     a consequence of automatic register allocation.  Consider this
     function:

          jmp_buf j;

          foo ()
          {
            int a, b;

            a = fun1 ();
            if (setjmp (j))
              return a;

            a = fun2 ();
            /* 'longjmp (j)' may occur in 'fun3'. */
            return a + fun3 ();
          }

     Here 'a' may or may not be restored to its first value when the
     'longjmp' occurs.  If 'a' is allocated in a register, then its
     first value is restored; otherwise, it keeps the last value stored
     in it.

     If you use the '-W' option with the '-O' option, you will get a
     warning when GCC thinks such a problem might be possible.

   * Programs that use preprocessing directives in the middle of macro
     arguments do not work with GCC.  For example, a program like this
     will not work:

          foobar (
          #define luser
                  hack)

     ISO C does not permit such a construct.

   * K&R compilers allow comments to cross over an inclusion boundary
     (i.e. started in an include file and ended in the including file).

   * Declarations of external variables and functions within a block
     apply only to the block containing the declaration.  In other
     words, they have the same scope as any other declaration in the
     same place.

     In some other C compilers, an 'extern' declaration affects all the
     rest of the file even if it happens within a block.

   * In traditional C, you can combine 'long', etc., with a typedef
     name, as shown here:

          typedef int foo;
          typedef long foo bar;

     In ISO C, this is not allowed: 'long' and other type modifiers
     require an explicit 'int'.

   * PCC allows typedef names to be used as function parameters.

   * Traditional C allows the following erroneous pair of declarations
     to appear together in a given scope:

          typedef int foo;
          typedef foo foo;

   * GCC treats all characters of identifiers as significant.  According
     to K&R-1 (2.2), "No more than the first eight characters are
     significant, although more may be used.".  Also according to K&R-1
     (2.2), "An identifier is a sequence of letters and digits; the
     first character must be a letter.  The underscore _ counts as a
     letter.", but GCC also allows dollar signs in identifiers.

   * PCC allows whitespace in the middle of compound assignment
     operators such as '+='.  GCC, following the ISO standard, does not
     allow this.

   * GCC complains about unterminated character constants inside of
     preprocessing conditionals that fail.  Some programs have English
     comments enclosed in conditionals that are guaranteed to fail; if
     these comments contain apostrophes, GCC will probably report an
     error.  For example, this code would produce an error:

          #if 0
          You can't expect this to work.
          #endif

     The best solution to such a problem is to put the text into an
     actual C comment delimited by '/.../'.

   * Many user programs contain the declaration 'long time ();'.  In the
     past, the system header files on many systems did not actually
     declare 'time', so it did not matter what type your program
     declared it to return.  But in systems with ISO C headers, 'time'
     is declared to return 'time_t', and if that is not the same as
     'long', then 'long time ();' is erroneous.

     The solution is to change your program to use appropriate system
     headers ('<time.h>' on systems with ISO C headers) and not to
     declare 'time' if the system header files declare it, or failing
     that to use 'time_t' as the return type of 'time'.

   * When compiling functions that return 'float', PCC converts it to a
     double.  GCC actually returns a 'float'.  If you are concerned with
     PCC compatibility, you should declare your functions to return
     'double'; you might as well say what you mean.

   * When compiling functions that return structures or unions, GCC
     output code normally uses a method different from that used on most
     versions of Unix.  As a result, code compiled with GCC cannot call
     a structure-returning function compiled with PCC, and vice versa.

     The method used by GCC is as follows: a structure or union which is
     1, 2, 4 or 8 bytes long is returned like a scalar.  A structure or
     union with any other size is stored into an address supplied by the
     caller (usually in a special, fixed register, but on some machines
     it is passed on the stack).  The target hook
     'TARGET_STRUCT_VALUE_RTX' tells GCC where to pass this address.

     By contrast, PCC on most target machines returns structures and
     unions of any size by copying the data into an area of static
     storage, and then returning the address of that storage as if it
     were a pointer value.  The caller must copy the data from that
     memory area to the place where the value is wanted.  GCC does not
     use this method because it is slower and nonreentrant.

     On some newer machines, PCC uses a reentrant convention for all
     structure and union returning.  GCC on most of these machines uses
     a compatible convention when returning structures and unions in
     memory, but still returns small structures and unions in registers.

     You can tell GCC to use a compatible convention for all structure
     and union returning with the option '-fpcc-struct-return'.

   * GCC complains about program fragments such as '0x74ae-0x4000' which
     appear to be two hexadecimal constants separated by the minus
     operator.  Actually, this string is a single "preprocessing token".
     Each such token must correspond to one token in C.  Since this does
     not, GCC prints an error message.  Although it may appear obvious
     that what is meant is an operator and two values, the ISO C
     standard specifically requires that this be treated as erroneous.

     A "preprocessing token" is a "preprocessing number" if it begins
     with a digit and is followed by letters, underscores, digits,
     periods and 'e+', 'e-', 'E+', 'E-', 'p+', 'p-', 'P+', or 'P-'
     character sequences.  (In strict C90 mode, the sequences 'p+',
     'p-', 'P+' and 'P-' cannot appear in preprocessing numbers.)

     To make the above program fragment valid, place whitespace in front
     of the minus sign.  This whitespace will end the preprocessing
     number.

==============================================================================
File: gcc.info,  Node: |Fixed_Headers|,  Next: |Standard_Libraries|,  Prev: |Incompatibilities|,  Up: |Trouble|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Fixed_Headers*

13.4 Fixed Header Files
=====------------------

GCC needs to install corrected versions of some system header files.
This is because most target systems have some header files that won't
work with GCC unless they are changed.  Some have bugs, some are
incompatible with ISO C, and some depend on special features of other
compilers.

 Installing GCC automatically creates and installs the fixed header
files, by running a program called 'fixincludes'.  Normally, you don't
need to pay attention to this.  But there are cases where it doesn't do
the right thing automatically.

   * If you update the system's header files, such as by installing a
     new system version, the fixed header files of GCC are not
     automatically updated.  They can be updated using the 'mkheaders'
     script installed in 'LIBEXECDIR/gcc/TARGET/VERSION/install-tools/'.

   * On some systems, header file directories contain machine-specific
     symbolic links in certain places.  This makes it possible to share
     most of the header files among hosts running the same version of
     the system on different machine models.

     The programs that fix the header files do not understand this
     special way of using symbolic links; therefore, the directory of
     fixed header files is good only for the machine model used to build
     it.

     It is possible to make separate sets of fixed header files for the
     different machine models, and arrange a structure of symbolic links
     so as to use the proper set, but you'll have to do this by hand.

==============================================================================
File: gcc.info,  Node: |Standard_Libraries|,  Next: |Disappointments|,  Prev: |Fixed_Headers|,  Up: |Trouble|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *Standard_Libraries*

13.5 Standard Libraries
=====------------------

GCC by itself attempts to be a conforming freestanding implementation.
*Note Language Standards Supported by GCC: Standards, for details of
what this means.  Beyond the library facilities required of such an
implementation, the rest of the C library is supplied by the vendor of
the operating system.  If that C library doesn't conform to the C
standards, then your programs might get warnings (especially when using
'-Wall') that you don't expect.

 For example, the 'sprintf' function on SunOS 4.1.3 returns 'char *'
while the C standard says that 'sprintf' returns an 'int'.  The
'fixincludes' program could make the prototype for this function match
the Standard, but that would be wrong, since the function will still
return 'char *'.

 If you need a Standard compliant library, then you need to find one, as
GCC does not provide one.  The GNU C library (called 'glibc') provides
ISO C, POSIX, BSD, SystemV and X/Open compatibility for GNU/Linux and
HURD-based GNU systems; no recent version of it supports other systems,
though some very old versions did.  Version 2.2 of the GNU C library
includes nearly complete C99 support.  You could also ask your operating
system vendor if newer libraries are available.

==============================================================================
File: gcc.info,  Node: |Disappointments|,  Next: |C++_Misunderstandings|,  Prev: |Standard_Libraries|,  Up: |Trouble|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *Disappointments*

13.6 Disappointments and Misunderstandings
=====-------------------------------------

These problems are perhaps regrettable, but we don't know any practical
way around them.

   * Certain local variables aren't recognized by debuggers when you
     compile with optimization.

     This occurs because sometimes GCC optimizes the variable out of
     existence.  There is no way to tell the debugger how to compute the
     value such a variable "would have had", and it is not clear that
     would be desirable anyway.  So GCC simply does not mention the
     eliminated variable when it writes debugging information.

     You have to expect a certain amount of disagreement between the
     executable and your source code, when you use optimization.

   * Users often think it is a bug when GCC reports an error for code
     like this:

          int foo (struct mumble *);

          struct mumble { ... };

          int foo (struct mumble *x)
          { ... }

     This code really is erroneous, because the scope of 'struct mumble'
     in the prototype is limited to the argument list containing it.  It
     does not refer to the 'struct mumble' defined with file scope
     immediately below--they are two unrelated types with similar names
     in different scopes.

     But in the definition of 'foo', the file-scope type is used because
     that is available to be inherited.  Thus, the definition and the
     prototype do not match, and you get an error.

     This behavior may seem silly, but it's what the ISO standard
     specifies.  It is easy enough for you to make your code work by
     moving the definition of 'struct mumble' above the prototype.  It's
     not worth being incompatible with ISO C just to avoid an error for
     the example shown above.

   * Accesses to bit-fields even in volatile objects works by accessing
     larger objects, such as a byte or a word.  You cannot rely on what
     size of object is accessed in order to read or write the bit-field;
     it may even vary for a given bit-field according to the precise
     usage.

     If you care about controlling the amount of memory that is
     accessed, use volatile but do not use bit-fields.

   * GCC comes with shell scripts to fix certain known problems in
     system header files.  They install corrected copies of various
     header files in a special directory where only GCC will normally
     look for them.  The scripts adapt to various systems by searching
     all the system header files for the problem cases that we know
     about.

     If new system header files are installed, nothing automatically
     arranges to update the corrected header files.  They can be updated
     using the 'mkheaders' script installed in
     'LIBEXECDIR/gcc/TARGET/VERSION/install-tools/'.

   * On 68000 and x86 systems, for instance, you can get paradoxical
     results if you test the precise values of floating point numbers.
     For example, you can find that a floating point value which is not
     a NaN is not equal to itself.  This results from the fact that the
     floating point registers hold a few more bits of precision than fit
     in a 'double' in memory.  Compiled code moves values between memory
     and floating point registers at its convenience, and moving them
     into memory truncates them.

     You can partially avoid this problem by using the '-ffloat-store'
     option (*note Optimize Options::).

   * On AIX and other platforms without weak symbol support, templates
     need to be instantiated explicitly and symbols for static members
     of templates will not be generated.

   * On AIX, GCC scans object files and library archives for static
     constructors and destructors when linking an application before the
     linker prunes unreferenced symbols.  This is necessary to prevent
     the AIX linker from mistakenly assuming that static constructor or
     destructor are unused and removing them before the scanning can
     occur.  All static constructors and destructors found will be
     referenced even though the modules in which they occur may not be
     used by the program.  This may lead to both increased executable
     size and unexpected symbol references.

==============================================================================
File: gcc.info,  Node: |C++_Misunderstandings|,  Next: |Non_bugs|,  Prev: |Disappointments|,  Up: |Trouble|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *C++_Misunderstandings*

13.7 Common Misunderstandings with GNU C++
=====-------------------------------------

C++ is a complex language and an evolving one, and its standard
definition (the ISO C++ standard) was only recently completed.  As a
result, your C++ compiler may occasionally surprise you, even when its
behavior is correct.  This section discusses some areas that frequently
give rise to questions of this sort.

MENU

* |Static_Definitions|::  Static member declarations are not definitions
* |Name_lookup|::         Name lookup, templates, and accessing members of base classes
* |Temporaries|::         Temporaries may vanish before you expect
* |Copy_Assignment|::     Copy Assignment operators copy virtual bases twice

==============================================================================
File: gcc.info,  Node: |Static_Definitions|,  Next: |Name_lookup|,  Up: |C++_Misunderstandings|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *Static_Definitions*

13.7.1 Declare _and_ Define Static Members
------------------------------------------

When a class has static data members, it is not enough to _declare_ the
static member; you must also _define_ it.  For example:

     class Foo
     {
       ...
       void method();
       static int bar;
     };

 This declaration only establishes that the class 'Foo' has an 'int'
named 'Foo::bar', and a member function named 'Foo::method'.  But you
still need to define _both_ 'method' and 'bar' elsewhere.  According to
the ISO standard, you must supply an initializer in one (and only one)
source file, such as:

     int Foo::bar = 0;

 Other C++ compilers may not correctly implement the standard behavior.
As a result, when you switch to 'g++' from one of these compilers, you
may discover that a program that appeared to work correctly in fact does
not conform to the standard: 'g++' reports as undefined symbols any
static data members that lack definitions.

==============================================================================
File: gcc.info,  Node: |Name_lookup|,  Next: |Temporaries|,  Prev: |Static_Definitions|,  Up: |C++_Misunderstandings|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Name_lookup*

13.7.2 Name Lookup, Templates, and Accessing Members of Base Classes
--------------------------------------------------------------------

The C++ standard prescribes that all names that are not dependent on
template parameters are bound to their present definitions when parsing
a template function or class.(1)  Only names that are dependent are
looked up at the point of instantiation.  For example, consider

       void foo(double);

       struct A {
         template <typename T>
         void f () {
           foo (1);        // 1
           int i = N;      // 2
           T t;
           t.bar();        // 3
           foo (t);        // 4
         }

         static const int N;
       };

 Here, the names 'foo' and 'N' appear in a context that does not depend
on the type of 'T'.  The compiler will thus require that they are
defined in the context of use in the template, not only before the point
of instantiation, and will here use '::foo(double)' and 'A::N',
respectively.  In particular, it will convert the integer value to a
'double' when passing it to '::foo(double)'.

 Conversely, 'bar' and the call to 'foo' in the fourth marked line are
used in contexts that do depend on the type of 'T', so they are only
looked up at the point of instantiation, and you can provide
declarations for them after declaring the template, but before
instantiating it.  In particular, if you instantiate 'A::f<int>', the
last line will call an overloaded '::foo(int)' if one was provided, even
if after the declaration of 'struct A'.

 This distinction between lookup of dependent and non-dependent names is
called two-stage (or dependent) name lookup.  G++ implements it since
version 3.4.

 Two-stage name lookup sometimes leads to situations with behavior
different from non-template codes.  The most common is probably this:

       template <typename T> struct Base {
         int i;
       };

       template <typename T> struct Derived : public Base<T> {
         int get_i() { return i; }
       };

 In 'get_i()', 'i' is not used in a dependent context, so the compiler
will look for a name declared at the enclosing namespace scope (which is
the global scope here).  It will not look into the base class, since
that is dependent and you may declare specializations of 'Base' even
after declaring 'Derived', so the compiler cannot really know what 'i'
would refer to.  If there is no global variable 'i', then you will get
an error message.

 In order to make it clear that you want the member of the base class,
you need to defer lookup until instantiation time, at which the base
class is known.  For this, you need to access 'i' in a dependent
context, by either using 'this->i' (remember that 'this' is of type
'Derived<T>*', so is obviously dependent), or using 'Base<T>::i'.
Alternatively, 'Base<T>::i' might be brought into scope by a
'using'-declaration.

 Another, similar example involves calling member functions of a base
class:

       template <typename T> struct Base {
           int f();
       };

       template <typename T> struct Derived : Base<T> {
           int g() { return f(); };
       };

 Again, the call to 'f()' is not dependent on template arguments (there
are no arguments that depend on the type 'T', and it is also not
otherwise specified that the call should be in a dependent context).
Thus a global declaration of such a function must be available, since
the one in the base class is not visible until instantiation time.  The
compiler will consequently produce the following error message:

       x.cc: In member function `int Derived<T>::g()':
       x.cc:6: error: there are no arguments to `f' that depend on a template
          parameter, so a declaration of `f' must be available
       x.cc:6: error: (if you use `-fpermissive', G++ will accept your code, but
          allowing the use of an undeclared name is deprecated)

 To make the code valid either use 'this->f()', or 'Base<T>::f()'.
Using the '-fpermissive' flag will also let the compiler accept the
code, by marking all function calls for which no declaration is visible
at the time of definition of the template for later lookup at
instantiation time, as if it were a dependent call.  We do not recommend
using '-fpermissive' to work around invalid code, and it will also only
catch cases where functions in base classes are called, not where
variables in base classes are used (as in the example above).

 Note that some compilers (including G++ versions prior to 3.4) get
these examples wrong and accept above code without an error.  Those
compilers do not implement two-stage name lookup correctly.

   ---------- Footnotes ----------

   (1) The C++ standard just uses the term "dependent" for names that
depend on the type or value of template parameters.  This shorter term
will also be used in the rest of this section.

==============================================================================
File: gcc.info,  Node: |Temporaries|,  Next: |Copy_Assignment|,  Prev: |Name_lookup|,  Up: |C++_Misunderstandings|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Temporaries*

13.7.3 Temporaries May Vanish Before You Expect
-----------------------------------------------

It is dangerous to use pointers or references to _portions_ of a
temporary object.  The compiler may very well delete the object before
you expect it to, leaving a pointer to garbage.  The most common place
where this problem crops up is in classes like string classes,
especially ones that define a conversion function to type 'char *' or
'const char *'--which is one reason why the standard 'string' class
requires you to call the 'c_str' member function.  However, any class
that returns a pointer to some internal structure is potentially subject
to this problem.

 For example, a program may use a function 'strfunc' that returns
'string' objects, and another function 'charfunc' that operates on
pointers to 'char':

     string strfunc ();
     void charfunc (const char *);

     void
     f ()
     {
       const char *p = strfunc().c_str();
       ...
       charfunc (p);
       ...
       charfunc (p);
     }

In this situation, it may seem reasonable to save a pointer to the C
string returned by the 'c_str' member function and use that rather than
call 'c_str' repeatedly.  However, the temporary string created by the
call to 'strfunc' is destroyed after 'p' is initialized, at which point
'p' is left pointing to freed memory.

 Code like this may run successfully under some other compilers,
particularly obsolete cfront-based compilers that delete temporaries
along with normal local variables.  However, the GNU C++ behavior is
standard-conforming, so if your program depends on late destruction of
temporaries it is not portable.

 The safe way to write such code is to give the temporary a name, which
forces it to remain until the end of the scope of the name.  For
example:

     const string& tmp = strfunc ();
     charfunc (tmp.c_str ());

==============================================================================
File: gcc.info,  Node: |Copy_Assignment|,  Prev: |Temporaries|,  Up: |C++_Misunderstandings|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *Copy_Assignment*

13.7.4 Implicit Copy-Assignment for Virtual Bases
-------------------------------------------------

When a base class is virtual, only one subobject of the base class
belongs to each full object.  Also, the constructors and destructors are
invoked only once, and called from the most-derived class.  However,
such objects behave unspecified when being assigned.  For example:

     struct Base{
       char *name;
       Base(char *n) : name(strdup(n)){}
       Base& operator= (const Base& other){
        free (name);
        name = strdup (other.name);
       }
     };

     struct A:virtual Base{
       int val;
       A():Base("A"){}
     };

     struct B:virtual Base{
       int bval;
       B():Base("B"){}
     };

     struct Derived:public A, public B{
       Derived():Base("Derived"){}
     };

     void func(Derived &d1, Derived &d2)
     {
       d1 = d2;
     }

 The C++ standard specifies that 'Base::Base' is only called once when
constructing or copy-constructing a Derived object.  It is unspecified
whether 'Base::operator=' is called more than once when the implicit
copy-assignment for Derived objects is invoked (as it is inside 'func'
in the example).

 G++ implements the "intuitive" algorithm for copy-assignment: assign
all direct bases, then assign all members.  In that algorithm, the
virtual base subobject can be encountered more than once.  In the
example, copying proceeds in the following order: 'val', 'name' (via
'strdup'), 'bval', and 'name' again.

 If application code relies on copy-assignment, a user-defined
copy-assignment operator removes any uncertainties.  With such an
operator, the application can define whether and how the virtual base
subobject is assigned.

==============================================================================
File: gcc.info,  Node: |Non_bugs|,  Next: |Warnings_and_Errors|,  Prev: |C++_Misunderstandings|,  Up: |Trouble|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *Non_bugs*

13.8 Certain Changes We Don't Want to Make
=====-------------------------------------

This section lists changes that people frequently request, but which we
do not make because we think GCC is better without them.

   * Checking the number and type of arguments to a function which has
     an old-fashioned definition and no prototype.

     Such a feature would work only occasionally--only for calls that
     appear in the same file as the called function, following the
     definition.  The only way to check all calls reliably is to add a
     prototype for the function.  But adding a prototype eliminates the
     motivation for this feature.  So the feature is not worthwhile.

   * Warning about using an expression whose type is signed as a shift
     count.

     Shift count operands are probably signed more often than unsigned.
     Warning about this would cause far more annoyance than good.

   * Warning about assigning a signed value to an unsigned variable.

     Such assignments must be very common; warning about them would
     cause more annoyance than good.

   * Warning when a non-void function value is ignored.

     C contains many standard functions that return a value that most
     programs choose to ignore.  One obvious example is 'printf'.
     Warning about this practice only leads the defensive programmer to
     clutter programs with dozens of casts to 'void'.  Such casts are
     required so frequently that they become visual noise.  Writing
     those casts becomes so automatic that they no longer convey useful
     information about the intentions of the programmer.  For functions
     where the return value should never be ignored, use the
     'warn_unused_result' function attribute (*note Function
     Attributes::).

   * Making '-fshort-enums' the default.

     This would cause storage layout to be incompatible with most other
     C compilers.  And it doesn't seem very important, given that you
     can get the same result in other ways.  The case where it matters
     most is when the enumeration-valued object is inside a structure,
     and in that case you can specify a field width explicitly.

   * Making bit-fields unsigned by default on particular machines where
     "the ABI standard" says to do so.

     The ISO C standard leaves it up to the implementation whether a
     bit-field declared plain 'int' is signed or not.  This in effect
     creates two alternative dialects of C.

     The GNU C compiler supports both dialects; you can specify the
     signed dialect with '-fsigned-bitfields' and the unsigned dialect
     with '-funsigned-bitfields'.  However, this leaves open the
     question of which dialect to use by default.

     Currently, the preferred dialect makes plain bit-fields signed,
     because this is simplest.  Since 'int' is the same as 'signed int'
     in every other context, it is cleanest for them to be the same in
     bit-fields as well.

     Some computer manufacturers have published Application Binary
     Interface standards which specify that plain bit-fields should be
     unsigned.  It is a mistake, however, to say anything about this
     issue in an ABI.  This is because the handling of plain bit-fields
     distinguishes two dialects of C.  Both dialects are meaningful on
     every type of machine.  Whether a particular object file was
     compiled using signed bit-fields or unsigned is of no concern to
     other object files, even if they access the same bit-fields in the
     same data structures.

     A given program is written in one or the other of these two
     dialects.  The program stands a chance to work on most any machine
     if it is compiled with the proper dialect.  It is unlikely to work
     at all if compiled with the wrong dialect.

     Many users appreciate the GNU C compiler because it provides an
     environment that is uniform across machines.  These users would be
     inconvenienced if the compiler treated plain bit-fields differently
     on certain machines.

     Occasionally users write programs intended only for a particular
     machine type.  On these occasions, the users would benefit if the
     GNU C compiler were to support by default the same dialect as the
     other compilers on that machine.  But such applications are rare.
     And users writing a program to run on more than one type of machine
     cannot possibly benefit from this kind of compatibility.

     This is why GCC does and will treat plain bit-fields in the same
     fashion on all types of machines (by default).

     There are some arguments for making bit-fields unsigned by default
     on all machines.  If, for example, this becomes a universal de
     facto standard, it would make sense for GCC to go along with it.
     This is something to be considered in the future.

     (Of course, users strongly concerned about portability should
     indicate explicitly in each bit-field whether it is signed or not.
     In this way, they write programs which have the same meaning in
     both C dialects.)

   * Undefining '__STDC__' when '-ansi' is not used.

     Currently, GCC defines '__STDC__' unconditionally.  This provides
     good results in practice.

     Programmers normally use conditionals on '__STDC__' to ask whether
     it is safe to use certain features of ISO C, such as function
     prototypes or ISO token concatenation.  Since plain 'gcc' supports
     all the features of ISO C, the correct answer to these questions is
     "yes".

     Some users try to use '__STDC__' to check for the availability of
     certain library facilities.  This is actually incorrect usage in an
     ISO C program, because the ISO C standard says that a conforming
     freestanding implementation should define '__STDC__' even though it
     does not have the library facilities.  'gcc -ansi -pedantic' is a
     conforming freestanding implementation, and it is therefore
     required to define '__STDC__', even though it does not come with an
     ISO C library.

     Sometimes people say that defining '__STDC__' in a compiler that
     does not completely conform to the ISO C standard somehow violates
     the standard.  This is illogical.  The standard is a standard for
     compilers that claim to support ISO C, such as 'gcc -ansi'--not for
     other compilers such as plain 'gcc'.  Whatever the ISO C standard
     says is relevant to the design of plain 'gcc' without '-ansi' only
     for pragmatic reasons, not as a requirement.

     GCC normally defines '__STDC__' to be 1, and in addition defines
     '__STRICT_ANSI__' if you specify the '-ansi' option, or a '-std'
     option for strict conformance to some version of ISO C.  On some
     hosts, system include files use a different convention, where
     '__STDC__' is normally 0, but is 1 if the user specifies strict
     conformance to the C Standard.  GCC follows the host convention
     when processing system include files, but when processing user
     files it follows the usual GNU C convention.

   * Undefining '__STDC__' in C++.

     Programs written to compile with C++-to-C translators get the value
     of '__STDC__' that goes with the C compiler that is subsequently
     used.  These programs must test '__STDC__' to determine what kind
     of C preprocessor that compiler uses: whether they should
     concatenate tokens in the ISO C fashion or in the traditional
     fashion.

     These programs work properly with GNU C++ if '__STDC__' is defined.
     They would not work otherwise.

     In addition, many header files are written to provide prototypes in
     ISO C but not in traditional C.  Many of these header files can
     work without change in C++ provided '__STDC__' is defined.  If
     '__STDC__' is not defined, they will all fail, and will all need to
     be changed to test explicitly for C++ as well.

   * Deleting "empty" loops.

     Historically, GCC has not deleted "empty" loops under the
     assumption that the most likely reason you would put one in a
     program is to have a delay, so deleting them will not make real
     programs run any faster.

     However, the rationale here is that optimization of a nonempty loop
     cannot produce an empty one.  This held for carefully written C
     compiled with less powerful optimizers but is not always the case
     for carefully written C++ or with more powerful optimizers.  Thus
     GCC will remove operations from loops whenever it can determine
     those operations are not externally visible (apart from the time
     taken to execute them, of course).  In case the loop can be proved
     to be finite, GCC will also remove the loop itself.

     Be aware of this when performing timing tests, for instance the
     following loop can be completely removed, provided
     'some_expression' can provably not change any global state.

          {
             int sum = 0;
             int ix;

             for (ix = 0; ix != 10000; ix++)
                sum += some_expression;
          }

     Even though 'sum' is accumulated in the loop, no use is made of
     that summation, so the accumulation can be removed.

   * Making side effects happen in the same order as in some other
     compiler.

     It is never safe to depend on the order of evaluation of side
     effects.  For example, a function call like this may very well
     behave differently from one compiler to another:

          void func (int, int);

          int i = 2;
          func (i++, i++);

     There is no guarantee (in either the C or the C++ standard language
     definitions) that the increments will be evaluated in any
     particular order.  Either increment might happen first.  'func'
     might get the arguments '2, 3', or it might get '3, 2', or even '2,
     2'.

   * Making certain warnings into errors by default.

     Some ISO C testsuites report failure when the compiler does not
     produce an error message for a certain program.

     ISO C requires a "diagnostic" message for certain kinds of invalid
     programs, but a warning is defined by GCC to count as a diagnostic.
     If GCC produces a warning but not an error, that is correct ISO C
     support.  If testsuites call this "failure", they should be run
     with the GCC option '-pedantic-errors', which will turn these
     warnings into errors.

==============================================================================
File: gcc.info,  Node: |Warnings_and_Errors|,  Prev: |Non_bugs|,  Up: |Trouble|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *Warnings_and_Errors*

13.9 Warning Messages and Error Messages
=====-----------------------------------

The GNU compiler can produce two kinds of diagnostics: errors and
warnings.  Each kind has a different purpose:

     "Errors" report problems that make it impossible to compile your
     program.  GCC reports errors with the source file name and line
     number where the problem is apparent.

     "Warnings" report other unusual conditions in your code that _may_
     indicate a problem, although compilation can (and does) proceed.
     Warning messages also report the source file name and line number,
     but include the text 'warning:' to distinguish them from error
     messages.

 Warnings may indicate danger points where you should check to make sure
that your program really does what you intend; or the use of obsolete
features; or the use of nonstandard features of GNU C or C++.  Many
warnings are issued only if you ask for them, with one of the '-W'
options (for instance, '-Wall' requests a variety of useful warnings).

 GCC always tries to compile your program if possible; it never
gratuitously rejects a program whose meaning is clear merely because
(for instance) it fails to conform to a standard.  In some cases,
however, the C and C++ standards specify that certain extensions are
forbidden, and a diagnostic _must_ be issued by a conforming compiler.
The '-pedantic' option tells GCC to issue warnings in such cases;
'-pedantic-errors' says to make them errors instead.  This does not mean
that _all_ non-ISO constructs get warnings or errors.

 *Note Options to Request or Suppress Warnings: Warning Options, for
more detail on these and related command-line options.

==============================================================================
File: gcc.info,  Node: |Bugs|,  Next: |Service|,  Prev: |Trouble|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Bugs*

14 Reporting Bugs
*****============

Your bug reports play an essential role in making GCC reliable.

 When you encounter a problem, the first thing to do is to see if it is
already known.  *Note Trouble::.  If it isn't known, then you should
report the problem.

MENU

* Criteria:  Bug Criteria.   Have you really found a bug?
* Reporting: Bug Reporting.  How to report a bug effectively.

==============================================================================
File: gcc.info,  Node: |Bug_Criteria|,  Next: |Bug_Reporting|,  Up: |Bugs|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Bug_Criteria*

14.1 Have You Found a Bug?
=====---------------------

If you are not sure whether you have found a bug, here are some
guidelines:

   * If the compiler gets a fatal signal, for any input whatever, that
     is a compiler bug.  Reliable compilers never crash.

   * If the compiler produces invalid assembly code, for any input
     whatever (except an 'asm' statement), that is a compiler bug,
     unless the compiler reports errors (not just warnings) which would
     ordinarily prevent the assembler from being run.

   * If the compiler produces valid assembly code that does not
     correctly execute the input source code, that is a compiler bug.

     However, you must double-check to make sure, because you may have a
     program whose behavior is undefined, which happened by chance to
     give the desired results with another C or C++ compiler.

     For example, in many nonoptimizing compilers, you can write 'x;' at
     the end of a function instead of 'return x;', with the same
     results.  But the value of the function is undefined if 'return' is
     omitted; it is not a bug when GCC produces different results.

     Problems often result from expressions with two increment
     operators, as in 'f (*p++, *p++)'.  Your previous compiler might
     have interpreted that expression the way you intended; GCC might
     interpret it another way.  Neither compiler is wrong.  The bug is
     in your code.

     After you have localized the error to a single source line, it
     should be easy to check for these things.  If your program is
     correct and well defined, you have found a compiler bug.

   * If the compiler produces an error message for valid input, that is
     a compiler bug.

   * If the compiler does not produce an error message for invalid
     input, that is a compiler bug.  However, you should note that your
     idea of "invalid input" might be someone else's idea of "an
     extension" or "support for traditional practice".

   * If you are an experienced user of one of the languages GCC
     supports, your suggestions for improvement of GCC are welcome in
     any case.

==============================================================================
File: gcc.info,  Node: |Bug_Reporting|,  Prev: |Bug_Criteria|,  Up: |Bugs|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Bug_Reporting*

14.2 How and Where to Report Bugs
=====----------------------------

Bugs should be reported to the bug database at
<http://bugzilla.redhat.com/bugzilla>.

==============================================================================
File: gcc.info,  Node: |Service|,  Next: |Contributing|,  Prev: |Bugs|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *Service*

15 How To Get Help with GCC
*****======================

If you need help installing, using or changing GCC, there are two ways
to find it:

   * Send a message to a suitable network mailing list.  First try
     <gcc-help@gcc.gnu.org> (for help installing or using GCC), and if
     that brings no response, try <gcc@gcc.gnu.org>.  For help changing
     GCC, ask <gcc@gcc.gnu.org>.  If you think you have found a bug in
     GCC, please report it following the instructions at *note Bug
     Reporting::.

   * Look in the service directory for someone who might help you for a
     fee.  The service directory is found at
     <https://www.fsf.org/resources/service>.

 For further information, see <http://gcc.gnu.org/faq.html#support>.

==============================================================================
File: gcc.info,  Node: |Contributing|,  Next: |Funding|,  Prev: |Service|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Contributing*

16 Contributing to GCC Development
*****=============================

If you would like to help pretest GCC releases to assure they work well,
current development sources are available by SVN (see
<http://gcc.gnu.org/svn.html>).  Source and binary snapshots are also
available for FTP; see <http://gcc.gnu.org/snapshots.html>.

 If you would like to work on improvements to GCC, please read the
advice at these URLs:

     <http://gcc.gnu.org/contribute.html>
     <http://gcc.gnu.org/contributewhy.html>

for information on how to make useful contributions and avoid
duplication of effort.  Suggested projects are listed at
<http://gcc.gnu.org/projects/>.

==============================================================================
File: gcc.info,  Node: |Funding|,  Next: |GNU_Project|,  Prev: |Contributing|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *Funding*

Funding Free Software
*****================

If you want to have more free software a few years from now, it makes
sense for you to help encourage people to contribute funds for its
development.  The most effective approach known is to encourage
commercial redistributors to donate.

 Users of free software systems can boost the pace of development by
encouraging for-a-fee distributors to donate part of their selling price
to free software developers--the Free Software Foundation, and others.

 The way to convince distributors to do this is to demand it and expect
it from them.  So when you compare distributors, judge them partly by
how much they give to free software development.  Show distributors they
must compete to be the one who gives the most.

 To make this approach work, you must insist on numbers that you can
compare, such as, "We will donate ten dollars to the Frobnitz project
for each disk sold."  Don't be satisfied with a vague promise, such as
"A portion of the profits are donated," since it doesn't give a basis
for comparison.

 Even a precise fraction "of the profits from this disk" is not very
meaningful, since creative accounting and unrelated business decisions
can greatly alter what fraction of the sales price counts as profit.  If
the price you pay is $50, ten percent of the profit is probably less
than a dollar; it might be a few cents, or nothing at all.

 Some redistributors do development work themselves.  This is useful
too; but to keep everyone honest, you need to inquire how much they do,
and what kind.  Some kinds of development make much more long-term
difference than others.  For example, maintaining a separate version of
a program contributes very little; maintaining the standard version of a
program for the whole community contributes much.  Easy new ports
contribute little, since someone else would surely do them; difficult
ports such as adding a new CPU to the GNU Compiler Collection contribute
more; major new features or packages contribute the most.

 By establishing the idea that supporting further development is "the
proper thing to do" when distributing free software for a fee, we can
assure a steady flow of resources into making more free software.

     Copyright (C) 1994 Free Software Foundation, Inc.
     Verbatim copying and redistribution of this section is permitted
     without royalty; alteration is not permitted.

==============================================================================
File: gcc.info,  Node: |GNU_Project|,  Next: |Copying|,  Prev: |Funding|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *GNU_Project*

The GNU Project and GNU/Linux
*****========================

The GNU Project was launched in 1984 to develop a complete Unix-like
operating system which is free software: the GNU system.  (GNU is a
recursive acronym for "GNU's Not Unix"; it is pronounced "guh-NEW".)
Variants of the GNU operating system, which use the kernel Linux, are
now widely used; though these systems are often referred to as "Linux",
they are more accurately called GNU/Linux systems.

 For more information, see:
     <http://www.gnu.org/>
     <http://www.gnu.org/gnu/linux-and-gnu.html>

==============================================================================
File: gcc.info,  Node: |Copying|,  Next: |GNU_Free_Documentation_License|,  Prev: |GNU_Project|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *Copying*

GNU General Public License
*****=====================

                        Version 3, 29 June 2007

     Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
=====---

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

 The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program-to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

 When we speak of free software, we are referring to freedom, not price.
Our General Public Licenses are designed to make sure that you have the
freedom to distribute copies of free software (and charge for them if
you wish), that you receive source code or can get it if you want it,
that you can change the software or use pieces of it in new free
programs, and that you know you can do these things.

 To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

 For example, if you distribute copies of such a program, whether gratis
or for a fee, you must pass on to the recipients the same freedoms that
you received.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

 Developers that use the GNU GPL protect your rights with two steps: (1)
assert copyright on the software, and (2) offer you this License giving
you legal permission to copy, distribute and/or modify it.

 For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

 Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

 Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

 The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
=====---------------

  0. Definitions.

     "This License" refers to version 3 of the GNU General Public
     License.

     "Copyright" also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     "The Program" refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as "you".  "Licensees" and
     "recipients" may be individuals or organizations.

     To "modify" a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a "modified
     version" of the earlier work or a work "based on" the earlier work.

     A "covered work" means either the unmodified Program or a work
     based on the Program.

     To "propagate" a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on
     a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To "convey" a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays "Appropriate Legal Notices"
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may convey
     the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The "source code" for a work means the preferred form of the work
     for making modifications to it.  "Object code" means any non-source
     form of a work.

     A "Standard Interface" means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The "System Libraries" of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work with
     that Major Component, or to implement a Standard Interface for
     which an implementation is available to the public in source code
     form.  A "Major Component", in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The "Corresponding Source" for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts
     to control those activities.  However, it does not include the
     work's System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files associated
     with source files for the work, and the source code for shared
     libraries and dynamically linked subprograms that the work is
     specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output, given
     its content, constitutes a covered work.  This License acknowledges
     your rights of fair use or other equivalent, as provided by
     copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for you,
     or provide you with facilities for running those works, provided
     that you comply with the terms of this License in conveying all
     material for which you do not control copyright.  Those thus making
     or running the covered works for you must do so exclusively on your
     behalf, under your direction and control, on terms that prohibit
     them from making any copies of your copyrighted material outside
     their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention to
     limit operation or modification of the work as a means of
     enforcing, against the work's users, your or third parties' legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program's source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to "keep intact all notices".

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an "aggregate" if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation's users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for as
          long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of the
          written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access to
          the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated by
          you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to the
          object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long as
          needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.

     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A "User Product" is either (1) a "consumer product", which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product is
     a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     "normally used" refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     "Installation Information" for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or installed
     by the recipient, or for the User Product in which it has been
     modified or installed.  Access to a network may be denied when the
     modification itself materially and adversely affects the operation
     of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     "Additional permissions" are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License with
     terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be marked
          in reasonable ways as different from the original version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered "further
     restrictions" within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or conveying
     under this License, you may add to a covered work material governed
     by the terms of that license document, provided that the further
     restriction does not survive such relicensing or conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under the
     third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, you do not qualify to receive new licenses
     for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An "entity transaction" is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party's predecessor in interest had or
     could give under the previous paragraph, plus a right to possession
     of the Corresponding Source of the work from the predecessor in
     interest, if the predecessor has it or can get it with reasonable
     efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for exercise
     of rights granted under this License, and you may not initiate
     litigation (including a cross-claim or counterclaim in a lawsuit)
     alleging that any patent claim is infringed by making, using,
     selling, offering for sale, or importing the Program or any portion
     of it.

  11. Patents.

     A "contributor" is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor's "contributor
     version".

     A contributor's "essential patent claims" are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, "control"
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor's essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its contributor
     version.

     In the following three paragraphs, a "patent license" is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To "grant"
     such a patent license to a party means to make such an agreement or
     commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  "Knowingly relying" means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient's use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is "discriminatory" if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under which
     you make payment to the third party based on the extent of your
     activity of conveying the work, and under which the third party
     grants, to any of the parties who would receive the covered work
     from you, a discriminatory patent license (a) in connection with
     copies of the covered work conveyed by you (or copies made from
     those copies), or (b) primarily for and in connection with specific
     products or compilations that contain the covered work, unless you
     entered into that arrangement, or that patent license was granted,
     prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

     If conditions are imposed on you (whether by court order, agreement
     or otherwise) that contradict the conditions of this License, they
     do not excuse you from the conditions of this License.  If you
     cannot convey a covered work so as to satisfy simultaneously your
     obligations under this License and any other pertinent obligations,
     then as a consequence you may not convey it at all.  For example,
     if you agree to terms that obligate you to collect a royalty for
     further conveying from those to whom you convey the Program, the
     only way you could satisfy both those terms and this License would
     be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

  14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version
     number of the GNU General Public License, you may choose any
     version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

  15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
     DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS
=====----------------------

How to Apply These Terms to Your New Programs
=====----------------------------------------

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

 To do so, attach the following notices to the program.  It is safest to
attach them to the start of each source file to most effectively state
the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <http://www.gnu.org/licenses/>.

 Also add information on how to contact you by electronic and paper
mail.

 If the program does terminal interaction, make it output a short notice
like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type 'show c' for details.

 The hypothetical commands 'show w' and 'show c' should show the
appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an "about box".

 You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see <http://www.gnu.org/licenses/>.

 The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read <http://www.gnu.org/philosophy/why-not-lgpl.html>.

==============================================================================
File: gcc.info,  Node: |GNU_Free_Documentation_License|,  Next: |Contributors|,  Prev: |Copying|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *GNU_Free_Documentation_License*

GNU Free Documentation License
*****=========================

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
=====-----------------------------------------------

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

 If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the "with...Texts."  line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

 If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

 If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.

==============================================================================
File: gcc.info,  Node: |Contributors|,  Next: |Option_Index|,  Prev: |GNU_Free_Documentation_License|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Contributors*

Contributors to GCC
*****==============

The GCC project would like to thank its many contributors.  Without them
the project would not have been nearly as successful as it has been.
Any omissions in this list are accidental.  Feel free to contact
<law@redhat.com> or <gerald@pfeifer.com> if you have been left out or
some of your contributions are not listed.  Please keep this list in
alphabetical order.

   * Analog Devices helped implement the support for complex data types
     and iterators.

   * John David Anglin for threading-related fixes and improvements to
     libstdc++-v3, and the HP-UX port.

   * James van Artsdalen wrote the code that makes efficient use of the
     Intel 80387 register stack.

   * Abramo and Roberto Bagnara for the SysV68 Motorola 3300 Delta
     Series port.

   * Alasdair Baird for various bug fixes.

   * Giovanni Bajo for analyzing lots of complicated C++ problem
     reports.

   * Peter Barada for his work to improve code generation for new
     ColdFire cores.

   * Gerald Baumgartner added the signature extension to the C++ front
     end.

   * Godmar Back for his Java improvements and encouragement.

   * Scott Bambrough for help porting the Java compiler.

   * Wolfgang Bangerth for processing tons of bug reports.

   * Jon Beniston for his Microsoft Windows port of Java and port to
     Lattice Mico32.

   * Daniel Berlin for better DWARF 2 support, faster/better
     optimizations, improved alias analysis, plus migrating GCC to
     Bugzilla.

   * Geoff Berry for his Java object serialization work and various
     patches.

   * David Binderman tests weekly snapshots of GCC trunk against Fedora
     Rawhide for several architectures.

   * Laurynas Biveinis for memory management work and DJGPP port fixes.

   * Uros Bizjak for the implementation of x87 math built-in functions
     and for various middle end and i386 back end improvements and bug
     fixes.

   * Eric Blake for helping to make GCJ and libgcj conform to the
     specifications.

   * Janne Blomqvist for contributions to GNU Fortran.

   * Hans-J. Boehm for his garbage collector, IA-64 libffi port, and
     other Java work.

   * Segher Boessenkool for helping maintain the PowerPC port and the
     instruction combiner plus various contributions to the middle end.

   * Neil Booth for work on cpplib, lang hooks, debug hooks and other
     miscellaneous clean-ups.

   * Steven Bosscher for integrating the GNU Fortran front end into GCC
     and for contributing to the tree-ssa branch.

   * Eric Botcazou for fixing middle- and backend bugs left and right.

   * Per Bothner for his direction via the steering committee and
     various improvements to the infrastructure for supporting new
     languages.  Chill front end implementation.  Initial
     implementations of cpplib, fix-header, config.guess, libio, and
     past C++ library (libg++) maintainer.  Dreaming up, designing and
     implementing much of GCJ.

   * Devon Bowen helped port GCC to the Tahoe.

   * Don Bowman for mips-vxworks contributions.

   * James Bowman for the FT32 port.

   * Dave Brolley for work on cpplib and Chill.

   * Paul Brook for work on the ARM architecture and maintaining GNU
     Fortran.

   * Robert Brown implemented the support for Encore 32000 systems.

   * Christian Bruel for improvements to local store elimination.

   * Herman A.J. ten Brugge for various fixes.

   * Joerg Brunsmann for Java compiler hacking and help with the GCJ
     FAQ.

   * Joe Buck for his direction via the steering committee from its
     creation to 2013.

   * Iain Buclaw for the D frontend.

   * Craig Burley for leadership of the G77 Fortran effort.

   * Tobias Burnus for contributions to GNU Fortran.

   * Stephan Buys for contributing Doxygen notes for libstdc++.

   * Paolo Carlini for libstdc++ work: lots of efficiency improvements
     to the C++ strings, streambufs and formatted I/O, hard detective
     work on the frustrating localization issues, and keeping up with
     the problem reports.

   * John Carr for his alias work, SPARC hacking, infrastructure
     improvements, previous contributions to the steering committee,
     loop optimizations, etc.

   * Stephane Carrez for 68HC11 and 68HC12 ports.

   * Steve Chamberlain for support for the Renesas SH and H8 processors
     and the PicoJava processor, and for GCJ config fixes.

   * Glenn Chambers for help with the GCJ FAQ.

   * John-Marc Chandonia for various libgcj patches.

   * Denis Chertykov for contributing and maintaining the AVR port, the
     first GCC port for an 8-bit architecture.

   * Kito Cheng for his work on the RISC-V port, including bringing up
     the test suite and maintenance.

   * Scott Christley for his Objective-C contributions.

   * Eric Christopher for his Java porting help and clean-ups.

   * Branko Cibej for more warning contributions.

   * The GNU Classpath project for all of their merged runtime code.

   * Nick Clifton for arm, mcore, fr30, v850, m32r, msp430 rx work,
     '--help', and other random hacking.

   * Michael Cook for libstdc++ cleanup patches to reduce warnings.

   * R. Kelley Cook for making GCC buildable from a read-only directory
     as well as other miscellaneous build process and documentation
     clean-ups.

   * Ralf Corsepius for SH testing and minor bug fixing.

   * Franc,ois-Xavier Coudert for contributions to GNU Fortran.

   * Stan Cox for care and feeding of the x86 port and lots of behind
     the scenes hacking.

   * Alex Crain provided changes for the 3b1.

   * Ian Dall for major improvements to the NS32k port.

   * Paul Dale for his work to add uClinux platform support to the m68k
     backend.

   * Palmer Dabbelt for his work maintaining the RISC-V port.

   * Dario Dariol contributed the four varieties of sample programs that
     print a copy of their source.

   * Russell Davidson for fstream and stringstream fixes in libstdc++.

   * Bud Davis for work on the G77 and GNU Fortran compilers.

   * Mo DeJong for GCJ and libgcj bug fixes.

   * Jerry DeLisle for contributions to GNU Fortran.

   * DJ Delorie for the DJGPP port, build and libiberty maintenance,
     various bug fixes, and the M32C, MeP, MSP430, and RL78 ports.

   * Arnaud Desitter for helping to debug GNU Fortran.

   * Gabriel Dos Reis for contributions to G++, contributions and
     maintenance of GCC diagnostics infrastructure, libstdc++-v3,
     including 'valarray<>', 'complex<>', maintaining the numerics
     library (including that pesky '<limits>' :-) and keeping up-to-date
     anything to do with numbers.

   * Ulrich Drepper for his work on glibc, testing of GCC using glibc,
     ISO C99 support, CFG dumping support, etc., plus support of the C++
     runtime libraries including for all kinds of C interface issues,
     contributing and maintaining 'complex<>', sanity checking and
     disbursement, configuration architecture, libio maintenance, and
     early math work.

   * Franc,ois Dumont for his work on libstdc++-v3, especially
     maintaining and improving 'debug-mode' and associative and
     unordered containers.

   * Zdenek Dvorak for a new loop unroller and various fixes.

   * Michael Eager for his work on the Xilinx MicroBlaze port.

   * Richard Earnshaw for his ongoing work with the ARM.

   * David Edelsohn for his direction via the steering committee,
     ongoing work with the RS6000/PowerPC port, help cleaning up Haifa
     loop changes, doing the entire AIX port of libstdc++ with his bare
     hands, and for ensuring GCC properly keeps working on AIX.

   * Kevin Ediger for the floating point formatting of num_put::do_put
     in libstdc++.

   * Phil Edwards for libstdc++ work including configuration hackery,
     documentation maintainer, chief breaker of the web pages, the
     occasional iostream bug fix, and work on shared library symbol
     versioning.

   * Paul Eggert for random hacking all over GCC.

   * Mark Elbrecht for various DJGPP improvements, and for libstdc++
     configuration support for locales and fstream-related fixes.

   * Vadim Egorov for libstdc++ fixes in strings, streambufs, and
     iostreams.

   * Christian Ehrhardt for dealing with bug reports.

   * Ben Elliston for his work to move the Objective-C runtime into its
     own subdirectory and for his work on autoconf.

   * Revital Eres for work on the PowerPC 750CL port.

   * Marc Espie for OpenBSD support.

   * Doug Evans for much of the global optimization framework, arc,
     m32r, and SPARC work.

   * Christopher Faylor for his work on the Cygwin port and for caring
     and feeding the gcc.gnu.org box and saving its users tons of spam.

   * Fred Fish for BeOS support and Ada fixes.

   * Ivan Fontes Garcia for the Portuguese translation of the GCJ FAQ.

   * Peter Gerwinski for various bug fixes and the Pascal front end.

   * Kaveh R. Ghazi for his direction via the steering committee,
     amazing work to make '-W -Wall -W* -Werror' useful, and testing GCC
     on a plethora of platforms.  Kaveh extends his gratitude to the
     CAIP Center at Rutgers University for providing him with computing
     resources to work on Free Software from the late 1980s to 2010.

   * John Gilmore for a donation to the FSF earmarked improving GNU
     Java.

   * Judy Goldberg for c++ contributions.

   * Torbjorn Granlund for various fixes and the c-torture testsuite,
     multiply- and divide-by-constant optimization, improved long long
     support, improved leaf function register allocation, and his
     direction via the steering committee.

   * Jonny Grant for improvements to 'collect2's' '--help'
     documentation.

   * Anthony Green for his '-Os' contributions, the moxie port, and Java
     front end work.

   * Stu Grossman for gdb hacking, allowing GCJ developers to debug Java
     code.

   * Michael K. Gschwind contributed the port to the PDP-11.

   * Richard Biener for his ongoing middle-end contributions and bug
     fixes and for release management.

   * Ron Guilmette implemented the 'protoize' and 'unprotoize' tools,
     the support for DWARF 1 symbolic debugging information, and much of
     the support for System V Release 4.  He has also worked heavily on
     the Intel 386 and 860 support.

   * Sumanth Gundapaneni for contributing the CR16 port.

   * Mostafa Hagog for Swing Modulo Scheduling (SMS) and post reload
     GCSE.

   * Bruno Haible for improvements in the runtime overhead for EH, new
     warnings and assorted bug fixes.

   * Andrew Haley for his amazing Java compiler and library efforts.

   * Chris Hanson assisted in making GCC work on HP-UX for the 9000
     series 300.

   * Michael Hayes for various thankless work he's done trying to get
     the c30/c40 ports functional.  Lots of loop and unroll improvements
     and fixes.

   * Dara Hazeghi for wading through myriads of target-specific bug
     reports.

   * Kate Hedstrom for staking the G77 folks with an initial testsuite.

   * Richard Henderson for his ongoing SPARC, alpha, ia32, and ia64
     work, loop opts, and generally fixing lots of old problems we've
     ignored for years, flow rewrite and lots of further stuff,
     including reviewing tons of patches.

   * Aldy Hernandez for working on the PowerPC port, SIMD support, and
     various fixes.

   * Nobuyuki Hikichi of Software Research Associates, Tokyo,
     contributed the support for the Sony NEWS machine.

   * Kazu Hirata for caring and feeding the Renesas H8/300 port and
     various fixes.

   * Katherine Holcomb for work on GNU Fortran.

   * Manfred Hollstein for his ongoing work to keep the m88k alive, lots
     of testing and bug fixing, particularly of GCC configury code.

   * Steve Holmgren for MachTen patches.

   * Mat Hostetter for work on the TILE-Gx and TILEPro ports.

   * Jan Hubicka for his x86 port improvements.

   * Falk Hueffner for working on C and optimization bug reports.

   * Bernardo Innocenti for his m68k work, including merging of ColdFire
     improvements and uClinux support.

   * Christian Iseli for various bug fixes.

   * Kamil Iskra for general m68k hacking.

   * Lee Iverson for random fixes and MIPS testing.

   * Balaji V. Iyer for Cilk+ development and merging.

   * Andreas Jaeger for testing and benchmarking of GCC and various bug
     fixes.

   * Martin Jambor for his work on inter-procedural optimizations, the
     switch conversion pass, and scalar replacement of aggregates.

   * Jakub Jelinek for his SPARC work and sibling call optimizations as
     well as lots of bug fixes and test cases, and for improving the
     Java build system.

   * Janis Johnson for ia64 testing and fixes, her quality improvement
     sidetracks, and web page maintenance.

   * Kean Johnston for SCO OpenServer support and various fixes.

   * Tim Josling for the sample language treelang based originally on
     Richard Kenner's "toy" language.

   * Nicolai Josuttis for additional libstdc++ documentation.

   * Klaus Kaempf for his ongoing work to make alpha-vms a viable
     target.

   * Steven G. Kargl for work on GNU Fortran.

   * David Kashtan of SRI adapted GCC to VMS.

   * Ryszard Kabatek for many, many libstdc++ bug fixes and
     optimizations of strings, especially member functions, and for
     auto_ptr fixes.

   * Geoffrey Keating for his ongoing work to make the PPC work for
     GNU/Linux and his automatic regression tester.

   * Brendan Kehoe for his ongoing work with G++ and for a lot of early
     work in just about every part of libstdc++.

   * Oliver M. Kellogg of Deutsche Aerospace contributed the port to the
     MIL-STD-1750A.

   * Richard Kenner of the New York University Ultracomputer Research
     Laboratory wrote the machine descriptions for the AMD 29000, the
     DEC Alpha, the IBM RT PC, and the IBM RS/6000 as well as the
     support for instruction attributes.  He also made changes to better
     support RISC processors including changes to common subexpression
     elimination, strength reduction, function calling sequence
     handling, and condition code support, in addition to generalizing
     the code for frame pointer elimination and delay slot scheduling.
     Richard Kenner was also the head maintainer of GCC for several
     years.

   * Mumit Khan for various contributions to the Cygwin and Mingw32
     ports and maintaining binary releases for Microsoft Windows hosts,
     and for massive libstdc++ porting work to Cygwin/Mingw32.

   * Robin Kirkham for cpu32 support.

   * Mark Klein for PA improvements.

   * Thomas Koenig for various bug fixes.

   * Bruce Korb for the new and improved fixincludes code.

   * Benjamin Kosnik for his G++ work and for leading the libstdc++-v3
     effort.

   * Maxim Kuvyrkov for contributions to the instruction scheduler, the
     Android and m68k/Coldfire ports, and optimizations.

   * Charles LaBrec contributed the support for the Integrated Solutions
     68020 system.

   * Asher Langton and Mike Kumbera for contributing Cray pointer
     support to GNU Fortran, and for other GNU Fortran improvements.

   * Jeff Law for his direction via the steering committee, coordinating
     the entire egcs project and GCC 2.95, rolling out snapshots and
     releases, handling merges from GCC2, reviewing tons of patches that
     might have fallen through the cracks else, and random but extensive
     hacking.

   * Walter Lee for work on the TILE-Gx and TILEPro ports.

   * Marc Lehmann for his direction via the steering committee and
     helping with analysis and improvements of x86 performance.

   * Victor Leikehman for work on GNU Fortran.

   * Ted Lemon wrote parts of the RTL reader and printer.

   * Kriang Lerdsuwanakij for C++ improvements including template as
     template parameter support, and many C++ fixes.

   * Warren Levy for tremendous work on libgcj (Java Runtime Library)
     and random work on the Java front end.

   * Alain Lichnewsky ported GCC to the MIPS CPU.

   * Oskar Liljeblad for hacking on AWT and his many Java bug reports
     and patches.

   * Robert Lipe for OpenServer support, new testsuites, testing, etc.

   * Chen Liqin for various S+core related fixes/improvement, and for
     maintaining the S+core port.

   * Martin Liska for his work on identical code folding, the
     sanitizers, HSA, general bug fixing and for running automated
     regression testing of GCC and reporting numerous bugs.

   * Weiwen Liu for testing and various bug fixes.

   * Manuel Lo'pez-Iba'n~ez for improving '-Wconversion' and many other
     diagnostics fixes and improvements.

   * Dave Love for his ongoing work with the Fortran front end and
     runtime libraries.

   * Martin von Lo"wis for internal consistency checking infrastructure,
     various C++ improvements including namespace support, and tons of
     assistance with libstdc++/compiler merges.

   * H.J. Lu for his previous contributions to the steering committee,
     many x86 bug reports, prototype patches, and keeping the GNU/Linux
     ports working.

   * Greg McGary for random fixes and (someday) bounded pointers.

   * Andrew MacLeod for his ongoing work in building a real EH system,
     various code generation improvements, work on the global optimizer,
     etc.

   * Vladimir Makarov for hacking some ugly i960 problems, PowerPC
     hacking improvements to compile-time performance, overall knowledge
     and direction in the area of instruction scheduling, design and
     implementation of the automaton based instruction scheduler and
     design and implementation of the integrated and local register
     allocators.

   * David Malcolm for his work on improving GCC diagnostics, JIT,
     self-tests and unit testing.

   * Bob Manson for his behind the scenes work on dejagnu.

   * John Marino for contributing the DragonFly BSD port.

   * Philip Martin for lots of libstdc++ string and vector iterator
     fixes and improvements, and string clean up and testsuites.

   * Michael Matz for his work on dominance tree discovery, the x86-64
     port, link-time optimization framework and general optimization
     improvements.

   * All of the Mauve project contributors for Java test code.

   * Bryce McKinlay for numerous GCJ and libgcj fixes and improvements.

   * Adam Megacz for his work on the Microsoft Windows port of GCJ.

   * Michael Meissner for LRS framework, ia32, m32r, v850, m88k, MIPS,
     powerpc, haifa, ECOFF debug support, and other assorted hacking.

   * Jason Merrill for his direction via the steering committee and
     leading the G++ effort.

   * Martin Michlmayr for testing GCC on several architectures using the
     entire Debian archive.

   * David Miller for his direction via the steering committee, lots of
     SPARC work, improvements in jump.c and interfacing with the Linux
     kernel developers.

   * Gary Miller ported GCC to Charles River Data Systems machines.

   * Alfred Minarik for libstdc++ string and ios bug fixes, and turning
     the entire libstdc++ testsuite namespace-compatible.

   * Mark Mitchell for his direction via the steering committee,
     mountains of C++ work, load/store hoisting out of loops, alias
     analysis improvements, ISO C 'restrict' support, and serving as
     release manager from 2000 to 2011.

   * Alan Modra for various GNU/Linux bits and testing.

   * Toon Moene for his direction via the steering committee, Fortran
     maintenance, and his ongoing work to make us make Fortran run fast.

   * Jason Molenda for major help in the care and feeding of all the
     services on the gcc.gnu.org (formerly egcs.cygnus.com)
     machine--mail, web services, ftp services, etc etc.  Doing all this
     work on scrap paper and the backs of envelopes would have been...
     difficult.

   * Catherine Moore for fixing various ugly problems we have sent her
     way, including the haifa bug which was killing the Alpha & PowerPC
     Linux kernels.

   * Mike Moreton for his various Java patches.

   * David Mosberger-Tang for various Alpha improvements, and for the
     initial IA-64 port.

   * Stephen Moshier contributed the floating point emulator that
     assists in cross-compilation and permits support for floating point
     numbers wider than 64 bits and for ISO C99 support.

   * Bill Moyer for his behind the scenes work on various issues.

   * Philippe De Muyter for his work on the m68k port.

   * Joseph S. Myers for his work on the PDP-11 port, format checking
     and ISO C99 support, and continuous emphasis on (and contributions
     to) documentation.

   * Nathan Myers for his work on libstdc++-v3: architecture and
     authorship through the first three snapshots, including
     implementation of locale infrastructure, string, shadow C headers,
     and the initial project documentation (DESIGN, CHECKLIST, and so
     forth).  Later, more work on MT-safe string and shadow headers.

   * Felix Natter for documentation on porting libstdc++.

   * Nathanael Nerode for cleaning up the configuration/build process.

   * NeXT, Inc. donated the front end that supports the Objective-C
     language.

   * Hans-Peter Nilsson for the CRIS and MMIX ports, improvements to the
     search engine setup, various documentation fixes and other small
     fixes.

   * Geoff Noer for his work on getting cygwin native builds working.

   * Vegard Nossum for running automated regression testing of GCC and
     reporting numerous bugs.

   * Diego Novillo for his work on Tree SSA, OpenMP, SPEC performance
     tracking web pages, GIMPLE tuples, and assorted fixes.

   * David O'Brien for the FreeBSD/alpha, FreeBSD/AMD x86-64,
     FreeBSD/ARM, FreeBSD/PowerPC, and FreeBSD/SPARC64 ports and related
     infrastructure improvements.

   * Alexandre Oliva for various build infrastructure improvements,
     scripts and amazing testing work, including keeping libtool issues
     sane and happy.

   * Stefan Olsson for work on mt_alloc.

   * Melissa O'Neill for various NeXT fixes.

   * Rainer Orth for random MIPS work, including improvements to GCC's
     o32 ABI support, improvements to dejagnu's MIPS support, Java
     configuration clean-ups and porting work, and maintaining the IRIX,
     Solaris 2, and Tru64 UNIX ports.

   * Steven Pemberton for his contribution of 'enquire' which allowed
     GCC to determine various properties of the floating point unit and
     generate 'float.h' in older versions of GCC.

   * Hartmut Penner for work on the s390 port.

   * Paul Petersen wrote the machine description for the Alliant FX/8.

   * Alexandre Petit-Bianco for implementing much of the Java compiler
     and continued Java maintainership.

   * Matthias Pfaller for major improvements to the NS32k port.

   * Gerald Pfeifer for his direction via the steering committee,
     pointing out lots of problems we need to solve, maintenance of the
     web pages, and taking care of documentation maintenance in general.

   * Marek Polacek for his work on the C front end, the sanitizers and
     general bug fixing.

   * Andrew Pinski for processing bug reports by the dozen.

   * Ovidiu Predescu for his work on the Objective-C front end and
     runtime libraries.

   * Jerry Quinn for major performance improvements in C++ formatted
     I/O.

   * Ken Raeburn for various improvements to checker, MIPS ports and
     various cleanups in the compiler.

   * Rolf W. Rasmussen for hacking on AWT.

   * David Reese of Sun Microsystems contributed to the Solaris on
     PowerPC port.

   * John Regehr for running automated regression testing of GCC and
     reporting numerous bugs.

   * Volker Reichelt for running automated regression testing of GCC and
     reporting numerous bugs and for keeping up with the problem
     reports.

   * Joern Rennecke for maintaining the sh port, loop, regmove & reload
     hacking and developing and maintaining the Epiphany port.

   * Loren J. Rittle for improvements to libstdc++-v3 including the
     FreeBSD port, threading fixes, thread-related configury changes,
     critical threading documentation, and solutions to really tricky
     I/O problems, as well as keeping GCC properly working on FreeBSD
     and continuous testing.

   * Craig Rodrigues for processing tons of bug reports.

   * Ola Ro"nnerup for work on mt_alloc.

   * Gavin Romig-Koch for lots of behind the scenes MIPS work.

   * David Ronis inspired and encouraged Craig to rewrite the G77
     documentation in texinfo format by contributing a first pass at a
     translation of the old 'g77-0.5.16/f/DOC' file.

   * Ken Rose for fixes to GCC's delay slot filling code.

   * Ira Rosen for her contributions to the auto-vectorizer.

   * Paul Rubin wrote most of the preprocessor.

   * Pe'tur Runo'lfsson for major performance improvements in C++
     formatted I/O and large file support in C++ filebuf.

   * Chip Salzenberg for libstdc++ patches and improvements to locales,
     traits, Makefiles, libio, libtool hackery, and "long long" support.

   * Juha Sarlin for improvements to the H8 code generator.

   * Greg Satz assisted in making GCC work on HP-UX for the 9000 series
     300.

   * Roger Sayle for improvements to constant folding and GCC's RTL
     optimizers as well as for fixing numerous bugs.

   * Bradley Schatz for his work on the GCJ FAQ.

   * Peter Schauer wrote the code to allow debugging to work on the
     Alpha.

   * William Schelter did most of the work on the Intel 80386 support.

   * Tobias Schlu"ter for work on GNU Fortran.

   * Bernd Schmidt for various code generation improvements and major
     work in the reload pass, serving as release manager for GCC 2.95.3,
     and work on the Blackfin and C6X ports.

   * Peter Schmid for constant testing of libstdc++--especially
     application testing, going above and beyond what was requested for
     the release criteria--and libstdc++ header file tweaks.

   * Jason Schroeder for jcf-dump patches.

   * Andreas Schwab for his work on the m68k port.

   * Lars Segerlund for work on GNU Fortran.

   * Dodji Seketeli for numerous C++ bug fixes and debug info
     improvements.

   * Tim Shen for major work on '<regex>'.

   * Joel Sherrill for his direction via the steering committee, RTEMS
     contributions and RTEMS testing.

   * Nathan Sidwell for many C++ fixes/improvements.

   * Jeffrey Siegal for helping RMS with the original design of GCC,
     some code which handles the parse tree and RTL data structures,
     constant folding and help with the original VAX & m68k ports.

   * Kenny Simpson for prompting libstdc++ fixes due to defect reports
     from the LWG (thereby keeping GCC in line with updates from the
     ISO).

   * Franz Sirl for his ongoing work with making the PPC port stable for
     GNU/Linux.

   * Andrey Slepuhin for assorted AIX hacking.

   * Trevor Smigiel for contributing the SPU port.

   * Christopher Smith did the port for Convex machines.

   * Danny Smith for his major efforts on the Mingw (and Cygwin) ports.
     Retired from GCC maintainership August 2010, having mentored two
     new maintainers into the role.

   * Randy Smith finished the Sun FPA support.

   * Ed Smith-Rowland for his continuous work on libstdc++-v3, special
     functions, '<random>', and various improvements to C++11 features.

   * Scott Snyder for queue, iterator, istream, and string fixes and
     libstdc++ testsuite entries.  Also for providing the patch to G77
     to add rudimentary support for 'INTEGER*1', 'INTEGER*2', and
     'LOGICAL*1'.

   * Zdenek Sojka for running automated regression testing of GCC and
     reporting numerous bugs.

   * Arseny Solokha for running automated regression testing of GCC and
     reporting numerous bugs.

   * Jayant Sonar for contributing the CR16 port.

   * Brad Spencer for contributions to the GLIBCPP_FORCE_NEW technique.

   * Richard Stallman, for writing the original GCC and launching the
     GNU project.

   * Jan Stein of the Chalmers Computer Society provided support for
     Genix, as well as part of the 32000 machine description.

   * Gerhard Steinmetz for running automated regression testing of GCC
     and reporting numerous bugs.

   * Nigel Stephens for various mips16 related fixes/improvements.

   * Jonathan Stone wrote the machine description for the Pyramid
     computer.

   * Graham Stott for various infrastructure improvements.

   * John Stracke for his Java HTTP protocol fixes.

   * Mike Stump for his Elxsi port, G++ contributions over the years and
     more recently his vxworks contributions

   * Jeff Sturm for Java porting help, bug fixes, and encouragement.

   * Zhendong Su for running automated regression testing of GCC and
     reporting numerous bugs.

   * Chengnian Sun for running automated regression testing of GCC and
     reporting numerous bugs.

   * Shigeya Suzuki for this fixes for the bsdi platforms.

   * Ian Lance Taylor for the Go frontend, the initial mips16 and mips64
     support, general configury hacking, fixincludes, etc.

   * Holger Teutsch provided the support for the Clipper CPU.

   * Gary Thomas for his ongoing work to make the PPC work for
     GNU/Linux.

   * Paul Thomas for contributions to GNU Fortran.

   * Philipp Thomas for random bug fixes throughout the compiler

   * Jason Thorpe for thread support in libstdc++ on NetBSD.

   * Kresten Krab Thorup wrote the run time support for the Objective-C
     language and the fantastic Java bytecode interpreter.

   * Michael Tiemann for random bug fixes, the first instruction
     scheduler, initial C++ support, function integration, NS32k, SPARC
     and M88k machine description work, delay slot scheduling.

   * Andreas Tobler for his work porting libgcj to Darwin.

   * Teemu Torma for thread safe exception handling support.

   * Leonard Tower wrote parts of the parser, RTL generator, and RTL
     definitions, and of the VAX machine description.

   * Daniel Towner and Hariharan Sandanagobalane contributed and
     maintain the picoChip port.

   * Tom Tromey for internationalization support and for his many Java
     contributions and libgcj maintainership.

   * Lassi Tuura for improvements to config.guess to determine HP
     processor types.

   * Petter Urkedal for libstdc++ CXXFLAGS, math, and algorithms fixes.

   * Andy Vaught for the design and initial implementation of the GNU
     Fortran front end.

   * Brent Verner for work with the libstdc++ cshadow files and their
     associated configure steps.

   * Todd Vierling for contributions for NetBSD ports.

   * Andrew Waterman for contributing the RISC-V port, as well as
     maintaining it.

   * Jonathan Wakely for contributing libstdc++ Doxygen notes and XHTML
     guidance and maintaining libstdc++.

   * Dean Wakerley for converting the install documentation from HTML to
     texinfo in time for GCC 3.0.

   * Krister Walfridsson for random bug fixes.

   * Feng Wang for contributions to GNU Fortran.

   * Stephen M. Webb for time and effort on making libstdc++ shadow
     files work with the tricky Solaris 8+ headers, and for pushing the
     build-time header tree.  Also, for starting and driving the
     '<regex>' effort.

   * John Wehle for various improvements for the x86 code generator,
     related infrastructure improvements to help x86 code generation,
     value range propagation and other work, WE32k port.

   * Ulrich Weigand for work on the s390 port.

   * Janus Weil for contributions to GNU Fortran.

   * Zack Weinberg for major work on cpplib and various other bug fixes.

   * Matt Welsh for help with Linux Threads support in GCJ.

   * Urban Widmark for help fixing java.io.

   * Mark Wielaard for new Java library code and his work integrating
     with Classpath.

   * Dale Wiles helped port GCC to the Tahoe.

   * Bob Wilson from Tensilica, Inc. for the Xtensa port.

   * Jim Wilson for his direction via the steering committee, tackling
     hard problems in various places that nobody else wanted to work on,
     strength reduction and other loop optimizations.

   * Paul Woegerer and Tal Agmon for the CRX port.

   * Carlo Wood for various fixes.

   * Tom Wood for work on the m88k port.

   * Chung-Ju Wu for his work on the Andes NDS32 port.

   * Canqun Yang for work on GNU Fortran.

   * Masanobu Yuhara of Fujitsu Laboratories implemented the machine
     description for the Tron architecture (specifically, the Gmicro).

   * Kevin Zachmann helped port GCC to the Tahoe.

   * Ayal Zaks for Swing Modulo Scheduling (SMS).

   * Qirun Zhang for running automated regression testing of GCC and
     reporting numerous bugs.

   * Xiaoqiang Zhang for work on GNU Fortran.

   * Gilles Zunino for help porting Java to Irix.

 The following people are recognized for their contributions to GNAT,
the Ada front end of GCC:
   * Bernard Banner

   * Romain Berrendonner

   * Geert Bosch

   * Emmanuel Briot

   * Joel Brobecker

   * Ben Brosgol

   * Vincent Celier

   * Arnaud Charlet

   * Chien Chieng

   * Cyrille Comar

   * Cyrille Crozes

   * Robert Dewar

   * Gary Dismukes

   * Robert Duff

   * Ed Falis

   * Ramon Fernandez

   * Sam Figueroa

   * Vasiliy Fofanov

   * Michael Friess

   * Franco Gasperoni

   * Ted Giering

   * Matthew Gingell

   * Laurent Guerby

   * Jerome Guitton

   * Olivier Hainque

   * Jerome Hugues

   * Hristian Kirtchev

   * Jerome Lambourg

   * Bruno Leclerc

   * Albert Lee

   * Sean McNeil

   * Javier Miranda

   * Laurent Nana

   * Pascal Obry

   * Dong-Ik Oh

   * Laurent Pautet

   * Brett Porter

   * Thomas Quinot

   * Nicolas Roche

   * Pat Rogers

   * Jose Ruiz

   * Douglas Rupp

   * Sergey Rybin

   * Gail Schenker

   * Ed Schonberg

   * Nicolas Setton

   * Samuel Tardieu

 The following people are recognized for their contributions of new
features, bug reports, testing and integration of classpath/libgcj for
GCC version 4.1:
   * Lillian Angel for 'JTree' implementation and lots Free Swing
     additions and bug fixes.

   * Wolfgang Baer for 'GapContent' bug fixes.

   * Anthony Balkissoon for 'JList', Free Swing 1.5 updates and mouse
     event fixes, lots of Free Swing work including 'JTable' editing.

   * Stuart Ballard for RMI constant fixes.

   * Goffredo Baroncelli for 'HTTPURLConnection' fixes.

   * Gary Benson for 'MessageFormat' fixes.

   * Daniel Bonniot for 'Serialization' fixes.

   * Chris Burdess for lots of gnu.xml and http protocol fixes, 'StAX'
     and 'DOM xml:id' support.

   * Ka-Hing Cheung for 'TreePath' and 'TreeSelection' fixes.

   * Archie Cobbs for build fixes, VM interface updates,
     'URLClassLoader' updates.

   * Kelley Cook for build fixes.

   * Martin Cordova for Suggestions for better 'SocketTimeoutException'.

   * David Daney for 'BitSet' bug fixes, 'HttpURLConnection' rewrite and
     improvements.

   * Thomas Fitzsimmons for lots of upgrades to the gtk+ AWT and Cairo
     2D support.  Lots of imageio framework additions, lots of AWT and
     Free Swing bug fixes.

   * Jeroen Frijters for 'ClassLoader' and nio cleanups, serialization
     fixes, better 'Proxy' support, bug fixes and IKVM integration.

   * Santiago Gala for 'AccessControlContext' fixes.

   * Nicolas Geoffray for 'VMClassLoader' and 'AccessController'
     improvements.

   * David Gilbert for 'basic' and 'metal' icon and plaf support and
     lots of documenting, Lots of Free Swing and metal theme additions.
     'MetalIconFactory' implementation.

   * Anthony Green for 'MIDI' framework, 'ALSA' and 'DSSI' providers.

   * Andrew Haley for 'Serialization' and 'URLClassLoader' fixes, gcj
     build speedups.

   * Kim Ho for 'JFileChooser' implementation.

   * Andrew John Hughes for 'Locale' and net fixes, URI RFC2986 updates,
     'Serialization' fixes, 'Properties' XML support and generic branch
     work, VMIntegration guide update.

   * Bastiaan Huisman for 'TimeZone' bug fixing.

   * Andreas Jaeger for mprec updates.

   * Paul Jenner for better '-Werror' support.

   * Ito Kazumitsu for 'NetworkInterface' implementation and updates.

   * Roman Kennke for 'BoxLayout', 'GrayFilter' and 'SplitPane', plus
     bug fixes all over.  Lots of Free Swing work including styled text.

   * Simon Kitching for 'String' cleanups and optimization suggestions.

   * Michael Koch for configuration fixes, 'Locale' updates, bug and
     build fixes.

   * Guilhem Lavaux for configuration, thread and channel fixes and
     Kaffe integration.  JCL native 'Pointer' updates.  Logger bug
     fixes.

   * David Lichteblau for JCL support library global/local reference
     cleanups.

   * Aaron Luchko for JDWP updates and documentation fixes.

   * Ziga Mahkovec for 'Graphics2D' upgraded to Cairo 0.5 and new regex
     features.

   * Sven de Marothy for BMP imageio support, CSS and 'TextLayout'
     fixes.  'GtkImage' rewrite, 2D, awt, free swing and date/time fixes
     and implementing the Qt4 peers.

   * Casey Marshall for crypto algorithm fixes, 'FileChannel' lock,
     'SystemLogger' and 'FileHandler' rotate implementations, NIO
     'FileChannel.map' support, security and policy updates.

   * Bryce McKinlay for RMI work.

   * Audrius Meskauskas for lots of Free Corba, RMI and HTML work plus
     testing and documenting.

   * Kalle Olavi Niemitalo for build fixes.

   * Rainer Orth for build fixes.

   * Andrew Overholt for 'File' locking fixes.

   * Ingo Proetel for 'Image', 'Logger' and 'URLClassLoader' updates.

   * Olga Rodimina for 'MenuSelectionManager' implementation.

   * Jan Roehrich for 'BasicTreeUI' and 'JTree' fixes.

   * Julian Scheid for documentation updates and gjdoc support.

   * Christian Schlichtherle for zip fixes and cleanups.

   * Robert Schuster for documentation updates and beans fixes,
     'TreeNode' enumerations and 'ActionCommand' and various fixes, XML
     and URL, AWT and Free Swing bug fixes.

   * Keith Seitz for lots of JDWP work.

   * Christian Thalinger for 64-bit cleanups, Configuration and VM
     interface fixes and 'CACAO' integration, 'fdlibm' updates.

   * Gael Thomas for 'VMClassLoader' boot packages support suggestions.

   * Andreas Tobler for Darwin and Solaris testing and fixing, 'Qt4'
     support for Darwin/OS X, 'Graphics2D' support, 'gtk+' updates.

   * Dalibor Topic for better 'DEBUG' support, build cleanups and Kaffe
     integration.  'Qt4' build infrastructure, 'SHA1PRNG' and
     'GdkPixbugDecoder' updates.

   * Tom Tromey for Eclipse integration, generics work, lots of bug
     fixes and gcj integration including coordinating The Big Merge.

   * Mark Wielaard for bug fixes, packaging and release management,
     'Clipboard' implementation, system call interrupts and network
     timeouts and 'GdkPixpufDecoder' fixes.

 In addition to the above, all of which also contributed time and energy
in testing GCC, we would like to thank the following for their
contributions to testing:

   * Michael Abd-El-Malek

   * Thomas Arend

   * Bonzo Armstrong

   * Steven Ashe

   * Chris Baldwin

   * David Billinghurst

   * Jim Blandy

   * Stephane Bortzmeyer

   * Horst von Brand

   * Frank Braun

   * Rodney Brown

   * Sidney Cadot

   * Bradford Castalia

   * Robert Clark

   * Jonathan Corbet

   * Ralph Doncaster

   * Richard Emberson

   * Levente Farkas

   * Graham Fawcett

   * Mark Fernyhough

   * Robert A. French

   * Jo"rgen Freyh

   * Mark K. Gardner

   * Charles-Antoine Gauthier

   * Yung Shing Gene

   * David Gilbert

   * Simon Gornall

   * Fred Gray

   * John Griffin

   * Patrik Hagglund

   * Phil Hargett

   * Amancio Hasty

   * Takafumi Hayashi

   * Bryan W. Headley

   * Kevin B. Hendricks

   * Joep Jansen

   * Christian Joensson

   * Michel Kern

   * David Kidd

   * Tobias Kuipers

   * Anand Krishnaswamy

   * A. O. V. Le Blanc

   * llewelly

   * Damon Love

   * Brad Lucier

   * Matthias Klose

   * Martin Knoblauch

   * Rick Lutowski

   * Jesse Macnish

   * Stefan Morrell

   * Anon A. Mous

   * Matthias Mueller

   * Pekka Nikander

   * Rick Niles

   * Jon Olson

   * Magnus Persson

   * Chris Pollard

   * Richard Polton

   * Derk Reefman

   * David Rees

   * Paul Reilly

   * Tom Reilly

   * Torsten Rueger

   * Danny Sadinoff

   * Marc Schifer

   * Erik Schnetter

   * Wayne K. Schroll

   * David Schuler

   * Vin Shelton

   * Tim Souder

   * Adam Sulmicki

   * Bill Thorson

   * George Talbot

   * Pedro A. M. Vazquez

   * Gregory Warnes

   * Ian Watson

   * David E. Young

   * And many others

 And finally we'd like to thank everyone who uses the compiler, provides
feedback and generally reminds us why we're doing this work in the first
place.

==============================================================================
File: gcc.info,  Node: |Option_Index|,  Next: |Keyword_Index|,  Prev: |Contributors|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Option_Index*

Option Index
*****=======

GCC's command line options are indexed here without any initial '-' or
'--'.  Where an option has both positive and negative forms (such as
'-fOPTION' and '-fno-OPTION'), relevant entries in the manual are
indexed under the most appropriate form; it may sometimes be useful to
look up both forms.


MENU

* ###:                                   Overall Options.    (line  214)
* -Wattribute-alias:                     Warning Options.    (line 1605)
* -Wno-attribute-alias:                  Warning Options.    (line 1605)
* 80387:                                 x86 Options.        (line  497)
* A:                                     Preprocessor Options.
                                                             (line  328)
* allowable_client:                      Darwin Options.     (line  196)
* all_load:                              Darwin Options.     (line  110)
* ansi:                                  Standards.          (line   13)
* ansi <1>:                              C Dialect Options.  (line   11)
* ansi <2>:                              Other Builtins.     (line   31)
* ansi <3>:                              Non-bugs.           (line  107)
* arch_errors_fatal:                     Darwin Options.     (line  114)
* aux-info:                              C Dialect Options.  (line  227)
* B:                                     Directory Options.  (line  122)
* Bdynamic:                              VxWorks Options.    (line   22)
* bind_at_load:                          Darwin Options.     (line  118)
* Bstatic:                               VxWorks Options.    (line   22)
* bundle:                                Darwin Options.     (line  123)
* bundle_loader:                         Darwin Options.     (line  127)
* c:                                     Overall Options.    (line  169)
* C:                                     Preprocessor Options.
                                                             (line  337)
* c <1>:                                 Link Options.       (line   20)
* CC:                                    Preprocessor Options.
                                                             (line  349)
* client_name:                           Darwin Options.     (line  196)
* compatibility_version:                 Darwin Options.     (line  196)
* coverage:                              Instrumentation Options.
                                                             (line   50)
* current_version:                       Darwin Options.     (line  196)
* D:                                     Preprocessor Options.
                                                             (line   19)
* d:                                     Preprocessor Options.
                                                             (line  403)
* d <1>:                                 Developer Options.  (line   35)
* da:                                    Developer Options.  (line  229)
* dA:                                    Developer Options.  (line  232)
* dD:                                    Preprocessor Options.
                                                             (line  427)
* dD <1>:                                Developer Options.  (line  236)
* dead_strip:                            Darwin Options.     (line  196)
* dependency-file:                       Darwin Options.     (line  196)
* dH:                                    Developer Options.  (line  240)
* dI:                                    Preprocessor Options.
                                                             (line  437)
* dM:                                    Preprocessor Options.
                                                             (line  412)
* dN:                                    Preprocessor Options.
                                                             (line  433)
* dp:                                    Developer Options.  (line  243)
* dP:                                    Developer Options.  (line  248)
* dU:                                    Preprocessor Options.
                                                             (line  441)
* dumpfullversion:                       Developer Options.  (line 1009)
* dumpmachine:                           Developer Options.  (line  997)
* dumpspecs:                             Developer Options.  (line 1014)
* dumpversion:                           Developer Options.  (line 1001)
* dx:                                    Developer Options.  (line  252)
* dylib_file:                            Darwin Options.     (line  196)
* dylinker_install_name:                 Darwin Options.     (line  196)
* dynamic:                               Darwin Options.     (line  196)
* dynamiclib:                            Darwin Options.     (line  131)
* E:                                     Overall Options.    (line  190)
* E <1>:                                 Link Options.       (line   20)
* e:                                     Link Options.       (line  170)
* EB:                                    ARC Options.        (line  597)
* EB <1>:                                C-SKY Options.      (line   29)
* EB <2>:                                MIPS Options.       (line    7)
* EL:                                    ARC Options.        (line  606)
* EL <1>:                                C-SKY Options.      (line   31)
* EL <2>:                                MIPS Options.       (line   10)
* entry:                                 Link Options.       (line  170)
* exported_symbols_list:                 Darwin Options.     (line  196)
* F:                                     Darwin Options.     (line   31)
* fabi-compat-version:                   C++ Dialect Options.
                                                             (line   85)
* fabi-version:                          C++ Dialect Options.
                                                             (line   24)
* faccess-control:                       C++ Dialect Options.
                                                             (line  101)
* fada-spec-parent:                      Overall Options.    (line  396)
* faggressive-loop-optimizations:        Optimize Options.   (line  537)
* falign-functions:                      Optimize Options.   (line 1647)
* falign-jumps:                          Optimize Options.   (line 1726)
* falign-labels:                         Optimize Options.   (line 1688)
* falign-loops:                          Optimize Options.   (line 1708)
* faligned-new:                          C++ Dialect Options.
                                                             (line  105)
* fallow-parameterless-variadic-functions: C Dialect Options.
                                                             (line  243)
* fasan-shadow-offset:                   Instrumentation Options.
                                                             (line  404)
* fasm:                                  C Dialect Options.  (line  250)
* fassociative-math:                     Optimize Options.   (line 2213)
* fasynchronous-unwind-tables:           Code Gen Options.   (line  156)
* fauto-inc-dec:                         Optimize Options.   (line  559)
* fauto-profile:                         Optimize Options.   (line 2088)
* fbranch-count-reg:                     Optimize Options.   (line  417)
* fbranch-probabilities:                 Optimize Options.   (line 2358)
* fbranch-target-load-optimize:          Optimize Options.   (line 2525)
* fbranch-target-load-optimize2:         Optimize Options.   (line 2531)
* fbtr-bb-exclusive:                     Optimize Options.   (line 2535)
* fbuiltin:                              C Dialect Options.  (line  264)
* fcall-saved:                           Code Gen Options.   (line  454)
* fcall-used:                            Code Gen Options.   (line  440)
* fcaller-saves:                         Optimize Options.   (line  917)
* fcf-protection:                        Instrumentation Options.
                                                             (line  477)
* fchar8_t:                              C++ Dialect Options.
                                                             (line  115)
* fcheck-new:                            C++ Dialect Options.
                                                             (line  158)
* fchecking:                             Developer Options.  (line  688)
* fcode-hoisting:                        Optimize Options.   (line  958)
* fcombine-stack-adjustments:            Optimize Options.   (line  929)
* fcommon:                               Code Gen Options.   (line  231)
* fcommon <1>:                           Common Variable Attributes.
                                                             (line  176)
* fcompare-debug:                        Developer Options.  (line  782)
* fcompare-debug-second:                 Developer Options.  (line  808)
* fcompare-elim:                         Optimize Options.   (line 2031)
* fconcepts:                             C++ Dialect Options.
                                                             (line  168)
* fcond-mismatch:                        C Dialect Options.  (line  394)
* fconserve-stack:                       Optimize Options.   (line  948)
* fconstant-string-class:                Objective-C and Objective-C++ Dialect Options.
                                                             (line   30)
* fconstexpr-depth:                      C++ Dialect Options.
                                                             (line  175)
* fconstexpr-loop-limit:                 C++ Dialect Options.
                                                             (line  181)
* fconstexpr-ops-limit:                  C++ Dialect Options.
                                                             (line  186)
* fcprop-registers:                      Optimize Options.   (line 2043)
* fcrossjumping:                         Optimize Options.   (line  552)
* fcse-follow-jumps:                     Optimize Options.   (line  471)
* fcse-skip-blocks:                      Optimize Options.   (line  480)
* fcx-fortran-rules:                     Optimize Options.   (line 2345)
* fcx-limited-range:                     Optimize Options.   (line 2333)
* fdata-sections:                        Optimize Options.   (line 2496)
* fdbg-cnt:                              Developer Options.  (line  918)
* fdbg-cnt-list:                         Developer Options.  (line  915)
* fdce:                                  Optimize Options.   (line  565)
* fdebug-cpp:                            Preprocessor Options.
                                                             (line  448)
* fdebug-prefix-map:                     Debugging Options.  (line  140)
* fdebug-types-section:                  Debugging Options.  (line  191)
* fdeclone-ctor-dtor:                    Optimize Options.   (line  588)
* fdeduce-init-list:                     C++ Dialect Options.
                                                             (line  195)
* fdefer-pop:                            Optimize Options.   (line  218)
* fdelayed-branch:                       Optimize Options.   (line  741)
* fdelete-dead-exceptions:               Code Gen Options.   (line  141)
* fdelete-null-pointer-checks:           Optimize Options.   (line  599)
* fdevirtualize:                         Optimize Options.   (line  620)
* fdevirtualize-at-ltrans:               Optimize Options.   (line  637)
* fdevirtualize-speculatively:           Optimize Options.   (line  627)
* fdiagnostics-color:                    Diagnostic Message Formatting Options.
                                                             (line   40)
* fdiagnostics-format:                   Diagnostic Message Formatting Options.
                                                             (line  242)
* fdiagnostics-generate-patch:           Diagnostic Message Formatting Options.
                                                             (line  187)
* fdiagnostics-minimum-margin-width:     Diagnostic Message Formatting Options.
                                                             (line  156)
* fdiagnostics-parseable-fixits:         Diagnostic Message Formatting Options.
                                                             (line  160)
* fdiagnostics-show-caret:               Diagnostic Message Formatting Options.
                                                             (line  129)
* fdiagnostics-show-labels:              Diagnostic Message Formatting Options.
                                                             (line  138)
* fdiagnostics-show-line-numbers:        Diagnostic Message Formatting Options.
                                                             (line  151)
* fdiagnostics-show-location:            Diagnostic Message Formatting Options.
                                                             (line   25)
* fdiagnostics-show-option:              Diagnostic Message Formatting Options.
                                                             (line  123)
* fdiagnostics-show-template-tree:       Diagnostic Message Formatting Options.
                                                             (line  205)
* fdirectives-only:                      Preprocessor Options.
                                                             (line  202)
* fdisable-:                             Developer Options.  (line  619)
* fdollars-in-identifiers:               Preprocessor Options.
                                                             (line  223)
* fdollars-in-identifiers <1>:           Interoperation.     (line  141)
* fdpic:                                 SH Options.         (line  388)
* fdse:                                  Optimize Options.   (line  569)
* fdump-ada-spec:                        Overall Options.    (line  391)
* fdump-debug:                           Developer Options.  (line  256)
* fdump-earlydebug:                      Developer Options.  (line  260)
* fdump-final-insns:                     Developer Options.  (line  776)
* fdump-go-spec:                         Overall Options.    (line  400)
* fdump-ipa:                             Developer Options.  (line  286)
* fdump-lang:                            Developer Options.  (line  318)
* fdump-lang-all:                        Developer Options.  (line  318)
* fdump-noaddr:                          Developer Options.  (line  264)
* fdump-passes:                          Developer Options.  (line  336)
* fdump-rtl-alignments:                  Developer Options.  (line   48)
* fdump-rtl-all:                         Developer Options.  (line  229)
* fdump-rtl-asmcons:                     Developer Options.  (line   51)
* fdump-rtl-auto_inc_dec:                Developer Options.  (line   55)
* fdump-rtl-barriers:                    Developer Options.  (line   59)
* fdump-rtl-bbpart:                      Developer Options.  (line   62)
* fdump-rtl-bbro:                        Developer Options.  (line   65)
* fdump-rtl-btl2:                        Developer Options.  (line   69)
* fdump-rtl-btl2 <1>:                    Developer Options.  (line   69)
* fdump-rtl-bypass:                      Developer Options.  (line   73)
* fdump-rtl-ce1:                         Developer Options.  (line   84)
* fdump-rtl-ce2:                         Developer Options.  (line   84)
* fdump-rtl-ce3:                         Developer Options.  (line   84)
* fdump-rtl-combine:                     Developer Options.  (line   76)
* fdump-rtl-compgotos:                   Developer Options.  (line   79)
* fdump-rtl-cprop_hardreg:               Developer Options.  (line   88)
* fdump-rtl-csa:                         Developer Options.  (line   91)
* fdump-rtl-cse1:                        Developer Options.  (line   95)
* fdump-rtl-cse2:                        Developer Options.  (line   95)
* fdump-rtl-dbr:                         Developer Options.  (line  102)
* fdump-rtl-dce:                         Developer Options.  (line   99)
* fdump-rtl-dce1:                        Developer Options.  (line  106)
* fdump-rtl-dce2:                        Developer Options.  (line  106)
* fdump-rtl-dfinish:                     Developer Options.  (line  225)
* fdump-rtl-dfinit:                      Developer Options.  (line  225)
* fdump-rtl-eh:                          Developer Options.  (line  110)
* fdump-rtl-eh_ranges:                   Developer Options.  (line  113)
* fdump-rtl-expand:                      Developer Options.  (line  116)
* fdump-rtl-fwprop1:                     Developer Options.  (line  120)
* fdump-rtl-fwprop2:                     Developer Options.  (line  120)
* fdump-rtl-gcse1:                       Developer Options.  (line  125)
* fdump-rtl-gcse2:                       Developer Options.  (line  125)
* fdump-rtl-init-regs:                   Developer Options.  (line  129)
* fdump-rtl-initvals:                    Developer Options.  (line  132)
* fdump-rtl-into_cfglayout:              Developer Options.  (line  135)
* fdump-rtl-ira:                         Developer Options.  (line  138)
* fdump-rtl-jump:                        Developer Options.  (line  141)
* fdump-rtl-loop2:                       Developer Options.  (line  144)
* fdump-rtl-mach:                        Developer Options.  (line  148)
* fdump-rtl-mode_sw:                     Developer Options.  (line  152)
* fdump-rtl-outof_cfglayout:             Developer Options.  (line  158)
* fdump-rtl-PASS:                        Developer Options.  (line   35)
* fdump-rtl-peephole2:                   Developer Options.  (line  161)
* fdump-rtl-postreload:                  Developer Options.  (line  164)
* fdump-rtl-pro_and_epilogue:            Developer Options.  (line  167)
* fdump-rtl-ree:                         Developer Options.  (line  175)
* fdump-rtl-regclass:                    Developer Options.  (line  225)
* fdump-rtl-rnreg:                       Developer Options.  (line  155)
* fdump-rtl-sched1:                      Developer Options.  (line  171)
* fdump-rtl-sched2:                      Developer Options.  (line  171)
* fdump-rtl-seqabstr:                    Developer Options.  (line  178)
* fdump-rtl-shorten:                     Developer Options.  (line  181)
* fdump-rtl-sibling:                     Developer Options.  (line  184)
* fdump-rtl-sms:                         Developer Options.  (line  195)
* fdump-rtl-split1:                      Developer Options.  (line  191)
* fdump-rtl-split2:                      Developer Options.  (line  191)
* fdump-rtl-split3:                      Developer Options.  (line  191)
* fdump-rtl-split4:                      Developer Options.  (line  191)
* fdump-rtl-split5:                      Developer Options.  (line  191)
* fdump-rtl-stack:                       Developer Options.  (line  199)
* fdump-rtl-subreg1:                     Developer Options.  (line  205)
* fdump-rtl-subreg2:                     Developer Options.  (line  205)
* fdump-rtl-subregs_of_mode_finish:      Developer Options.  (line  225)
* fdump-rtl-subregs_of_mode_init:        Developer Options.  (line  225)
* fdump-rtl-unshare:                     Developer Options.  (line  209)
* fdump-rtl-vartrack:                    Developer Options.  (line  212)
* fdump-rtl-vregs:                       Developer Options.  (line  215)
* fdump-rtl-web:                         Developer Options.  (line  218)
* fdump-statistics:                      Developer Options.  (line  340)
* fdump-tree:                            Developer Options.  (line  353)
* fdump-tree-all:                        Developer Options.  (line  353)
* fdump-unnumbered:                      Developer Options.  (line  274)
* fdump-unnumbered-links:                Developer Options.  (line  280)
* fdwarf2-cfi-asm:                       Debugging Options.  (line  396)
* fearly-inlining:                       Optimize Options.   (line  317)
* felide-constructors:                   C++ Dialect Options.
                                                             (line  216)
* felide-type:                           Diagnostic Message Formatting Options.
                                                             (line  225)
* feliminate-unused-debug-symbols:       Debugging Options.  (line  121)
* feliminate-unused-debug-types:         Debugging Options.  (line  400)
* femit-class-debug-always:              Debugging Options.  (line  125)
* femit-struct-debug-baseonly:           Debugging Options.  (line  327)
* femit-struct-debug-detailed:           Debugging Options.  (line  354)
* femit-struct-debug-reduced:            Debugging Options.  (line  340)
* fenable-:                              Developer Options.  (line  619)
* fenforce-eh-specs:                     C++ Dialect Options.
                                                             (line  227)
* fexceptions:                           Code Gen Options.   (line  119)
* fexcess-precision:                     Optimize Options.   (line 2139)
* fexec-charset:                         Preprocessor Options.
                                                             (line  266)
* fexpensive-optimizations:              Optimize Options.   (line  644)
* fext-numeric-literals:                 C++ Dialect Options.
                                                             (line  836)
* fextended-identifiers:                 Preprocessor Options.
                                                             (line  226)
* fextern-tls-init:                      C++ Dialect Options.
                                                             (line  237)
* ffast-math:                            Optimize Options.   (line 2163)
* ffat-lto-objects:                      Optimize Options.   (line 2008)
* ffile-prefix-map:                      Overall Options.    (line  371)
* ffinite-math-only:                     Optimize Options.   (line 2240)
* ffix-and-continue:                     Darwin Options.     (line  104)
* ffixed:                                Code Gen Options.   (line  428)
* ffloat-store:                          Optimize Options.   (line 2125)
* ffloat-store <1>:                      Disappointments.    (line   77)
* fforward-propagate:                    Optimize Options.   (line  225)
* ffp-contract:                          Optimize Options.   (line  234)
* ffp-int-builtin-inexact:               Optimize Options.   (line 2312)
* ffreestanding:                         Standards.          (line   99)
* ffreestanding <1>:                     C Dialect Options.  (line  312)
* ffreestanding <2>:                     Warning Options.    (line  290)
* ffreestanding <3>:                     Common Function Attributes.
                                                             (line  350)
* ffunction-cse:                         Optimize Options.   (line  431)
* ffunction-sections:                    Optimize Options.   (line 2496)
* fgcse:                                 Optimize Options.   (line  494)
* fgcse-after-reload:                    Optimize Options.   (line  530)
* fgcse-las:                             Optimize Options.   (line  523)
* fgcse-lm:                              Optimize Options.   (line  505)
* fgcse-sm:                              Optimize Options.   (line  514)
* fgimple:                               C Dialect Options.  (line  298)
* fgnu-keywords:                         C++ Dialect Options.
                                                             (line  257)
* fgnu-runtime:                          Objective-C and Objective-C++ Dialect Options.
                                                             (line   39)
* fgnu-tm:                               C Dialect Options.  (line  351)
* fgnu-unique:                           Code Gen Options.   (line  162)
* fgnu89-inline:                         C Dialect Options.  (line  188)
* fgraphite-identity:                    Optimize Options.   (line 1231)
* fguess-branch-probability:             Optimize Options.   (line 1527)
* fhoist-adjacent-loads:                 Optimize Options.   (line  988)
* fhosted:                               C Dialect Options.  (line  304)
* fident:                                Code Gen Options.   (line  258)
* fif-conversion:                        Optimize Options.   (line  573)
* fif-conversion2:                       Optimize Options.   (line  582)
* fiji:                                  AMD GCN Options.    (line   13)
* filelist:                              Darwin Options.     (line  196)
* fimplement-inlines:                    C++ Dialect Options.
                                                             (line  277)
* fimplicit-inline-templates:            C++ Dialect Options.
                                                             (line  271)
* fimplicit-templates:                   C++ Dialect Options.
                                                             (line  263)
* findirect-data:                        Darwin Options.     (line  104)
* findirect-inlining:                    Optimize Options.   (line  289)
* finhibit-size-directive:               Code Gen Options.   (line  261)
* finline:                               Optimize Options.   (line  272)
* finline-functions:                     Optimize Options.   (line  297)
* finline-functions-called-once:         Optimize Options.   (line  309)
* finline-limit:                         Optimize Options.   (line  333)
* finline-small-functions:               Optimize Options.   (line  280)
* finput-charset:                        Preprocessor Options.
                                                             (line  279)
* finstrument-functions:                 Instrumentation Options.
                                                             (line  670)
* finstrument-functions <1>:             Common Function Attributes.
                                                             (line  620)
* finstrument-functions-exclude-file-list: Instrumentation Options.
                                                             (line  706)
* finstrument-functions-exclude-function-list: Instrumentation Options.
                                                             (line  727)
* fipa-bit-cp:                           Optimize Options.   (line 1048)
* fipa-cp:                               Optimize Options.   (line 1029)
* fipa-cp-clone:                         Optimize Options.   (line 1038)
* fipa-icf:                              Optimize Options.   (line 1058)
* fipa-profile:                          Optimize Options.   (line 1021)
* fipa-pta:                              Optimize Options.   (line 1015)
* fipa-pure-const:                       Optimize Options.   (line  999)
* fipa-ra:                               Optimize Options.   (line  935)
* fipa-reference:                        Optimize Options.   (line 1003)
* fipa-reference-addressable:            Optimize Options.   (line 1007)
* fipa-sra:                              Optimize Options.   (line  326)
* fipa-stack-alignment:                  Optimize Options.   (line 1011)
* fipa-vrp:                              Optimize Options.   (line 1053)
* fira-algorithm:                        Optimize Options.   (line  678)
* fira-hoist-pressure:                   Optimize Options.   (line  707)
* fira-loop-pressure:                    Optimize Options.   (line  714)
* fira-region:                           Optimize Options.   (line  686)
* fira-share-save-slots:                 Optimize Options.   (line  722)
* fira-share-spill-slots:                Optimize Options.   (line  728)
* fira-verbose:                          Developer Options.  (line  845)
* fisolate-erroneous-paths-attribute:    Optimize Options.   (line 1140)
* fisolate-erroneous-paths-dereference:  Optimize Options.   (line 1132)
* fivar-visibility:                      Objective-C and Objective-C++ Dialect Options.
                                                             (line  161)
* fivopts:                               Optimize Options.   (line 1356)
* fjump-tables:                          Code Gen Options.   (line  420)
* fkeep-inline-dllexport:                Optimize Options.   (line  358)
* fkeep-inline-functions:                Optimize Options.   (line  364)
* fkeep-inline-functions <1>:            Inline.             (line   51)
* fkeep-static-consts:                   Optimize Options.   (line  375)
* fkeep-static-functions:                Optimize Options.   (line  371)
* flat_namespace:                        Darwin Options.     (line  196)
* flax-vector-conversions:               C Dialect Options.  (line  399)
* fleading-underscore:                   Code Gen Options.   (line  484)
* flifetime-dse:                         Optimize Options.   (line  658)
* flinker-output:                        Link Options.       (line   25)
* flive-patching:                        Optimize Options.   (line 1072)
* flive-range-shrinkage:                 Optimize Options.   (line  673)
* flocal-ivars:                          Objective-C and Objective-C++ Dialect Options.
                                                             (line  152)
* floop-block:                           Optimize Options.   (line 1225)
* floop-interchange:                     Optimize Options.   (line 1309)
* floop-nest-optimize:                   Optimize Options.   (line 1239)
* floop-parallelize-all:                 Optimize Options.   (line 1245)
* floop-strip-mine:                      Optimize Options.   (line 1225)
* floop-unroll-and-jam:                  Optimize Options.   (line 1326)
* flra-remat:                            Optimize Options.   (line  734)
* flto:                                  Optimize Options.   (line 1782)
* flto-compression-level:                Optimize Options.   (line 1982)
* flto-odr-type-merging:                 Optimize Options.   (line 1977)
* flto-partition:                        Optimize Options.   (line 1963)
* flto-report:                           Developer Options.  (line  851)
* flto-report-wpa:                       Developer Options.  (line  859)
* fmacro-prefix-map:                     Preprocessor Options.
                                                             (line  257)
* fmath-errno:                           Optimize Options.   (line 2177)
* fmax-errors:                           Warning Options.    (line   18)
* fmem-report:                           Developer Options.  (line  863)
* fmem-report-wpa:                       Developer Options.  (line  867)
* fmerge-all-constants:                  Optimize Options.   (line  394)
* fmerge-constants:                      Optimize Options.   (line  384)
* fmerge-debug-strings:                  Debugging Options.  (line  133)
* fmessage-length:                       Diagnostic Message Formatting Options.
                                                             (line   14)
* fmodulo-sched:                         Optimize Options.   (line  405)
* fmodulo-sched-allow-regmoves:          Optimize Options.   (line  410)
* fmove-loop-invariants:                 Optimize Options.   (line 2456)
* fms-extensions:                        C Dialect Options.  (line  366)
* fms-extensions <1>:                    C++ Dialect Options.
                                                             (line  282)
* fms-extensions <2>:                    Unnamed Fields.     (line   36)
* fnew-inheriting-ctors:                 C++ Dialect Options.
                                                             (line  287)
* fnew-ttp-matching:                     C++ Dialect Options.
                                                             (line  293)
* fnext-runtime:                         Objective-C and Objective-C++ Dialect Options.
                                                             (line   43)
* fnil-receivers:                        Objective-C and Objective-C++ Dialect Options.
                                                             (line   49)
* fno-access-control:                    C++ Dialect Options.
                                                             (line  101)
* fno-asm:                               C Dialect Options.  (line  250)
* fno-branch-count-reg:                  Optimize Options.   (line  417)
* fno-builtin:                           C Dialect Options.  (line  264)
* fno-builtin <1>:                       Warning Options.    (line  290)
* fno-builtin <2>:                       Common Function Attributes.
                                                             (line  350)
* fno-builtin <3>:                       Other Builtins.     (line   21)
* fno-canonical-system-headers:          Preprocessor Options.
                                                             (line  230)
* fno-char8_t:                           C++ Dialect Options.
                                                             (line  115)
* fno-checking:                          Developer Options.  (line  688)
* fno-common:                            Code Gen Options.   (line  231)
* fno-common <1>:                        Common Variable Attributes.
                                                             (line  176)
* fno-compare-debug:                     Developer Options.  (line  782)
* fno-debug-types-section:               Debugging Options.  (line  191)
* fno-default-inline:                    Inline.             (line   68)
* fno-defer-pop:                         Optimize Options.   (line  218)
* fno-diagnostics-show-caret:            Diagnostic Message Formatting Options.
                                                             (line  129)
* fno-diagnostics-show-labels:           Diagnostic Message Formatting Options.
                                                             (line  138)
* fno-diagnostics-show-line-numbers:     Diagnostic Message Formatting Options.
                                                             (line  151)
* fno-diagnostics-show-option:           Diagnostic Message Formatting Options.
                                                             (line  123)
* fno-dwarf2-cfi-asm:                    Debugging Options.  (line  396)
* fno-elide-constructors:                C++ Dialect Options.
                                                             (line  216)
* fno-elide-type:                        Diagnostic Message Formatting Options.
                                                             (line  225)
* fno-eliminate-unused-debug-types:      Debugging Options.  (line  400)
* fno-enforce-eh-specs:                  C++ Dialect Options.
                                                             (line  227)
* fno-ext-numeric-literals:              C++ Dialect Options.
                                                             (line  836)
* fno-extern-tls-init:                   C++ Dialect Options.
                                                             (line  237)
* fno-fp-int-builtin-inexact:            Optimize Options.   (line 2312)
* fno-function-cse:                      Optimize Options.   (line  431)
* fno-gnu-keywords:                      C++ Dialect Options.
                                                             (line  257)
* fno-gnu-unique:                        Code Gen Options.   (line  162)
* fno-guess-branch-probability:          Optimize Options.   (line 1527)
* fno-ident:                             Code Gen Options.   (line  258)
* fno-implement-inlines:                 C++ Dialect Options.
                                                             (line  277)
* fno-implement-inlines <1>:             C++ Interface.      (line   66)
* fno-implicit-inline-templates:         C++ Dialect Options.
                                                             (line  271)
* fno-implicit-templates:                C++ Dialect Options.
                                                             (line  263)
* fno-implicit-templates <1>:            Template Instantiation.
                                                             (line  118)
* fno-inline:                            Optimize Options.   (line  272)
* fno-ira-share-save-slots:              Optimize Options.   (line  722)
* fno-ira-share-spill-slots:             Optimize Options.   (line  728)
* fno-jump-tables:                       Code Gen Options.   (line  420)
* fno-keep-inline-dllexport:             Optimize Options.   (line  358)
* fno-lifetime-dse:                      Optimize Options.   (line  658)
* fno-local-ivars:                       Objective-C and Objective-C++ Dialect Options.
                                                             (line  152)
* fno-math-errno:                        Optimize Options.   (line 2177)
* fno-merge-debug-strings:               Debugging Options.  (line  133)
* fno-nil-receivers:                     Objective-C and Objective-C++ Dialect Options.
                                                             (line   49)
* fno-nonansi-builtins:                  C++ Dialect Options.
                                                             (line  300)
* fno-operator-names:                    C++ Dialect Options.
                                                             (line  316)
* fno-optional-diags:                    C++ Dialect Options.
                                                             (line  320)
* fno-peephole:                          Optimize Options.   (line 1518)
* fno-peephole2:                         Optimize Options.   (line 1518)
* fno-plt:                               Code Gen Options.   (line  402)
* fno-pretty-templates:                  C++ Dialect Options.
                                                             (line  330)
* fno-printf-return-value:               Optimize Options.   (line 1495)
* fno-rtti:                              C++ Dialect Options.
                                                             (line  347)
* fno-sanitize-recover:                  Instrumentation Options.
                                                             (line  413)
* fno-sanitize=all:                      Instrumentation Options.
                                                             (line  398)
* fno-sched-interblock:                  Optimize Options.   (line  767)
* fno-sched-spec:                        Optimize Options.   (line  772)
* fno-set-stack-executable:              x86 Windows Options.
                                                             (line   46)
* fno-show-column:                       Diagnostic Message Formatting Options.
                                                             (line  237)
* fno-signed-bitfields:                  C Dialect Options.  (line  432)
* fno-signed-zeros:                      Optimize Options.   (line 2252)
* fno-stack-limit:                       Instrumentation Options.
                                                             (line  582)
* fno-threadsafe-statics:                C++ Dialect Options.
                                                             (line  402)
* fno-toplevel-reorder:                  Optimize Options.   (line 1747)
* fno-trapping-math:                     Optimize Options.   (line 2262)
* fno-unsigned-bitfields:                C Dialect Options.  (line  432)
* fno-use-cxa-get-exception-ptr:         C++ Dialect Options.
                                                             (line  415)
* fno-var-tracking-assignments:          Debugging Options.  (line  160)
* fno-var-tracking-assignments-toggle:   Developer Options.  (line  829)
* fno-weak:                              C++ Dialect Options.
                                                             (line  477)
* fno-working-directory:                 Preprocessor Options.
                                                             (line  314)
* fno-writable-relocated-rdata:          x86 Windows Options.
                                                             (line   53)
* fno-zero-initialized-in-bss:           Optimize Options.   (line  442)
* fnon-call-exceptions:                  Code Gen Options.   (line  133)
* fnonansi-builtins:                     C++ Dialect Options.
                                                             (line  300)
* fnothrow-opt:                          C++ Dialect Options.
                                                             (line  305)
* fobjc-abi-version:                     Objective-C and Objective-C++ Dialect Options.
                                                             (line   56)
* fobjc-call-cxx-cdtors:                 Objective-C and Objective-C++ Dialect Options.
                                                             (line   67)
* fobjc-direct-dispatch:                 Objective-C and Objective-C++ Dialect Options.
                                                             (line   92)
* fobjc-exceptions:                      Objective-C and Objective-C++ Dialect Options.
                                                             (line   96)
* fobjc-gc:                              Objective-C and Objective-C++ Dialect Options.
                                                             (line  104)
* fobjc-nilcheck:                        Objective-C and Objective-C++ Dialect Options.
                                                             (line  110)
* fobjc-std:                             Objective-C and Objective-C++ Dialect Options.
                                                             (line  119)
* fomit-frame-pointer:                   Optimize Options.   (line  245)
* fopenacc:                              C Dialect Options.  (line  323)
* fopenacc-dim:                          C Dialect Options.  (line  332)
* fopenmp:                               C Dialect Options.  (line  338)
* fopenmp-simd:                          C Dialect Options.  (line  347)
* foperator-names:                       C++ Dialect Options.
                                                             (line  316)
* fopt-info:                             Developer Options.  (line  459)
* foptimize-sibling-calls:               Optimize Options.   (line  260)
* foptimize-strlen:                      Optimize Options.   (line  265)
* foptional-diags:                       C++ Dialect Options.
                                                             (line  320)
* force_cpusubtype_ALL:                  Darwin Options.     (line  135)
* force_flat_namespace:                  Darwin Options.     (line  196)
* fpack-struct:                          Code Gen Options.   (line  471)
* fpartial-inlining:                     Optimize Options.   (line 1470)
* fpatchable-function-entry:             Instrumentation Options.
                                                             (line  739)
* fpcc-struct-return:                    Code Gen Options.   (line  175)
* fpcc-struct-return <1>:                Incompatibilities.  (line  170)
* fpch-deps:                             Preprocessor Options.
                                                             (line  289)
* fpch-preprocess:                       Preprocessor Options.
                                                             (line  297)
* fpeel-loops:                           Optimize Options.   (line 2448)
* fpeephole:                             Optimize Options.   (line 1518)
* fpeephole2:                            Optimize Options.   (line 1518)
* fpermissive:                           C++ Dialect Options.
                                                             (line  325)
* fpermitted-flt-eval-methods:           C Dialect Options.  (line  205)
* fpermitted-flt-eval-methods=c11:       C Dialect Options.  (line  205)
* fpermitted-flt-eval-methods=ts-18661-3: C Dialect Options. (line  205)
* fpic:                                  Code Gen Options.   (line  359)
* fPIC:                                  Code Gen Options.   (line  380)
* fpie:                                  Code Gen Options.   (line  393)
* fPIE:                                  Code Gen Options.   (line  393)
* fplan9-extensions:                     C Dialect Options.  (line  384)
* fplan9-extensions <1>:                 Unnamed Fields.     (line   43)
* fplt:                                  Code Gen Options.   (line  402)
* fplugin:                               Overall Options.    (line  380)
* fplugin-arg:                           Overall Options.    (line  387)
* fpost-ipa-mem-report:                  Developer Options.  (line  872)
* fpre-ipa-mem-report:                   Developer Options.  (line  871)
* fpredictive-commoning:                 Optimize Options.   (line 1477)
* fprefetch-loop-arrays:                 Optimize Options.   (line 1485)
* fpreprocessed:                         Preprocessor Options.
                                                             (line  189)
* fpretty-templates:                     C++ Dialect Options.
                                                             (line  330)
* fprintf-return-value:                  Optimize Options.   (line 1495)
* fprofile-abs-path:                     Instrumentation Options.
                                                             (line  106)
* fprofile-arcs:                         Instrumentation Options.
                                                             (line   30)
* fprofile-arcs <1>:                     Other Builtins.     (line  563)
* fprofile-correction:                   Optimize Options.   (line 2050)
* fprofile-dir:                          Instrumentation Options.
                                                             (line  112)
* fprofile-exclude-files:                Instrumentation Options.
                                                             (line  179)
* fprofile-filter-files:                 Instrumentation Options.
                                                             (line  171)
* fprofile-generate:                     Instrumentation Options.
                                                             (line  137)
* fprofile-reorder-functions:            Optimize Options.   (line 2388)
* fprofile-report:                       Developer Options.  (line  876)
* fprofile-update:                       Instrumentation Options.
                                                             (line  154)
* fprofile-use:                          Optimize Options.   (line 2060)
* fprofile-values:                       Optimize Options.   (line 2378)
* fpu:                                   RX Options.         (line   17)
* frandom-seed:                          Developer Options.  (line  693)
* freciprocal-math:                      Optimize Options.   (line 2230)
* frecord-gcc-switches:                  Code Gen Options.   (line  347)
* free:                                  Optimize Options.   (line  650)
* freg-struct-return:                    Code Gen Options.   (line  193)
* frename-registers:                     Optimize Options.   (line 2407)
* freorder-blocks:                       Optimize Options.   (line 1548)
* freorder-blocks-algorithm:             Optimize Options.   (line 1554)
* freorder-blocks-and-partition:         Optimize Options.   (line 1565)
* freorder-functions:                    Optimize Options.   (line 1582)
* freplace-objc-classes:                 Objective-C and Objective-C++ Dialect Options.
                                                             (line  130)
* frepo:                                 C++ Dialect Options.
                                                             (line  342)
* frepo <1>:                             Template Instantiation.
                                                             (line   94)
* freport-bug:                           Developer Options.  (line  270)
* frerun-cse-after-loop:                 Optimize Options.   (line  488)
* freschedule-modulo-scheduled-loops:    Optimize Options.   (line  866)
* frounding-math:                        Optimize Options.   (line 2277)
* frtti:                                 C++ Dialect Options.
                                                             (line  347)
* fsanitize-address-use-after-scope:     Instrumentation Options.
                                                             (line  449)
* fsanitize-coverage=trace-cmp:          Instrumentation Options.
                                                             (line  464)
* fsanitize-coverage=trace-pc:           Instrumentation Options.
                                                             (line  460)
* fsanitize-recover:                     Instrumentation Options.
                                                             (line  413)
* fsanitize-sections:                    Instrumentation Options.
                                                             (line  409)
* fsanitize-undefined-trap-on-error:     Instrumentation Options.
                                                             (line  453)
* fsanitize=address:                     Instrumentation Options.
                                                             (line  187)
* fsanitize=alignment:                   Instrumentation Options.
                                                             (line  324)
* fsanitize=bool:                        Instrumentation Options.
                                                             (line  362)
* fsanitize=bounds:                      Instrumentation Options.
                                                             (line  311)
* fsanitize=bounds-strict:               Instrumentation Options.
                                                             (line  317)
* fsanitize=builtin:                     Instrumentation Options.
                                                             (line  386)
* fsanitize=enum:                        Instrumentation Options.
                                                             (line  367)
* fsanitize=float-cast-overflow:         Instrumentation Options.
                                                             (line  342)
* fsanitize=float-divide-by-zero:        Instrumentation Options.
                                                             (line  336)
* fsanitize=integer-divide-by-zero:      Instrumentation Options.
                                                             (line  274)
* fsanitize=kernel-address:              Instrumentation Options.
                                                             (line  201)
* fsanitize=leak:                        Instrumentation Options.
                                                             (line  239)
* fsanitize=nonnull-attribute:           Instrumentation Options.
                                                             (line  350)
* fsanitize=null:                        Instrumentation Options.
                                                             (line  288)
* fsanitize=object-size:                 Instrumentation Options.
                                                             (line  331)
* fsanitize=pointer-compare:             Instrumentation Options.
                                                             (line  205)
* fsanitize=pointer-overflow:            Instrumentation Options.
                                                             (line  380)
* fsanitize=pointer-subtract:            Instrumentation Options.
                                                             (line  215)
* fsanitize=return:                      Instrumentation Options.
                                                             (line  296)
* fsanitize=returns-nonnull-attribute:   Instrumentation Options.
                                                             (line  356)
* fsanitize=shift:                       Instrumentation Options.
                                                             (line  254)
* fsanitize=shift-base:                  Instrumentation Options.
                                                             (line  267)
* fsanitize=shift-exponent:              Instrumentation Options.
                                                             (line  262)
* fsanitize=signed-integer-overflow:     Instrumentation Options.
                                                             (line  302)
* fsanitize=thread:                      Instrumentation Options.
                                                             (line  225)
* fsanitize=undefined:                   Instrumentation Options.
                                                             (line  249)
* fsanitize=unreachable:                 Instrumentation Options.
                                                             (line  278)
* fsanitize=vla-bound:                   Instrumentation Options.
                                                             (line  284)
* fsanitize=vptr:                        Instrumentation Options.
                                                             (line  373)
* fsave-optimization-record:             Developer Options.  (line  565)
* fsched-critical-path-heuristic:        Optimize Options.   (line  832)
* fsched-dep-count-heuristic:            Optimize Options.   (line  859)
* fsched-group-heuristic:                Optimize Options.   (line  826)
* fsched-interblock:                     Optimize Options.   (line  767)
* fsched-last-insn-heuristic:            Optimize Options.   (line  852)
* fsched-pressure:                       Optimize Options.   (line  777)
* fsched-rank-heuristic:                 Optimize Options.   (line  845)
* fsched-spec:                           Optimize Options.   (line  772)
* fsched-spec-insn-heuristic:            Optimize Options.   (line  838)
* fsched-spec-load:                      Optimize Options.   (line  786)
* fsched-spec-load-dangerous:            Optimize Options.   (line  791)
* fsched-stalled-insns:                  Optimize Options.   (line  797)
* fsched-stalled-insns-dep:              Optimize Options.   (line  807)
* fsched-verbose:                        Developer Options.  (line  605)
* fsched2-use-superblocks:               Optimize Options.   (line  816)
* fschedule-fusion:                      Optimize Options.   (line 2417)
* fschedule-insns:                       Optimize Options.   (line  748)
* fschedule-insns2:                      Optimize Options.   (line  758)
* fsection-anchors:                      Optimize Options.   (line 2543)
* fsel-sched-pipelining:                 Optimize Options.   (line  879)
* fsel-sched-pipelining-outer-loops:     Optimize Options.   (line  884)
* fselective-scheduling:                 Optimize Options.   (line  871)
* fselective-scheduling2:                Optimize Options.   (line  875)
* fsemantic-interposition:               Optimize Options.   (line  889)
* fset-stack-executable:                 x86 Windows Options.
                                                             (line   46)
* fshort-enums:                          Code Gen Options.   (line  211)
* fshort-enums <1>:                      Structures unions enumerations and bit-fields implementation.
                                                             (line   48)
* fshort-enums <2>:                      Common Type Attributes.
                                                             (line  288)
* fshort-enums <3>:                      Non-bugs.           (line   42)
* fshort-wchar:                          Code Gen Options.   (line  221)
* fshow-column:                          Diagnostic Message Formatting Options.
                                                             (line  237)
* fshrink-wrap:                          Optimize Options.   (line  906)
* fshrink-wrap-separate:                 Optimize Options.   (line  911)
* fsignaling-nans:                       Optimize Options.   (line 2297)
* fsigned-bitfields:                     C Dialect Options.  (line  432)
* fsigned-bitfields <1>:                 Non-bugs.           (line   57)
* fsigned-char:                          C Dialect Options.  (line  422)
* fsigned-char <1>:                      Characters implementation.
                                                             (line   31)
* fsigned-zeros:                         Optimize Options.   (line 2252)
* fsimd-cost-model:                      Optimize Options.   (line 1430)
* fsingle-precision-constant:            Optimize Options.   (line 2329)
* fsized-deallocation:                   C++ Dialect Options.
                                                             (line  362)
* fsplit-ivs-in-unroller:                Optimize Options.   (line 1451)
* fsplit-loops:                          Optimize Options.   (line 2460)
* fsplit-paths:                          Optimize Options.   (line 1446)
* fsplit-stack:                          Instrumentation Options.
                                                             (line  599)
* fsplit-stack <1>:                      Common Function Attributes.
                                                             (line  670)
* fsplit-wide-types:                     Optimize Options.   (line  463)
* fssa-backprop:                         Optimize Options.   (line 1164)
* fssa-phiopt:                           Optimize Options.   (line 1170)
* fsso-struct:                           C Dialect Options.  (line  438)
* fstack-check:                          Instrumentation Options.
                                                             (line  525)
* fstack-clash-protection:               Instrumentation Options.
                                                             (line  567)
* fstack-limit-register:                 Instrumentation Options.
                                                             (line  582)
* fstack-limit-symbol:                   Instrumentation Options.
                                                             (line  582)
* fstack-protector:                      Instrumentation Options.
                                                             (line  504)
* fstack-protector-all:                  Instrumentation Options.
                                                             (line  513)
* fstack-protector-explicit:             Instrumentation Options.
                                                             (line  521)
* fstack-protector-strong:               Instrumentation Options.
                                                             (line  516)
* fstack-usage:                          Developer Options.  (line  880)
* fstack_reuse:                          Code Gen Options.   (line   15)
* fstats:                                Developer Options.  (line  909)
* fstdarg-opt:                           Optimize Options.   (line 2539)
* fstore-merging:                        Optimize Options.   (line 1380)
* fstrict-aliasing:                      Optimize Options.   (line 1597)
* fstrict-enums:                         C++ Dialect Options.
                                                             (line  372)
* fstrict-overflow:                      Code Gen Options.   (line  115)
* fstrict-volatile-bitfields:            Code Gen Options.   (line  595)
* fstrong-eval-order:                    C++ Dialect Options.
                                                             (line  381)
* fsync-libcalls:                        Code Gen Options.   (line  627)
* fsyntax-only:                          Warning Options.    (line   14)
* ftabstop:                              Preprocessor Options.
                                                             (line  234)
* ftemplate-backtrace-limit:             C++ Dialect Options.
                                                             (line  389)
* ftemplate-depth:                       C++ Dialect Options.
                                                             (line  393)
* ftest-coverage:                        Instrumentation Options.
                                                             (line   97)
* fthread-jumps:                         Optimize Options.   (line  454)
* fthreadsafe-statics:                   C++ Dialect Options.
                                                             (line  402)
* ftime-report:                          Developer Options.  (line  837)
* ftime-report-details:                  Developer Options.  (line  841)
* ftls-model:                            Code Gen Options.   (line  495)
* ftoplevel-reorder:                     Optimize Options.   (line 1747)
* ftracer:                               Optimize Options.   (line 2425)
* ftrack-macro-expansion:                Preprocessor Options.
                                                             (line  240)
* ftrampolines:                          Code Gen Options.   (line  506)
* ftrapping-math:                        Optimize Options.   (line 2262)
* ftrapv:                                Code Gen Options.   (line   91)
* ftree-bit-ccp:                         Optimize Options.   (line 1152)
* ftree-builtin-call-dce:                Optimize Options.   (line 1192)
* ftree-ccp:                             Optimize Options.   (line 1159)
* ftree-ch:                              Optimize Options.   (line 1212)
* ftree-coalesce-vars:                   Optimize Options.   (line 1251)
* ftree-copy-prop:                       Optimize Options.   (line  994)
* ftree-dce:                             Optimize Options.   (line 1188)
* ftree-dominator-opts:                  Optimize Options.   (line 1198)
* ftree-dse:                             Optimize Options.   (line 1205)
* ftree-forwprop:                        Optimize Options.   (line  973)
* ftree-fre:                             Optimize Options.   (line  977)
* ftree-loop-distribute-patterns:        Optimize Options.   (line 1287)
* ftree-loop-distribution:               Optimize Options.   (line 1268)
* ftree-loop-if-convert:                 Optimize Options.   (line 1261)
* ftree-loop-im:                         Optimize Options.   (line 1332)
* ftree-loop-ivcanon:                    Optimize Options.   (line 1341)
* ftree-loop-linear:                     Optimize Options.   (line 1225)
* ftree-loop-optimize:                   Optimize Options.   (line 1219)
* ftree-loop-vectorize:                  Optimize Options.   (line 1406)
* ftree-parallelize-loops:               Optimize Options.   (line 1361)
* ftree-partial-pre:                     Optimize Options.   (line  969)
* ftree-phiprop:                         Optimize Options.   (line  984)
* ftree-pre:                             Optimize Options.   (line  965)
* ftree-pta:                             Optimize Options.   (line 1370)
* ftree-reassoc:                         Optimize Options.   (line  954)
* ftree-scev-cprop:                      Optimize Options.   (line 1347)
* ftree-sink:                            Optimize Options.   (line 1148)
* ftree-slp-vectorize:                   Optimize Options.   (line 1411)
* ftree-slsr:                            Optimize Options.   (line 1395)
* ftree-sra:                             Optimize Options.   (line 1374)
* ftree-switch-conversion:               Optimize Options.   (line 1175)
* ftree-tail-merge:                      Optimize Options.   (line 1180)
* ftree-ter:                             Optimize Options.   (line 1387)
* ftree-vectorize:                       Optimize Options.   (line 1401)
* ftree-vrp:                             Optimize Options.   (line 1437)
* funconstrained-commons:                Optimize Options.   (line  546)
* funit-at-a-time:                       Optimize Options.   (line 1740)
* funroll-all-loops:                     Optimize Options.   (line 2442)
* funroll-loops:                         Optimize Options.   (line 2432)
* funsafe-math-optimizations:            Optimize Options.   (line 2195)
* funsigned-bitfields:                   C Dialect Options.  (line  432)
* funsigned-bitfields <1>:               Structures unions enumerations and bit-fields implementation.
                                                             (line   17)
* funsigned-bitfields <2>:               Non-bugs.           (line   57)
* funsigned-char:                        C Dialect Options.  (line  404)
* funsigned-char <1>:                    Characters implementation.
                                                             (line   31)
* funswitch-loops:                       Optimize Options.   (line 2466)
* funwind-tables:                        Code Gen Options.   (line  149)
* fuse-cxa-atexit:                       C++ Dialect Options.
                                                             (line  408)
* fuse-cxa-get-exception-ptr:            C++ Dialect Options.
                                                             (line  415)
* fuse-ld=bfd:                           Link Options.       (line   75)
* fuse-ld=gold:                          Link Options.       (line   78)
* fuse-ld=lld:                           Link Options.       (line   81)
* fuse-linker-plugin:                    Optimize Options.   (line 1990)
* fvar-tracking:                         Debugging Options.  (line  150)
* fvar-tracking-assignments:             Debugging Options.  (line  160)
* fvar-tracking-assignments-toggle:      Developer Options.  (line  829)
* fvariable-expansion-in-unroller:       Optimize Options.   (line 1465)
* fvect-cost-model:                      Optimize Options.   (line 1416)
* fverbose-asm:                          Code Gen Options.   (line  268)
* fversion-loops-for-strides:            Optimize Options.   (line 2473)
* fvisibility:                           Code Gen Options.   (line  530)
* fvisibility-inlines-hidden:            C++ Dialect Options.
                                                             (line  420)
* fvisibility-ms-compat:                 C++ Dialect Options.
                                                             (line  448)
* fvpt:                                  Optimize Options.   (line 2395)
* fvtable-verify:                        Instrumentation Options.
                                                             (line  617)
* fvtv-counts:                           Instrumentation Options.
                                                             (line  653)
* fvtv-debug:                            Instrumentation Options.
                                                             (line  640)
* fweak:                                 C++ Dialect Options.
                                                             (line  477)
* fweb:                                  Optimize Options.   (line 1760)
* fwhole-program:                        Optimize Options.   (line 1771)
* fwide-exec-charset:                    Preprocessor Options.
                                                             (line  271)
* fworking-directory:                    Preprocessor Options.
                                                             (line  314)
* fwrapv:                                Code Gen Options.   (line   99)
* fwrapv-pointer:                        Code Gen Options.   (line  109)
* fwritable-relocated-rdata:             x86 Windows Options.
                                                             (line   53)
* fzero-initialized-in-bss:              Optimize Options.   (line  442)
* fzero-link:                            Objective-C and Objective-C++ Dialect Options.
                                                             (line  140)
* g:                                     Debugging Options.  (line   25)
* G:                                     ARC Options.        (line  416)
* G <1>:                                 M32R/D Options.     (line   57)
* G <2>:                                 MIPS Options.       (line  460)
* G <3>:                                 Nios II Options.    (line    9)
* G <4>:                                 RS/6000 and PowerPC Options.
                                                             (line  718)
* G <5>:                                 System V Options.   (line   10)
* gas-loc-support:                       Debugging Options.  (line  220)
* gas-locview-support:                   Debugging Options.  (line  236)
* gcolumn-info:                          Debugging Options.  (line  248)
* gdescribe-dies:                        Debugging Options.  (line  178)
* gdwarf:                                Debugging Options.  (line   45)
* gen-decls:                             Objective-C and Objective-C++ Dialect Options.
                                                             (line  166)
* gfull:                                 Darwin Options.     (line   69)
* ggdb:                                  Debugging Options.  (line   38)
* ggnu-pubnames:                         Debugging Options.  (line  186)
* ginline-points:                        Debugging Options.  (line  307)
* ginternal-reset-location-views:        Debugging Options.  (line  296)
* gno-as-loc-support:                    Debugging Options.  (line  232)
* gno-column-info:                       Debugging Options.  (line  248)
* gno-inline-points:                     Debugging Options.  (line  307)
* gno-internal-reset-location-views:     Debugging Options.  (line  296)
* gno-record-gcc-switches:               Debugging Options.  (line  201)
* gno-statement-frontiers:               Debugging Options.  (line  253)
* gno-strict-dwarf:                      Debugging Options.  (line  216)
* gno-variable-location-views:           Debugging Options.  (line  264)
* gpubnames:                             Debugging Options.  (line  183)
* grecord-gcc-switches:                  Debugging Options.  (line  201)
* gsplit-dwarf:                          Debugging Options.  (line  171)
* gstabs:                                Debugging Options.  (line   63)
* gstabs+:                               Debugging Options.  (line   71)
* gstatement-frontiers:                  Debugging Options.  (line  253)
* gstrict-dwarf:                         Debugging Options.  (line  210)
* gtoggle:                               Developer Options.  (line  821)
* gused:                                 Darwin Options.     (line   64)
* gvariable-location-views:              Debugging Options.  (line  264)
* gvariable-location-views=incompat5:    Debugging Options.  (line  264)
* gvms:                                  Debugging Options.  (line   90)
* gxcoff:                                Debugging Options.  (line   77)
* gxcoff+:                               Debugging Options.  (line   82)
* gz:                                    Debugging Options.  (line  316)
* H:                                     Preprocessor Options.
                                                             (line  396)
* headerpad_max_install_names:           Darwin Options.     (line  196)
* help:                                  Overall Options.    (line  220)
* I:                                     Directory Options.  (line   13)
* I-:                                    Directory Options.  (line   65)
* idirafter:                             Directory Options.  (line   13)
* iframework:                            Darwin Options.     (line   57)
* imacros:                               Preprocessor Options.
                                                             (line   57)
* image_base:                            Darwin Options.     (line  196)
* imultilib:                             Directory Options.  (line   98)
* include:                               Preprocessor Options.
                                                             (line   46)
* init:                                  Darwin Options.     (line  196)
* install_name:                          Darwin Options.     (line  196)
* iplugindir=:                           Directory Options.  (line  113)
* iprefix:                               Directory Options.  (line   80)
* iquote:                                Directory Options.  (line   13)
* isysroot:                              Directory Options.  (line   92)
* isystem:                               Directory Options.  (line   13)
* iwithprefix:                           Directory Options.  (line   86)
* iwithprefixbefore:                     Directory Options.  (line   86)
* keep_private_externs:                  Darwin Options.     (line  196)
* l:                                     Link Options.       (line   85)
* L:                                     Directory Options.  (line  118)
* lobjc:                                 Link Options.       (line  111)
* M:                                     Preprocessor Options.
                                                             (line   77)
* m:                                     RS/6000 and PowerPC Options.
                                                             (line  526)
* m1:                                    SH Options.         (line    9)
* m10:                                   PDP-11 Options.     (line   29)
* m128bit-long-double:                   x86 Options.        (line  549)
* m16:                                   x86 Options.        (line 1384)
* m16-bit:                               CRIS Options.       (line   64)
* m16-bit <1>:                           NDS32 Options.      (line   51)
* m1reg-:                                Adapteva Epiphany Options.
                                                             (line  131)
* m2:                                    SH Options.         (line   12)
* m210:                                  MCore Options.      (line   43)
* m2a:                                   SH Options.         (line   30)
* m2a-nofpu:                             SH Options.         (line   18)
* m2a-single:                            SH Options.         (line   26)
* m2a-single-only:                       SH Options.         (line   22)
* m3:                                    SH Options.         (line   34)
* m31:                                   S/390 and zSeries Options.
                                                             (line   86)
* m32:                                   Nvidia PTX Options. (line   10)
* m32 <1>:                               RS/6000 and PowerPC Options.
                                                             (line  250)
* m32 <2>:                               SPARC Options.      (line  315)
* m32 <3>:                               TILE-Gx Options.    (line   23)
* m32 <4>:                               TILEPro Options.    (line   13)
* m32 <5>:                               x86 Options.        (line 1384)
* m32-bit:                               CRIS Options.       (line   64)
* m32bit-doubles:                        RL78 Options.       (line   73)
* m32bit-doubles <1>:                    RX Options.         (line   10)
* m32r:                                  M32R/D Options.     (line   15)
* m32r2:                                 M32R/D Options.     (line    9)
* m32rx:                                 M32R/D Options.     (line   12)
* m340:                                  MCore Options.      (line   43)
* m3dnow:                                x86 Options.        (line  775)
* m3dnowa:                               x86 Options.        (line  776)
* m3e:                                   SH Options.         (line   37)
* m4:                                    SH Options.         (line   51)
* m4-100:                                SH Options.         (line   54)
* m4-100-nofpu:                          SH Options.         (line   57)
* m4-100-single:                         SH Options.         (line   61)
* m4-100-single-only:                    SH Options.         (line   65)
* m4-200:                                SH Options.         (line   69)
* m4-200-nofpu:                          SH Options.         (line   72)
* m4-200-single:                         SH Options.         (line   76)
* m4-200-single-only:                    SH Options.         (line   80)
* m4-300:                                SH Options.         (line   84)
* m4-300-nofpu:                          SH Options.         (line   87)
* m4-300-single:                         SH Options.         (line   91)
* m4-300-single-only:                    SH Options.         (line   95)
* m4-340:                                SH Options.         (line   99)
* m4-500:                                SH Options.         (line  102)
* m4-nofpu:                              SH Options.         (line   40)
* m4-single:                             SH Options.         (line   47)
* m4-single-only:                        SH Options.         (line   43)
* m40:                                   PDP-11 Options.     (line   23)
* m45:                                   PDP-11 Options.     (line   26)
* m4a:                                   SH Options.         (line  118)
* m4a-nofpu:                             SH Options.         (line  106)
* m4a-single:                            SH Options.         (line  114)
* m4a-single-only:                       SH Options.         (line  110)
* m4al:                                  SH Options.         (line  121)
* m4byte-functions:                      MCore Options.      (line   27)
* m5200:                                 M680x0 Options.     (line  144)
* m5206e:                                M680x0 Options.     (line  153)
* m528x:                                 M680x0 Options.     (line  157)
* m5307:                                 M680x0 Options.     (line  161)
* m5407:                                 M680x0 Options.     (line  165)
* m64:                                   Nvidia PTX Options. (line   10)
* m64 <1>:                               RS/6000 and PowerPC Options.
                                                             (line  250)
* m64 <2>:                               S/390 and zSeries Options.
                                                             (line   86)
* m64 <3>:                               SPARC Options.      (line  315)
* m64 <4>:                               TILE-Gx Options.    (line   23)
* m64 <5>:                               x86 Options.        (line 1384)
* m64bit-doubles:                        RL78 Options.       (line   73)
* m64bit-doubles <1>:                    RX Options.         (line   10)
* m68000:                                M680x0 Options.     (line   93)
* m68010:                                M680x0 Options.     (line  101)
* m68020:                                M680x0 Options.     (line  107)
* m68020-40:                             M680x0 Options.     (line  175)
* m68020-60:                             M680x0 Options.     (line  184)
* m68030:                                M680x0 Options.     (line  112)
* m68040:                                M680x0 Options.     (line  117)
* m68060:                                M680x0 Options.     (line  126)
* m68881:                                M680x0 Options.     (line  194)
* m8-bit:                                CRIS Options.       (line   64)
* m8bit-idiv:                            x86 Options.        (line 1309)
* m8byte-align:                          V850 Options.       (line  170)
* m96bit-long-double:                    x86 Options.        (line  549)
* mA6:                                   ARC Options.        (line   23)
* mA7:                                   ARC Options.        (line   30)
* mabi:                                  AArch64 Options.    (line    9)
* mabi <1>:                              ARM Options.        (line    9)
* mabi <2>:                              RISC-V Options.     (line   17)
* mabi <3>:                              RS/6000 and PowerPC Options.
                                                             (line  557)
* mabi <4>:                              x86 Options.        (line 1003)
* mabi=32:                               MIPS Options.       (line  156)
* mabi=64:                               MIPS Options.       (line  156)
* mabi=eabi:                             MIPS Options.       (line  156)
* mabi=elfv1:                            RS/6000 and PowerPC Options.
                                                             (line  578)
* mabi=elfv2:                            RS/6000 and PowerPC Options.
                                                             (line  584)
* mabi=gnu:                              MMIX Options.       (line   20)
* mabi=ibmlongdouble:                    RS/6000 and PowerPC Options.
                                                             (line  562)
* mabi=ieeelongdouble:                   RS/6000 and PowerPC Options.
                                                             (line  570)
* mabi=mmixware:                         MMIX Options.       (line   20)
* mabi=n32:                              MIPS Options.       (line  156)
* mabi=o64:                              MIPS Options.       (line  156)
* mabicalls:                             MIPS Options.       (line  192)
* mabm:                                  x86 Options.        (line  778)
* mabort-on-noreturn:                    ARM Options.        (line  654)
* mabs=2008:                             MIPS Options.       (line  300)
* mabs=legacy:                           MIPS Options.       (line  300)
* mabsdata:                              AVR Options.        (line  159)
* mabsdiff:                              MeP Options.        (line    7)
* mac0:                                  PDP-11 Options.     (line   16)
* macc-4:                                FRV Options.        (line  139)
* macc-8:                                FRV Options.        (line  143)
* maccumulate-args:                      AVR Options.        (line  166)
* maccumulate-outgoing-args:             SH Options.         (line  314)
* maccumulate-outgoing-args <1>:         x86 Options.        (line 1047)
* maddress-mode=long:                    x86 Options.        (line 1434)
* maddress-mode=short:                   x86 Options.        (line 1439)
* maddress-space-conversion:             SPU Options.        (line   68)
* mads:                                  RS/6000 and PowerPC Options.
                                                             (line  618)
* madx:                                  x86 Options.        (line  779)
* maes:                                  x86 Options.        (line  756)
* maix-struct-return:                    RS/6000 and PowerPC Options.
                                                             (line  550)
* maix32:                                RS/6000 and PowerPC Options.
                                                             (line  288)
* maix64:                                RS/6000 and PowerPC Options.
                                                             (line  288)
* malign-300:                            H8/300 Options.     (line   41)
* malign-call:                           ARC Options.        (line  435)
* malign-data:                           x86 Options.        (line  589)
* malign-double:                         x86 Options.        (line  534)
* malign-int:                            M680x0 Options.     (line  261)
* malign-labels:                         FRV Options.        (line  128)
* malign-loops:                          M32R/D Options.     (line   73)
* malign-natural:                        RS/6000 and PowerPC Options.
                                                             (line  326)
* malign-power:                          RS/6000 and PowerPC Options.
                                                             (line  326)
* malign-stringops:                      x86 Options.        (line 1183)
* mall-opts:                             MeP Options.        (line   11)
* malloc-cc:                             FRV Options.        (line   31)
* mallow-string-insns:                   RX Options.         (line  150)
* mallregs:                              RL78 Options.       (line   66)
* maltivec:                              RS/6000 and PowerPC Options.
                                                             (line  141)
* mam33:                                 MN10300 Options.    (line   17)
* mam33-2:                               MN10300 Options.    (line   24)
* mam34:                                 MN10300 Options.    (line   27)
* manchor:                               C-SKY Options.      (line  110)
* mandroid:                              GNU/Linux Options.  (line   26)
* mannotate-align:                       ARC Options.        (line  382)
* mapcs:                                 ARM Options.        (line   21)
* mapcs-frame:                           ARM Options.        (line   13)
* mapp-regs:                             SPARC Options.      (line   10)
* mapp-regs <1>:                         V850 Options.       (line  181)
* mARC600:                               ARC Options.        (line   23)
* mARC601:                               ARC Options.        (line   27)
* mARC700:                               ARC Options.        (line   30)
* march:                                 AArch64 Options.    (line  149)
* march <1>:                             AMD GCN Options.    (line    9)
* march <2>:                             ARM Options.        (line   80)
* march <3>:                             C6X Options.        (line    7)
* march <4>:                             CRIS Options.       (line   10)
* march <5>:                             HPPA Options.       (line    9)
* march <6>:                             HPPA Options.       (line  162)
* march <7>:                             M680x0 Options.     (line   12)
* march <8>:                             MIPS Options.       (line   14)
* march <9>:                             NDS32 Options.      (line   64)
* march <10>:                            Nios II Options.    (line   94)
* march <11>:                            Nvidia PTX Options. (line   13)
* march <12>:                            RISC-V Options.     (line   54)
* march <13>:                            S/390 and zSeries Options.
                                                             (line  148)
* march <14>:                            x86 Options.        (line    9)
* march=:                                C-SKY Options.      (line    9)
* marclinux:                             ARC Options.        (line  388)
* marclinux_prof:                        ARC Options.        (line  395)
* margonaut:                             ARC Options.        (line  593)
* marm:                                  ARM Options.        (line  726)
* mas100-syntax:                         RX Options.         (line   76)
* masm-hex:                              MSP430 Options.     (line    9)
* masm-syntax-unified:                   ARM Options.        (line  827)
* masm=DIALECT:                          x86 Options.        (line  483)
* matomic:                               ARC Options.        (line  155)
* matomic-model=MODEL:                   SH Options.         (line  193)
* matomic-updates:                       SPU Options.        (line   83)
* mauto-litpools:                        Xtensa Options.     (line   60)
* mauto-modify-reg:                      ARC Options.        (line  438)
* mauto-pic:                             IA-64 Options.      (line   50)
* maverage:                              MeP Options.        (line   16)
* mavoid-indexed-addresses:              RS/6000 and PowerPC Options.
                                                             (line  365)
* mavx:                                  x86 Options.        (line  744)
* mavx2:                                 x86 Options.        (line  745)
* mavx256-split-unaligned-load:          x86 Options.        (line 1317)
* mavx256-split-unaligned-store:         x86 Options.        (line 1317)
* mavx5124fmaps:                         x86 Options.        (line  803)
* mavx5124vnniw:                         x86 Options.        (line  805)
* mavx512bitalg:                         x86 Options.        (line  799)
* mavx512bw:                             x86 Options.        (line  751)
* mavx512cd:                             x86 Options.        (line  749)
* mavx512dq:                             x86 Options.        (line  752)
* mavx512er:                             x86 Options.        (line  748)
* mavx512f:                              x86 Options.        (line  746)
* mavx512ifma:                           x86 Options.        (line  753)
* mavx512pf:                             x86 Options.        (line  747)
* mavx512vbmi:                           x86 Options.        (line  754)
* mavx512vbmi2:                          x86 Options.        (line  794)
* mavx512vl:                             x86 Options.        (line  750)
* mavx512vnni:                           x86 Options.        (line  804)
* mavx512vpopcntdq:                      x86 Options.        (line  802)
* max-vect-align:                        Adapteva Epiphany Options.
                                                             (line  119)
* mb:                                    SH Options.         (line  126)
* mbackchain:                            S/390 and zSeries Options.
                                                             (line   35)
* mbarrel-shift-enabled:                 LM32 Options.       (line    9)
* mbarrel-shifter:                       ARC Options.        (line   10)
* mbarrel_shifter:                       ARC Options.        (line  613)
* mbase-addresses:                       MMIX Options.       (line   53)
* mbased=:                               MeP Options.        (line   20)
* mbbit-peephole:                        ARC Options.        (line  441)
* mbe8:                                  ARM Options.        (line   72)
* mbig:                                  RS/6000 and PowerPC Options.
                                                             (line  445)
* mbig-endian:                           AArch64 Options.    (line   20)
* mbig-endian <1>:                       ARC Options.        (line  596)
* mbig-endian <2>:                       ARM Options.        (line   67)
* mbig-endian <3>:                       C6X Options.        (line   13)
* mbig-endian <4>:                       C-SKY Options.      (line   28)
* mbig-endian <5>:                       IA-64 Options.      (line    9)
* mbig-endian <6>:                       MCore Options.      (line   39)
* mbig-endian <7>:                       MicroBlaze Options. (line   56)
* mbig-endian <8>:                       NDS32 Options.      (line    9)
* mbig-endian <9>:                       RS/6000 and PowerPC Options.
                                                             (line  445)
* mbig-endian <10>:                      TILE-Gx Options.    (line   29)
* mbig-endian-data:                      RX Options.         (line   42)
* mbig-switch:                           V850 Options.       (line  176)
* mbigtable:                             SH Options.         (line  141)
* mbionic:                               GNU/Linux Options.  (line   22)
* mbit-align:                            RS/6000 and PowerPC Options.
                                                             (line  397)
* mbit-ops:                              CR16 Options.       (line   25)
* mbitfield:                             M680x0 Options.     (line  231)
* mbitops:                               MeP Options.        (line   26)
* mbitops <1>:                           SH Options.         (line  145)
* mblock-compare-inline-limit:           RS/6000 and PowerPC Options.
                                                             (line  698)
* mblock-compare-inline-loop-limit:      RS/6000 and PowerPC Options.
                                                             (line  704)
* mblock-move-inline-limit:              RS/6000 and PowerPC Options.
                                                             (line  692)
* mbmi:                                  x86 Options.        (line  780)
* mbmi2:                                 x86 Options.        (line  781)
* mboard:                                OpenRISC Options.   (line    9)
* mbranch-cost:                          Adapteva Epiphany Options.
                                                             (line   18)
* mbranch-cost <1>:                      AVR Options.        (line  181)
* mbranch-cost <2>:                      MIPS Options.       (line  785)
* mbranch-cost <3>:                      RISC-V Options.     (line    9)
* mbranch-cost=:                         C-SKY Options.      (line  143)
* mbranch-cost=NUM:                      SH Options.         (line  334)
* mbranch-cost=NUMBER:                   M32R/D Options.     (line   82)
* mbranch-hints:                         SPU Options.        (line   29)
* mbranch-index:                         ARC Options.        (line  329)
* mbranch-likely:                        MIPS Options.       (line  792)
* mbranch-predict:                       MMIX Options.       (line   48)
* mbranch-protection:                    AArch64 Options.    (line  262)
* mbss-plt:                              RS/6000 and PowerPC Options.
                                                             (line  165)
* mbuild-constants:                      DEC Alpha Options.  (line  141)
* mbwx:                                  DEC Alpha Options.  (line  163)
* mbypass-cache:                         Nios II Options.    (line  103)
* mc68000:                               M680x0 Options.     (line   93)
* mc68020:                               M680x0 Options.     (line  107)
* mc=:                                   MeP Options.        (line   31)
* mcache:                                C-SKY Options.      (line   77)
* mcache-block-size:                     NDS32 Options.      (line   60)
* mcache-size:                           SPU Options.        (line   75)
* mcache-volatile:                       Nios II Options.    (line  109)
* mcall-eabi:                            RS/6000 and PowerPC Options.
                                                             (line  520)
* mcall-freebsd:                         RS/6000 and PowerPC Options.
                                                             (line  534)
* mcall-linux:                           RS/6000 and PowerPC Options.
                                                             (line  530)
* mcall-ms2sysv-xlogues:                 x86 Options.        (line 1023)
* mcall-netbsd:                          RS/6000 and PowerPC Options.
                                                             (line  538)
* mcall-netbsd <1>:                      RS/6000 and PowerPC Options.
                                                             (line  542)
* mcall-prologues:                       AVR Options.        (line  186)
* mcall-sysv:                            RS/6000 and PowerPC Options.
                                                             (line  512)
* mcall-sysv-eabi:                       RS/6000 and PowerPC Options.
                                                             (line  520)
* mcall-sysv-noeabi:                     RS/6000 and PowerPC Options.
                                                             (line  523)
* mcallee-super-interworking:            ARM Options.        (line  755)
* mcaller-copies:                        HPPA Options.       (line   23)
* mcaller-super-interworking:            ARM Options.        (line  762)
* mcallgraph-data:                       MCore Options.      (line   31)
* mcase-vector-pcrel:                    ARC Options.        (line  450)
* mcbcond:                               SPARC Options.      (line  260)
* mcbranch-force-delay-slot:             SH Options.         (line  349)
* mcc-init:                              CRIS Options.       (line   42)
* mccrt:                                 C-SKY Options.      (line  139)
* mcfv4e:                                M680x0 Options.     (line  169)
* mcheck-zero-division:                  MIPS Options.       (line  570)
* mcix:                                  DEC Alpha Options.  (line  163)
* mcld:                                  x86 Options.        (line  856)
* mcldemote:                             x86 Options.        (line  806)
* mclear-hwcap:                          Solaris 2 Options.  (line    9)
* mclflushopt:                           x86 Options.        (line  758)
* mclip:                                 MeP Options.        (line   35)
* mclwb:                                 x86 Options.        (line  759)
* mclzero:                               x86 Options.        (line  792)
* mcmodel:                               NDS32 Options.      (line   67)
* mcmodel <1>:                           SPARC Options.      (line  320)
* mcmodel=kernel:                        x86 Options.        (line 1418)
* mcmodel=large:                         AArch64 Options.    (line   45)
* mcmodel=large <1>:                     RS/6000 and PowerPC Options.
                                                             (line  135)
* mcmodel=large <2>:                     TILE-Gx Options.    (line   14)
* mcmodel=large <3>:                     x86 Options.        (line 1430)
* mcmodel=medany:                        RISC-V Options.     (line  105)
* mcmodel=medium:                        RS/6000 and PowerPC Options.
                                                             (line  130)
* mcmodel=medium <1>:                    x86 Options.        (line 1423)
* mcmodel=medlow:                        RISC-V Options.     (line   98)
* mcmodel=small:                         AArch64 Options.    (line   39)
* mcmodel=small <1>:                     RS/6000 and PowerPC Options.
                                                             (line  126)
* mcmodel=small <2>:                     TILE-Gx Options.    (line    9)
* mcmodel=small <3>:                     x86 Options.        (line 1412)
* mcmodel=tiny:                          AArch64 Options.    (line   34)
* mcmov:                                 NDS32 Options.      (line   21)
* mcmov <1>:                             OpenRISC Options.   (line   24)
* mcmove:                                Adapteva Epiphany Options.
                                                             (line   23)
* mcmpb:                                 RS/6000 and PowerPC Options.
                                                             (line   27)
* mcmse:                                 ARM Options.        (line  856)
* mcode-density:                         ARC Options.        (line  163)
* mcode-density-frame:                   ARC Options.        (line  511)
* mcode-readable:                        MIPS Options.       (line  530)
* mcode-region:                          MSP430 Options.     (line   93)
* mcompact-branches=always:              MIPS Options.       (line  804)
* mcompact-branches=never:               MIPS Options.       (line  804)
vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
