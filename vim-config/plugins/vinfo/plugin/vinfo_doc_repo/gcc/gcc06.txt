'constructor (PRIORITY)'
'destructor (PRIORITY)'
     The 'constructor' attribute causes the function to be called
     automatically before execution enters 'main ()'.  Similarly, the
     'destructor' attribute causes the function to be called
     automatically after 'main ()' completes or 'exit ()' is called.
     Functions with these attributes are useful for initializing data
     that is used implicitly during the execution of the program.

     On some targets the attributes also accept an integer argument to
     specify a priority to control the order in which constructor and
     destructor functions are run.  A constructor with a smaller
     priority number runs before a constructor with a larger priority
     number; the opposite relationship holds for destructors.  So, if
     you have a constructor that allocates a resource and a destructor
     that deallocates the same resource, both functions typically have
     the same priority.  The priorities for constructor and destructor
     functions are the same as those specified for namespace-scope C++
     objects (*note C++ Attributes::).  However, at present, the order
     in which constructors for C++ objects with static storage duration
     and functions decorated with attribute 'constructor' are invoked is
     unspecified.  In mixed declarations, attribute 'init_priority' can
     be used to impose a specific ordering.

     Using the argument forms of the 'constructor' and 'destructor'
     attributes on targets where the feature is not supported is
     rejected with an error.

'copy'
'copy (FUNCTION)'
     The 'copy' attribute applies the set of attributes with which
     FUNCTION has been declared to the declaration of the function to
     which the attribute is applied.  The attribute is designed for
     libraries that define aliases or function resolvers that are
     expected to specify the same set of attributes as their targets.
     The 'copy' attribute can be used with functions, variables, or
     types.  However, the kind of symbol to which the attribute is
     applied (either function or variable) must match the kind of symbol
     to which the argument refers.  The 'copy' attribute copies only
     syntactic and semantic attributes but not attributes that affect a
     symbol's linkage or visibility such as 'alias', 'visibility', or
     'weak'.  The 'deprecated' attribute is also not copied.  *Note
     Common Type Attributes::.  *Note Common Variable Attributes::.

     For example, the STRONGALIAS macro below makes use of the 'alias'
     and 'copy' attributes to define an alias named ALLOC for function
     ALLOCATE declared with attributes ALLOC_SIZE, MALLOC, and NOTHROW.
     Thanks to the '__typeof__' operator the alias has the same type as
     the target function.  As a result of the 'copy' attribute the alias
     also shares the same attributes as the target.

          #define StrongAlias(TagetFunc, AliasDecl)   \
            extern __typeof__ (TargetFunc) AliasDecl  \
              __attribute__ ((alias (#TargetFunc), copy (TargetFunc)));

          extern __attribute__ ((alloc_size (1), malloc, nothrow))
            void* allocate (size_t);
          StrongAlias (allocate, alloc);

'deprecated'
'deprecated (MSG)'
     The 'deprecated' attribute results in a warning if the function is
     used anywhere in the source file.  This is useful when identifying
     functions that are expected to be removed in a future version of a
     program.  The warning also includes the location of the declaration
     of the deprecated function, to enable users to easily find further
     information about why the function is deprecated, or what they
     should do instead.  Note that the warnings only occurs for uses:

          int old_fn () __attribute__ ((deprecated));
          int old_fn ();
          int (*fn_ptr)() = old_fn;

     results in a warning on line 3 but not line 2.  The optional MSG
     argument, which must be a string, is printed in the warning if
     present.

     The 'deprecated' attribute can also be used for variables and types
     (*note Variable Attributes::, *note Type Attributes::.)

     The message attached to the attribute is affected by the setting of
     the '-fmessage-length' option.

'error ("MESSAGE")'
'warning ("MESSAGE")'
     If the 'error' or 'warning' attribute is used on a function
     declaration and a call to such a function is not eliminated through
     dead code elimination or other optimizations, an error or warning
     (respectively) that includes MESSAGE is diagnosed.  This is useful
     for compile-time checking, especially together with
     '__builtin_constant_p' and inline functions where checking the
     inline function arguments is not possible through 'extern char
     [(condition) ? 1 : -1];' tricks.

     While it is possible to leave the function undefined and thus
     invoke a link failure (to define the function with a message in
     '.gnu.warning*' section), when using these attributes the problem
     is diagnosed earlier and with exact location of the call even in
     presence of inline functions or when not emitting debugging
     information.

'externally_visible'
     This attribute, attached to a global variable or function,
     nullifies the effect of the '-fwhole-program' command-line option,
     so the object remains visible outside the current compilation unit.

     If '-fwhole-program' is used together with '-flto' and 'gold' is
     used as the linker plugin, 'externally_visible' attributes are
     automatically added to functions (not variable yet due to a current
     'gold' issue) that are accessed outside of LTO objects according to
     resolution file produced by 'gold'.  For other linkers that cannot
     generate resolution file, explicit 'externally_visible' attributes
     are still necessary.

'flatten'
     Generally, inlining into a function is limited.  For a function
     marked with this attribute, every call inside this function is
     inlined, if possible.  Functions declared with attribute 'noinline'
     and similar are not inlined.  Whether the function itself is
     considered for inlining depends on its size and the current
     inlining parameters.

'format (ARCHETYPE, STRING-INDEX, FIRST-TO-CHECK)'
     The 'format' attribute specifies that a function takes 'printf',
     'scanf', 'strftime' or 'strfmon' style arguments that should be
     type-checked against a format string.  For example, the
     declaration:

          extern int
          my_printf (void *my_object, const char *my_format, ...)
                __attribute__ ((format (printf, 2, 3)));

     causes the compiler to check the arguments in calls to 'my_printf'
     for consistency with the 'printf' style format string argument
     'my_format'.

     The parameter ARCHETYPE determines how the format string is
     interpreted, and should be 'printf', 'scanf', 'strftime',
     'gnu_printf', 'gnu_scanf', 'gnu_strftime' or 'strfmon'.  (You can
     also use '__printf__', '__scanf__', '__strftime__' or
     '__strfmon__'.)  On MinGW targets, 'ms_printf', 'ms_scanf', and
     'ms_strftime' are also present.  ARCHETYPE values such as 'printf'
     refer to the formats accepted by the system's C runtime library,
     while values prefixed with 'gnu_' always refer to the formats
     accepted by the GNU C Library.  On Microsoft Windows targets,
     values prefixed with 'ms_' refer to the formats accepted by the
     'msvcrt.dll' library.  The parameter STRING-INDEX specifies which
     argument is the format string argument (starting from 1), while
     FIRST-TO-CHECK is the number of the first argument to check against
     the format string.  For functions where the arguments are not
     available to be checked (such as 'vprintf'), specify the third
     parameter as zero.  In this case the compiler only checks the
     format string for consistency.  For 'strftime' formats, the third
     parameter is required to be zero.  Since non-static C++ methods
     have an implicit 'this' argument, the arguments of such methods
     should be counted from two, not one, when giving values for
     STRING-INDEX and FIRST-TO-CHECK.

     In the example above, the format string ('my_format') is the second
     argument of the function 'my_print', and the arguments to check
     start with the third argument, so the correct parameters for the
     format attribute are 2 and 3.

     The 'format' attribute allows you to identify your own functions
     that take format strings as arguments, so that GCC can check the
     calls to these functions for errors.  The compiler always (unless
     '-ffreestanding' or '-fno-builtin' is used) checks formats for the
     standard library functions 'printf', 'fprintf', 'sprintf', 'scanf',
     'fscanf', 'sscanf', 'strftime', 'vprintf', 'vfprintf' and
     'vsprintf' whenever such warnings are requested (using '-Wformat'),
     so there is no need to modify the header file 'stdio.h'.  In C99
     mode, the functions 'snprintf', 'vsnprintf', 'vscanf', 'vfscanf'
     and 'vsscanf' are also checked.  Except in strictly conforming C
     standard modes, the X/Open function 'strfmon' is also checked as
     are 'printf_unlocked' and 'fprintf_unlocked'.  *Note Options
     Controlling C Dialect: C Dialect Options.

     For Objective-C dialects, 'NSString' (or '__NSString__') is
     recognized in the same context.  Declarations including these
     format attributes are parsed for correct syntax, however the result
     of checking of such format strings is not yet defined, and is not
     carried out by this version of the compiler.

     The target may also provide additional types of format checks.
     *Note Format Checks Specific to Particular Target Machines: Target
     Format Checks.

'format_arg (STRING-INDEX)'
     The 'format_arg' attribute specifies that a function takes one or
     more format strings for a 'printf', 'scanf', 'strftime' or
     'strfmon' style function and modifies it (for example, to translate
     it into another language), so the result can be passed to a
     'printf', 'scanf', 'strftime' or 'strfmon' style function (with the
     remaining arguments to the format function the same as they would
     have been for the unmodified string).  Multiple 'format_arg'
     attributes may be applied to the same function, each designating a
     distinct parameter as a format string.  For example, the
     declaration:

          extern char *
          my_dgettext (char *my_domain, const char *my_format)
                __attribute__ ((format_arg (2)));

     causes the compiler to check the arguments in calls to a 'printf',
     'scanf', 'strftime' or 'strfmon' type function, whose format string
     argument is a call to the 'my_dgettext' function, for consistency
     with the format string argument 'my_format'.  If the 'format_arg'
     attribute had not been specified, all the compiler could tell in
     such calls to format functions would be that the format string
     argument is not constant; this would generate a warning when
     '-Wformat-nonliteral' is used, but the calls could not be checked
     without the attribute.

     In calls to a function declared with more than one 'format_arg'
     attribute, each with a distinct argument value, the corresponding
     actual function arguments are checked against all format strings
     designated by the attributes.  This capability is designed to
     support the GNU 'ngettext' family of functions.

     The parameter STRING-INDEX specifies which argument is the format
     string argument (starting from one).  Since non-static C++ methods
     have an implicit 'this' argument, the arguments of such methods
     should be counted from two.

     The 'format_arg' attribute allows you to identify your own
     functions that modify format strings, so that GCC can check the
     calls to 'printf', 'scanf', 'strftime' or 'strfmon' type function
     whose operands are a call to one of your own function.  The
     compiler always treats 'gettext', 'dgettext', and 'dcgettext' in
     this manner except when strict ISO C support is requested by
     '-ansi' or an appropriate '-std' option, or '-ffreestanding' or
     '-fno-builtin' is used.  *Note Options Controlling C Dialect: C
     Dialect Options.

     For Objective-C dialects, the 'format-arg' attribute may refer to
     an 'NSString' reference for compatibility with the 'format'
     attribute above.

     The target may also allow additional types in 'format-arg'
     attributes.  *Note Format Checks Specific to Particular Target
     Machines: Target Format Checks.

'gnu_inline'
     This attribute should be used with a function that is also declared
     with the 'inline' keyword.  It directs GCC to treat the function as
     if it were defined in gnu90 mode even when compiling in C99 or
     gnu99 mode.

     If the function is declared 'extern', then this definition of the
     function is used only for inlining.  In no case is the function
     compiled as a standalone function, not even if you take its address
     explicitly.  Such an address becomes an external reference, as if
     you had only declared the function, and had not defined it.  This
     has almost the effect of a macro.  The way to use this is to put a
     function definition in a header file with this attribute, and put
     another copy of the function, without 'extern', in a library file.
     The definition in the header file causes most calls to the function
     to be inlined.  If any uses of the function remain, they refer to
     the single copy in the library.  Note that the two definitions of
     the functions need not be precisely the same, although if they do
     not have the same effect your program may behave oddly.

     In C, if the function is neither 'extern' nor 'static', then the
     function is compiled as a standalone function, as well as being
     inlined where possible.

     This is how GCC traditionally handled functions declared 'inline'.
     Since ISO C99 specifies a different semantics for 'inline', this
     function attribute is provided as a transition measure and as a
     useful feature in its own right.  This attribute is available in
     GCC 4.1.3 and later.  It is available if either of the preprocessor
     macros '__GNUC_GNU_INLINE__' or '__GNUC_STDC_INLINE__' are defined.
     *Note An Inline Function is As Fast As a Macro: Inline.

     In C++, this attribute does not depend on 'extern' in any way, but
     it still requires the 'inline' keyword to enable its special
     behavior.

'hot'
     The 'hot' attribute on a function is used to inform the compiler
     that the function is a hot spot of the compiled program.  The
     function is optimized more aggressively and on many targets it is
     placed into a special subsection of the text section so all hot
     functions appear close together, improving locality.

     When profile feedback is available, via '-fprofile-use', hot
     functions are automatically detected and this attribute is ignored.

'ifunc ("RESOLVER")'
     The 'ifunc' attribute is used to mark a function as an indirect
     function using the STT_GNU_IFUNC symbol type extension to the ELF
     standard.  This allows the resolution of the symbol value to be
     determined dynamically at load time, and an optimized version of
     the routine to be selected for the particular processor or other
     system characteristics determined then.  To use this attribute,
     first define the implementation functions available, and a resolver
     function that returns a pointer to the selected implementation
     function.  The implementation functions' declarations must match
     the API of the function being implemented.  The resolver should be
     declared to be a function taking no arguments and returning a
     pointer to a function of the same type as the implementation.  For
     example:

          void *my_memcpy (void *dst, const void *src, size_t len)
          {
            ...
            return dst;
          }

          static void * (*resolve_memcpy (void))(void *, const void *, size_t)
          {
            return my_memcpy; // we will just always select this routine
          }

     The exported header file declaring the function the user calls
     would contain:

          extern void *memcpy (void *, const void *, size_t);

     allowing the user to call 'memcpy' as a regular function, unaware
     of the actual implementation.  Finally, the indirect function needs
     to be defined in the same translation unit as the resolver
     function:

          void *memcpy (void *, const void *, size_t)
               __attribute__ ((ifunc ("resolve_memcpy")));

     In C++, the 'ifunc' attribute takes a string that is the mangled
     name of the resolver function.  A C++ resolver for a non-static
     member function of class 'C' should be declared to return a pointer
     to a non-member function taking pointer to 'C' as the first
     argument, followed by the same arguments as of the implementation
     function.  G++ checks the signatures of the two functions and
     issues a '-Wattribute-alias' warning for mismatches.  To suppress a
     warning for the necessary cast from a pointer to the implementation
     member function to the type of the corresponding non-member
     function use the '-Wno-pmf-conversions' option.  For example:

          class S
          {
          private:
            int debug_impl (int);
            int optimized_impl (int);

            typedef int Func (S*, int);

            static Func* resolver ();
          public:

            int interface (int);
          };

          int S::debug_impl (int) { /* ... */ }
          int S::optimized_impl (int) { /* ... */ }

          S::Func* S::resolver ()
          {
            int (S::*pimpl) (int)
              = getenv ("DEBUG") ? &S::debug_impl : &S::optimized_impl;

            // Cast triggers -Wno-pmf-conversions.
            return reinterpret_cast<Func*>(pimpl);
          }

          int S::interface (int) __attribute__ ((ifunc ("_ZN1S8resolverEv")));

     Indirect functions cannot be weak.  Binutils version 2.20.1 or
     higher and GNU C Library version 2.11.1 are required to use this
     feature.

'interrupt'
'interrupt_handler'
     Many GCC back ends support attributes to indicate that a function
     is an interrupt handler, which tells the compiler to generate
     function entry and exit sequences that differ from those from
     regular functions.  The exact syntax and behavior are
     target-specific; refer to the following subsections for details.

'leaf'
     Calls to external functions with this attribute must return to the
     current compilation unit only by return or by exception handling.
     In particular, a leaf function is not allowed to invoke callback
     functions passed to it from the current compilation unit, directly
     call functions exported by the unit, or 'longjmp' into the unit.
     Leaf functions might still call functions from other compilation
     units and thus they are not necessarily leaf in the sense that they
     contain no function calls at all.

     The attribute is intended for library functions to improve dataflow
     analysis.  The compiler takes the hint that any data not escaping
     the current compilation unit cannot be used or modified by the leaf
     function.  For example, the 'sin' function is a leaf function, but
     'qsort' is not.

     Note that leaf functions might indirectly run a signal handler
     defined in the current compilation unit that uses static variables.
     Similarly, when lazy symbol resolution is in effect, leaf functions
     might invoke indirect functions whose resolver function or
     implementation function is defined in the current compilation unit
     and uses static variables.  There is no standard-compliant way to
     write such a signal handler, resolver function, or implementation
     function, and the best that you can do is to remove the 'leaf'
     attribute or mark all such static variables 'volatile'.  Lastly,
     for ELF-based systems that support symbol interposition, care
     should be taken that functions defined in the current compilation
     unit do not unexpectedly interpose other symbols based on the
     defined standards mode and defined feature test macros; otherwise
     an inadvertent callback would be added.

     The attribute has no effect on functions defined within the current
     compilation unit.  This is to allow easy merging of multiple
     compilation units into one, for example, by using the link-time
     optimization.  For this reason the attribute is not allowed on
     types to annotate indirect calls.

'malloc'
     This tells the compiler that a function is 'malloc'-like, i.e.,
     that the pointer P returned by the function cannot alias any other
     pointer valid when the function returns, and moreover no pointers
     to valid objects occur in any storage addressed by P.

     Using this attribute can improve optimization.  Compiler predicts
     that a function with the attribute returns non-null in most cases.
     Functions like 'malloc' and 'calloc' have this property because
     they return a pointer to uninitialized or zeroed-out storage.
     However, functions like 'realloc' do not have this property, as
     they can return a pointer to storage containing pointers.

'no_icf'
     This function attribute prevents a functions from being merged with
     another semantically equivalent function.

'no_instrument_function'
     If any of '-finstrument-functions', '-p', or '-pg' are given,
     profiling function calls are generated at entry and exit of most
     user-compiled functions.  Functions with this attribute are not so
     instrumented.

'no_profile_instrument_function'
     The 'no_profile_instrument_function' attribute on functions is used
     to inform the compiler that it should not process any profile
     feedback based optimization code instrumentation.

'no_reorder'
     Do not reorder functions or variables marked 'no_reorder' against
     each other or top level assembler statements the executable.  The
     actual order in the program will depend on the linker command line.
     Static variables marked like this are also not removed.  This has a
     similar effect as the '-fno-toplevel-reorder' option, but only
     applies to the marked symbols.

'no_sanitize ("SANITIZE_OPTION")'
     The 'no_sanitize' attribute on functions is used to inform the
     compiler that it should not do sanitization of all options
     mentioned in SANITIZE_OPTION.  A list of values acceptable by
     '-fsanitize' option can be provided.

          void __attribute__ ((no_sanitize ("alignment", "object-size")))
          f () { /* Do something. */; }
          void __attribute__ ((no_sanitize ("alignment,object-size")))
          g () { /* Do something. */; }

'no_sanitize_address'
'no_address_safety_analysis'
     The 'no_sanitize_address' attribute on functions is used to inform
     the compiler that it should not instrument memory accesses in the
     function when compiling with the '-fsanitize=address' option.  The
     'no_address_safety_analysis' is a deprecated alias of the
     'no_sanitize_address' attribute, new code should use
     'no_sanitize_address'.

'no_sanitize_thread'
     The 'no_sanitize_thread' attribute on functions is used to inform
     the compiler that it should not instrument memory accesses in the
     function when compiling with the '-fsanitize=thread' option.

'no_sanitize_undefined'
     The 'no_sanitize_undefined' attribute on functions is used to
     inform the compiler that it should not check for undefined behavior
     in the function when compiling with the '-fsanitize=undefined'
     option.

'no_split_stack'
     If '-fsplit-stack' is given, functions have a small prologue which
     decides whether to split the stack.  Functions with the
     'no_split_stack' attribute do not have that prologue, and thus may
     run with only a small amount of stack space available.

'no_stack_limit'
     This attribute locally overrides the '-fstack-limit-register' and
     '-fstack-limit-symbol' command-line options; it has the effect of
     disabling stack limit checking in the function it applies to.

'noclone'
     This function attribute prevents a function from being considered
     for cloning--a mechanism that produces specialized copies of
     functions and which is (currently) performed by interprocedural
     constant propagation.

'noinline'
     This function attribute prevents a function from being considered
     for inlining.  If the function does not have side effects, there
     are optimizations other than inlining that cause function calls to
     be optimized away, although the function call is live.  To keep
     such calls from being optimized away, put
          asm ("");

     (*note Extended Asm::) in the called function, to serve as a
     special side effect.

'noipa'
     Disable interprocedural optimizations between the function with
     this attribute and its callers, as if the body of the function is
     not available when optimizing callers and the callers are
     unavailable when optimizing the body.  This attribute implies
     'noinline', 'noclone' and 'no_icf' attributes.  However, this
     attribute is not equivalent to a combination of other attributes,
     because its purpose is to suppress existing and future
     optimizations employing interprocedural analysis, including those
     that do not have an attribute suitable for disabling them
     individually.  This attribute is supported mainly for the purpose
     of testing the compiler.

'nonnull'
'nonnull (ARG-INDEX, ...)'
     The 'nonnull' attribute may be applied to a function that takes at
     least one argument of a pointer type.  It indicates that the
     referenced arguments must be non-null pointers.  For instance, the
     declaration:

          extern void *
          my_memcpy (void *dest, const void *src, size_t len)
                  __attribute__((nonnull (1, 2)));

     causes the compiler to check that, in calls to 'my_memcpy',
     arguments DEST and SRC are non-null.  If the compiler determines
     that a null pointer is passed in an argument slot marked as
     non-null, and the '-Wnonnull' option is enabled, a warning is
     issued.  *Note Warning Options::.  Unless disabled by the
     '-fno-delete-null-pointer-checks' option the compiler may also
     perform optimizations based on the knowledge that certain function
     arguments cannot be null.  In addition, the
     '-fisolate-erroneous-paths-attribute' option can be specified to
     have GCC transform calls with null arguments to non-null functions
     into traps.  *Note Optimize Options::.

     If no ARG-INDEX is given to the 'nonnull' attribute, all pointer
     arguments are marked as non-null.  To illustrate, the following
     declaration is equivalent to the previous example:

          extern void *
          my_memcpy (void *dest, const void *src, size_t len)
                  __attribute__((nonnull));

'noplt'
     The 'noplt' attribute is the counterpart to option '-fno-plt'.
     Calls to functions marked with this attribute in
     position-independent code do not use the PLT.

          /* Externally defined function foo.  */
          int foo () __attribute__ ((noplt));

          int
          main (/* ... */)
          {
            /* ... */
            foo ();
            /* ... */
          }

     The 'noplt' attribute on function 'foo' tells the compiler to
     assume that the function 'foo' is externally defined and that the
     call to 'foo' must avoid the PLT in position-independent code.

     In position-dependent code, a few targets also convert calls to
     functions that are marked to not use the PLT to use the GOT
     instead.

'noreturn'
     A few standard library functions, such as 'abort' and 'exit',
     cannot return.  GCC knows this automatically.  Some programs define
     their own functions that never return.  You can declare them
     'noreturn' to tell the compiler this fact.  For example,

          void fatal () __attribute__ ((noreturn));

          void
          fatal (/* ... */)
          {
            /* ... */ /* Print error message. */ /* ... */
            exit (1);
          }

     The 'noreturn' keyword tells the compiler to assume that 'fatal'
     cannot return.  It can then optimize without regard to what would
     happen if 'fatal' ever did return.  This makes slightly better
     code.  More importantly, it helps avoid spurious warnings of
     uninitialized variables.

     The 'noreturn' keyword does not affect the exceptional path when
     that applies: a 'noreturn'-marked function may still return to the
     caller by throwing an exception or calling 'longjmp'.

     In order to preserve backtraces, GCC will never turn calls to
     'noreturn' functions into tail calls.

     Do not assume that registers saved by the calling function are
     restored before calling the 'noreturn' function.

     It does not make sense for a 'noreturn' function to have a return
     type other than 'void'.

'nothrow'
     The 'nothrow' attribute is used to inform the compiler that a
     function cannot throw an exception.  For example, most functions in
     the standard C library can be guaranteed not to throw an exception
     with the notable exceptions of 'qsort' and 'bsearch' that take
     function pointer arguments.

'optimize (LEVEL, ...)'
'optimize (STRING, ...)'
     The 'optimize' attribute is used to specify that a function is to
     be compiled with different optimization options than specified on
     the command line.  Valid arguments are constant non-negative
     integers and strings.  Each numeric argument specifies an
     optimization LEVEL.  Each STRING argument consists of one or more
     comma-separated substrings.  Each substring that begins with the
     letter 'O' refers to an optimization option such as '-O0' or '-Os'.
     Other substrings are taken as suffixes to the '-f' prefix jointly
     forming the name of an optimization option.  *Note Optimize
     Options::.

     '#pragma GCC optimize' can be used to set optimization options for
     more than one function.  *Note Function Specific Option Pragmas::,
     for details about the pragma.

     Providing multiple strings as arguments separated by commas to
     specify multiple options is equivalent to separating the option
     suffixes with a comma (',') within a single string.  Spaces are not
     permitted within the strings.

     Not every optimization option that starts with the -F prefix
     specified by the attribute necessarily has an effect on the
     function.  The 'optimize' attribute should be used for debugging
     purposes only.  It is not suitable in production code.

'patchable_function_entry'
     In case the target's text segment can be made writable at run time
     by any means, padding the function entry with a number of NOPs can
     be used to provide a universal tool for instrumentation.

     The 'patchable_function_entry' function attribute can be used to
     change the number of NOPs to any desired value.  The two-value
     syntax is the same as for the command-line switch
     '-fpatchable-function-entry=N,M', generating N NOPs, with the
     function entry point before the Mth NOP instruction.  M defaults to
     0 if omitted e.g. function entry point is before the first NOP.

     If patchable function entries are enabled globally using the
     command-line option '-fpatchable-function-entry=N,M', then you must
     disable instrumentation on all functions that are part of the
     instrumentation framework with the attribute
     'patchable_function_entry (0)' to prevent recursion.

'pure'

     Calls to functions that have no observable effects on the state of
     the program other than to return a value may lend themselves to
     optimizations such as common subexpression elimination.  Declaring
     such functions with the 'pure' attribute allows GCC to avoid
     emitting some calls in repeated invocations of the function with
     the same argument values.

     The 'pure' attribute prohibits a function from modifying the state
     of the program that is observable by means other than inspecting
     the function's return value.  However, functions declared with the
     'pure' attribute can safely read any non-volatile objects, and
     modify the value of objects in a way that does not affect their
     return value or the observable state of the program.

     For example,

          int hash (char *) __attribute__ ((pure));

     tells GCC that subsequent calls to the function 'hash' with the
     same string can be replaced by the result of the first call
     provided the state of the program observable by 'hash', including
     the contents of the array itself, does not change in between.  Even
     though 'hash' takes a non-const pointer argument it must not modify
     the array it points to, or any other object whose value the rest of
     the program may depend on.  However, the caller may safely change
     the contents of the array between successive calls to the function
     (doing so disables the optimization).  The restriction also applies
     to member objects referenced by the 'this' pointer in C++
     non-static member functions.

     Some common examples of pure functions are 'strlen' or 'memcmp'.
     Interesting non-pure functions are functions with infinite loops or
     those depending on volatile memory or other system resource, that
     may change between consecutive calls (such as the standard C 'feof'
     function in a multithreading environment).

     The 'pure' attribute imposes similar but looser restrictions on a
     function's definition than the 'const' attribute: 'pure' allows the
     function to read any non-volatile memory, even if it changes in
     between successive invocations of the function.  Declaring the same
     function with both the 'pure' and the 'const' attribute is
     diagnosed.  Because a pure function cannot have any observable side
     effects it does not make sense for such a function to return
     'void'.  Declaring such a function is diagnosed.

'returns_nonnull'
     The 'returns_nonnull' attribute specifies that the function return
     value should be a non-null pointer.  For instance, the declaration:

          extern void *
          mymalloc (size_t len) __attribute__((returns_nonnull));

     lets the compiler optimize callers based on the knowledge that the
     return value will never be null.

'returns_twice'
     The 'returns_twice' attribute tells the compiler that a function
     may return more than one time.  The compiler ensures that all
     registers are dead before calling such a function and emits a
     warning about the variables that may be clobbered after the second
     return from the function.  Examples of such functions are 'setjmp'
     and 'vfork'.  The 'longjmp'-like counterpart of such function, if
     any, might need to be marked with the 'noreturn' attribute.

'section ("SECTION-NAME")'
     Normally, the compiler places the code it generates in the 'text'
     section.  Sometimes, however, you need additional sections, or you
     need certain particular functions to appear in special sections.
     The 'section' attribute specifies that a function lives in a
     particular section.  For example, the declaration:

          extern void foobar (void) __attribute__ ((section ("bar")));

     puts the function 'foobar' in the 'bar' section.

     Some file formats do not support arbitrary sections so the
     'section' attribute is not available on all platforms.  If you need
     to map the entire contents of a module to a particular section,
     consider using the facilities of the linker instead.

'sentinel'
'sentinel (POSITION)'
     This function attribute indicates that an argument in a call to the
     function is expected to be an explicit 'NULL'.  The attribute is
     only valid on variadic functions.  By default, the sentinel is
     expected to be the last argument of the function call.  If the
     optional POSITION argument is specified to the attribute, the
     sentinel must be located at POSITION counting backwards from the
     end of the argument list.

          __attribute__ ((sentinel))
          is equivalent to
          __attribute__ ((sentinel(0)))

     The attribute is automatically set with a position of 0 for the
     built-in functions 'execl' and 'execlp'.  The built-in function
     'execle' has the attribute set with a position of 1.

     A valid 'NULL' in this context is defined as zero with any object
     pointer type.  If your system defines the 'NULL' macro with an
     integer type then you need to add an explicit cast.  During
     installation GCC replaces the system '<stddef.h>' header with a
     copy that redefines NULL appropriately.

     The warnings for missing or incorrect sentinels are enabled with
     '-Wformat'.

'simd'
'simd("MASK")'
     This attribute enables creation of one or more function versions
     that can process multiple arguments using SIMD instructions from a
     single invocation.  Specifying this attribute allows compiler to
     assume that such versions are available at link time (provided in
     the same or another translation unit).  Generated versions are
     target-dependent and described in the corresponding Vector ABI
     document.  For x86_64 target this document can be found
     here (https://sourceware.org/glibc/wiki/libmvec?action=AttachFile&do=view&target=VectorABI.txt).

     The optional argument MASK may have the value 'notinbranch' or
     'inbranch', and instructs the compiler to generate non-masked or
     masked clones correspondingly.  By default, all clones are
     generated.

     If the attribute is specified and '#pragma omp declare simd' is
     present on a declaration and the '-fopenmp' or '-fopenmp-simd'
     switch is specified, then the attribute is ignored.

'stack_protect'
     This attribute adds stack protection code to the function if flags
     '-fstack-protector', '-fstack-protector-strong' or
     '-fstack-protector-explicit' are set.

'target (STRING, ...)'
     Multiple target back ends implement the 'target' attribute to
     specify that a function is to be compiled with different target
     options than specified on the command line.  One or more strings
     can be provided as arguments.  Each string consists of one or more
     comma-separated suffixes to the '-m' prefix jointly forming the
     name of a machine-dependent option.  *Note Machine-Dependent
     Options: Submodel Options.

     The 'target' attribute can be used for instance to have a function
     compiled with a different ISA (instruction set architecture) than
     the default.  '#pragma GCC target' can be used to specify
     target-specific options for more than one function.  *Note Function
     Specific Option Pragmas::, for details about the pragma.

     For instance, on an x86, you could declare one function with the
     'target("sse4.1,arch=core2")' attribute and another with
     'target("sse4a,arch=amdfam10")'.  This is equivalent to compiling
     the first function with '-msse4.1' and '-march=core2' options, and
     the second function with '-msse4a' and '-march=amdfam10' options.
     It is up to you to make sure that a function is only invoked on a
     machine that supports the particular ISA it is compiled for (for
     example by using 'cpuid' on x86 to determine what feature bits and
     architecture family are used).

          int core2_func (void) __attribute__ ((__target__ ("arch=core2")));
          int sse3_func (void) __attribute__ ((__target__ ("sse3")));

     Providing multiple strings as arguments separated by commas to
     specify multiple options is equivalent to separating the option
     suffixes with a comma (',') within a single string.  Spaces are not
     permitted within the strings.

     The options supported are specific to each target; refer to *note
     x86 Function Attributes::, *note PowerPC Function Attributes::,
     *note ARM Function Attributes::, *note AArch64 Function
     Attributes::, *note Nios II Function Attributes::, and *note S/390
     Function Attributes:: for details.

'target_clones (OPTIONS)'
     The 'target_clones' attribute is used to specify that a function be
     cloned into multiple versions compiled with different target
     options than specified on the command line.  The supported options
     and restrictions are the same as for 'target' attribute.

     For instance, on an x86, you could compile a function with
     'target_clones("sse4.1,avx")'.  GCC creates two function clones,
     one compiled with '-msse4.1' and another with '-mavx'.

     On a PowerPC, you can compile a function with
     'target_clones("cpu=power9,default")'.  GCC will create two
     function clones, one compiled with '-mcpu=power9' and another with
     the default options.  GCC must be configured to use GLIBC 2.23 or
     newer in order to use the 'target_clones' attribute.

     It also creates a resolver function (see the 'ifunc' attribute
     above) that dynamically selects a clone suitable for current
     architecture.  The resolver is created only if there is a usage of
     a function with 'target_clones' attribute.

'unused'
     This attribute, attached to a function, means that the function is
     meant to be possibly unused.  GCC does not produce a warning for
     this function.

'used'
     This attribute, attached to a function, means that code must be
     emitted for the function even if it appears that the function is
     not referenced.  This is useful, for example, when the function is
     referenced only in inline assembly.

     When applied to a member function of a C++ class template, the
     attribute also means that the function is instantiated if the class
     itself is instantiated.

'visibility ("VISIBILITY_TYPE")'
     This attribute affects the linkage of the declaration to which it
     is attached.  It can be applied to variables (*note Common Variable
     Attributes::) and types (*note Common Type Attributes::) as well as
     functions.

     There are four supported VISIBILITY_TYPE values: default, hidden,
     protected or internal visibility.

          void __attribute__ ((visibility ("protected")))
          f () { /* Do something. */; }
          int i __attribute__ ((visibility ("hidden")));

     The possible values of VISIBILITY_TYPE correspond to the visibility
     settings in the ELF gABI.

     'default'
          Default visibility is the normal case for the object file
          format.  This value is available for the visibility attribute
          to override other options that may change the assumed
          visibility of entities.

          On ELF, default visibility means that the declaration is
          visible to other modules and, in shared libraries, means that
          the declared entity may be overridden.

          On Darwin, default visibility means that the declaration is
          visible to other modules.

          Default visibility corresponds to "external linkage" in the
          language.

     'hidden'
          Hidden visibility indicates that the entity declared has a new
          form of linkage, which we call "hidden linkage".  Two
          declarations of an object with hidden linkage refer to the
          same object if they are in the same shared object.

     'internal'
          Internal visibility is like hidden visibility, but with
          additional processor specific semantics.  Unless otherwise
          specified by the psABI, GCC defines internal visibility to
          mean that a function is _never_ called from another module.
          Compare this with hidden functions which, while they cannot be
          referenced directly by other modules, can be referenced
          indirectly via function pointers.  By indicating that a
          function cannot be called from outside the module, GCC may for
          instance omit the load of a PIC register since it is known
          that the calling function loaded the correct value.

     'protected'
          Protected visibility is like default visibility except that it
          indicates that references within the defining module bind to
          the definition in that module.  That is, the declared entity
          cannot be overridden by another module.

     All visibilities are supported on many, but not all, ELF targets
     (supported when the assembler supports the '.visibility'
     pseudo-op).  Default visibility is supported everywhere.  Hidden
     visibility is supported on Darwin targets.

     The visibility attribute should be applied only to declarations
     that would otherwise have external linkage.  The attribute should
     be applied consistently, so that the same entity should not be
     declared with different settings of the attribute.

     In C++, the visibility attribute applies to types as well as
     functions and objects, because in C++ types have linkage.  A class
     must not have greater visibility than its non-static data member
     types and bases, and class members default to the visibility of
     their class.  Also, a declaration without explicit visibility is
     limited to the visibility of its type.

     In C++, you can mark member functions and static member variables
     of a class with the visibility attribute.  This is useful if you
     know a particular method or static member variable should only be
     used from one shared object; then you can mark it hidden while the
     rest of the class has default visibility.  Care must be taken to
     avoid breaking the One Definition Rule; for example, it is usually
     not useful to mark an inline method as hidden without marking the
     whole class as hidden.

     A C++ namespace declaration can also have the visibility attribute.

          namespace nspace1 __attribute__ ((visibility ("protected")))
          { /* Do something. */; }

     This attribute applies only to the particular namespace body, not
     to other definitions of the same namespace; it is equivalent to
     using '#pragma GCC visibility' before and after the namespace
     definition (*note Visibility Pragmas::).

     In C++, if a template argument has limited visibility, this
     restriction is implicitly propagated to the template instantiation.
     Otherwise, template instantiations and specializations default to
     the visibility of their template.

     If both the template and enclosing class have explicit visibility,
     the visibility from the template is used.

'warn_unused_result'
     The 'warn_unused_result' attribute causes a warning to be emitted
     if a caller of the function with this attribute does not use its
     return value.  This is useful for functions where not checking the
     result is either a security problem or always a bug, such as
     'realloc'.

          int fn () __attribute__ ((warn_unused_result));
          int foo ()
          {
            if (fn () < 0) return -1;
            fn ();
            return 0;
          }

     results in warning on line 5.

'weak'
     The 'weak' attribute causes the declaration to be emitted as a weak
     symbol rather than a global.  This is primarily useful in defining
     library functions that can be overridden in user code, though it
     can also be used with non-function declarations.  Weak symbols are
     supported for ELF targets, and also for a.out targets when using
     the GNU assembler and linker.

'weakref'
'weakref ("TARGET")'
     The 'weakref' attribute marks a declaration as a weak reference.
     Without arguments, it should be accompanied by an 'alias' attribute
     naming the target symbol.  Optionally, the TARGET may be given as
     an argument to 'weakref' itself.  In either case, 'weakref'
     implicitly marks the declaration as 'weak'.  Without a TARGET,
     given as an argument to 'weakref' or to 'alias', 'weakref' is
     equivalent to 'weak'.

          static int x() __attribute__ ((weakref ("y")));
          /* is equivalent to... */
          static int x() __attribute__ ((weak, weakref, alias ("y")));
          /* and to... */
          static int x() __attribute__ ((weakref));
          static int x() __attribute__ ((alias ("y")));

     A weak reference is an alias that does not by itself require a
     definition to be given for the target symbol.  If the target symbol
     is only referenced through weak references, then it becomes a
     'weak' undefined symbol.  If it is directly referenced, however,
     then such strong references prevail, and a definition is required
     for the symbol, not necessarily in the same translation unit.

     The effect is equivalent to moving all references to the alias to a
     separate translation unit, renaming the alias to the aliased
     symbol, declaring it as weak, compiling the two separate
     translation units and performing a link with relocatable output
     (ie: 'ld -r') on them.

     At present, a declaration to which 'weakref' is attached can only
     be 'static'.

==============================================================================
File: gcc.info,  Node: |AArch64_Function_Attributes|,  Next: |AMD_GCN_Function_Attributes|,  Prev: |Common_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *AArch64_Function_Attributes*

6.33.2 AArch64 Function Attributes
----------------------------------

The following target-specific function attributes are available for the
AArch64 target.  For the most part, these options mirror the behavior of
similar command-line options (*note AArch64 Options::), but on a
per-function basis.

'general-regs-only'
     Indicates that no floating-point or Advanced SIMD registers should
     be used when generating code for this function.  If the function
     explicitly uses floating-point code, then the compiler gives an
     error.  This is the same behavior as that of the command-line
     option '-mgeneral-regs-only'.

'fix-cortex-a53-835769'
     Indicates that the workaround for the Cortex-A53 erratum 835769
     should be applied to this function.  To explicitly disable the
     workaround for this function specify the negated form:
     'no-fix-cortex-a53-835769'.  This corresponds to the behavior of
     the command line options '-mfix-cortex-a53-835769' and
     '-mno-fix-cortex-a53-835769'.

'cmodel='
     Indicates that code should be generated for a particular code model
     for this function.  The behavior and permissible arguments are the
     same as for the command line option '-mcmodel='.

'strict-align'
'no-strict-align'
     'strict-align' indicates that the compiler should not assume that
     unaligned memory references are handled by the system.  To allow
     the compiler to assume that aligned memory references are handled
     by the system, the inverse attribute 'no-strict-align' can be
     specified.  The behavior is same as for the command-line option
     '-mstrict-align' and '-mno-strict-align'.

'omit-leaf-frame-pointer'
     Indicates that the frame pointer should be omitted for a leaf
     function call.  To keep the frame pointer, the inverse attribute
     'no-omit-leaf-frame-pointer' can be specified.  These attributes
     have the same behavior as the command-line options
     '-momit-leaf-frame-pointer' and '-mno-omit-leaf-frame-pointer'.

'tls-dialect='
     Specifies the TLS dialect to use for this function.  The behavior
     and permissible arguments are the same as for the command-line
     option '-mtls-dialect='.

'arch='
     Specifies the architecture version and architectural extensions to
     use for this function.  The behavior and permissible arguments are
     the same as for the '-march=' command-line option.

'tune='
     Specifies the core for which to tune the performance of this
     function.  The behavior and permissible arguments are the same as
     for the '-mtune=' command-line option.

'cpu='
     Specifies the core for which to tune the performance of this
     function and also whose architectural features to use.  The
     behavior and valid arguments are the same as for the '-mcpu='
     command-line option.

'sign-return-address'
     Select the function scope on which return address signing will be
     applied.  The behavior and permissible arguments are the same as
     for the command-line option '-msign-return-address='.  The default
     value is 'none'.  This attribute is deprecated.  The
     'branch-protection' attribute should be used instead.

'branch-protection'
     Select the function scope on which branch protection will be
     applied.  The behavior and permissible arguments are the same as
     for the command-line option '-mbranch-protection='.  The default
     value is 'none'.

 The above target attributes can be specified as follows:

     __attribute__((target("ATTR-STRING")))
     int
     f (int a)
     {
       return a + 5;
     }

 where 'ATTR-STRING' is one of the attribute strings specified above.

 Additionally, the architectural extension string may be specified on
its own.  This can be used to turn on and off particular architectural
extensions without having to specify a particular architecture version
or core.  Example:

     __attribute__((target("+crc+nocrypto")))
     int
     foo (int a)
     {
       return a + 5;
     }

 In this example 'target("+crc+nocrypto")' enables the 'crc' extension
and disables the 'crypto' extension for the function 'foo' without
modifying an existing '-march=' or '-mcpu' option.

 Multiple target function attributes can be specified by separating them
with a comma.  For example:
     __attribute__((target("arch=armv8-a+crc+crypto,tune=cortex-a53")))
     int
     foo (int a)
     {
       return a + 5;
     }

 is valid and compiles function 'foo' for ARMv8-A with 'crc' and
'crypto' extensions and tunes it for 'cortex-a53'.

6.33.2.1 Inlining rules
-----------------------

Specifying target attributes on individual functions or performing
link-time optimization across translation units compiled with different
target options can affect function inlining rules:

 In particular, a caller function can inline a callee function only if
the architectural features available to the callee are a subset of the
features available to the caller.  For example: A function 'foo'
compiled with '-march=armv8-a+crc', or tagged with the equivalent
'arch=armv8-a+crc' attribute, can inline a function 'bar' compiled with
'-march=armv8-a+nocrc' because the all the architectural features that
function 'bar' requires are available to function 'foo'.  Conversely,
function 'bar' cannot inline function 'foo'.

 Additionally inlining a function compiled with '-mstrict-align' into a
function compiled without '-mstrict-align' is not allowed.  However,
inlining a function compiled without '-mstrict-align' into a function
compiled with '-mstrict-align' is allowed.

 Note that CPU tuning options and attributes such as the '-mcpu=',
'-mtune=' do not inhibit inlining unless the CPU specified by the
'-mcpu=' option or the 'cpu=' attribute conflicts with the architectural
feature rules specified above.

==============================================================================
File: gcc.info,  Node: |AMD_GCN_Function_Attributes|,  Next: |ARC_Function_Attributes|,  Prev: |AArch64_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *AMD_GCN_Function_Attributes*

6.33.3 AMD GCN Function Attributes
----------------------------------

These function attributes are supported by the AMD GCN back end:

'amdgpu_hsa_kernel'
     This attribute indicates that the corresponding function should be
     compiled as a kernel function, that is an entry point that can be
     invoked from the host via the HSA runtime library.  By default
     functions are only callable only from other GCN functions.

     This attribute is implicitly applied to any function named 'main',
     using default parameters.

     Kernel functions may return an integer value, which will be written
     to a conventional place within the HSA "kernargs" region.

     The attribute parameters configure what values are passed into the
     kernel function by the GPU drivers, via the initial register state.
     Some values are used by the compiler, and therefore forced on.
     Enabling other options may break assumptions in the compiler and/or
     run-time libraries.

     'private_segment_buffer'
          Set 'enable_sgpr_private_segment_buffer' flag.  Always on
          (required to locate the stack).

     'dispatch_ptr'
          Set 'enable_sgpr_dispatch_ptr' flag.  Always on (required to
          locate the launch dimensions).

     'queue_ptr'
          Set 'enable_sgpr_queue_ptr' flag.  Always on (required to
          convert address spaces).

     'kernarg_segment_ptr'
          Set 'enable_sgpr_kernarg_segment_ptr' flag.  Always on
          (required to locate the kernel arguments, "kernargs").

     'dispatch_id'
          Set 'enable_sgpr_dispatch_id' flag.

     'flat_scratch_init'
          Set 'enable_sgpr_flat_scratch_init' flag.

     'private_segment_size'
          Set 'enable_sgpr_private_segment_size' flag.

     'grid_workgroup_count_X'
          Set 'enable_sgpr_grid_workgroup_count_x' flag.  Always on
          (required to use OpenACC/OpenMP).

     'grid_workgroup_count_Y'
          Set 'enable_sgpr_grid_workgroup_count_y' flag.

     'grid_workgroup_count_Z'
          Set 'enable_sgpr_grid_workgroup_count_z' flag.

     'workgroup_id_X'
          Set 'enable_sgpr_workgroup_id_x' flag.

     'workgroup_id_Y'
          Set 'enable_sgpr_workgroup_id_y' flag.

     'workgroup_id_Z'
          Set 'enable_sgpr_workgroup_id_z' flag.

     'workgroup_info'
          Set 'enable_sgpr_workgroup_info' flag.

     'private_segment_wave_offset'
          Set 'enable_sgpr_private_segment_wave_byte_offset' flag.
          Always on (required to locate the stack).

     'work_item_id_X'
          Set 'enable_vgpr_workitem_id' parameter.  Always on (can't be
          disabled).

     'work_item_id_Y'
          Set 'enable_vgpr_workitem_id' parameter.  Always on (required
          to enable vectorization.)

     'work_item_id_Z'
          Set 'enable_vgpr_workitem_id' parameter.  Always on (required
          to use OpenACC/OpenMP).

==============================================================================
File: gcc.info,  Node: |ARC_Function_Attributes|,  Next: |ARM_Function_Attributes|,  Prev: |AMD_GCN_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *ARC_Function_Attributes*

6.33.4 ARC Function Attributes
------------------------------

These function attributes are supported by the ARC back end:

'interrupt'
     Use this attribute to indicate that the specified function is an
     interrupt handler.  The compiler generates function entry and exit
     sequences suitable for use in an interrupt handler when this
     attribute is present.

     On the ARC, you must specify the kind of interrupt to be handled in
     a parameter to the interrupt attribute like this:

          void f () __attribute__ ((interrupt ("ilink1")));

     Permissible values for this parameter are: 'ilink1' and 'ilink2'.

'long_call'
'medium_call'
'short_call'
     These attributes specify how a particular function is called.
     These attributes override the '-mlong-calls' and '-mmedium-calls'
     (*note ARC Options::) command-line switches and '#pragma
     long_calls' settings.

     For ARC, a function marked with the 'long_call' attribute is always
     called using register-indirect jump-and-link instructions, thereby
     enabling the called function to be placed anywhere within the
     32-bit address space.  A function marked with the 'medium_call'
     attribute will always be close enough to be called with an
     unconditional branch-and-link instruction, which has a 25-bit
     offset from the call site.  A function marked with the 'short_call'
     attribute will always be close enough to be called with a
     conditional branch-and-link instruction, which has a 21-bit offset
     from the call site.

'jli_always'
     Forces a particular function to be called using 'jli' instruction.
     The 'jli' instruction makes use of a table stored into '.jlitab'
     section, which holds the location of the functions which are
     addressed using this instruction.

'jli_fixed'
     Identical like the above one, but the location of the function in
     the 'jli' table is known and given as an attribute parameter.

'secure_call'
     This attribute allows one to mark secure-code functions that are
     callable from normal mode.  The location of the secure call
     function into the 'sjli' table needs to be passed as argument.

==============================================================================
File: gcc.info,  Node: |ARM_Function_Attributes|,  Next: |AVR_Function_Attributes|,  Prev: |ARC_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *ARM_Function_Attributes*

6.33.5 ARM Function Attributes
------------------------------

These function attributes are supported for ARM targets:

'general-regs-only'
     Indicates that no floating-point or Advanced SIMD registers should
     be used when generating code for this function.  If the function
     explicitly uses floating-point code, then the compiler gives an
     error.  This is the same behavior as that of the command-line
     option '-mgeneral-regs-only'.

'interrupt'
     Use this attribute to indicate that the specified function is an
     interrupt handler.  The compiler generates function entry and exit
     sequences suitable for use in an interrupt handler when this
     attribute is present.

     You can specify the kind of interrupt to be handled by adding an
     optional parameter to the interrupt attribute like this:

          void f () __attribute__ ((interrupt ("IRQ")));

     Permissible values for this parameter are: 'IRQ', 'FIQ', 'SWI',
     'ABORT' and 'UNDEF'.

     On ARMv7-M the interrupt type is ignored, and the attribute means
     the function may be called with a word-aligned stack pointer.

'isr'
     Use this attribute on ARM to write Interrupt Service Routines.
     This is an alias to the 'interrupt' attribute above.

'long_call'
'short_call'
     These attributes specify how a particular function is called.
     These attributes override the '-mlong-calls' (*note ARM Options::)
     command-line switch and '#pragma long_calls' settings.  For ARM,
     the 'long_call' attribute indicates that the function might be far
     away from the call site and require a different (more expensive)
     calling sequence.  The 'short_call' attribute always places the
     offset to the function from the call site into the 'BL' instruction
     directly.

'naked'
     This attribute allows the compiler to construct the requisite
     function declaration, while allowing the body of the function to be
     assembly code.  The specified function will not have
     prologue/epilogue sequences generated by the compiler.  Only basic
     'asm' statements can safely be included in naked functions (*note
     Basic Asm::).  While using extended 'asm' or a mixture of basic
     'asm' and C code may appear to work, they cannot be depended upon
     to work reliably and are not supported.

'pcs'

     The 'pcs' attribute can be used to control the calling convention
     used for a function on ARM. The attribute takes an argument that
     specifies the calling convention to use.

     When compiling using the AAPCS ABI (or a variant of it) then valid
     values for the argument are '"aapcs"' and '"aapcs-vfp"'.  In order
     to use a variant other than '"aapcs"' then the compiler must be
     permitted to use the appropriate co-processor registers (i.e., the
     VFP registers must be available in order to use '"aapcs-vfp"').
     For example,

          /* Argument passed in r0, and result returned in r0+r1.  */
          double f2d (float) __attribute__((pcs("aapcs")));

     Variadic functions always use the '"aapcs"' calling convention and
     the compiler rejects attempts to specify an alternative.

'target (OPTIONS)'
     As discussed in *note Common Function Attributes::, this attribute
     allows specification of target-specific compilation options.

     On ARM, the following options are allowed:

     'thumb'
          Force code generation in the Thumb (T16/T32) ISA, depending on
          the architecture level.

     'arm'
          Force code generation in the ARM (A32) ISA.

          Functions from different modes can be inlined in the caller's
          mode.

     'fpu='
          Specifies the fpu for which to tune the performance of this
          function.  The behavior and permissible arguments are the same
          as for the '-mfpu=' command-line option.

     'arch='
          Specifies the architecture version and architectural
          extensions to use for this function.  The behavior and
          permissible arguments are the same as for the '-march='
          command-line option.

          The above target attributes can be specified as follows:

               __attribute__((target("arch=armv8-a+crc")))
               int
               f (int a)
               {
                 return a + 5;
               }

          Additionally, the architectural extension string may be
          specified on its own.  This can be used to turn on and off
          particular architectural extensions without having to specify
          a particular architecture version or core.  Example:

               __attribute__((target("+crc+nocrypto")))
               int
               foo (int a)
               {
                 return a + 5;
               }

          In this example 'target("+crc+nocrypto")' enables the 'crc'
          extension and disables the 'crypto' extension for the function
          'foo' without modifying an existing '-march=' or '-mcpu'
          option.

==============================================================================
File: gcc.info,  Node: |AVR_Function_Attributes|,  Next: |Blackfin_Function_Attributes|,  Prev: |ARM_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *AVR_Function_Attributes*

6.33.6 AVR Function Attributes
------------------------------

These function attributes are supported by the AVR back end:

'interrupt'
     Use this attribute to indicate that the specified function is an
     interrupt handler.  The compiler generates function entry and exit
     sequences suitable for use in an interrupt handler when this
     attribute is present.

     On the AVR, the hardware globally disables interrupts when an
     interrupt is executed.  The first instruction of an interrupt
     handler declared with this attribute is a 'SEI' instruction to
     re-enable interrupts.  See also the 'signal' function attribute
     that does not insert a 'SEI' instruction.  If both 'signal' and
     'interrupt' are specified for the same function, 'signal' is
     silently ignored.

'naked'
     This attribute allows the compiler to construct the requisite
     function declaration, while allowing the body of the function to be
     assembly code.  The specified function will not have
     prologue/epilogue sequences generated by the compiler.  Only basic
     'asm' statements can safely be included in naked functions (*note
     Basic Asm::).  While using extended 'asm' or a mixture of basic
     'asm' and C code may appear to work, they cannot be depended upon
     to work reliably and are not supported.

'no_gccisr'
     Do not use '__gcc_isr' pseudo instructions in a function with the
     'interrupt' or 'signal' attribute aka.  interrupt service routine
     (ISR). Use this attribute if the preamble of the ISR prologue
     should always read
          push  __zero_reg__
          push  __tmp_reg__
          in    __tmp_reg__, __SREG__
          push  __tmp_reg__
          clr   __zero_reg__
     and accordingly for the postamble of the epilogue -- no matter
     whether the mentioned registers are actually used in the ISR or
     not.  Situations where you might want to use this attribute
     include:
        * Code that (effectively) clobbers bits of 'SREG' other than the
          'I'-flag by writing to the memory location of 'SREG'.
        * Code that uses inline assembler to jump to a different
          function which expects (parts of) the prologue code as
          outlined above to be present.
     To disable '__gcc_isr' generation for the whole compilation unit,
     there is option '-mno-gas-isr-prologues', *note AVR Options::.

'OS_main'
'OS_task'
     On AVR, functions with the 'OS_main' or 'OS_task' attribute do not
     save/restore any call-saved register in their prologue/epilogue.

     The 'OS_main' attribute can be used when there _is guarantee_ that
     interrupts are disabled at the time when the function is entered.
     This saves resources when the stack pointer has to be changed to
     set up a frame for local variables.

     The 'OS_task' attribute can be used when there is _no guarantee_
     that interrupts are disabled at that time when the function is
     entered like for, e.g.  task functions in a multi-threading
     operating system.  In that case, changing the stack pointer
     register is guarded by save/clear/restore of the global interrupt
     enable flag.

     The differences to the 'naked' function attribute are:
        * 'naked' functions do not have a return instruction whereas
          'OS_main' and 'OS_task' functions have a 'RET' or 'RETI'
          return instruction.
        * 'naked' functions do not set up a frame for local variables or
          a frame pointer whereas 'OS_main' and 'OS_task' do this as
          needed.

'signal'
     Use this attribute on the AVR to indicate that the specified
     function is an interrupt handler.  The compiler generates function
     entry and exit sequences suitable for use in an interrupt handler
     when this attribute is present.

     See also the 'interrupt' function attribute.

     The AVR hardware globally disables interrupts when an interrupt is
     executed.  Interrupt handler functions defined with the 'signal'
     attribute do not re-enable interrupts.  It is save to enable
     interrupts in a 'signal' handler.  This "save" only applies to the
     code generated by the compiler and not to the IRQ layout of the
     application which is responsibility of the application.

     If both 'signal' and 'interrupt' are specified for the same
     function, 'signal' is silently ignored.

==============================================================================
File: gcc.info,  Node: |Blackfin_Function_Attributes|,  Next: |CR16_Function_Attributes|,  Prev: |AVR_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Blackfin_Function_Attributes*

6.33.7 Blackfin Function Attributes
-----------------------------------

These function attributes are supported by the Blackfin back end:

'exception_handler'
     Use this attribute on the Blackfin to indicate that the specified
     function is an exception handler.  The compiler generates function
     entry and exit sequences suitable for use in an exception handler
     when this attribute is present.

'interrupt_handler'
     Use this attribute to indicate that the specified function is an
     interrupt handler.  The compiler generates function entry and exit
     sequences suitable for use in an interrupt handler when this
     attribute is present.

'kspisusp'
     When used together with 'interrupt_handler', 'exception_handler' or
     'nmi_handler', code is generated to load the stack pointer from the
     USP register in the function prologue.

'l1_text'
     This attribute specifies a function to be placed into L1
     Instruction SRAM.  The function is put into a specific section
     named '.l1.text'.  With '-mfdpic', function calls with a such
     function as the callee or caller uses inlined PLT.

'l2'
     This attribute specifies a function to be placed into L2 SRAM. The
     function is put into a specific section named '.l2.text'.  With
     '-mfdpic', callers of such functions use an inlined PLT.

'longcall'
'shortcall'
     The 'longcall' attribute indicates that the function might be far
     away from the call site and require a different (more expensive)
     calling sequence.  The 'shortcall' attribute indicates that the
     function is always close enough for the shorter calling sequence to
     be used.  These attributes override the '-mlongcall' switch.

'nesting'
     Use this attribute together with 'interrupt_handler',
     'exception_handler' or 'nmi_handler' to indicate that the function
     entry code should enable nested interrupts or exceptions.

'nmi_handler'
     Use this attribute on the Blackfin to indicate that the specified
     function is an NMI handler.  The compiler generates function entry
     and exit sequences suitable for use in an NMI handler when this
     attribute is present.

'saveall'
     Use this attribute to indicate that all registers except the stack
     pointer should be saved in the prologue regardless of whether they
     are used or not.

==============================================================================
File: gcc.info,  Node: |CR16_Function_Attributes|,  Next: |C_SKY_Function_Attributes|,  Prev: |Blackfin_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *CR16_Function_Attributes*

6.33.8 CR16 Function Attributes
-------------------------------

These function attributes are supported by the CR16 back end:

'interrupt'
     Use this attribute to indicate that the specified function is an
     interrupt handler.  The compiler generates function entry and exit
     sequences suitable for use in an interrupt handler when this
     attribute is present.

==============================================================================
File: gcc.info,  Node: |C_SKY_Function_Attributes|,  Next: |Epiphany_Function_Attributes|,  Prev: |CR16_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *C_SKY_Function_Attributes*

6.33.9 C-SKY Function Attributes
--------------------------------

These function attributes are supported by the C-SKY back end:

'interrupt'
'isr'
     Use these attributes to indicate that the specified function is an
     interrupt handler.  The compiler generates function entry and exit
     sequences suitable for use in an interrupt handler when either of
     these attributes are present.

     Use of these options requires the '-mistack' command-line option to
     enable support for the necessary interrupt stack instructions.
     They are ignored with a warning otherwise.  *Note C-SKY Options::.

'naked'
     This attribute allows the compiler to construct the requisite
     function declaration, while allowing the body of the function to be
     assembly code.  The specified function will not have
     prologue/epilogue sequences generated by the compiler.  Only basic
     'asm' statements can safely be included in naked functions (*note
     Basic Asm::).  While using extended 'asm' or a mixture of basic
     'asm' and C code may appear to work, they cannot be depended upon
     to work reliably and are not supported.

==============================================================================
File: gcc.info,  Node: |Epiphany_Function_Attributes|,  Next: |H8/300_Function_Attributes|,  Prev: |C_SKY_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Epiphany_Function_Attributes*

6.33.10 Epiphany Function Attributes
------------------------------------

These function attributes are supported by the Epiphany back end:

'disinterrupt'
     This attribute causes the compiler to emit instructions to disable
     interrupts for the duration of the given function.

'forwarder_section'
     This attribute modifies the behavior of an interrupt handler.  The
     interrupt handler may be in external memory which cannot be reached
     by a branch instruction, so generate a local memory trampoline to
     transfer control.  The single parameter identifies the section
     where the trampoline is placed.

'interrupt'
     Use this attribute to indicate that the specified function is an
     interrupt handler.  The compiler generates function entry and exit
     sequences suitable for use in an interrupt handler when this
     attribute is present.  It may also generate a special section with
     code to initialize the interrupt vector table.

     On Epiphany targets one or more optional parameters can be added
     like this:

          void __attribute__ ((interrupt ("dma0, dma1"))) universal_dma_handler ();

     Permissible values for these parameters are: 'reset',
     'software_exception', 'page_miss', 'timer0', 'timer1', 'message',
     'dma0', 'dma1', 'wand' and 'swi'.  Multiple parameters indicate
     that multiple entries in the interrupt vector table should be
     initialized for this function, i.e. for each parameter NAME, a jump
     to the function is emitted in the section ivt_entry_NAME.  The
     parameter(s) may be omitted entirely, in which case no interrupt
     vector table entry is provided.

     Note that interrupts are enabled inside the function unless the
     'disinterrupt' attribute is also specified.

     The following examples are all valid uses of these attributes on
     Epiphany targets:
          void __attribute__ ((interrupt)) universal_handler ();
          void __attribute__ ((interrupt ("dma1"))) dma1_handler ();
          void __attribute__ ((interrupt ("dma0, dma1")))
            universal_dma_handler ();
          void __attribute__ ((interrupt ("timer0"), disinterrupt))
            fast_timer_handler ();
          void __attribute__ ((interrupt ("dma0, dma1"),
                               forwarder_section ("tramp")))
            external_dma_handler ();

'long_call'
'short_call'
     These attributes specify how a particular function is called.
     These attributes override the '-mlong-calls' (*note Adapteva
     Epiphany Options::) command-line switch and '#pragma long_calls'
     settings.

==============================================================================
File: gcc.info,  Node: |H8/300_Function_Attributes|,  Next: |IA_64_Function_Attributes|,  Prev: |Epiphany_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *H8/300_Function_Attributes*

6.33.11 H8/300 Function Attributes
----------------------------------

These function attributes are available for H8/300 targets:

'function_vector'
     Use this attribute on the H8/300, H8/300H, and H8S to indicate that
     the specified function should be called through the function
     vector.  Calling a function through the function vector reduces
     code size; however, the function vector has a limited size (maximum
     128 entries on the H8/300 and 64 entries on the H8/300H and H8S)
     and shares space with the interrupt vector.

'interrupt_handler'
     Use this attribute on the H8/300, H8/300H, and H8S to indicate that
     the specified function is an interrupt handler.  The compiler
     generates function entry and exit sequences suitable for use in an
     interrupt handler when this attribute is present.

'saveall'
     Use this attribute on the H8/300, H8/300H, and H8S to indicate that
     all registers except the stack pointer should be saved in the
     prologue regardless of whether they are used or not.

==============================================================================
File: gcc.info,  Node: |IA_64_Function_Attributes|,  Next: |M32C_Function_Attributes|,  Prev: |H8/300_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *IA_64_Function_Attributes*

6.33.12 IA-64 Function Attributes
---------------------------------

These function attributes are supported on IA-64 targets:

'syscall_linkage'
     This attribute is used to modify the IA-64 calling convention by
     marking all input registers as live at all function exits.  This
     makes it possible to restart a system call after an interrupt
     without having to save/restore the input registers.  This also
     prevents kernel data from leaking into application code.

'version_id'
     This IA-64 HP-UX attribute, attached to a global variable or
     function, renames a symbol to contain a version string, thus
     allowing for function level versioning.  HP-UX system header files
     may use function level versioning for some system calls.

          extern int foo () __attribute__((version_id ("20040821")));

     Calls to 'foo' are mapped to calls to 'foo{20040821}'.

==============================================================================
File: gcc.info,  Node: |M32C_Function_Attributes|,  Next: |M32R/D_Function_Attributes|,  Prev: |IA_64_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *M32C_Function_Attributes*

6.33.13 M32C Function Attributes
--------------------------------

These function attributes are supported by the M32C back end:

'bank_switch'
     When added to an interrupt handler with the M32C port, causes the
     prologue and epilogue to use bank switching to preserve the
     registers rather than saving them on the stack.

'fast_interrupt'
     Use this attribute on the M32C port to indicate that the specified
     function is a fast interrupt handler.  This is just like the
     'interrupt' attribute, except that 'freit' is used to return
     instead of 'reit'.

'function_vector'
     On M16C/M32C targets, the 'function_vector' attribute declares a
     special page subroutine call function.  Use of this attribute
     reduces the code size by 2 bytes for each call generated to the
     subroutine.  The argument to the attribute is the vector number
     entry from the special page vector table which contains the 16
     low-order bits of the subroutine's entry address.  Each vector
     table has special page number (18 to 255) that is used in 'jsrs'
     instructions.  Jump addresses of the routines are generated by
     adding 0x0F0000 (in case of M16C targets) or 0xFF0000 (in case of
     M32C targets), to the 2-byte addresses set in the vector table.
     Therefore you need to ensure that all the special page vector
     routines should get mapped within the address range 0x0F0000 to
     0x0FFFFF (for M16C) and 0xFF0000 to 0xFFFFFF (for M32C).

     In the following example 2 bytes are saved for each call to
     function 'foo'.

          void foo (void) __attribute__((function_vector(0x18)));
          void foo (void)
          {
          }

          void bar (void)
          {
              foo();
          }

     If functions are defined in one file and are called in another
     file, then be sure to write this declaration in both files.

     This attribute is ignored for R8C target.

'interrupt'
     Use this attribute to indicate that the specified function is an
     interrupt handler.  The compiler generates function entry and exit
     sequences suitable for use in an interrupt handler when this
     attribute is present.

==============================================================================
File: gcc.info,  Node: |M32R/D_Function_Attributes|,  Next: |m68k_Function_Attributes|,  Prev: |M32C_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *M32R/D_Function_Attributes*

6.33.14 M32R/D Function Attributes
----------------------------------

These function attributes are supported by the M32R/D back end:

'interrupt'
     Use this attribute to indicate that the specified function is an
     interrupt handler.  The compiler generates function entry and exit
     sequences suitable for use in an interrupt handler when this
     attribute is present.

'model (MODEL-NAME)'

     On the M32R/D, use this attribute to set the addressability of an
     object, and of the code generated for a function.  The identifier
     MODEL-NAME is one of 'small', 'medium', or 'large', representing
     each of the code models.

     Small model objects live in the lower 16MB of memory (so that their
     addresses can be loaded with the 'ld24' instruction), and are
     callable with the 'bl' instruction.

     Medium model objects may live anywhere in the 32-bit address space
     (the compiler generates 'seth/add3' instructions to load their
     addresses), and are callable with the 'bl' instruction.

     Large model objects may live anywhere in the 32-bit address space
     (the compiler generates 'seth/add3' instructions to load their
     addresses), and may not be reachable with the 'bl' instruction (the
     compiler generates the much slower 'seth/add3/jl' instruction
     sequence).

==============================================================================
File: gcc.info,  Node: |m68k_Function_Attributes|,  Next: |MCORE_Function_Attributes|,  Prev: |M32R/D_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *m68k_Function_Attributes*

6.33.15 m68k Function Attributes
--------------------------------

These function attributes are supported by the m68k back end:

'interrupt'
'interrupt_handler'
     Use this attribute to indicate that the specified function is an
     interrupt handler.  The compiler generates function entry and exit
     sequences suitable for use in an interrupt handler when this
     attribute is present.  Either name may be used.

'interrupt_thread'
     Use this attribute on fido, a subarchitecture of the m68k, to
     indicate that the specified function is an interrupt handler that
     is designed to run as a thread.  The compiler omits generate
     prologue/epilogue sequences and replaces the return instruction
     with a 'sleep' instruction.  This attribute is available only on
     fido.

==============================================================================
File: gcc.info,  Node: |MCORE_Function_Attributes|,  Next: |MeP_Function_Attributes|,  Prev: |m68k_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *MCORE_Function_Attributes*

6.33.16 MCORE Function Attributes
---------------------------------

These function attributes are supported by the MCORE back end:

'naked'
     This attribute allows the compiler to construct the requisite
     function declaration, while allowing the body of the function to be
     assembly code.  The specified function will not have
     prologue/epilogue sequences generated by the compiler.  Only basic
     'asm' statements can safely be included in naked functions (*note
     Basic Asm::).  While using extended 'asm' or a mixture of basic
     'asm' and C code may appear to work, they cannot be depended upon
     to work reliably and are not supported.

==============================================================================
File: gcc.info,  Node: |MeP_Function_Attributes|,  Next: |MicroBlaze_Function_Attributes|,  Prev: |MCORE_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *MeP_Function_Attributes*

6.33.17 MeP Function Attributes
-------------------------------

These function attributes are supported by the MeP back end:

'disinterrupt'
     On MeP targets, this attribute causes the compiler to emit
     instructions to disable interrupts for the duration of the given
     function.

'interrupt'
     Use this attribute to indicate that the specified function is an
     interrupt handler.  The compiler generates function entry and exit
     sequences suitable for use in an interrupt handler when this
     attribute is present.

'near'
     This attribute causes the compiler to assume the called function is
     close enough to use the normal calling convention, overriding the
     '-mtf' command-line option.

'far'
     On MeP targets this causes the compiler to use a calling convention
     that assumes the called function is too far away for the built-in
     addressing modes.

'vliw'
     The 'vliw' attribute tells the compiler to emit instructions in
     VLIW mode instead of core mode.  Note that this attribute is not
     allowed unless a VLIW coprocessor has been configured and enabled
     through command-line options.

==============================================================================
File: gcc.info,  Node: |MicroBlaze_Function_Attributes|,  Next: |Microsoft_Windows_Function_Attributes|,  Prev: |MeP_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *MicroBlaze_Function_Attributes*

6.33.18 MicroBlaze Function Attributes
--------------------------------------

These function attributes are supported on MicroBlaze targets:

'save_volatiles'
     Use this attribute to indicate that the function is an interrupt
     handler.  All volatile registers (in addition to non-volatile
     registers) are saved in the function prologue.  If the function is
     a leaf function, only volatiles used by the function are saved.  A
     normal function return is generated instead of a return from
     interrupt.

'break_handler'
     Use this attribute to indicate that the specified function is a
     break handler.  The compiler generates function entry and exit
     sequences suitable for use in an break handler when this attribute
     is present.  The return from 'break_handler' is done through the
     'rtbd' instead of 'rtsd'.

          void f () __attribute__ ((break_handler));

'interrupt_handler'
'fast_interrupt'
     These attributes indicate that the specified function is an
     interrupt handler.  Use the 'fast_interrupt' attribute to indicate
     handlers used in low-latency interrupt mode, and
     'interrupt_handler' for interrupts that do not use low-latency
     handlers.  In both cases, GCC emits appropriate prologue code and
     generates a return from the handler using 'rtid' instead of 'rtsd'.

==============================================================================
File: gcc.info,  Node: |Microsoft_Windows_Function_Attributes|,  Next: |MIPS_Function_Attributes|,  Prev: |MicroBlaze_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *Microsoft_Windows_Function_Attributes*

6.33.19 Microsoft Windows Function Attributes
---------------------------------------------

The following attributes are available on Microsoft Windows and Symbian
OS targets.

'dllexport'
     On Microsoft Windows targets and Symbian OS targets the 'dllexport'
     attribute causes the compiler to provide a global pointer to a
     pointer in a DLL, so that it can be referenced with the 'dllimport'
     attribute.  On Microsoft Windows targets, the pointer name is
     formed by combining '_imp__' and the function or variable name.

     You can use '__declspec(dllexport)' as a synonym for '__attribute__
     ((dllexport))' for compatibility with other compilers.

     On systems that support the 'visibility' attribute, this attribute
     also implies "default" visibility.  It is an error to explicitly
     specify any other visibility.

     GCC's default behavior is to emit all inline functions with the
     'dllexport' attribute.  Since this can cause object file-size
     bloat, you can use '-fno-keep-inline-dllexport', which tells GCC to
     ignore the attribute for inlined functions unless the
     '-fkeep-inline-functions' flag is used instead.

     The attribute is ignored for undefined symbols.

     When applied to C++ classes, the attribute marks defined
     non-inlined member functions and static data members as exports.
     Static consts initialized in-class are not marked unless they are
     also defined out-of-class.

     For Microsoft Windows targets there are alternative methods for
     including the symbol in the DLL's export table such as using a
     '.def' file with an 'EXPORTS' section or, with GNU ld, using the
     '--export-all' linker flag.

'dllimport'
     On Microsoft Windows and Symbian OS targets, the 'dllimport'
     attribute causes the compiler to reference a function or variable
     via a global pointer to a pointer that is set up by the DLL
     exporting the symbol.  The attribute implies 'extern'.  On
     Microsoft Windows targets, the pointer name is formed by combining
     '_imp__' and the function or variable name.

     You can use '__declspec(dllimport)' as a synonym for '__attribute__
     ((dllimport))' for compatibility with other compilers.

     On systems that support the 'visibility' attribute, this attribute
     also implies "default" visibility.  It is an error to explicitly
     specify any other visibility.

     Currently, the attribute is ignored for inlined functions.  If the
     attribute is applied to a symbol _definition_, an error is
     reported.  If a symbol previously declared 'dllimport' is later
     defined, the attribute is ignored in subsequent references, and a
     warning is emitted.  The attribute is also overridden by a
     subsequent declaration as 'dllexport'.

     When applied to C++ classes, the attribute marks non-inlined member
     functions and static data members as imports.  However, the
     attribute is ignored for virtual methods to allow creation of
     vtables using thunks.

     On the SH Symbian OS target the 'dllimport' attribute also has
     another affect--it can cause the vtable and run-time type
     information for a class to be exported.  This happens when the
     class has a dllimported constructor or a non-inline, non-pure
     virtual function and, for either of those two conditions, the class
     also has an inline constructor or destructor and has a key function
     that is defined in the current translation unit.

     For Microsoft Windows targets the use of the 'dllimport' attribute
     on functions is not necessary, but provides a small performance
     benefit by eliminating a thunk in the DLL.  The use of the
     'dllimport' attribute on imported variables can be avoided by
     passing the '--enable-auto-import' switch to the GNU linker.  As
     with functions, using the attribute for a variable eliminates a
     thunk in the DLL.

     One drawback to using this attribute is that a pointer to a
     _variable_ marked as 'dllimport' cannot be used as a constant
     address.  However, a pointer to a _function_ with the 'dllimport'
     attribute can be used as a constant initializer; in this case, the
     address of a stub function in the import lib is referenced.  On
     Microsoft Windows targets, the attribute can be disabled for
     functions by setting the '-mnop-fun-dllimport' flag.

==============================================================================
File: gcc.info,  Node: |MIPS_Function_Attributes|,  Next: |MSP430_Function_Attributes|,  Prev: |Microsoft_Windows_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *MIPS_Function_Attributes*

6.33.20 MIPS Function Attributes
--------------------------------

These function attributes are supported by the MIPS back end:

'interrupt'
     Use this attribute to indicate that the specified function is an
     interrupt handler.  The compiler generates function entry and exit
     sequences suitable for use in an interrupt handler when this
     attribute is present.  An optional argument is supported for the
     interrupt attribute which allows the interrupt mode to be
     described.  By default GCC assumes the external interrupt
     controller (EIC) mode is in use, this can be explicitly set using
     'eic'.  When interrupts are non-masked then the requested Interrupt
     Priority Level (IPL) is copied to the current IPL which has the
     effect of only enabling higher priority interrupts.  To use
     vectored interrupt mode use the argument
     'vector=[sw0|sw1|hw0|hw1|hw2|hw3|hw4|hw5]', this will change the
     behavior of the non-masked interrupt support and GCC will arrange
     to mask all interrupts from sw0 up to and including the specified
     interrupt vector.

     You can use the following attributes to modify the behavior of an
     interrupt handler:
     'use_shadow_register_set'
          Assume that the handler uses a shadow register set, instead of
          the main general-purpose registers.  An optional argument
          'intstack' is supported to indicate that the shadow register
          set contains a valid stack pointer.

     'keep_interrupts_masked'
          Keep interrupts masked for the whole function.  Without this
          attribute, GCC tries to reenable interrupts for as much of the
          function as it can.

     'use_debug_exception_return'
          Return using the 'deret' instruction.  Interrupt handlers that
          don't have this attribute return using 'eret' instead.

     You can use any combination of these attributes, as shown below:
          void __attribute__ ((interrupt)) v0 ();
          void __attribute__ ((interrupt, use_shadow_register_set)) v1 ();
          void __attribute__ ((interrupt, keep_interrupts_masked)) v2 ();
          void __attribute__ ((interrupt, use_debug_exception_return)) v3 ();
          void __attribute__ ((interrupt, use_shadow_register_set,
                               keep_interrupts_masked)) v4 ();
          void __attribute__ ((interrupt, use_shadow_register_set,
                               use_debug_exception_return)) v5 ();
          void __attribute__ ((interrupt, keep_interrupts_masked,
                               use_debug_exception_return)) v6 ();
          void __attribute__ ((interrupt, use_shadow_register_set,
                               keep_interrupts_masked,
                               use_debug_exception_return)) v7 ();
          void __attribute__ ((interrupt("eic"))) v8 ();
          void __attribute__ ((interrupt("vector=hw3"))) v9 ();

'long_call'
'short_call'
'near'
'far'
     These attributes specify how a particular function is called on
     MIPS.  The attributes override the '-mlong-calls' (*note MIPS
     Options::) command-line switch.  The 'long_call' and 'far'
     attributes are synonyms, and cause the compiler to always call the
     function by first loading its address into a register, and then
     using the contents of that register.  The 'short_call' and 'near'
     attributes are synonyms, and have the opposite effect; they specify
     that non-PIC calls should be made using the more efficient 'jal'
     instruction.

'mips16'
'nomips16'

     On MIPS targets, you can use the 'mips16' and 'nomips16' function
     attributes to locally select or turn off MIPS16 code generation.  A
     function with the 'mips16' attribute is emitted as MIPS16 code,
     while MIPS16 code generation is disabled for functions with the
     'nomips16' attribute.  These attributes override the '-mips16' and
     '-mno-mips16' options on the command line (*note MIPS Options::).

     When compiling files containing mixed MIPS16 and non-MIPS16 code,
     the preprocessor symbol '__mips16' reflects the setting on the
     command line, not that within individual functions.  Mixed MIPS16
     and non-MIPS16 code may interact badly with some GCC extensions
     such as '__builtin_apply' (*note Constructing Calls::).

'micromips, MIPS'
'nomicromips, MIPS'

     On MIPS targets, you can use the 'micromips' and 'nomicromips'
     function attributes to locally select or turn off microMIPS code
     generation.  A function with the 'micromips' attribute is emitted
     as microMIPS code, while microMIPS code generation is disabled for
     functions with the 'nomicromips' attribute.  These attributes
     override the '-mmicromips' and '-mno-micromips' options on the
     command line (*note MIPS Options::).

     When compiling files containing mixed microMIPS and non-microMIPS
     code, the preprocessor symbol '__mips_micromips' reflects the
     setting on the command line, not that within individual functions.
     Mixed microMIPS and non-microMIPS code may interact badly with some
     GCC extensions such as '__builtin_apply' (*note Constructing
     Calls::).

'nocompression'
     On MIPS targets, you can use the 'nocompression' function attribute
     to locally turn off MIPS16 and microMIPS code generation.  This
     attribute overrides the '-mips16' and '-mmicromips' options on the
     command line (*note MIPS Options::).

==============================================================================
File: gcc.info,  Node: |MSP430_Function_Attributes|,  Next: |NDS32_Function_Attributes|,  Prev: |MIPS_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *MSP430_Function_Attributes*

6.33.21 MSP430 Function Attributes
----------------------------------

These function attributes are supported by the MSP430 back end:

'critical'
     Critical functions disable interrupts upon entry and restore the
     previous interrupt state upon exit.  Critical functions cannot also
     have the 'naked', 'reentrant' or 'interrupt' attributes.

     The MSP430 hardware ensures that interrupts are disabled on entry
     to 'interrupt' functions, and restores the previous interrupt state
     on exit.  The 'critical' attribute is therefore redundant on
     'interrupt' functions.

'interrupt'
     Use this attribute to indicate that the specified function is an
     interrupt handler.  The compiler generates function entry and exit
     sequences suitable for use in an interrupt handler when this
     attribute is present.

     You can provide an argument to the interrupt attribute which
     specifies a name or number.  If the argument is a number it
     indicates the slot in the interrupt vector table (0 - 31) to which
     this handler should be assigned.  If the argument is a name it is
     treated as a symbolic name for the vector slot.  These names should
     match up with appropriate entries in the linker script.  By default
     the names 'watchdog' for vector 26, 'nmi' for vector 30 and 'reset'
     for vector 31 are recognized.

'naked'
     This attribute allows the compiler to construct the requisite
     function declaration, while allowing the body of the function to be
     assembly code.  The specified function will not have
     prologue/epilogue sequences generated by the compiler.  Only basic
     'asm' statements can safely be included in naked functions (*note
     Basic Asm::).  While using extended 'asm' or a mixture of basic
     'asm' and C code may appear to work, they cannot be depended upon
     to work reliably and are not supported.

'reentrant'
     Reentrant functions disable interrupts upon entry and enable them
     upon exit.  Reentrant functions cannot also have the 'naked' or
     'critical' attributes.  They can have the 'interrupt' attribute.

'wakeup'
     This attribute only applies to interrupt functions.  It is silently
     ignored if applied to a non-interrupt function.  A wakeup interrupt
     function will rouse the processor from any low-power state that it
     might be in when the function exits.

'lower'
'upper'
'either'
     On the MSP430 target these attributes can be used to specify
     whether the function or variable should be placed into low memory,
     high memory, or the placement should be left to the linker to
     decide.  The attributes are only significant if compiling for the
     MSP430X architecture.

     The attributes work in conjunction with a linker script that has
     been augmented to specify where to place sections with a '.lower'
     and a '.upper' prefix.  So, for example, as well as placing the
     '.data' section, the script also specifies the placement of a
     '.lower.data' and a '.upper.data' section.  The intention is that
     'lower' sections are placed into a small but easier to access
     memory region and the upper sections are placed into a larger, but
     slower to access, region.

     The 'either' attribute is special.  It tells the linker to place
     the object into the corresponding 'lower' section if there is room
     for it.  If there is insufficient room then the object is placed
     into the corresponding 'upper' section instead.  Note that the
     placement algorithm is not very sophisticated.  It does not attempt
     to find an optimal packing of the 'lower' sections.  It just makes
     one pass over the objects and does the best that it can.  Using the
     '-ffunction-sections' and '-fdata-sections' command-line options
     can help the packing, however, since they produce smaller, easier
     to pack regions.

==============================================================================
File: gcc.info,  Node: |NDS32_Function_Attributes|,  Next: |Nios_II_Function_Attributes|,  Prev: |MSP430_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *NDS32_Function_Attributes*

6.33.22 NDS32 Function Attributes
---------------------------------

These function attributes are supported by the NDS32 back end:

'exception'
     Use this attribute on the NDS32 target to indicate that the
     specified function is an exception handler.  The compiler will
     generate corresponding sections for use in an exception handler.

'interrupt'
     On NDS32 target, this attribute indicates that the specified
     function is an interrupt handler.  The compiler generates
     corresponding sections for use in an interrupt handler.  You can
     use the following attributes to modify the behavior:
     'nested'
          This interrupt service routine is interruptible.
     'not_nested'
          This interrupt service routine is not interruptible.
     'nested_ready'
          This interrupt service routine is interruptible after
          'PSW.GIE' (global interrupt enable) is set.  This allows
          interrupt service routine to finish some short critical code
          before enabling interrupts.
     'save_all'
          The system will help save all registers into stack before
          entering interrupt handler.
     'partial_save'
          The system will help save caller registers into stack before
          entering interrupt handler.

'naked'
     This attribute allows the compiler to construct the requisite
     function declaration, while allowing the body of the function to be
     assembly code.  The specified function will not have
     prologue/epilogue sequences generated by the compiler.  Only basic
     'asm' statements can safely be included in naked functions (*note
     Basic Asm::).  While using extended 'asm' or a mixture of basic
     'asm' and C code may appear to work, they cannot be depended upon
     to work reliably and are not supported.

'reset'
     Use this attribute on the NDS32 target to indicate that the
     specified function is a reset handler.  The compiler will generate
     corresponding sections for use in a reset handler.  You can use the
     following attributes to provide extra exception handling:
     'nmi'
          Provide a user-defined function to handle NMI exception.
     'warm'
          Provide a user-defined function to handle warm reset
          exception.

==============================================================================
File: gcc.info,  Node: |Nios_II_Function_Attributes|,  Next: |Nvidia_PTX_Function_Attributes|,  Prev: |NDS32_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Nios_II_Function_Attributes*

6.33.23 Nios II Function Attributes
-----------------------------------

These function attributes are supported by the Nios II back end:

'target (OPTIONS)'
     As discussed in *note Common Function Attributes::, this attribute
     allows specification of target-specific compilation options.

     When compiling for Nios II, the following options are allowed:

     'custom-INSN=N'
     'no-custom-INSN'
          Each 'custom-INSN=N' attribute locally enables use of a custom
          instruction with encoding N when generating code that uses
          INSN.  Similarly, 'no-custom-INSN' locally inhibits use of the
          custom instruction INSN.  These target attributes correspond
          to the '-mcustom-INSN=N' and '-mno-custom-INSN' command-line
          options, and support the same set of INSN keywords.  *Note
          Nios II Options::, for more information.

     'custom-fpu-cfg=NAME'
          This attribute corresponds to the '-mcustom-fpu-cfg=NAME'
          command-line option, to select a predefined set of custom
          instructions named NAME.  *Note Nios II Options::, for more
          information.

==============================================================================
File: gcc.info,  Node: |Nvidia_PTX_Function_Attributes|,  Next: |PowerPC_Function_Attributes|,  Prev: |Nios_II_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Nvidia_PTX_Function_Attributes*

6.33.24 Nvidia PTX Function Attributes
--------------------------------------

These function attributes are supported by the Nvidia PTX back end:

'kernel'
     This attribute indicates that the corresponding function should be
     compiled as a kernel function, which can be invoked from the host
     via the CUDA RT library.  By default functions are only callable
     only from other PTX functions.

     Kernel functions must have 'void' return type.

==============================================================================
File: gcc.info,  Node: |PowerPC_Function_Attributes|,  Next: |RISC_V_Function_Attributes|,  Prev: |Nvidia_PTX_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *PowerPC_Function_Attributes*

6.33.25 PowerPC Function Attributes
-----------------------------------

These function attributes are supported by the PowerPC back end:

'longcall'
'shortcall'
     The 'longcall' attribute indicates that the function might be far
     away from the call site and require a different (more expensive)
     calling sequence.  The 'shortcall' attribute indicates that the
     function is always close enough for the shorter calling sequence to
     be used.  These attributes override both the '-mlongcall' switch
     and the '#pragma longcall' setting.

     *Note RS/6000 and PowerPC Options::, for more information on
     whether long calls are necessary.

'target (OPTIONS)'
     As discussed in *note Common Function Attributes::, this attribute
     allows specification of target-specific compilation options.

     On the PowerPC, the following options are allowed:

     'altivec'
     'no-altivec'
          Generate code that uses (does not use) AltiVec instructions.
          In 32-bit code, you cannot enable AltiVec instructions unless
          '-mabi=altivec' is used on the command line.

     'cmpb'
     'no-cmpb'
          Generate code that uses (does not use) the compare bytes
          instruction implemented on the POWER6 processor and other
          processors that support the PowerPC V2.05 architecture.

     'dlmzb'
     'no-dlmzb'
          Generate code that uses (does not use) the string-search
          'dlmzb' instruction on the IBM 405, 440, 464 and 476
          processors.  This instruction is generated by default when
          targeting those processors.

     'fprnd'
     'no-fprnd'
          Generate code that uses (does not use) the FP round to integer
          instructions implemented on the POWER5+ processor and other
          processors that support the PowerPC V2.03 architecture.

     'hard-dfp'
     'no-hard-dfp'
          Generate code that uses (does not use) the decimal
          floating-point instructions implemented on some POWER
          processors.

     'isel'
     'no-isel'
          Generate code that uses (does not use) ISEL instruction.

     'mfcrf'
     'no-mfcrf'
          Generate code that uses (does not use) the move from condition
          register field instruction implemented on the POWER4 processor
          and other processors that support the PowerPC V2.01
          architecture.

     'mfpgpr'
     'no-mfpgpr'
          Generate code that uses (does not use) the FP move to/from
          general purpose register instructions implemented on the
          POWER6X processor and other processors that support the
          extended PowerPC V2.05 architecture.

     'mulhw'
     'no-mulhw'
          Generate code that uses (does not use) the half-word multiply
          and multiply-accumulate instructions on the IBM 405, 440, 464
          and 476 processors.  These instructions are generated by
          default when targeting those processors.

     'multiple'
     'no-multiple'
          Generate code that uses (does not use) the load multiple word
          instructions and the store multiple word instructions.

     'update'
     'no-update'
          Generate code that uses (does not use) the load or store
          instructions that update the base register to the address of
          the calculated memory location.

     'popcntb'
     'no-popcntb'
          Generate code that uses (does not use) the popcount and
          double-precision FP reciprocal estimate instruction
          implemented on the POWER5 processor and other processors that
          support the PowerPC V2.02 architecture.

     'popcntd'
     'no-popcntd'
          Generate code that uses (does not use) the popcount
          instruction implemented on the POWER7 processor and other
          processors that support the PowerPC V2.06 architecture.

     'powerpc-gfxopt'
     'no-powerpc-gfxopt'
          Generate code that uses (does not use) the optional PowerPC
          architecture instructions in the Graphics group, including
          floating-point select.

     'powerpc-gpopt'
     'no-powerpc-gpopt'
          Generate code that uses (does not use) the optional PowerPC
          architecture instructions in the General Purpose group,
          including floating-point square root.

     'recip-precision'
     'no-recip-precision'
          Assume (do not assume) that the reciprocal estimate
          instructions provide higher-precision estimates than is
          mandated by the PowerPC ABI.

     'string'
     'no-string'
          Generate code that uses (does not use) the load string
          instructions and the store string word instructions to save
          multiple registers and do small block moves.

     'vsx'
     'no-vsx'
          Generate code that uses (does not use) vector/scalar (VSX)
          instructions, and also enable the use of built-in functions
          that allow more direct access to the VSX instruction set.  In
          32-bit code, you cannot enable VSX or AltiVec instructions
          unless '-mabi=altivec' is used on the command line.

     'friz'
     'no-friz'
          Generate (do not generate) the 'friz' instruction when the
          '-funsafe-math-optimizations' option is used to optimize
          rounding a floating-point value to 64-bit integer and back to
          floating point.  The 'friz' instruction does not return the
          same value if the floating-point number is too large to fit in
          an integer.

     'avoid-indexed-addresses'
     'no-avoid-indexed-addresses'
          Generate code that tries to avoid (not avoid) the use of
          indexed load or store instructions.

     'paired'
     'no-paired'
          Generate code that uses (does not use) the generation of
          PAIRED simd instructions.

     'longcall'
     'no-longcall'
          Generate code that assumes (does not assume) that all calls
          are far away so that a longer more expensive calling sequence
          is required.

     'cpu=CPU'
          Specify the architecture to generate code for when compiling
          the function.  If you select the 'target("cpu=power7")'
          attribute when generating 32-bit code, VSX and AltiVec
          instructions are not generated unless you use the
          '-mabi=altivec' option on the command line.

     'tune=TUNE'
          Specify the architecture to tune for when compiling the
          function.  If you do not specify the 'target("tune=TUNE")'
          attribute and you do specify the 'target("cpu=CPU")'
          attribute, compilation tunes for the CPU architecture, and not
          the default tuning specified on the command line.

     On the PowerPC, the inliner does not inline a function that has
     different target options than the caller, unless the callee has a
     subset of the target options of the caller.

==============================================================================
File: gcc.info,  Node: |RISC_V_Function_Attributes|,  Next: |RL78_Function_Attributes|,  Prev: |PowerPC_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *RISC_V_Function_Attributes*

6.33.26 RISC-V Function Attributes
----------------------------------

These function attributes are supported by the RISC-V back end:

'naked'
     This attribute allows the compiler to construct the requisite
     function declaration, while allowing the body of the function to be
     assembly code.  The specified function will not have
     prologue/epilogue sequences generated by the compiler.  Only basic
     'asm' statements can safely be included in naked functions (*note
     Basic Asm::).  While using extended 'asm' or a mixture of basic
     'asm' and C code may appear to work, they cannot be depended upon
     to work reliably and are not supported.

'interrupt'
     Use this attribute to indicate that the specified function is an
     interrupt handler.  The compiler generates function entry and exit
     sequences suitable for use in an interrupt handler when this
     attribute is present.

     You can specify the kind of interrupt to be handled by adding an
     optional parameter to the interrupt attribute like this:

          void f (void) __attribute__ ((interrupt ("user")));

     Permissible values for this parameter are 'user', 'supervisor', and
     'machine'.  If there is no parameter, then it defaults to
     'machine'.

==============================================================================
File: gcc.info,  Node: |RL78_Function_Attributes|,  Next: |RX_Function_Attributes|,  Prev: |RISC_V_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *RL78_Function_Attributes*

6.33.27 RL78 Function Attributes
--------------------------------

These function attributes are supported by the RL78 back end:

'interrupt'
'brk_interrupt'
     These attributes indicate that the specified function is an
     interrupt handler.  The compiler generates function entry and exit
     sequences suitable for use in an interrupt handler when this
     attribute is present.

     Use 'brk_interrupt' instead of 'interrupt' for handlers intended to
     be used with the 'BRK' opcode (i.e. those that must end with 'RETB'
     instead of 'RETI').

'naked'
     This attribute allows the compiler to construct the requisite
     function declaration, while allowing the body of the function to be
     assembly code.  The specified function will not have
     prologue/epilogue sequences generated by the compiler.  Only basic
     'asm' statements can safely be included in naked functions (*note
     Basic Asm::).  While using extended 'asm' or a mixture of basic
     'asm' and C code may appear to work, they cannot be depended upon
     to work reliably and are not supported.

==============================================================================
File: gcc.info,  Node: |RX_Function_Attributes|,  Next: |S/390_Function_Attributes|,  Prev: |RL78_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *RX_Function_Attributes*

6.33.28 RX Function Attributes
------------------------------

These function attributes are supported by the RX back end:

'fast_interrupt'
     Use this attribute on the RX port to indicate that the specified
     function is a fast interrupt handler.  This is just like the
     'interrupt' attribute, except that 'freit' is used to return
     instead of 'reit'.

'interrupt'
     Use this attribute to indicate that the specified function is an
     interrupt handler.  The compiler generates function entry and exit
     sequences suitable for use in an interrupt handler when this
     attribute is present.

     On RX and RL78 targets, you may specify one or more vector numbers
     as arguments to the attribute, as well as naming an alternate table
     name.  Parameters are handled sequentially, so one handler can be
     assigned to multiple entries in multiple tables.  One may also pass
     the magic string '"$default"' which causes the function to be used
     for any unfilled slots in the current table.

     This example shows a simple assignment of a function to one vector
     in the default table (note that preprocessor macros may be used for
     chip-specific symbolic vector names):
          void __attribute__ ((interrupt (5))) txd1_handler ();

     This example assigns a function to two slots in the default table
     (using preprocessor macros defined elsewhere) and makes it the
     default for the 'dct' table:
          void __attribute__ ((interrupt (RXD1_VECT,RXD2_VECT,"dct","$default")))
          	txd1_handler ();

'naked'
     This attribute allows the compiler to construct the requisite
     function declaration, while allowing the body of the function to be
     assembly code.  The specified function will not have
     prologue/epilogue sequences generated by the compiler.  Only basic
     'asm' statements can safely be included in naked functions (*note
     Basic Asm::).  While using extended 'asm' or a mixture of basic
     'asm' and C code may appear to work, they cannot be depended upon
     to work reliably and are not supported.

'vector'
     This RX attribute is similar to the 'interrupt' attribute,
     including its parameters, but does not make the function an
     interrupt-handler type function (i.e. it retains the normal C
     function calling ABI). See the 'interrupt' attribute for a
     description of its arguments.

==============================================================================
File: gcc.info,  Node: |S/390_Function_Attributes|,  Next: |SH_Function_Attributes|,  Prev: |RX_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *S/390_Function_Attributes*

6.33.29 S/390 Function Attributes
---------------------------------

These function attributes are supported on the S/390:

'hotpatch (HALFWORDS-BEFORE-FUNCTION-LABEL,HALFWORDS-AFTER-FUNCTION-LABEL)'

     On S/390 System z targets, you can use this function attribute to
     make GCC generate a "hot-patching" function prologue.  If the
     '-mhotpatch=' command-line option is used at the same time, the
     'hotpatch' attribute takes precedence.  The first of the two
     arguments specifies the number of halfwords to be added before the
     function label.  A second argument can be used to specify the
     number of halfwords to be added after the function label.  For both
     arguments the maximum allowed value is 1000000.

     If both arguments are zero, hotpatching is disabled.

'target (OPTIONS)'
     As discussed in *note Common Function Attributes::, this attribute
     allows specification of target-specific compilation options.

     On S/390, the following options are supported:

     'arch='
     'tune='
     'stack-guard='
     'stack-size='
     'branch-cost='
     'warn-framesize='
     'backchain'
     'no-backchain'
     'hard-dfp'
     'no-hard-dfp'
     'hard-float'
     'soft-float'
     'htm'
     'no-htm'
     'vx'
     'no-vx'
     'packed-stack'
     'no-packed-stack'
     'small-exec'
     'no-small-exec'
     'mvcle'
     'no-mvcle'
     'warn-dynamicstack'
     'no-warn-dynamicstack'

     The options work exactly like the S/390 specific command line
     options (without the prefix '-m') except that they do not change
     any feature macros.  For example,

          target("no-vx")

     does not undefine the '__VEC__' macro.

==============================================================================
File: gcc.info,  Node: |SH_Function_Attributes|,  Next: |SPU_Function_Attributes|,  Prev: |S/390_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *SH_Function_Attributes*

6.33.30 SH Function Attributes
------------------------------

These function attributes are supported on the SH family of processors:

'function_vector'
     On SH2A targets, this attribute declares a function to be called
     using the TBR relative addressing mode.  The argument to this
     attribute is the entry number of the same function in a vector
     table containing all the TBR relative addressable functions.  For
     correct operation the TBR must be setup accordingly to point to the
     start of the vector table before any functions with this attribute
     are invoked.  Usually a good place to do the initialization is the
     startup routine.  The TBR relative vector table can have at max 256
     function entries.  The jumps to these functions are generated using
     a SH2A specific, non delayed branch instruction JSR/N @(disp8,TBR).
     You must use GAS and GLD from GNU binutils version 2.7 or later for
     this attribute to work correctly.

     In an application, for a function being called once, this attribute
     saves at least 8 bytes of code; and if other successive calls are
     being made to the same function, it saves 2 bytes of code per each
     of these calls.

'interrupt_handler'
     Use this attribute to indicate that the specified function is an
     interrupt handler.  The compiler generates function entry and exit
     sequences suitable for use in an interrupt handler when this
     attribute is present.

'nosave_low_regs'
     Use this attribute on SH targets to indicate that an
     'interrupt_handler' function should not save and restore registers
     R0..R7.  This can be used on SH3* and SH4* targets that have a
     second R0..R7 register bank for non-reentrant interrupt handlers.

'renesas'
     On SH targets this attribute specifies that the function or struct
     follows the Renesas ABI.

'resbank'
     On the SH2A target, this attribute enables the high-speed register
     saving and restoration using a register bank for
     'interrupt_handler' routines.  Saving to the bank is performed
     automatically after the CPU accepts an interrupt that uses a
     register bank.

     The nineteen 32-bit registers comprising general register R0 to
     R14, control register GBR, and system registers MACH, MACL, and PR
     and the vector table address offset are saved into a register bank.
     Register banks are stacked in first-in last-out (FILO) sequence.
     Restoration from the bank is executed by issuing a RESBANK
     instruction.

'sp_switch'
     Use this attribute on the SH to indicate an 'interrupt_handler'
     function should switch to an alternate stack.  It expects a string
     argument that names a global variable holding the address of the
     alternate stack.

          void *alt_stack;
          void f () __attribute__ ((interrupt_handler,
                                    sp_switch ("alt_stack")));

'trap_exit'
     Use this attribute on the SH for an 'interrupt_handler' to return
     using 'trapa' instead of 'rte'.  This attribute expects an integer
     argument specifying the trap number to be used.

'trapa_handler'
     On SH targets this function attribute is similar to
     'interrupt_handler' but it does not save and restore all registers.

==============================================================================
File: gcc.info,  Node: |SPU_Function_Attributes|,  Next: |Symbian_OS_Function_Attributes|,  Prev: |SH_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *SPU_Function_Attributes*

6.33.31 SPU Function Attributes
-------------------------------

These function attributes are supported by the SPU back end:

'naked'
     This attribute allows the compiler to construct the requisite
     function declaration, while allowing the body of the function to be
     assembly code.  The specified function will not have
     prologue/epilogue sequences generated by the compiler.  Only basic
     'asm' statements can safely be included in naked functions (*note
     Basic Asm::).  While using extended 'asm' or a mixture of basic
     'asm' and C code may appear to work, they cannot be depended upon
     to work reliably and are not supported.

==============================================================================
File: gcc.info,  Node: |Symbian_OS_Function_Attributes|,  Next: |V850_Function_Attributes|,  Prev: |SPU_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Symbian_OS_Function_Attributes*

6.33.32 Symbian OS Function Attributes
--------------------------------------

*Note Microsoft Windows Function Attributes::, for discussion of the
'dllexport' and 'dllimport' attributes.

==============================================================================
File: gcc.info,  Node: |V850_Function_Attributes|,  Next: |Visium_Function_Attributes|,  Prev: |Symbian_OS_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *V850_Function_Attributes*

6.33.33 V850 Function Attributes
--------------------------------

The V850 back end supports these function attributes:

'interrupt'
'interrupt_handler'
     Use these attributes to indicate that the specified function is an
     interrupt handler.  The compiler generates function entry and exit
     sequences suitable for use in an interrupt handler when either
     attribute is present.

==============================================================================
File: gcc.info,  Node: |Visium_Function_Attributes|,  Next: |x86_Function_Attributes|,  Prev: |V850_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *Visium_Function_Attributes*

6.33.34 Visium Function Attributes
----------------------------------

These function attributes are supported by the Visium back end:

'interrupt'
     Use this attribute to indicate that the specified function is an
     interrupt handler.  The compiler generates function entry and exit
     sequences suitable for use in an interrupt handler when this
     attribute is present.

==============================================================================
File: gcc.info,  Node: |x86_Function_Attributes|,  Next: |Xstormy16_Function_Attributes|,  Prev: |Visium_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *x86_Function_Attributes*

6.33.35 x86 Function Attributes
-------------------------------

These function attributes are supported by the x86 back end:

'cdecl'
     On the x86-32 targets, the 'cdecl' attribute causes the compiler to
     assume that the calling function pops off the stack space used to
     pass arguments.  This is useful to override the effects of the
     '-mrtd' switch.

'fastcall'
     On x86-32 targets, the 'fastcall' attribute causes the compiler to
     pass the first argument (if of integral type) in the register ECX
     and the second argument (if of integral type) in the register EDX.
     Subsequent and other typed arguments are passed on the stack.  The
     called function pops the arguments off the stack.  If the number of
     arguments is variable all arguments are pushed on the stack.

'thiscall'
     On x86-32 targets, the 'thiscall' attribute causes the compiler to
     pass the first argument (if of integral type) in the register ECX.
     Subsequent and other typed arguments are passed on the stack.  The
     called function pops the arguments off the stack.  If the number of
     arguments is variable all arguments are pushed on the stack.  The
     'thiscall' attribute is intended for C++ non-static member
     functions.  As a GCC extension, this calling convention can be used
     for C functions and for static member methods.

'ms_abi'
'sysv_abi'

     On 32-bit and 64-bit x86 targets, you can use an ABI attribute to
     indicate which calling convention should be used for a function.
     The 'ms_abi' attribute tells the compiler to use the Microsoft ABI,
     while the 'sysv_abi' attribute tells the compiler to use the ABI
     used on GNU/Linux and other systems.  The default is to use the
     Microsoft ABI when targeting Windows.  On all other systems, the
     default is the x86/AMD ABI.

     Note, the 'ms_abi' attribute for Microsoft Windows 64-bit targets
     currently requires the '-maccumulate-outgoing-args' option.

'callee_pop_aggregate_return (NUMBER)'

     On x86-32 targets, you can use this attribute to control how
     aggregates are returned in memory.  If the caller is responsible
     for popping the hidden pointer together with the rest of the
     arguments, specify NUMBER equal to zero.  If callee is responsible
     for popping the hidden pointer, specify NUMBER equal to one.

     The default x86-32 ABI assumes that the callee pops the stack for
     hidden pointer.  However, on x86-32 Microsoft Windows targets, the
     compiler assumes that the caller pops the stack for hidden pointer.

'ms_hook_prologue'

     On 32-bit and 64-bit x86 targets, you can use this function
     attribute to make GCC generate the "hot-patching" function prologue
     used in Win32 API functions in Microsoft Windows XP Service Pack 2
     and newer.

'naked'
     This attribute allows the compiler to construct the requisite
     function declaration, while allowing the body of the function to be
     assembly code.  The specified function will not have
     prologue/epilogue sequences generated by the compiler.  Only basic
     'asm' statements can safely be included in naked functions (*note
     Basic Asm::).  While using extended 'asm' or a mixture of basic
     'asm' and C code may appear to work, they cannot be depended upon
     to work reliably and are not supported.

'regparm (NUMBER)'
     On x86-32 targets, the 'regparm' attribute causes the compiler to
     pass arguments number one to NUMBER if they are of integral type in
     registers EAX, EDX, and ECX instead of on the stack.  Functions
     that take a variable number of arguments continue to be passed all
     of their arguments on the stack.

     Beware that on some ELF systems this attribute is unsuitable for
     global functions in shared libraries with lazy binding (which is
     the default).  Lazy binding sends the first call via resolving code
     in the loader, which might assume EAX, EDX and ECX can be
     clobbered, as per the standard calling conventions.  Solaris 8 is
     affected by this.  Systems with the GNU C Library version 2.1 or
     higher and FreeBSD are believed to be safe since the loaders there
     save EAX, EDX and ECX. (Lazy binding can be disabled with the
     linker or the loader if desired, to avoid the problem.)

'sseregparm'
     On x86-32 targets with SSE support, the 'sseregparm' attribute
     causes the compiler to pass up to 3 floating-point arguments in SSE
     registers instead of on the stack.  Functions that take a variable
     number of arguments continue to pass all of their floating-point
     arguments on the stack.

'force_align_arg_pointer'
     On x86 targets, the 'force_align_arg_pointer' attribute may be
     applied to individual function definitions, generating an alternate
     prologue and epilogue that realigns the run-time stack if
     necessary.  This supports mixing legacy codes that run with a
     4-byte aligned stack with modern codes that keep a 16-byte stack
     for SSE compatibility.

'stdcall'
     On x86-32 targets, the 'stdcall' attribute causes the compiler to
     assume that the called function pops off the stack space used to
     pass arguments, unless it takes a variable number of arguments.

'no_caller_saved_registers'
     Use this attribute to indicate that the specified function has no
     caller-saved registers.  That is, all registers are callee-saved.
     For example, this attribute can be used for a function called from
     an interrupt handler.  The compiler generates proper function entry
     and exit sequences to save and restore any modified registers,
     except for the EFLAGS register.  Since GCC doesn't preserve SSE,
     MMX nor x87 states, the GCC option '-mgeneral-regs-only' should be
     used to compile functions with 'no_caller_saved_registers'
     attribute.

'interrupt'
     Use this attribute to indicate that the specified function is an
     interrupt handler or an exception handler (depending on parameters
     passed to the function, explained further).  The compiler generates
     function entry and exit sequences suitable for use in an interrupt
     handler when this attribute is present.  The 'IRET' instruction,
     instead of the 'RET' instruction, is used to return from interrupt
     handlers.  All registers, except for the EFLAGS register which is
     restored by the 'IRET' instruction, are preserved by the compiler.
     Since GCC doesn't preserve SSE, MMX nor x87 states, the GCC option
     '-mgeneral-regs-only' should be used to compile interrupt and
     exception handlers.

     Any interruptible-without-stack-switch code must be compiled with
     '-mno-red-zone' since interrupt handlers can and will, because of
     the hardware design, touch the red zone.

     An interrupt handler must be declared with a mandatory pointer
     argument:

          struct interrupt_frame;

          __attribute__ ((interrupt))
          void
          f (struct interrupt_frame *frame)
          {
          }

     and you must define 'struct interrupt_frame' as described in the
     processor's manual.

     Exception handlers differ from interrupt handlers because the
     system pushes an error code on the stack.  An exception handler
     declaration is similar to that for an interrupt handler, but with a
     different mandatory function signature.  The compiler arranges to
     pop the error code off the stack before the 'IRET' instruction.

          #ifdef __x86_64__
          typedef unsigned long long int uword_t;
          #else
          typedef unsigned int uword_t;
          #endif

          struct interrupt_frame;

          __attribute__ ((interrupt))
          void
          f (struct interrupt_frame *frame, uword_t error_code)
          {
            ...
          }

     Exception handlers should only be used for exceptions that push an
     error code; you should use an interrupt handler in other cases.
     The system will crash if the wrong kind of handler is used.

'target (OPTIONS)'
     As discussed in *note Common Function Attributes::, this attribute
     allows specification of target-specific compilation options.

     On the x86, the following options are allowed:
     '3dnow'
     'no-3dnow'
          Enable/disable the generation of the 3DNow! instructions.

     '3dnowa'
     'no-3dnowa'
          Enable/disable the generation of the enhanced 3DNow!
          instructions.

     'abm'
     'no-abm'
          Enable/disable the generation of the advanced bit
          instructions.

     'adx'
     'no-adx'
          Enable/disable the generation of the ADX instructions.

     'aes'
     'no-aes'
          Enable/disable the generation of the AES instructions.

     'avx'
     'no-avx'
          Enable/disable the generation of the AVX instructions.

     'avx2'
     'no-avx2'
          Enable/disable the generation of the AVX2 instructions.

     'avx5124fmaps'
     'no-avx5124fmaps'
          Enable/disable the generation of the AVX5124FMAPS
          instructions.

     'avx5124vnniw'
     'no-avx5124vnniw'
          Enable/disable the generation of the AVX5124VNNIW
          instructions.

     'avx512bitalg'
     'no-avx512bitalg'
          Enable/disable the generation of the AVX512BITALG
          instructions.

     'avx512bw'
     'no-avx512bw'
          Enable/disable the generation of the AVX512BW instructions.

     'avx512cd'
     'no-avx512cd'
          Enable/disable the generation of the AVX512CD instructions.

     'avx512dq'
     'no-avx512dq'
          Enable/disable the generation of the AVX512DQ instructions.

     'avx512er'
     'no-avx512er'
          Enable/disable the generation of the AVX512ER instructions.

     'avx512f'
     'no-avx512f'
          Enable/disable the generation of the AVX512F instructions.

     'avx512ifma'
     'no-avx512ifma'
          Enable/disable the generation of the AVX512IFMA instructions.

     'avx512pf'
     'no-avx512pf'
          Enable/disable the generation of the AVX512PF instructions.

     'avx512vbmi'
     'no-avx512vbmi'
          Enable/disable the generation of the AVX512VBMI instructions.

     'avx512vbmi2'
     'no-avx512vbmi2'
          Enable/disable the generation of the AVX512VBMI2 instructions.

     'avx512vl'
     'no-avx512vl'
          Enable/disable the generation of the AVX512VL instructions.

     'avx512vnni'
     'no-avx512vnni'
          Enable/disable the generation of the AVX512VNNI instructions.

     'avx512vpopcntdq'
     'no-avx512vpopcntdq'
          Enable/disable the generation of the AVX512VPOPCNTDQ
          instructions.

     'bmi'
     'no-bmi'
          Enable/disable the generation of the BMI instructions.

     'bmi2'
     'no-bmi2'
          Enable/disable the generation of the BMI2 instructions.

     'cldemote'
     'no-cldemote'
          Enable/disable the generation of the CLDEMOTE instructions.

     'clflushopt'
     'no-clflushopt'
          Enable/disable the generation of the CLFLUSHOPT instructions.

     'clwb'
     'no-clwb'
          Enable/disable the generation of the CLWB instructions.

     'clzero'
     'no-clzero'
          Enable/disable the generation of the CLZERO instructions.

     'crc32'
     'no-crc32'
          Enable/disable the generation of the CRC32 instructions.

     'cx16'
     'no-cx16'
          Enable/disable the generation of the CMPXCHG16B instructions.

     'default'
          *Note Function Multiversioning::, where it is used to specify
          the default function version.

     'f16c'
     'no-f16c'
          Enable/disable the generation of the F16C instructions.

     'fma'
     'no-fma'
          Enable/disable the generation of the FMA instructions.

     'fma4'
     'no-fma4'
          Enable/disable the generation of the FMA4 instructions.

     'fsgsbase'
     'no-fsgsbase'
          Enable/disable the generation of the FSGSBASE instructions.

     'fxsr'
     'no-fxsr'
          Enable/disable the generation of the FXSR instructions.

     'gfni'
     'no-gfni'
          Enable/disable the generation of the GFNI instructions.

     'hle'
     'no-hle'
          Enable/disable the generation of the HLE instruction prefixes.

     'lwp'
     'no-lwp'
          Enable/disable the generation of the LWP instructions.

     'lzcnt'
     'no-lzcnt'
          Enable/disable the generation of the LZCNT instructions.

     'mmx'
     'no-mmx'
          Enable/disable the generation of the MMX instructions.

     'movbe'
     'no-movbe'
          Enable/disable the generation of the MOVBE instructions.

     'movdir64b'
     'no-movdir64b'
          Enable/disable the generation of the MOVDIR64B instructions.

     'movdiri'
     'no-movdiri'
          Enable/disable the generation of the MOVDIRI instructions.

     'mwaitx'
     'no-mwaitx'
          Enable/disable the generation of the MWAITX instructions.

     'pclmul'
     'no-pclmul'
          Enable/disable the generation of the PCLMUL instructions.

     'pconfig'
     'no-pconfig'
          Enable/disable the generation of the PCONFIG instructions.

     'pku'
     'no-pku'
          Enable/disable the generation of the PKU instructions.

     'popcnt'
     'no-popcnt'
          Enable/disable the generation of the POPCNT instruction.

     'prefetchwt1'
     'no-prefetchwt1'
          Enable/disable the generation of the PREFETCHWT1 instructions.

     'prfchw'
     'no-prfchw'
          Enable/disable the generation of the PREFETCHW instruction.

     'ptwrite'
     'no-ptwrite'
          Enable/disable the generation of the PTWRITE instructions.

     'rdpid'
     'no-rdpid'
          Enable/disable the generation of the RDPID instructions.

     'rdrnd'
     'no-rdrnd'
          Enable/disable the generation of the RDRND instructions.

     'rdseed'
     'no-rdseed'
          Enable/disable the generation of the RDSEED instructions.

     'rtm'
     'no-rtm'
          Enable/disable the generation of the RTM instructions.

     'sahf'
     'no-sahf'
          Enable/disable the generation of the SAHF instructions.

     'sgx'
     'no-sgx'
          Enable/disable the generation of the SGX instructions.

     'sha'
     'no-sha'
          Enable/disable the generation of the SHA instructions.

     'shstk'
     'no-shstk'
          Enable/disable the shadow stack built-in functions from CET.

     'sse'
     'no-sse'
          Enable/disable the generation of the SSE instructions.

     'sse2'
     'no-sse2'
          Enable/disable the generation of the SSE2 instructions.

     'sse3'
     'no-sse3'
          Enable/disable the generation of the SSE3 instructions.

     'sse4'
     'no-sse4'
          Enable/disable the generation of the SSE4 instructions (both
          SSE4.1 and SSE4.2).

     'sse4.1'
     'no-sse4.1'
          Enable/disable the generation of the sse4.1 instructions.

     'sse4.2'
     'no-sse4.2'
          Enable/disable the generation of the sse4.2 instructions.

     'sse4a'
     'no-sse4a'
          Enable/disable the generation of the SSE4A instructions.

     'ssse3'
     'no-ssse3'
          Enable/disable the generation of the SSSE3 instructions.

     'tbm'
     'no-tbm'
          Enable/disable the generation of the TBM instructions.

     'vaes'
     'no-vaes'
          Enable/disable the generation of the VAES instructions.

     'vpclmulqdq'
     'no-vpclmulqdq'
          Enable/disable the generation of the VPCLMULQDQ instructions.

     'waitpkg'
     'no-waitpkg'
          Enable/disable the generation of the WAITPKG instructions.

     'wbnoinvd'
     'no-wbnoinvd'
          Enable/disable the generation of the WBNOINVD instructions.

     'xop'
     'no-xop'
          Enable/disable the generation of the XOP instructions.

     'xsave'
     'no-xsave'
          Enable/disable the generation of the XSAVE instructions.

     'xsavec'
     'no-xsavec'
          Enable/disable the generation of the XSAVEC instructions.

     'xsaveopt'
     'no-xsaveopt'
          Enable/disable the generation of the XSAVEOPT instructions.

     'xsaves'
     'no-xsaves'
          Enable/disable the generation of the XSAVES instructions.

     'cld'
     'no-cld'
          Enable/disable the generation of the CLD before string moves.

     'fancy-math-387'
     'no-fancy-math-387'
          Enable/disable the generation of the 'sin', 'cos', and 'sqrt'
          instructions on the 387 floating-point unit.

     'ieee-fp'
     'no-ieee-fp'
          Enable/disable the generation of floating point that depends
          on IEEE arithmetic.

     'inline-all-stringops'
     'no-inline-all-stringops'
          Enable/disable inlining of string operations.

     'inline-stringops-dynamically'
     'no-inline-stringops-dynamically'
          Enable/disable the generation of the inline code to do small
          string operations and calling the library routines for large
          operations.

     'align-stringops'
     'no-align-stringops'
          Do/do not align destination of inlined string operations.

     'recip'
     'no-recip'
          Enable/disable the generation of RCPSS, RCPPS, RSQRTSS and
          RSQRTPS instructions followed an additional Newton-Raphson
          step instead of doing a floating-point division.

     'arch=ARCH'
          Specify the architecture to generate code for in compiling the
          function.

     'tune=TUNE'
          Specify the architecture to tune for in compiling the
          function.

     'fpmath=FPMATH'
          Specify which floating-point unit to use.  You must specify
          the 'target("fpmath=sse,387")' option as
          'target("fpmath=sse+387")' because the comma would separate
          different options.

     'indirect_branch("CHOICE")'
          On x86 targets, the 'indirect_branch' attribute causes the
          compiler to convert indirect call and jump with CHOICE.
          'keep' keeps indirect call and jump unmodified.  'thunk'
          converts indirect call and jump to call and return thunk.
          'thunk-inline' converts indirect call and jump to inlined call
          and return thunk.  'thunk-extern' converts indirect call and
          jump to external call and return thunk provided in a separate
          object file.

     'function_return("CHOICE")'
          On x86 targets, the 'function_return' attribute causes the
          compiler to convert function return with CHOICE.  'keep' keeps
          function return unmodified.  'thunk' converts function return
          to call and return thunk.  'thunk-inline' converts function
          return to inlined call and return thunk.  'thunk-extern'
          converts function return to external call and return thunk
          provided in a separate object file.

     'nocf_check'
          The 'nocf_check' attribute on a function is used to inform the
          compiler that the function's prologue should not be
          instrumented when compiled with the '-fcf-protection=branch'
          option.  The compiler assumes that the function's address is a
          valid target for a control-flow transfer.

          The 'nocf_check' attribute on a type of pointer to function is
          used to inform the compiler that a call through the pointer
          should not be instrumented when compiled with the
          '-fcf-protection=branch' option.  The compiler assumes that
          the function's address from the pointer is a valid target for
          a control-flow transfer.  A direct function call through a
          function name is assumed to be a safe call thus direct calls
          are not instrumented by the compiler.

          The 'nocf_check' attribute is applied to an object's type.  In
          case of assignment of a function address or a function pointer
          to another pointer, the attribute is not carried over from the
          right-hand object's type; the type of left-hand object stays
          unchanged.  The compiler checks for 'nocf_check' attribute
          mismatch and reports a warning in case of mismatch.

               {
               int foo (void) __attribute__(nocf_check);
               void (*foo1)(void) __attribute__(nocf_check);
               void (*foo2)(void);

               /* foo's address is assumed to be valid.  */
               int
               foo (void)

                 /* This call site is not checked for control-flow
                    validity.  */
                 (*foo1)();

                 /* A warning is issued about attribute mismatch.  */
                 foo1 = foo2;

                 /* This call site is still not checked.  */
                 (*foo1)();

                 /* This call site is checked.  */
                 (*foo2)();

                 /* A warning is issued about attribute mismatch.  */
                 foo2 = foo1;

                 /* This call site is still checked.  */
                 (*foo2)();

                 return 0;
               }

     'cf_check'

          The 'cf_check' attribute on a function is used to inform the
          compiler that ENDBR instruction should be placed at the
          function entry when '-fcf-protection=branch' is enabled.

     'indirect_return'

          The 'indirect_return' attribute can be applied to a function,
          as well as variable or type of function pointer to inform the
          compiler that the function may return via indirect branch.

     'fentry_name("NAME")'
          On x86 targets, the 'fentry_name' attribute sets the function
          to call on function entry when function instrumentation is
          enabled with '-pg -mfentry'.  When NAME is nop then a 5 byte
          nop sequence is generated.

     'fentry_section("NAME")'
          On x86 targets, the 'fentry_section' attribute sets the name
          of the section to record function entry instrumentation calls
          in when enabled with '-pg -mrecord-mcount'

     On the x86, the inliner does not inline a function that has
     different target options than the caller, unless the callee has a
     subset of the target options of the caller.  For example a function
     declared with 'target("sse3")' can inline a function with
     'target("sse2")', since '-msse3' implies '-msse2'.

==============================================================================
File: gcc.info,  Node: |Xstormy16_Function_Attributes|,  Prev: |x86_Function_Attributes|,  Up: |Function_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Xstormy16_Function_Attributes*

6.33.36 Xstormy16 Function Attributes
-------------------------------------

These function attributes are supported by the Xstormy16 back end:

'interrupt'
     Use this attribute to indicate that the specified function is an
     interrupt handler.  The compiler generates function entry and exit
     sequences suitable for use in an interrupt handler when this
     attribute is present.

==============================================================================
File: gcc.info,  Node: |Variable_Attributes|,  Next: |Type_Attributes|,  Prev: |Function_Attributes|,  Up: |C_Extensions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *Variable_Attributes*

6.34 Specifying Attributes of Variables
---------------------------------------

The keyword '__attribute__' allows you to specify special properties of
variables, function parameters, or structure, union, and, in C++, class
members.  This '__attribute__' keyword is followed by an attribute
specification enclosed in double parentheses.  Some attributes are
currently defined generically for variables.  Other attributes are
defined for variables on particular target systems.  Other attributes
are available for functions (*note Function Attributes::), labels (*note
Label Attributes::), enumerators (*note Enumerator Attributes::),
statements (*note Statement Attributes::), and for types (*note Type
Attributes::).  Other front ends might define more attributes (*note
Extensions to the C++ Language: C++ Extensions.).

 *Note Attribute Syntax::, for details of the exact syntax for using
attributes.

MENU

* |Common_Variable_Attributes|::
* |ARC_Variable_Attributes|::
* |AVR_Variable_Attributes|::
* |Blackfin_Variable_Attributes|::
* |H8/300_Variable_Attributes|::
* |IA_64_Variable_Attributes|::
* |M32R/D_Variable_Attributes|::
* |MeP_Variable_Attributes|::
* |Microsoft_Windows_Variable_Attributes|::
* |MSP430_Variable_Attributes|::
* |Nvidia_PTX_Variable_Attributes|::
* |PowerPC_Variable_Attributes|::
* |RL78_Variable_Attributes|::
* |SPU_Variable_Attributes|::
* |V850_Variable_Attributes|::
* |x86_Variable_Attributes|::
* |Xstormy16_Variable_Attributes|::

==============================================================================
File: gcc.info,  Node: |Common_Variable_Attributes|,  Next: |ARC_Variable_Attributes|,  Up: |Variable_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *Common_Variable_Attributes*

6.34.1 Common Variable Attributes
---------------------------------

The following attributes are supported on most targets.

'alias ("TARGET")'
     The 'alias' variable attribute causes the declaration to be emitted
     as an alias for another symbol known as an "alias target".  Except
     for top-level qualifiers the alias target must have the same type
     as the alias.  For instance, the following

          int var_target;
          extern int __attribute__ ((alias ("var_target"))) var_alias;

     defines 'var_alias' to be an alias for the 'var_target' variable.

     It is an error if the alias target is not defined in the same
     translation unit as the alias.

     Note that in the absence of the attribute GCC assumes that distinct
     declarations with external linkage denote distinct objects.  Using
     both the alias and the alias target to access the same object is
     undefined in a translation unit without a declaration of the alias
     with the attribute.

     This attribute requires assembler and object file support, and may
     not be available on all targets.

'aligned'
'aligned (ALIGNMENT)'
     The 'aligned' attribute specifies a minimum alignment for the
     variable or structure field, measured in bytes.  When specified,
     ALIGNMENT must be an integer constant power of 2.  Specifying no
     ALIGNMENT argument implies the maximum alignment for the target,
     which is often, but by no means always, 8 or 16 bytes.

     For example, the declaration:

          int x __attribute__ ((aligned (16))) = 0;

     causes the compiler to allocate the global variable 'x' on a
     16-byte boundary.  On a 68040, this could be used in conjunction
     with an 'asm' expression to access the 'move16' instruction which
     requires 16-byte aligned operands.

     You can also specify the alignment of structure fields.  For
     example, to create a double-word aligned 'int' pair, you could
     write:

          struct foo { int x[2] __attribute__ ((aligned (8))); };

     This is an alternative to creating a union with a 'double' member,
     which forces the union to be double-word aligned.

     As in the preceding examples, you can explicitly specify the
     alignment (in bytes) that you wish the compiler to use for a given
     variable or structure field.  Alternatively, you can leave out the
     alignment factor and just ask the compiler to align a variable or
     field to the default alignment for the target architecture you are
     compiling for.  The default alignment is sufficient for all scalar
     types, but may not be enough for all vector types on a target that
     supports vector operations.  The default alignment is fixed for a
     particular target ABI.

     GCC also provides a target specific macro '__BIGGEST_ALIGNMENT__',
     which is the largest alignment ever used for any data type on the
     target machine you are compiling for.  For example, you could
     write:

          short array[3] __attribute__ ((aligned (__BIGGEST_ALIGNMENT__)));

     The compiler automatically sets the alignment for the declared
     variable or field to '__BIGGEST_ALIGNMENT__'.  Doing this can often
     make copy operations more efficient, because the compiler can use
     whatever instructions copy the biggest chunks of memory when
     performing copies to or from the variables or fields that you have
     aligned this way.  Note that the value of '__BIGGEST_ALIGNMENT__'
     may change depending on command-line options.

     When used on a struct, or struct member, the 'aligned' attribute
     can only increase the alignment; in order to decrease it, the
     'packed' attribute must be specified as well.  When used as part of
     a typedef, the 'aligned' attribute can both increase and decrease
     alignment, and specifying the 'packed' attribute generates a
     warning.

     Note that the effectiveness of 'aligned' attributes for static
     variables may be limited by inherent limitations in the system
     linker and/or object file format.  On some systems, the linker is
     only able to arrange for variables to be aligned up to a certain
     maximum alignment.  (For some linkers, the maximum supported
     alignment may be very very small.)  If your linker is only able to
     align variables up to a maximum of 8-byte alignment, then
     specifying 'aligned(16)' in an '__attribute__' still only provides
     you with 8-byte alignment.  See your linker documentation for
     further information.

     Stack variables are not affected by linker restrictions; GCC can
     properly align them on any target.

     The 'aligned' attribute can also be used for functions (*note
     Common Function Attributes::.)

'warn_if_not_aligned (ALIGNMENT)'
     This attribute specifies a threshold for the structure field,
     measured in bytes.  If the structure field is aligned below the
     threshold, a warning will be issued.  For example, the declaration:

          struct foo
          {
            int i1;
            int i2;
            unsigned long long x __attribute__ ((warn_if_not_aligned (16)));
          };

     causes the compiler to issue an warning on 'struct foo', like
     'warning: alignment 8 of 'struct foo' is less than 16'.  The
     compiler also issues a warning, like 'warning: 'x' offset 8 in
     'struct foo' isn't aligned to 16', when the structure field has the
     misaligned offset:

          struct __attribute__ ((aligned (16))) foo
          {
            int i1;
            int i2;
            unsigned long long x __attribute__ ((warn_if_not_aligned (16)));
          };

     This warning can be disabled by '-Wno-if-not-aligned'.  The
     'warn_if_not_aligned' attribute can also be used for types (*note
     Common Type Attributes::.)

'alloc_size (POSITION)'
'alloc_size (POSITION-1, POSITION-2)'
     The 'alloc_size' variable attribute may be applied to the
     declaration of a pointer to a function that returns a pointer and
     takes at least one argument of an integer type.  It indicates that
     the returned pointer points to an object whose size is given by the
     function argument at POSITION-1, or by the product of the arguments
     at POSITION-1 and POSITION-2.  Meaningful sizes are positive values
     less than 'PTRDIFF_MAX'.  Other sizes are disagnosed when detected.
     GCC uses this information to improve the results of
     '__builtin_object_size'.

     For instance, the following declarations

          typedef __attribute__ ((alloc_size (1, 2))) void*
            (*calloc_ptr) (size_t, size_t);
          typedef __attribute__ ((alloc_size (1))) void*
            (*malloc_ptr) (size_t);

     specify that 'calloc_ptr' is a pointer of a function that, like the
     standard C function 'calloc', returns an object whose size is given
     by the product of arguments 1 and 2, and similarly, that
     'malloc_ptr', like the standard C function 'malloc', returns an
     object whose size is given by argument 1 to the function.

'cleanup (CLEANUP_FUNCTION)'
     The 'cleanup' attribute runs a function when the variable goes out
     of scope.  This attribute can only be applied to auto function
     scope variables; it may not be applied to parameters or variables
     with static storage duration.  The function must take one
     parameter, a pointer to a type compatible with the variable.  The
     return value of the function (if any) is ignored.

     If '-fexceptions' is enabled, then CLEANUP_FUNCTION is run during
     the stack unwinding that happens during the processing of the
     exception.  Note that the 'cleanup' attribute does not allow the
     exception to be caught, only to perform an action.  It is undefined
     what happens if CLEANUP_FUNCTION does not return normally.

'common'
'nocommon'
     The 'common' attribute requests GCC to place a variable in "common"
     storage.  The 'nocommon' attribute requests the opposite--to
     allocate space for it directly.

     These attributes override the default chosen by the '-fno-common'
     and '-fcommon' flags respectively.

'copy'
'copy (VARIABLE)'
     The 'copy' attribute applies the set of attributes with which
     VARIABLE has been declared to the declaration of the variable to
     which the attribute is applied.  The attribute is designed for
     libraries that define aliases that are expected to specify the same
     set of attributes as the aliased symbols.  The 'copy' attribute can
     be used with variables, functions or types.  However, the kind of
     symbol to which the attribute is applied (either varible or
     function) must match the kind of symbol to which the argument
     refers.  The 'copy' attribute copies only syntactic and semantic
     attributes but not attributes that affect a symbol's linkage or
     visibility such as 'alias', 'visibility', or 'weak'.  The
     'deprecated' attribute is also not copied.  *Note Common Function
     Attributes::.  *Note Common Type Attributes::.

'deprecated'
'deprecated (MSG)'
     The 'deprecated' attribute results in a warning if the variable is
     used anywhere in the source file.  This is useful when identifying
     variables that are expected to be removed in a future version of a
     program.  The warning also includes the location of the declaration
     of the deprecated variable, to enable users to easily find further
     information about why the variable is deprecated, or what they
     should do instead.  Note that the warning only occurs for uses:

          extern int old_var __attribute__ ((deprecated));
          extern int old_var;
          int new_fn () { return old_var; }

     results in a warning on line 3 but not line 2.  The optional MSG
     argument, which must be a string, is printed in the warning if
     present.

     The 'deprecated' attribute can also be used for functions and types
     (*note Common Function Attributes::, *note Common Type
     Attributes::).

     The message attached to the attribute is affected by the setting of
     the '-fmessage-length' option.

'mode (MODE)'
     This attribute specifies the data type for the
     declaration--whichever type corresponds to the mode MODE.  This in
     effect lets you request an integer or floating-point type according
     to its width.

     *Note (gccint)Machine Modes::, for a list of the possible keywords
     for MODE.  You may also specify a mode of 'byte' or '__byte__' to
     indicate the mode corresponding to a one-byte integer, 'word' or
     '__word__' for the mode of a one-word integer, and 'pointer' or
     '__pointer__' for the mode used to represent pointers.

'nonstring'
     The 'nonstring' variable attribute specifies that an object or
     member declaration with type array of 'char', 'signed char', or
     'unsigned char', or pointer to such a type is intended to store
     character arrays that do not necessarily contain a terminating
     'NUL'.  This is useful in detecting uses of such arrays or pointers
     with functions that expect 'NUL'-terminated strings, and to avoid
     warnings when such an array or pointer is used as an argument to a
     bounded string manipulation function such as 'strncpy'.  For
     example, without the attribute, GCC will issue a warning for the
     'strncpy' call below because it may truncate the copy without
     appending the terminating 'NUL' character.  Using the attribute
     makes it possible to suppress the warning.  However, when the array
     is declared with the attribute the call to 'strlen' is diagnosed
     because when the array doesn't contain a 'NUL'-terminated string
     the call is undefined.  To copy, compare, of search non-string
     character arrays use the 'memcpy', 'memcmp', 'memchr', and other
     functions that operate on arrays of bytes.  In addition, calling
     'strnlen' and 'strndup' with such arrays is safe provided a
     suitable bound is specified, and not diagnosed.

          struct Data
          {
            char name [32] __attribute__ ((nonstring));
          };

          int f (struct Data *pd, const char *s)
          {
            strncpy (pd->name, s, sizeof pd->name);
            ...
            return strlen (pd->name);   // unsafe, gets a warning
          }

'packed'
     The 'packed' attribute specifies that a structure member should
     have the smallest possible alignment--one bit for a bit-field and
     one byte otherwise, unless a larger value is specified with the
     'aligned' attribute.  The attribute does not apply to non-member
     objects.

     For example in the structure below, the member array 'x' is packed
     so that it immediately follows 'a' with no intervening padding:

          struct foo
          {
            char a;
            int x[2] __attribute__ ((packed));
          };

     _Note:_ The 4.1, 4.2 and 4.3 series of GCC ignore the 'packed'
     attribute on bit-fields of type 'char'.  This has been fixed in GCC
     4.4 but the change can lead to differences in the structure layout.
     See the documentation of '-Wpacked-bitfield-compat' for more
     information.

'section ("SECTION-NAME")'
     Normally, the compiler places the objects it generates in sections
     like 'data' and 'bss'.  Sometimes, however, you need additional
     sections, or you need certain particular variables to appear in
     special sections, for example to map to special hardware.  The
     'section' attribute specifies that a variable (or function) lives
     in a particular section.  For example, this small program uses
     several specific section names:

          struct duart a __attribute__ ((section ("DUART_A"))) = { 0 };
          struct duart b __attribute__ ((section ("DUART_B"))) = { 0 };
          char stack[10000] __attribute__ ((section ("STACK"))) = { 0 };
          int init_data __attribute__ ((section ("INITDATA")));

          main()
          {
            /* Initialize stack pointer */
            init_sp (stack + sizeof (stack));

            /* Initialize initialized data */
            memcpy (&init_data, &data, &edata - &data);

            /* Turn on the serial ports */
            init_duart (&a);
            init_duart (&b);
          }

     Use the 'section' attribute with _global_ variables and not _local_
     variables, as shown in the example.

     You may use the 'section' attribute with initialized or
     uninitialized global variables but the linker requires each object
     be defined once, with the exception that uninitialized variables
     tentatively go in the 'common' (or 'bss') section and can be
     multiply "defined".  Using the 'section' attribute changes what
     section the variable goes into and may cause the linker to issue an
     error if an uninitialized variable has multiple definitions.  You
     can force a variable to be initialized with the '-fno-common' flag
     or the 'nocommon' attribute.

     Some file formats do not support arbitrary sections so the
     'section' attribute is not available on all platforms.  If you need
     to map the entire contents of a module to a particular section,
     consider using the facilities of the linker instead.

'tls_model ("TLS_MODEL")'
     The 'tls_model' attribute sets thread-local storage model (*note
     Thread-Local::) of a particular '__thread' variable, overriding
     '-ftls-model=' command-line switch on a per-variable basis.  The
     TLS_MODEL argument should be one of 'global-dynamic',
     'local-dynamic', 'initial-exec' or 'local-exec'.

     Not all targets support this attribute.

'unused'
     This attribute, attached to a variable, means that the variable is
     meant to be possibly unused.  GCC does not produce a warning for
     this variable.

'used'
     This attribute, attached to a variable with static storage, means
     that the variable must be emitted even if it appears that the
     variable is not referenced.

     When applied to a static data member of a C++ class template, the
     attribute also means that the member is instantiated if the class
     itself is instantiated.

'vector_size (BYTES)'
     This attribute specifies the vector size for the type of the
     declared variable, measured in bytes.  The type to which it applies
     is known as the "base type".  The BYTES argument must be a positive
     power-of-two multiple of the base type size.  For example, the
     declaration:

          int foo __attribute__ ((vector_size (16)));

     causes the compiler to set the mode for 'foo', to be 16 bytes,
     divided into 'int' sized units.  Assuming a 32-bit 'int', 'foo''s
     type is a vector of four units of four bytes each, and the
     corresponding mode of 'foo' is 'V4SI'.  *Note Vector Extensions::
     for details of manipulating vector variables.

     This attribute is only applicable to integral and floating scalars,
     although arrays, pointers, and function return values are allowed
     in conjunction with this construct.

     Aggregates with this attribute are invalid, even if they are of the
     same size as a corresponding scalar.  For example, the declaration:

          struct S { int a; };
          struct S  __attribute__ ((vector_size (16))) foo;

     is invalid even if the size of the structure is the same as the
     size of the 'int'.

'visibility ("VISIBILITY_TYPE")'
     This attribute affects the linkage of the declaration to which it
     is attached.  The 'visibility' attribute is described in *note
     Common Function Attributes::.

'weak'
     The 'weak' attribute is described in *note Common Function
     Attributes::.

==============================================================================
File: gcc.info,  Node: |ARC_Variable_Attributes|,  Next: |AVR_Variable_Attributes|,  Prev: |Common_Variable_Attributes|,  Up: |Variable_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *ARC_Variable_Attributes*

6.34.2 ARC Variable Attributes
------------------------------

'aux'
     The 'aux' attribute is used to directly access the ARC's auxiliary
     register space from C. The auxilirary register number is given via
     attribute argument.

==============================================================================
File: gcc.info,  Node: |AVR_Variable_Attributes|,  Next: |Blackfin_Variable_Attributes|,  Prev: |ARC_Variable_Attributes|,  Up: |Variable_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *AVR_Variable_Attributes*

6.34.3 AVR Variable Attributes
------------------------------

'progmem'
     The 'progmem' attribute is used on the AVR to place read-only data
     in the non-volatile program memory (flash).  The 'progmem'
     attribute accomplishes this by putting respective variables into a
     section whose name starts with '.progmem'.

     This attribute works similar to the 'section' attribute but adds
     additional checking.

     *  Ordinary AVR cores with 32 general purpose registers:
          'progmem' affects the location of the data but not how this
          data is accessed.  In order to read data located with the
          'progmem' attribute (inline) assembler must be used.
               /* Use custom macros from AVR-LibC (http://nongnu.org/avr-libc/user-manual/) */
               #include <avr/pgmspace.h>

               /* Locate var in flash memory */
               const int var[2] PROGMEM = { 1, 2 };

               int read_var (int i)
               {
                   /* Access var[] by accessor macro from avr/pgmspace.h */
                   return (int) pgm_read_word (& var[i]);
               }

          AVR is a Harvard architecture processor and data and read-only
          data normally resides in the data memory (RAM).

          See also the *note AVR Named Address Spaces:: section for an
          alternate way to locate and access data in flash memory.

     *  AVR cores with flash memory visible in the RAM address range:
          On such devices, there is no need for attribute 'progmem' or
          *note '__flash': AVR Named Address Spaces. qualifier at all.
          Just use standard C / C++.  The compiler will generate 'LD*'
          instructions.  As flash memory is visible in the RAM address
          range, and the default linker script does _not_ locate
          '.rodata' in RAM, no special features are needed in order not
          to waste RAM for read-only data or to read from flash.  You
          might even get slightly better performance by avoiding
          'progmem' and '__flash'.  This applies to devices from
          families 'avrtiny' and 'avrxmega3', see *note AVR Options::
          for an overview.

     * Reduced AVR Tiny cores like ATtiny40:
          The compiler adds '0x4000' to the addresses of objects and
          declarations in 'progmem' and locates the objects in flash
          memory, namely in section '.progmem.data'.  The offset is
          needed because the flash memory is visible in the RAM address
          space starting at address '0x4000'.

          Data in 'progmem' can be accessed by means of ordinary C code,
          no special functions or macros are needed.

               /* var is located in flash memory */
               extern const int var[2] __attribute__((progmem));

               int read_var (int i)
               {
                   return var[i];
               }

          Please notice that on these devices, there is no need for
          'progmem' at all.

'io'
'io (ADDR)'
     Variables with the 'io' attribute are used to address memory-mapped
     peripherals in the io address range.  If an address is specified,
     the variable is assigned that address, and the value is interpreted
     as an address in the data address space.  Example:

          volatile int porta __attribute__((io (0x22)));

     The address specified in the address in the data address range.

     Otherwise, the variable it is not assigned an address, but the
     compiler will still use in/out instructions where applicable,
     assuming some other module assigns an address in the io address
     range.  Example:

          extern volatile int porta __attribute__((io));

'io_low'
'io_low (ADDR)'
     This is like the 'io' attribute, but additionally it informs the
     compiler that the object lies in the lower half of the I/O area,
     allowing the use of 'cbi', 'sbi', 'sbic' and 'sbis' instructions.

'address'
'address (ADDR)'
     Variables with the 'address' attribute are used to address
     memory-mapped peripherals that may lie outside the io address
     range.

          volatile int porta __attribute__((address (0x600)));

'absdata'
     Variables in static storage and with the 'absdata' attribute can be
     accessed by the 'LDS' and 'STS' instructions which take absolute
     addresses.

        * This attribute is only supported for the reduced AVR Tiny core
          like ATtiny40.

        * You must make sure that respective data is located in the
          address range '0x40'...'0xbf' accessible by 'LDS' and 'STS'.
          One way to achieve this as an appropriate linker description
          file.

        * If the location does not fit the address range of 'LDS' and
          'STS', there is currently (Binutils 2.26) just an unspecific
          warning like
               'module.c:(.text+0x1c): warning: internal error: out of
               range error'

     See also the '-mabsdata' *note command-line option: AVR Options.

==============================================================================
File: gcc.info,  Node: |Blackfin_Variable_Attributes|,  Next: |H8/300_Variable_Attributes|,  Prev: |AVR_Variable_Attributes|,  Up: |Variable_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Blackfin_Variable_Attributes*

6.34.4 Blackfin Variable Attributes
-----------------------------------

Three attributes are currently defined for the Blackfin.

'l1_data'
'l1_data_A'
'l1_data_B'
     Use these attributes on the Blackfin to place the variable into L1
     Data SRAM. Variables with 'l1_data' attribute are put into the
     specific section named '.l1.data'.  Those with 'l1_data_A'
     attribute are put into the specific section named '.l1.data.A'.
     Those with 'l1_data_B' attribute are put into the specific section
     named '.l1.data.B'.

'l2'
     Use this attribute on the Blackfin to place the variable into L2
     SRAM. Variables with 'l2' attribute are put into the specific
     section named '.l2.data'.

==============================================================================
File: gcc.info,  Node: |H8/300_Variable_Attributes|,  Next: |IA_64_Variable_Attributes|,  Prev: |Blackfin_Variable_Attributes|,  Up: |Variable_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *H8/300_Variable_Attributes*

6.34.5 H8/300 Variable Attributes
---------------------------------

These variable attributes are available for H8/300 targets:

'eightbit_data'
     Use this attribute on the H8/300, H8/300H, and H8S to indicate that
     the specified variable should be placed into the eight-bit data
     section.  The compiler generates more efficient code for certain
     operations on data in the eight-bit data area.  Note the eight-bit
     data area is limited to 256 bytes of data.

     You must use GAS and GLD from GNU binutils version 2.7 or later for
     this attribute to work correctly.

'tiny_data'
     Use this attribute on the H8/300H and H8S to indicate that the
     specified variable should be placed into the tiny data section.
     The compiler generates more efficient code for loads and stores on
     data in the tiny data section.  Note the tiny data area is limited
     to slightly under 32KB of data.

==============================================================================
File: gcc.info,  Node: |IA_64_Variable_Attributes|,  Next: |M32R/D_Variable_Attributes|,  Prev: |H8/300_Variable_Attributes|,  Up: |Variable_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *IA_64_Variable_Attributes*

6.34.6 IA-64 Variable Attributes
--------------------------------

The IA-64 back end supports the following variable attribute:

'model (MODEL-NAME)'

     On IA-64, use this attribute to set the addressability of an
     object.  At present, the only supported identifier for MODEL-NAME
     is 'small', indicating addressability via "small" (22-bit)
     addresses (so that their addresses can be loaded with the 'addl'
     instruction).  Caveat: such addressing is by definition not
     position independent and hence this attribute must not be used for
     objects defined by shared libraries.

==============================================================================
File: gcc.info,  Node: |M32R/D_Variable_Attributes|,  Next: |MeP_Variable_Attributes|,  Prev: |IA_64_Variable_Attributes|,  Up: |Variable_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *M32R/D_Variable_Attributes*

6.34.7 M32R/D Variable Attributes
---------------------------------

One attribute is currently defined for the M32R/D.

'model (MODEL-NAME)'
     Use this attribute on the M32R/D to set the addressability of an
     object.  The identifier MODEL-NAME is one of 'small', 'medium', or
     'large', representing each of the code models.

     Small model objects live in the lower 16MB of memory (so that their
     addresses can be loaded with the 'ld24' instruction).

     Medium and large model objects may live anywhere in the 32-bit
     address space (the compiler generates 'seth/add3' instructions to
     load their addresses).

==============================================================================
File: gcc.info,  Node: |MeP_Variable_Attributes|,  Next: |Microsoft_Windows_Variable_Attributes|,  Prev: |M32R/D_Variable_Attributes|,  Up: |Variable_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *MeP_Variable_Attributes*

6.34.8 MeP Variable Attributes
------------------------------

The MeP target has a number of addressing modes and busses.  The 'near'
space spans the standard memory space's first 16 megabytes (24 bits).
The 'far' space spans the entire 32-bit memory space.  The 'based' space
is a 128-byte region in the memory space that is addressed relative to
the '$tp' register.  The 'tiny' space is a 65536-byte region relative to
the '$gp' register.  In addition to these memory regions, the MeP target
has a separate 16-bit control bus which is specified with 'cb'
attributes.

'based'
     Any variable with the 'based' attribute is assigned to the '.based'
     section, and is accessed with relative to the '$tp' register.

'tiny'
     Likewise, the 'tiny' attribute assigned variables to the '.tiny'
     section, relative to the '$gp' register.

'near'
     Variables with the 'near' attribute are assumed to have addresses
     that fit in a 24-bit addressing mode.  This is the default for
     large variables ('-mtiny=4' is the default) but this attribute can
     override '-mtiny=' for small variables, or override '-ml'.

'far'
     Variables with the 'far' attribute are addressed using a full
     32-bit address.  Since this covers the entire memory space, this
     allows modules to make no assumptions about where variables might
     be stored.

'io'
'io (ADDR)'
     Variables with the 'io' attribute are used to address memory-mapped
     peripherals.  If an address is specified, the variable is assigned
     that address, else it is not assigned an address (it is assumed
     some other module assigns an address).  Example:

          int timer_count __attribute__((io(0x123)));

'cb'
'cb (ADDR)'
     Variables with the 'cb' attribute are used to access the control
     bus, using special instructions.  'addr' indicates the control bus
     address.  Example:

          int cpu_clock __attribute__((cb(0x123)));

==============================================================================
File: gcc.info,  Node: |Microsoft_Windows_Variable_Attributes|,  Next: |MSP430_Variable_Attributes|,  Prev: |MeP_Variable_Attributes|,  Up: |Variable_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *Microsoft_Windows_Variable_Attributes*

6.34.9 Microsoft Windows Variable Attributes
--------------------------------------------

You can use these attributes on Microsoft Windows targets.  *note x86
Variable Attributes:: for additional Windows compatibility attributes
available on all x86 targets.

'dllimport'
'dllexport'
     The 'dllimport' and 'dllexport' attributes are described in *note
     Microsoft Windows Function Attributes::.

'selectany'
     The 'selectany' attribute causes an initialized global variable to
     have link-once semantics.  When multiple definitions of the
     variable are encountered by the linker, the first is selected and
     the remainder are discarded.  Following usage by the Microsoft
     compiler, the linker is told _not_ to warn about size or content
     differences of the multiple definitions.

     Although the primary usage of this attribute is for POD types, the
     attribute can also be applied to global C++ objects that are
     initialized by a constructor.  In this case, the static
     initialization and destruction code for the object is emitted in
     each translation defining the object, but the calls to the
     constructor and destructor are protected by a link-once guard
     variable.

     The 'selectany' attribute is only available on Microsoft Windows
     targets.  You can use '__declspec (selectany)' as a synonym for
     '__attribute__ ((selectany))' for compatibility with other
     compilers.

'shared'
     On Microsoft Windows, in addition to putting variable definitions
     in a named section, the section can also be shared among all
     running copies of an executable or DLL.  For example, this small
     program defines shared data by putting it in a named section
     'shared' and marking the section shareable:

          int foo __attribute__((section ("shared"), shared)) = 0;

          int
          main()
          {
            /* Read and write foo.  All running
               copies see the same value.  */
            return 0;
          }

     You may only use the 'shared' attribute along with 'section'
     attribute with a fully-initialized global definition because of the
     way linkers work.  See 'section' attribute for more information.

     The 'shared' attribute is only available on Microsoft Windows.

==============================================================================
File: gcc.info,  Node: |MSP430_Variable_Attributes|,  Next: |Nvidia_PTX_Variable_Attributes|,  Prev: |Microsoft_Windows_Variable_Attributes|,  Up: |Variable_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *MSP430_Variable_Attributes*

6.34.10 MSP430 Variable Attributes
----------------------------------

'noinit'
     Any data with the 'noinit' attribute will not be initialised by the
     C runtime startup code, or the program loader.  Not initialising
     data in this way can reduce program startup times.

'persistent'
     Any variable with the 'persistent' attribute will not be
     initialised by the C runtime startup code.  Instead its value will
     be set once, when the application is loaded, and then never
     initialised again, even if the processor is reset or the program
     restarts.  Persistent data is intended to be placed into FLASH RAM,
     where its value will be retained across resets.  The linker script
     being used to create the application should ensure that persistent
     data is correctly placed.

'lower'
'upper'
'either'
     These attributes are the same as the MSP430 function attributes of
     the same name (*note MSP430 Function Attributes::).  These
     attributes can be applied to both functions and variables.

==============================================================================
File: gcc.info,  Node: |Nvidia_PTX_Variable_Attributes|,  Next: |PowerPC_Variable_Attributes|,  Prev: |MSP430_Variable_Attributes|,  Up: |Variable_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Nvidia_PTX_Variable_Attributes*

6.34.11 Nvidia PTX Variable Attributes
--------------------------------------

These variable attributes are supported by the Nvidia PTX back end:

'shared'
     Use this attribute to place a variable in the '.shared' memory
     space.  This memory space is private to each cooperative thread
     array; only threads within one thread block refer to the same
     instance of the variable.  The runtime does not initialize
     variables in this memory space.

==============================================================================
File: gcc.info,  Node: |PowerPC_Variable_Attributes|,  Next: |RL78_Variable_Attributes|,  Prev: |Nvidia_PTX_Variable_Attributes|,  Up: |Variable_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *PowerPC_Variable_Attributes*

6.34.12 PowerPC Variable Attributes
-----------------------------------

Three attributes currently are defined for PowerPC configurations:
'altivec', 'ms_struct' and 'gcc_struct'.

 For full documentation of the struct attributes please see the
documentation in *note x86 Variable Attributes::.

 For documentation of 'altivec' attribute please see the documentation
in *note PowerPC Type Attributes::.

==============================================================================
File: gcc.info,  Node: |RL78_Variable_Attributes|,  Next: |SPU_Variable_Attributes|,  Prev: |PowerPC_Variable_Attributes|,  Up: |Variable_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *RL78_Variable_Attributes*

6.34.13 RL78 Variable Attributes
--------------------------------

The RL78 back end supports the 'saddr' variable attribute.  This
specifies placement of the corresponding variable in the SADDR area,
which can be accessed more efficiently than the default memory region.

==============================================================================
File: gcc.info,  Node: |SPU_Variable_Attributes|,  Next: |V850_Variable_Attributes|,  Prev: |RL78_Variable_Attributes|,  Up: |Variable_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *SPU_Variable_Attributes*

6.34.14 SPU Variable Attributes
-------------------------------

The SPU supports the 'spu_vector' attribute for variables.  For
documentation of this attribute please see the documentation in *note
SPU Type Attributes::.

==============================================================================
File: gcc.info,  Node: |V850_Variable_Attributes|,  Next: |x86_Variable_Attributes|,  Prev: |SPU_Variable_Attributes|,  Up: |Variable_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *V850_Variable_Attributes*

6.34.15 V850 Variable Attributes
--------------------------------

These variable attributes are supported by the V850 back end:

'sda'
     Use this attribute to explicitly place a variable in the small data
     area, which can hold up to 64 kilobytes.

'tda'
     Use this attribute to explicitly place a variable in the tiny data
     area, which can hold up to 256 bytes in total.

'zda'
     Use this attribute to explicitly place a variable in the first 32
     kilobytes of memory.

==============================================================================
File: gcc.info,  Node: |x86_Variable_Attributes|,  Next: |Xstormy16_Variable_Attributes|,  Prev: |V850_Variable_Attributes|,  Up: |Variable_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *x86_Variable_Attributes*

6.34.16 x86 Variable Attributes
-------------------------------

Two attributes are currently defined for x86 configurations: 'ms_struct'
and 'gcc_struct'.

'ms_struct'
'gcc_struct'

     If 'packed' is used on a structure, or if bit-fields are used, it
     may be that the Microsoft ABI lays out the structure differently
     than the way GCC normally does.  Particularly when moving packed
     data between functions compiled with GCC and the native Microsoft
     compiler (either via function call or as data in a file), it may be
     necessary to access either format.

     The 'ms_struct' and 'gcc_struct' attributes correspond to the
     '-mms-bitfields' and '-mno-ms-bitfields' command-line options,
     respectively; see *note x86 Options::, for details of how structure
     layout is affected.  *Note x86 Type Attributes::, for information
     about the corresponding attributes on types.

==============================================================================
File: gcc.info,  Node: |Xstormy16_Variable_Attributes|,  Prev: |x86_Variable_Attributes|,  Up: |Variable_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Xstormy16_Variable_Attributes*

6.34.17 Xstormy16 Variable Attributes
-------------------------------------

One attribute is currently defined for xstormy16 configurations:
'below100'.

'below100'

     If a variable has the 'below100' attribute ('BELOW100' is allowed
     also), GCC places the variable in the first 0x100 bytes of memory
     and use special opcodes to access it.  Such variables are placed in
     either the '.bss_below100' section or the '.data_below100' section.

==============================================================================
File: gcc.info,  Node: |Type_Attributes|,  Next: |Label_Attributes|,  Prev: |Variable_Attributes|,  Up: |C_Extensions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *Type_Attributes*

6.35 Specifying Attributes of Types
-----------------------------------

The keyword '__attribute__' allows you to specify various special
properties of types.  Some type attributes apply only to structure and
union types, and in C++, also class types, while others can apply to any
type defined via a 'typedef' declaration.  Unless otherwise specified,
the same restrictions and effects apply to attributes regardless of
whether a type is a trivial structure or a C++ class with user-defined
constructors, destructors, or a copy assignment.

 Other attributes are defined for functions (*note Function
Attributes::), labels (*note Label Attributes::), enumerators (*note
Enumerator Attributes::), statements (*note Statement Attributes::), and
for variables (*note Variable Attributes::).

 The '__attribute__' keyword is followed by an attribute specification
enclosed in double parentheses.

 You may specify type attributes in an enum, struct or union type
declaration or definition by placing them immediately after the
'struct', 'union' or 'enum' keyword.  You can also place them just past
the closing curly brace of the definition, but this is less preferred
because logically the type should be fully defined at the closing brace.

 You can also include type attributes in a 'typedef' declaration.  *Note
Attribute Syntax::, for details of the exact syntax for using
attributes.

MENU

* |Common_Type_Attributes|::
* |ARC_Type_Attributes|::
* |ARM_Type_Attributes|::
* |MeP_Type_Attributes|::
* |PowerPC_Type_Attributes|::
* |SPU_Type_Attributes|::
* |x86_Type_Attributes|::

==============================================================================
File: gcc.info,  Node: |Common_Type_Attributes|,  Next: |ARC_Type_Attributes|,  Up: |Type_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *Common_Type_Attributes*

6.35.1 Common Type Attributes
-----------------------------

The following type attributes are supported on most targets.

'aligned'
'aligned (ALIGNMENT)'
     The 'aligned' attribute specifies a minimum alignment (in bytes)
     for variables of the specified type.  When specified, ALIGNMENT
     must be a power of 2.  Specifying no ALIGNMENT argument implies the
     maximum alignment for the target, which is often, but by no means
     always, 8 or 16 bytes.  For example, the declarations:

          struct __attribute__ ((aligned (8))) S { short f[3]; };
          typedef int more_aligned_int __attribute__ ((aligned (8)));

     force the compiler to ensure (as far as it can) that each variable
     whose type is 'struct S' or 'more_aligned_int' is allocated and
     aligned _at least_ on a 8-byte boundary.  On a SPARC, having all
     variables of type 'struct S' aligned to 8-byte boundaries allows
     the compiler to use the 'ldd' and 'std' (doubleword load and store)
     instructions when copying one variable of type 'struct S' to
     another, thus improving run-time efficiency.

     Note that the alignment of any given 'struct' or 'union' type is
     required by the ISO C standard to be at least a perfect multiple of
     the lowest common multiple of the alignments of all of the members
     of the 'struct' or 'union' in question.  This means that you _can_
     effectively adjust the alignment of a 'struct' or 'union' type by
     attaching an 'aligned' attribute to any one of the members of such
     a type, but the notation illustrated in the example above is a more
     obvious, intuitive, and readable way to request the compiler to
     adjust the alignment of an entire 'struct' or 'union' type.

     As in the preceding example, you can explicitly specify the
     alignment (in bytes) that you wish the compiler to use for a given
     'struct' or 'union' type.  Alternatively, you can leave out the
     alignment factor and just ask the compiler to align a type to the
     maximum useful alignment for the target machine you are compiling
     for.  For example, you could write:

          struct __attribute__ ((aligned)) S { short f[3]; };

     Whenever you leave out the alignment factor in an 'aligned'
     attribute specification, the compiler automatically sets the
     alignment for the type to the largest alignment that is ever used
     for any data type on the target machine you are compiling for.
     Doing this can often make copy operations more efficient, because
     the compiler can use whatever instructions copy the biggest chunks
     of memory when performing copies to or from the variables that have
     types that you have aligned this way.

     In the example above, if the size of each 'short' is 2 bytes, then
     the size of the entire 'struct S' type is 6 bytes.  The smallest
     power of two that is greater than or equal to that is 8, so the
     compiler sets the alignment for the entire 'struct S' type to 8
     bytes.

     Note that although you can ask the compiler to select a
     time-efficient alignment for a given type and then declare only
     individual stand-alone objects of that type, the compiler's ability
     to select a time-efficient alignment is primarily useful only when
     you plan to create arrays of variables having the relevant
     (efficiently aligned) type.  If you declare or use arrays of
     variables of an efficiently-aligned type, then it is likely that
     your program also does pointer arithmetic (or subscripting, which
     amounts to the same thing) on pointers to the relevant type, and
     the code that the compiler generates for these pointer arithmetic
     operations is often more efficient for efficiently-aligned types
     than for other types.

     Note that the effectiveness of 'aligned' attributes may be limited
     by inherent limitations in your linker.  On many systems, the
     linker is only able to arrange for variables to be aligned up to a
     certain maximum alignment.  (For some linkers, the maximum
     supported alignment may be very very small.)  If your linker is
     only able to align variables up to a maximum of 8-byte alignment,
     then specifying 'aligned (16)' in an '__attribute__' still only
     provides you with 8-byte alignment.  See your linker documentation
     for further information.

     When used on a struct, or struct member, the 'aligned' attribute
     can only increase the alignment; in order to decrease it, the
     'packed' attribute must be specified as well.  When used as part of
     a typedef, the 'aligned' attribute can both increase and decrease
     alignment, and specifying the 'packed' attribute generates a
     warning.

'warn_if_not_aligned (ALIGNMENT)'
     This attribute specifies a threshold for the structure field,
     measured in bytes.  If the structure field is aligned below the
     threshold, a warning will be issued.  For example, the declaration:

          typedef unsigned long long __u64
             __attribute__((aligned (4), warn_if_not_aligned (8)));

          struct foo
          {
            int i1;
            int i2;
            __u64 x;
          };

     causes the compiler to issue an warning on 'struct foo', like
     'warning: alignment 4 of 'struct foo' is less than 8'.  It is used
     to define 'struct foo' in such a way that 'struct foo' has the same
     layout and the structure field 'x' has the same alignment when
     '__u64' is aligned at either 4 or 8 bytes.  Align 'struct foo' to 8
     bytes:

          struct __attribute__ ((aligned (8))) foo
          {
            int i1;
            int i2;
            __u64 x;
          };

     silences the warning.  The compiler also issues a warning, like
     'warning: 'x' offset 12 in 'struct foo' isn't aligned to 8', when
     the structure field has the misaligned offset:

          struct __attribute__ ((aligned (8))) foo
          {
            int i1;
            int i2;
            int i3;
            __u64 x;
          };

     This warning can be disabled by '-Wno-if-not-aligned'.

'alloc_size (POSITION)'
'alloc_size (POSITION-1, POSITION-2)'
     The 'alloc_size' type attribute may be applied to the definition of
     a type of a function that returns a pointer and takes at least one
     argument of an integer type.  It indicates that the returned
     pointer points to an object whose size is given by the function
     argument at POSITION-1, or by the product of the arguments at
     POSITION-1 and POSITION-2.  Meaningful sizes are positive values
     less than 'PTRDIFF_MAX'.  Other sizes are disagnosed when detected.
     GCC uses this information to improve the results of
     '__builtin_object_size'.

     For instance, the following declarations

          typedef __attribute__ ((alloc_size (1, 2))) void*
            calloc_type (size_t, size_t);
          typedef __attribute__ ((alloc_size (1))) void*
            malloc_type (size_t);

     specify that 'calloc_type' is a type of a function that, like the
     standard C function 'calloc', returns an object whose size is given
     by the product of arguments 1 and 2, and that 'malloc_type', like
     the standard C function 'malloc', returns an object whose size is
     given by argument 1 to the function.

'copy'
'copy (EXPRESSION)'
     The 'copy' attribute applies the set of attributes with which the
     type of the EXPRESSION has been declared to the declaration of the
     type to which the attribute is applied.  The attribute is designed
     for libraries that define aliases that are expected to specify the
     same set of attributes as the aliased symbols.  The 'copy'
     attribute can be used with types, variables, or functions.
     However, the kind of symbol to which the attribute is applied
     (either varible or function) must match the kind of symbol to which
     the argument refers.  The 'copy' attribute copies only syntactic
     and semantic attributes but not attributes that affect a symbol's
     linkage or visibility such as 'alias', 'visibility', or 'weak'.
     The 'deprecated' attribute is also not copied.  *Note Common
     Function Attributes::.  *Note Common Variable Attributes::.

     For example, suppose 'struct A' below is defined in some third
     party library header to have the alignment requirement 'N' and to
     force a warning whenever a variable of the type is not so aligned
     due to attribute 'packed'.  Specifying the 'copy' attribute on the
     definition on the unrelated 'struct B' has the effect of copying
     all relevant attributes from the type referenced by the pointer
     expression to 'struct B'.

          struct __attribute__ ((aligned (N), warn_if_not_aligned (N)))
          A { /* ... */ };
          struct __attribute__ ((copy ( (struct A *)0)) B { /* ... */ };

'deprecated'
'deprecated (MSG)'
     The 'deprecated' attribute results in a warning if the type is used
     anywhere in the source file.  This is useful when identifying types
     that are expected to be removed in a future version of a program.
     If possible, the warning also includes the location of the
     declaration of the deprecated type, to enable users to easily find
     further information about why the type is deprecated, or what they
     should do instead.  Note that the warnings only occur for uses and
     then only if the type is being applied to an identifier that itself
     is not being declared as deprecated.

          typedef int T1 __attribute__ ((deprecated));
          T1 x;
          typedef T1 T2;
          T2 y;
          typedef T1 T3 __attribute__ ((deprecated));
          T3 z __attribute__ ((deprecated));

     results in a warning on line 2 and 3 but not lines 4, 5, or 6.  No
     warning is issued for line 4 because T2 is not explicitly
     deprecated.  Line 5 has no warning because T3 is explicitly
     deprecated.  Similarly for line 6.  The optional MSG argument,
     which must be a string, is printed in the warning if present.
     Control characters in the string will be replaced with escape
     sequences, and if the '-fmessage-length' option is set to 0 (its
     default value) then any newline characters will be ignored.

     The 'deprecated' attribute can also be used for functions and
     variables (*note Function Attributes::, *note Variable
     Attributes::.)

     The message attached to the attribute is affected by the setting of
     the '-fmessage-length' option.

'designated_init'
     This attribute may only be applied to structure types.  It
     indicates that any initialization of an object of this type must
     use designated initializers rather than positional initializers.
     The intent of this attribute is to allow the programmer to indicate
     that a structure's layout may change, and that therefore relying on
     positional initialization will result in future breakage.

     GCC emits warnings based on this attribute by default; use
     '-Wno-designated-init' to suppress them.

'may_alias'
     Accesses through pointers to types with this attribute are not
     subject to type-based alias analysis, but are instead assumed to be
     able to alias any other type of objects.  In the context of section
     6.5 paragraph 7 of the C99 standard, an lvalue expression
     dereferencing such a pointer is treated like having a character
     type.  See '-fstrict-aliasing' for more information on aliasing
     issues.  This extension exists to support some vector APIs, in
     which pointers to one vector type are permitted to alias pointers
     to a different vector type.

     Note that an object of a type with this attribute does not have any
     special semantics.

     Example of use:

          typedef short __attribute__ ((__may_alias__)) short_a;

          int
          main (void)
          {
            int a = 0x12345678;
            short_a *b = (short_a *) &a;

            b[1] = 0;

            if (a == 0x12345678)
              abort();

            exit(0);
          }

     If you replaced 'short_a' with 'short' in the variable declaration,
     the above program would abort when compiled with
     '-fstrict-aliasing', which is on by default at '-O2' or above.

'mode (MODE)'
     This attribute specifies the data type for the
     declaration--whichever type corresponds to the mode MODE.  This in
     effect lets you request an integer or floating-point type according
     to its width.

     *Note (gccint)Machine Modes::, for a list of the possible keywords
     for MODE.  You may also specify a mode of 'byte' or '__byte__' to
     indicate the mode corresponding to a one-byte integer, 'word' or
     '__word__' for the mode of a one-word integer, and 'pointer' or
     '__pointer__' for the mode used to represent pointers.

'packed'
     This attribute, attached to a 'struct', 'union', or C++ 'class'
     type definition, specifies that each of its members (other than
     zero-width bit-fields) is placed to minimize the memory required.
     This is equivalent to specifying the 'packed' attribute on each of
     the members.

     When attached to an 'enum' definition, the 'packed' attribute
     indicates that the smallest integral type should be used.
     Specifying the '-fshort-enums' flag on the command line is
     equivalent to specifying the 'packed' attribute on all 'enum'
     definitions.

     In the following example 'struct my_packed_struct''s members are
     packed closely together, but the internal layout of its 's' member
     is not packed--to do that, 'struct my_unpacked_struct' needs to be
     packed too.

          struct my_unpacked_struct
           {
              char c;
              int i;
           };

          struct __attribute__ ((__packed__)) my_packed_struct
            {
               char c;
               int  i;
               struct my_unpacked_struct s;
            };

     You may only specify the 'packed' attribute on the definition of an
     'enum', 'struct', 'union', or 'class', not on a 'typedef' that does
     not also define the enumerated type, structure, union, or class.

'scalar_storage_order ("ENDIANNESS")'
     When attached to a 'union' or a 'struct', this attribute sets the
     storage order, aka endianness, of the scalar fields of the type, as
     well as the array fields whose component is scalar.  The supported
     endiannesses are 'big-endian' and 'little-endian'.  The attribute
     has no effects on fields which are themselves a 'union', a 'struct'
     or an array whose component is a 'union' or a 'struct', and it is
     possible for these fields to have a different scalar storage order
     than the enclosing type.

     This attribute is supported only for targets that use a uniform
     default scalar storage order (fortunately, most of them), i.e.
     targets that store the scalars either all in big-endian or all in
     little-endian.

     Additional restrictions are enforced for types with the reverse
     scalar storage order with regard to the scalar storage order of the
     target:

        * Taking the address of a scalar field of a 'union' or a
          'struct' with reverse scalar storage order is not permitted
          and yields an error.
        * Taking the address of an array field, whose component is
          scalar, of a 'union' or a 'struct' with reverse scalar storage
          order is permitted but yields a warning, unless
          '-Wno-scalar-storage-order' is specified.
        * Taking the address of a 'union' or a 'struct' with reverse
          scalar storage order is permitted.

     These restrictions exist because the storage order attribute is
     lost when the address of a scalar or the address of an array with
     scalar component is taken, so storing indirectly through this
     address generally does not work.  The second case is nevertheless
     allowed to be able to perform a block copy from or to the array.

     Moreover, the use of type punning or aliasing to toggle the storage
     order is not supported; that is to say, a given scalar object
     cannot be accessed through distinct types that assign a different
     storage order to it.

'transparent_union'

     This attribute, attached to a 'union' type definition, indicates
     that any function parameter having that union type causes calls to
     that function to be treated in a special way.

     First, the argument corresponding to a transparent union type can
     be of any type in the union; no cast is required.  Also, if the
     union contains a pointer type, the corresponding argument can be a
     null pointer constant or a void pointer expression; and if the
     union contains a void pointer type, the corresponding argument can
     be any pointer expression.  If the union member type is a pointer,
     qualifiers like 'const' on the referenced type must be respected,
     just as with normal pointer conversions.

     Second, the argument is passed to the function using the calling
     conventions of the first member of the transparent union, not the
     calling conventions of the union itself.  All members of the union
     must have the same machine representation; this is necessary for
     this argument passing to work properly.

     Transparent unions are designed for library functions that have
     multiple interfaces for compatibility reasons.  For example,
     suppose the 'wait' function must accept either a value of type 'int
     *' to comply with POSIX, or a value of type 'union wait *' to
     comply with the 4.1BSD interface.  If 'wait''s parameter were 'void
     *', 'wait' would accept both kinds of arguments, but it would also
     accept any other pointer type and this would make argument type
     checking less useful.  Instead, '<sys/wait.h>' might define the
     interface as follows:

          typedef union __attribute__ ((__transparent_union__))
            {
              int *__ip;
              union wait *__up;
            } wait_status_ptr_t;

          pid_t wait (wait_status_ptr_t);

     This interface allows either 'int *' or 'union wait *' arguments to
     be passed, using the 'int *' calling convention.  The program can
     call 'wait' with arguments of either type:

          int w1 () { int w; return wait (&w); }
          int w2 () { union wait w; return wait (&w); }

     With this interface, 'wait''s implementation might look like this:

          pid_t wait (wait_status_ptr_t p)
          {
            return waitpid (-1, p.__ip, 0);
          }

'unused'
     When attached to a type (including a 'union' or a 'struct'), this
     attribute means that variables of that type are meant to appear
     possibly unused.  GCC does not produce a warning for any variables
     of that type, even if the variable appears to do nothing.  This is
     often the case with lock or thread classes, which are usually
     defined and then not referenced, but contain constructors and
     destructors that have nontrivial bookkeeping functions.

'vector_size (BYTES)'
     This attribute specifies the vector size for the type, measured in
     bytes.  The type to which it applies is known as the "base type".
     The BYTES argument must be a positive power-of-two multiple of the
     base type size.  For example, the following declarations:

          typedef __attribute__ ((vector_size (32))) int int_vec32_t ;
          typedef __attribute__ ((vector_size (32))) int* int_vec32_ptr_t;
          typedef __attribute__ ((vector_size (32))) int int_vec32_arr3_t[3];

     define 'int_vec32_t' to be a 32-byte vector type composed of 'int'
     sized units.  With 'int' having a size of 4 bytes, the type defines
     a vector of eight units, four bytes each.  The mode of variables of
     type 'int_vec32_t' is 'V8SI'.  'int_vec32_ptr_t' is then defined to
     be a pointer to such a vector type, and 'int_vec32_arr3_t' to be an
     array of three such vectors.  *Note Vector Extensions:: for details
     of manipulating objects of vector types.

     This attribute is only applicable to integral and floating scalar
     types.  In function declarations the attribute applies to the
     function return type.

     For example, the following:
          __attribute__ ((vector_size (16))) float get_flt_vec16 (void);
     declares 'get_flt_vec16' to be a function returning a 16-byte
     vector with the base type 'float'.

'visibility'
     In C++, attribute visibility (*note Function Attributes::) can also
     be applied to class, struct, union and enum types.  Unlike other
     type attributes, the attribute must appear between the initial
     keyword and the name of the type; it cannot appear after the body
     of the type.

     Note that the type visibility is applied to vague linkage entities
     associated with the class (vtable, typeinfo node, etc.).  In
     particular, if a class is thrown as an exception in one shared
     object and caught in another, the class must have default
     visibility.  Otherwise the two shared objects are unable to use the
     same typeinfo node and exception handling will break.

 To specify multiple attributes, separate them by commas within the
double parentheses: for example, '__attribute__ ((aligned (16),
packed))'.

==============================================================================
File: gcc.info,  Node: |ARC_Type_Attributes|,  Next: |ARM_Type_Attributes|,  Prev: |Common_Type_Attributes|,  Up: |Type_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *ARC_Type_Attributes*

6.35.2 ARC Type Attributes
--------------------------

Declaring objects with 'uncached' allows you to exclude data-cache
participation in load and store operations on those objects without
involving the additional semantic implications of 'volatile'.  The '.di'
instruction suffix is used for all loads and stores of data declared
'uncached'.

==============================================================================
File: gcc.info,  Node: |ARM_Type_Attributes|,  Next: |MeP_Type_Attributes|,  Prev: |ARC_Type_Attributes|,  Up: |Type_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *ARM_Type_Attributes*

6.35.3 ARM Type Attributes
--------------------------

On those ARM targets that support 'dllimport' (such as Symbian OS), you
can use the 'notshared' attribute to indicate that the virtual table and
other similar data for a class should not be exported from a DLL.  For
example:

     class __declspec(notshared) C {
     public:
       __declspec(dllimport) C();
       virtual void f();
     }

     __declspec(dllexport)
     C::C() {}

In this code, 'C::C' is exported from the current DLL, but the virtual
table for 'C' is not exported.  (You can use '__attribute__' instead of
'__declspec' if you prefer, but most Symbian OS code uses '__declspec'.)

==============================================================================
File: gcc.info,  Node: |MeP_Type_Attributes|,  Next: |PowerPC_Type_Attributes|,  Prev: |ARM_Type_Attributes|,  Up: |Type_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *MeP_Type_Attributes*

6.35.4 MeP Type Attributes
--------------------------

Many of the MeP variable attributes may be applied to types as well.
Specifically, the 'based', 'tiny', 'near', and 'far' attributes may be
applied to either.  The 'io' and 'cb' attributes may not be applied to
types.

==============================================================================
File: gcc.info,  Node: |PowerPC_Type_Attributes|,  Next: |SPU_Type_Attributes|,  Prev: |MeP_Type_Attributes|,  Up: |Type_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *PowerPC_Type_Attributes*

6.35.5 PowerPC Type Attributes
------------------------------

Three attributes currently are defined for PowerPC configurations:
'altivec', 'ms_struct' and 'gcc_struct'.

 For full documentation of the 'ms_struct' and 'gcc_struct' attributes
please see the documentation in *note x86 Type Attributes::.

 The 'altivec' attribute allows one to declare AltiVec vector data types
supported by the AltiVec Programming Interface Manual.  The attribute
requires an argument to specify one of three vector types: 'vector__',
'pixel__' (always followed by unsigned short), and 'bool__' (always
followed by unsigned).

     __attribute__((altivec(vector__)))
     __attribute__((altivec(pixel__))) unsigned short
     __attribute__((altivec(bool__))) unsigned

 These attributes mainly are intended to support the '__vector',
'__pixel', and '__bool' AltiVec keywords.

==============================================================================
File: gcc.info,  Node: |SPU_Type_Attributes|,  Next: |x86_Type_Attributes|,  Prev: |PowerPC_Type_Attributes|,  Up: |Type_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *SPU_Type_Attributes*

6.35.6 SPU Type Attributes
--------------------------

The SPU supports the 'spu_vector' attribute for types.  This attribute
allows one to declare vector data types supported by the
Sony/Toshiba/IBM SPU Language Extensions Specification.  It is intended
to support the '__vector' keyword.

==============================================================================
File: gcc.info,  Node: |x86_Type_Attributes|,  Prev: |SPU_Type_Attributes|,  Up: |Type_Attributes|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *x86_Type_Attributes*

6.35.7 x86 Type Attributes
--------------------------

Two attributes are currently defined for x86 configurations: 'ms_struct'
and 'gcc_struct'.

'ms_struct'
'gcc_struct'

     If 'packed' is used on a structure, or if bit-fields are used it
     may be that the Microsoft ABI packs them differently than GCC
     normally packs them.  Particularly when moving packed data between
     functions compiled with GCC and the native Microsoft compiler
     (either via function call or as data in a file), it may be
     necessary to access either format.

     The 'ms_struct' and 'gcc_struct' attributes correspond to the
     '-mms-bitfields' and '-mno-ms-bitfields' command-line options,
     respectively; see *note x86 Options::, for details of how structure
     layout is affected.  *Note x86 Variable Attributes::, for
     information about the corresponding attributes on variables.

==============================================================================
File: gcc.info,  Node: |Label_Attributes|,  Next: |Enumerator_Attributes|,  Prev: |Type_Attributes|,  Up: |C_Extensions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Label_Attributes*

6.36 Label Attributes
---------------------

GCC allows attributes to be set on C labels.  *Note Attribute Syntax::,
for details of the exact syntax for using attributes.  Other attributes
are available for functions (*note Function Attributes::), variables
(*note Variable Attributes::), enumerators (*note Enumerator
Attributes::), statements (*note Statement Attributes::), and for types
(*note Type Attributes::).

 This example uses the 'cold' label attribute to indicate the
'ErrorHandling' branch is unlikely to be taken and that the
'ErrorHandling' label is unused:


        asm goto ("some asm" : : : : NoError);

     /* This branch (the fall-through from the asm) is less commonly used */
     ErrorHandling:
        __attribute__((cold, unused)); /* Semi-colon is required here */
        printf("error\n");
        return 0;

     NoError:
        printf("no error\n");
        vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
