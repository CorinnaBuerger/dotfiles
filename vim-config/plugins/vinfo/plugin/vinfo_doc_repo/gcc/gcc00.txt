==============================================================================
File: gcc.info,  Node: |Top|,  Next: |G|++ and GCC
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *Top*

Introduction
============

This manual documents how to use the GNU compilers, as well as their
features and incompatibilities, and how to report bugs.  It corresponds
to the compilers (GCC) version 9.2.1.  The internals of the GNU
compilers, including how to port them to new targets and some
information about how to write front ends for new languages, are
documented in a separate manual.  *Note Introduction: (gccint)Top.

MENU

* |G++_and_GCC|::     You can compile C or C++ programs.
* |Standards|::       Language standards supported by GCC.
* |Invoking_GCC|::    Command options supported by 'gcc'.
* |C_Implementation|:: How GCC implements the ISO C specification.
* |C++_Implementation|:: How GCC implements the ISO C++ specification.
* |C_Extensions|::    GNU extensions to the C language family.
* |C++_Extensions|::  GNU extensions to the C++ language.
* |Objective_C|::     GNU Objective-C runtime features.
* |Compatibility|::   Binary Compatibility
* |Gcov|::            'gcov'--a test coverage program.
* |Gcov_tool|::       'gcov-tool'--an offline gcda profile processing program.
* |Gcov_dump|::       'gcov-dump'--an offline gcda and gcno profile dump tool.
* |Trouble|::         If you have trouble using GCC.
* |Bugs|::            How, why and where to report bugs.
* |Service|::         How To Get Help with GCC
* |Contributing|::    How to contribute to testing and developing GCC.

* |Funding|::         How to help assure funding for free software.
* |GNU_Project|::     The GNU Project and GNU/Linux.

* |Copying|::         GNU General Public License says
                    how you can copy and share GCC.
* |GNU_Free_Documentation_License|:: How you can copy and share this manual.
* |Contributors|::    People who have contributed to GCC.

* |Option_Index|::    Index to command line options.
* |Keyword_Index|::   Index of concepts and symbol names.

==============================================================================
File: gcc.info,  Node: |G++_and_GCC|,  Next: |Standards|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *G++_and_GCC*

1 Programming Languages Supported by GCC
========================================

GCC stands for "GNU Compiler Collection".  GCC is an integrated
distribution of compilers for several major programming languages.
These languages currently include C, C++, Objective-C, Objective-C++,
Fortran, Ada, D, Go, and BRIG (HSAIL).

 The abbreviation "GCC" has multiple meanings in common use.  The
current official meaning is "GNU Compiler Collection", which refers
generically to the complete suite of tools.  The name historically stood
for "GNU C Compiler", and this usage is still common when the emphasis
is on compiling C programs.  Finally, the name is also used when
speaking of the "language-independent" component of GCC: code shared
among the compilers for all supported languages.

 The language-independent component of GCC includes the majority of the
optimizers, as well as the "back ends" that generate machine code for
various processors.

 The part of a compiler that is specific to a particular language is
called the "front end".  In addition to the front ends that are
integrated components of GCC, there are several other front ends that
are maintained separately.  These support languages such as Mercury, and
COBOL.  To use these, they must be built together with GCC proper.

 Most of the compilers for languages other than C have their own names.
The C++ compiler is G++, the Ada compiler is GNAT, and so on.  When we
talk about compiling one of those languages, we might refer to that
compiler by its own name, or as GCC.  Either is correct.

 Historically, compilers for many languages, including C++ and Fortran,
have been implemented as "preprocessors" which emit another high level
language such as C.  None of the compilers included in GCC are
implemented this way; they all generate machine code directly.  This
sort of preprocessor should not be confused with the "C preprocessor",
which is an integral feature of the C, C++, Objective-C and
Objective-C++ languages.

==============================================================================
File: gcc.info,  Node: |Standards|,  Next: |Invoking_GCC|,  Prev: |G++_and_GCC|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *Standards*

2 Language Standards Supported by GCC
=====================================

For each language compiled by GCC for which there is a standard, GCC
attempts to follow one or more versions of that standard, possibly with
some exceptions, and possibly with some extensions.

2.1 C Language
--------------

The original ANSI C standard (X3.159-1989) was ratified in 1989 and
published in 1990.  This standard was ratified as an ISO standard
(ISO/IEC 9899:1990) later in 1990.  There were no technical differences
between these publications, although the sections of the ANSI standard
were renumbered and became clauses in the ISO standard.  The ANSI
standard, but not the ISO standard, also came with a Rationale document.
This standard, in both its forms, is commonly known as "C89", or
occasionally as "C90", from the dates of ratification.  To select this
standard in GCC, use one of the options '-ansi', '-std=c90' or
'-std=iso9899:1990'; to obtain all the diagnostics required by the
standard, you should also specify '-pedantic' (or '-pedantic-errors' if
you want them to be errors rather than warnings).  *Note Options
Controlling C Dialect: C Dialect Options.

 Errors in the 1990 ISO C standard were corrected in two Technical
Corrigenda published in 1994 and 1996.  GCC does not support the
uncorrected version.

 An amendment to the 1990 standard was published in 1995.  This
amendment added digraphs and '__STDC_VERSION__' to the language, but
otherwise concerned the library.  This amendment is commonly known as
"AMD1"; the amended standard is sometimes known as "C94" or "C95".  To
select this standard in GCC, use the option '-std=iso9899:199409' (with,
as for other standard versions, '-pedantic' to receive all required
diagnostics).

 A new edition of the ISO C standard was published in 1999 as ISO/IEC
9899:1999, and is commonly known as "C99".  (While in development,
drafts of this standard version were referred to as "C9X".) GCC has
substantially complete support for this standard version; see
<http://gcc.gnu.org/c99status.html> for details.  To select this
standard, use '-std=c99' or '-std=iso9899:1999'.

 Errors in the 1999 ISO C standard were corrected in three Technical
Corrigenda published in 2001, 2004 and 2007.  GCC does not support the
uncorrected version.

 A fourth version of the C standard, known as "C11", was published in
2011 as ISO/IEC 9899:2011.  (While in development, drafts of this
standard version were referred to as "C1X".) GCC has substantially
complete support for this standard, enabled with '-std=c11' or
'-std=iso9899:2011'.  A version with corrections integrated was prepared
in 2017 and published in 2018 as ISO/IEC 9899:2018; it is known as "C17"
and is supported with '-std=c17' or '-std=iso9899:2017'; the corrections
are also applied with '-std=c11', and the only difference between the
options is the value of '__STDC_VERSION__'.

 A further version of the C standard, known as "C2X", is under
development; experimental and incomplete support for this is enabled
with '-std=c2x'.

 By default, GCC provides some extensions to the C language that, on
rare occasions conflict with the C standard.  *Note Extensions to the C
Language Family: C Extensions.  Some features that are part of the C99
standard are accepted as extensions in C90 mode, and some features that
are part of the C11 standard are accepted as extensions in C90 and C99
modes.  Use of the '-std' options listed above disables these extensions
where they conflict with the C standard version selected.  You may also
select an extended version of the C language explicitly with
'-std=gnu90' (for C90 with GNU extensions), '-std=gnu99' (for C99 with
GNU extensions) or '-std=gnu11' (for C11 with GNU extensions).

 The default, if no C language dialect options are given, is
'-std=gnu11'.

 The ISO C standard defines (in clause 4) two classes of conforming
implementation.  A "conforming hosted implementation" supports the whole
standard including all the library facilities; a "conforming
freestanding implementation" is only required to provide certain library
facilities: those in '<float.h>', '<limits.h>', '<stdarg.h>', and
'<stddef.h>'; since AMD1, also those in '<iso646.h>'; since C99, also
those in '<stdbool.h>' and '<stdint.h>'; and since C11, also those in
'<stdalign.h>' and '<stdnoreturn.h>'.  In addition, complex types, added
in C99, are not required for freestanding implementations.

 The standard also defines two environments for programs, a
"freestanding environment", required of all implementations and which
may not have library facilities beyond those required of freestanding
implementations, where the handling of program startup and termination
are implementation-defined; and a "hosted environment", which is not
required, in which all the library facilities are provided and startup
is through a function 'int main (void)' or 'int main (int, char *[])'.
An OS kernel is an example of a program running in a freestanding
environment; a program using the facilities of an operating system is an
example of a program running in a hosted environment.

 GCC aims towards being usable as a conforming freestanding
implementation, or as the compiler for a conforming hosted
implementation.  By default, it acts as the compiler for a hosted
implementation, defining '__STDC_HOSTED__' as '1' and presuming that
when the names of ISO C functions are used, they have the semantics
defined in the standard.  To make it act as a conforming freestanding
implementation for a freestanding environment, use the option
'-ffreestanding'; it then defines '__STDC_HOSTED__' to '0' and does not
make assumptions about the meanings of function names from the standard
library, with exceptions noted below.  To build an OS kernel, you may
well still need to make your own arrangements for linking and startup.
*Note Options Controlling C Dialect: C Dialect Options.

 GCC does not provide the library facilities required only of hosted
implementations, nor yet all the facilities required by C99 of
freestanding implementations on all platforms.  To use the facilities of
a hosted environment, you need to find them elsewhere (for example, in
the GNU C library).  *Note Standard Libraries: Standard Libraries.

 Most of the compiler support routines used by GCC are present in
'libgcc', but there are a few exceptions.  GCC requires the freestanding
environment provide 'memcpy', 'memmove', 'memset' and 'memcmp'.
Finally, if '__builtin_trap' is used, and the target does not implement
the 'trap' pattern, then GCC emits a call to 'abort'.

 For references to Technical Corrigenda, Rationale documents and
information concerning the history of C that is available online, see
<http://gcc.gnu.org/readings.html>

2.2 C++ Language
----------------

GCC supports the original ISO C++ standard published in 1998, and the
2011 and 2014 revisions.

 The original ISO C++ standard was published as the ISO standard
(ISO/IEC 14882:1998) and amended by a Technical Corrigenda published in
2003 (ISO/IEC 14882:2003).  These standards are referred to as C++98 and
C++03, respectively.  GCC implements the majority of C++98 ('export' is
a notable exception) and most of the changes in C++03.  To select this
standard in GCC, use one of the options '-ansi', '-std=c++98', or
'-std=c++03'; to obtain all the diagnostics required by the standard,
you should also specify '-pedantic' (or '-pedantic-errors' if you want
them to be errors rather than warnings).

 A revised ISO C++ standard was published in 2011 as ISO/IEC 14882:2011,
and is referred to as C++11; before its publication it was commonly
referred to as C++0x.  C++11 contains several changes to the C++
language, all of which have been implemented in GCC.  For details see
<https://gcc.gnu.org/projects/cxx-status.html#cxx11>.  To select this
standard in GCC, use the option '-std=c++11'.

 Another revised ISO C++ standard was published in 2014 as ISO/IEC
14882:2014, and is referred to as C++14; before its publication it was
sometimes referred to as C++1y.  C++14 contains several further changes
to the C++ language, all of which have been implemented in GCC.  For
details see <https://gcc.gnu.org/projects/cxx-status.html#cxx14>.  To
select this standard in GCC, use the option '-std=c++14'.

 The C++ language was further revised in 2017 and ISO/IEC 14882:2017 was
published.  This is referred to as C++17, and before publication was
often referred to as C++1z.  GCC supports all the changes in the new
specification.  For further details see
<https://gcc.gnu.org/projects/cxx-status.html#cxx1z>.  Use the option
'-std=c++17' to select this variant of C++.

 More information about the C++ standards is available on the ISO C++
committee's web site at <http://www.open-std.org/jtc1/sc22/wg21/>.

 To obtain all the diagnostics required by any of the standard versions
described above you should specify '-pedantic' or '-pedantic-errors',
otherwise GCC will allow some non-ISO C++ features as extensions.  *Note
Warning Options::.

 By default, GCC also provides some additional extensions to the C++
language that on rare occasions conflict with the C++ standard.  *Note
Options Controlling C++ Dialect: C++ Dialect Options.  Use of the '-std'
options listed above disables these extensions where they they conflict
with the C++ standard version selected.  You may also select an extended
version of the C++ language explicitly with '-std=gnu++98' (for C++98
with GNU extensions), or '-std=gnu++11' (for C++11 with GNU extensions),
or '-std=gnu++14' (for C++14 with GNU extensions), or '-std=gnu++17'
(for C++17 with GNU extensions).

 The default, if no C++ language dialect options are given, is
'-std=gnu++14'.

2.3 Objective-C and Objective-C++ Languages
-------------------------------------------

GCC supports "traditional" Objective-C (also known as "Objective-C 1.0")
and contains support for the Objective-C exception and synchronization
syntax.  It has also support for a number of "Objective-C 2.0" language
extensions, including properties, fast enumeration (only for
Objective-C), method attributes and the @optional and @required keywords
in protocols.  GCC supports Objective-C++ and features available in
Objective-C are also available in Objective-C++.

 GCC by default uses the GNU Objective-C runtime library, which is part
of GCC and is not the same as the Apple/NeXT Objective-C runtime library
used on Apple systems.  There are a number of differences documented in
this manual.  The options '-fgnu-runtime' and '-fnext-runtime' allow you
to switch between producing output that works with the GNU Objective-C
runtime library and output that works with the Apple/NeXT Objective-C
runtime library.

 There is no formal written standard for Objective-C or Objective-C++.
The authoritative manual on traditional Objective-C (1.0) is
"Object-Oriented Programming and the Objective-C Language":
<http://www.gnustep.org/resources/documentation/ObjectivCBook.pdf> is
the original NeXTstep document.

 The Objective-C exception and synchronization syntax (that is, the
keywords '@try', '@throw', '@catch', '@finally' and '@synchronized') is
supported by GCC and is enabled with the option '-fobjc-exceptions'.
The syntax is briefly documented in this manual and in the Objective-C
2.0 manuals from Apple.

 The Objective-C 2.0 language extensions and features are automatically
enabled; they include properties (via the '@property', '@synthesize' and
'@dynamic keywords'), fast enumeration (not available in Objective-C++),
attributes for methods (such as 'deprecated', 'noreturn', 'sentinel',
'format'), the 'unused' attribute for method arguments, the '@package'
keyword for instance variables and the '@optional' and '@required'
keywords in protocols.  You can disable all these Objective-C 2.0
language extensions with the option '-fobjc-std=objc1', which causes the
compiler to recognize the same Objective-C language syntax recognized by
GCC 4.0, and to produce an error if one of the new features is used.

 GCC has currently no support for non-fragile instance variables.

 The authoritative manual on Objective-C 2.0 is available from Apple:
   *
     <https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html>

 For more information concerning the history of Objective-C that is
available online, see <http://gcc.gnu.org/readings.html>

2.4 Go Language
---------------

As of the GCC 4.7.1 release, GCC supports the Go 1 language standard,
described at <https://golang.org/doc/go1>.

2.5 HSA Intermediate Language (HSAIL)
-------------------------------------

GCC can compile the binary representation (BRIG) of the HSAIL text
format as described in HSA Programmer's Reference Manual version 1.0.1.
This capability is typically utilized to implement the HSA runtime API's
HSAIL finalization extension for a gcc supported processor.  HSA
standards are freely available at
<http://www.hsafoundation.com/standards/>.

2.6 D language
--------------

GCC supports the D 2.0 programming language.  The D language itself is
currently defined by its reference implementation and supporting
language specification, described at <https://dlang.org/spec/spec.html>.

2.7 References for Other Languages
----------------------------------

*Note GNAT Reference Manual: (gnat_rm)Top, for information on standard
conformance and compatibility of the Ada compiler.

 *Note Standards: (gfortran)Standards, for details of standards
supported by GNU Fortran.

==============================================================================
File: gcc.info,  Node: |Invoking_GCC|,  Next: |C_Implementation|,  Prev: |Standards|,  Up: |Top|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Invoking_GCC*

3 GCC Command Options
=====================

When you invoke GCC, it normally does preprocessing, compilation,
assembly and linking.  The "overall options" allow you to stop this
process at an intermediate stage.  For example, the '-c' option says not
to run the linker.  Then the output consists of object files output by
the assembler.  *Note Options Controlling the Kind of Output: Overall
Options.

 Other options are passed on to one or more stages of processing.  Some
options control the preprocessor and others the compiler itself.  Yet
other options control the assembler and linker; most of these are not
documented here, since you rarely need to use any of them.

 Most of the command-line options that you can use with GCC are useful
for C programs; when an option is only useful with another language
(usually C++), the explanation says so explicitly.  If the description
for a particular option does not mention a source language, you can use
that option with all supported languages.

 The usual way to run GCC is to run the executable called 'gcc', or
'MACHINE-gcc' when cross-compiling, or 'MACHINE-gcc-VERSION' to run a
specific version of GCC. When you compile C++ programs, you should
invoke GCC as 'g++' instead.  *Note Compiling C++ Programs: Invoking
G++, for information about the differences in behavior between 'gcc' and
'g++' when compiling C++ programs.

 The 'gcc' program accepts options and file names as operands.  Many
options have multi-letter names; therefore multiple single-letter
options may _not_ be grouped: '-dv' is very different from '-d -v'.

 You can mix options and other arguments.  For the most part, the order
you use doesn't matter.  Order does matter when you use several options
of the same kind; for example, if you specify '-L' more than once, the
directories are searched in the order specified.  Also, the placement of
the '-l' option is significant.

 Many options have long names starting with '-f' or with '-W'--for
example, '-fmove-loop-invariants', '-Wformat' and so on.  Most of these
have both positive and negative forms; the negative form of '-ffoo' is
'-fno-foo'.  This manual documents only one of these two forms,
whichever one is not the default.

 Some options take one or more arguments typically separated either by a
space or by the equals sign ('=') from the option name.  Unless
documented otherwise, an argument can be either numeric or a string.
Numeric arguments must typically be small unsigned decimal or
hexadecimal integers.  Hexadecimal arguments must begin with the '0x'
prefix.  Arguments to options that specify a size threshold of some sort
may be arbitrarily large decimal or hexadecimal integers followed by a
byte size suffix designating a multiple of bytes such as 'kB' and 'KiB'
for kilobyte and kibibyte, respectively, 'MB' and 'MiB' for megabyte and
mebibyte, 'GB' and 'GiB' for gigabyte and gigibyte, and so on.  Such
arguments are designated by BYTE-SIZE in the following text.  Refer to
the NIST, IEC, and other relevant national and international standards
for the full listing and explanation of the binary and decimal byte size
prefixes.

 *Note Option Index::, for an index to GCC's options.

MENU

* |Option_Summary|::      Brief list of all options, without explanations.
* |Overall_Options|::     Controlling the kind of output:
                        an executable, object files, assembler files,
                        or preprocessed source.
* |Invoking_G++|::        Compiling C++ programs.
* |C_Dialect_Options|::   Controlling the variant of C language compiled.
* |C++_Dialect_Options|:: Variations on C++.
* |Objective_C_and_Objective_C++_Dialect_Options|:: Variations on Objective-C
                        and Objective-C++.
* |Diagnostic_Message_Formatting_Options|:: Controlling how diagnostics should
                        be formatted.
* |Warning_Options|::     How picky should the compiler be?
* |Debugging_Options|::   Producing debuggable code.
* |Optimize_Options|::    How much optimization?
* |Instrumentation_Options|:: Enabling profiling and extra run-time error checking.
* |Preprocessor_Options|:: Controlling header files and macro definitions.
                         Also, getting dependency information for Make.
* |Assembler_Options|::   Passing options to the assembler.
* |Link_Options|::        Specifying libraries and so on.
* |Directory_Options|::   Where to find header files and libraries.
                        Where to find the compiler executable files.
* |Code_Gen_Options|::    Specifying conventions for function calls, data layout
                        and register usage.
* |Developer_Options|::   Printing GCC configuration info, statistics, and
                        debugging dumps.
* |Submodel_Options|::    Target-specific options, such as compiling for a
                        specific processor variant.
* |Spec_Files|::          How to pass switches to sub-processes.
* |Environment_Variables|:: Env vars that affect GCC.
* |Precompiled_Headers|:: Compiling a header once, and using it many times.

==============================================================================
File: gcc.info,  Node: |Option_Summary|,  Next: |Overall_Options|,  Up: |Invoking_GCC|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Option_Summary*

3.1 Option Summary
------------------

Here is a summary of all the options, grouped by type.  Explanations are
in the following sections.

_Overall Options_
     *Note Options Controlling the Kind of Output: Overall Options.
          -c  -S  -E  -o FILE  -x LANGUAGE
          -v  -###  --help[=CLASS[,...]]  --target-help  --version
          -pass-exit-codes  -pipe  -specs=FILE  -wrapper
          @FILE  -ffile-prefix-map=OLD=NEW
          -fplugin=FILE  -fplugin-arg-NAME=ARG
          -fdump-ada-spec[-slim]  -fada-spec-parent=UNIT  -fdump-go-spec=FILE

_C Language Options_
     *Note Options Controlling C Dialect: C Dialect Options.
          -ansi  -std=STANDARD  -fgnu89-inline
          -fpermitted-flt-eval-methods=STANDARD
          -aux-info FILENAME  -fallow-parameterless-variadic-functions
          -fno-asm  -fno-builtin  -fno-builtin-FUNCTION  -fgimple
          -fhosted  -ffreestanding
          -fopenacc  -fopenacc-dim=GEOM
          -fopenmp  -fopenmp-simd
          -fms-extensions  -fplan9-extensions  -fsso-struct=ENDIANNESS
          -fallow-single-precision  -fcond-mismatch  -flax-vector-conversions
          -fsigned-bitfields  -fsigned-char
          -funsigned-bitfields  -funsigned-char

_C++ Language Options_
     *Note Options Controlling C++ Dialect: C++ Dialect Options.
          -fabi-version=N  -fno-access-control
          -faligned-new=N  -fargs-in-order=N  -fchar8_t  -fcheck-new
          -fconstexpr-depth=N  -fconstexpr-loop-limit=N
          -fconstexpr-ops-limit=N -fno-elide-constructors
          -fno-enforce-eh-specs
          -fno-gnu-keywords
          -fno-implicit-templates
          -fno-implicit-inline-templates
          -fno-implement-inlines  -fms-extensions
          -fnew-inheriting-ctors
          -fnew-ttp-matching
          -fno-nonansi-builtins  -fnothrow-opt  -fno-operator-names
          -fno-optional-diags  -fpermissive
          -fno-pretty-templates
          -frepo  -fno-rtti  -fsized-deallocation
          -ftemplate-backtrace-limit=N
          -ftemplate-depth=N
          -fno-threadsafe-statics  -fuse-cxa-atexit
          -fno-weak  -nostdinc++
          -fvisibility-inlines-hidden
          -fvisibility-ms-compat
          -fext-numeric-literals
          -Wabi=N  -Wabi-tag  -Wconversion-null  -Wctor-dtor-privacy
          -Wdelete-non-virtual-dtor  -Wdeprecated-copy  -Wdeprecated-copy-dtor
          -Wliteral-suffix
          -Wmultiple-inheritance  -Wno-init-list-lifetime
          -Wnamespaces  -Wnarrowing
          -Wpessimizing-move  -Wredundant-move
          -Wnoexcept  -Wnoexcept-type  -Wclass-memaccess
          -Wnon-virtual-dtor  -Wreorder  -Wregister
          -Weffc++  -Wstrict-null-sentinel  -Wtemplates
          -Wno-non-template-friend  -Wold-style-cast
          -Woverloaded-virtual  -Wno-pmf-conversions
          -Wno-class-conversion  -Wno-terminate
          -Wsign-promo  -Wvirtual-inheritance

_Objective-C and Objective-C++ Language Options_
     *Note Options Controlling Objective-C and Objective-C++ Dialects:
     Objective-C and Objective-C++ Dialect Options.
          -fconstant-string-class=CLASS-NAME
          -fgnu-runtime  -fnext-runtime
          -fno-nil-receivers
          -fobjc-abi-version=N
          -fobjc-call-cxx-cdtors
          -fobjc-direct-dispatch
          -fobjc-exceptions
          -fobjc-gc
          -fobjc-nilcheck
          -fobjc-std=objc1
          -fno-local-ivars
          -fivar-visibility=[public|protected|private|package]
          -freplace-objc-classes
          -fzero-link
          -gen-decls
          -Wassign-intercept
          -Wno-protocol  -Wselector
          -Wstrict-selector-match
          -Wundeclared-selector

_Diagnostic Message Formatting Options_
     *Note Options to Control Diagnostic Messages Formatting: Diagnostic
     Message Formatting Options.
          -fmessage-length=N
          -fdiagnostics-show-location=[once|every-line]
          -fdiagnostics-color=[auto|never|always]
          -fdiagnostics-format=[text|json]
          -fno-diagnostics-show-option  -fno-diagnostics-show-caret
          -fno-diagnostics-show-labels  -fno-diagnostics-show-line-numbers
          -fdiagnostics-minimum-margin-width=WIDTH
          -fdiagnostics-parseable-fixits  -fdiagnostics-generate-patch
          -fdiagnostics-show-template-tree  -fno-elide-type
          -fno-show-column

_Warning Options_
     *Note Options to Request or Suppress Warnings: Warning Options.
          -fsyntax-only  -fmax-errors=N  -Wpedantic
          -pedantic-errors
          -w  -Wextra  -Wall  -Waddress  -Waddress-of-packed-member
          -Waggregate-return  -Waligned-new
          -Walloc-zero  -Walloc-size-larger-than=BYTE-SIZE
          -Walloca  -Walloca-larger-than=BYTE-SIZE
          -Wno-aggressive-loop-optimizations  -Warray-bounds  -Warray-bounds=N
          -Wno-attributes  -Wattribute-alias=N
          -Wbool-compare  -Wbool-operation
          -Wno-builtin-declaration-mismatch
          -Wno-builtin-macro-redefined  -Wc90-c99-compat  -Wc99-c11-compat
          -Wc++-compat  -Wc++11-compat  -Wc++14-compat  -Wc++17-compat
          -Wcast-align  -Wcast-align=strict  -Wcast-function-type  -Wcast-qual
          -Wchar-subscripts  -Wcatch-value  -Wcatch-value=N
          -Wclobbered  -Wcomment  -Wconditionally-supported
          -Wconversion  -Wcoverage-mismatch  -Wno-cpp  -Wdangling-else  -Wdate-time
          -Wdelete-incomplete
          -Wno-attribute-warning
          -Wno-deprecated  -Wno-deprecated-declarations  -Wno-designated-init
          -Wdisabled-optimization
          -Wno-discarded-qualifiers  -Wno-discarded-array-qualifiers
          -Wno-div-by-zero  -Wdouble-promotion
          -Wduplicated-branches  -Wduplicated-cond
          -Wempty-body  -Wenum-compare  -Wno-endif-labels  -Wexpansion-to-defined
          -Werror  -Werror=*  -Wextra-semi  -Wfatal-errors
          -Wfloat-equal  -Wformat  -Wformat=2
          -Wno-format-contains-nul  -Wno-format-extra-args
          -Wformat-nonliteral  -Wformat-overflow=N
          -Wformat-security  -Wformat-signedness  -Wformat-truncation=N
          -Wformat-y2k  -Wframe-address
          -Wframe-larger-than=BYTE-SIZE  -Wno-free-nonheap-object
          -Wjump-misses-init
          -Whsa  -Wif-not-aligned
          -Wignored-qualifiers  -Wignored-attributes  -Wincompatible-pointer-types
          -Wimplicit  -Wimplicit-fallthrough  -Wimplicit-fallthrough=N
          -Wimplicit-function-declaration  -Wimplicit-int
          -Winit-self  -Winline  -Wno-int-conversion  -Wint-in-bool-context
          -Wno-int-to-pointer-cast  -Winvalid-memory-model  -Wno-invalid-offsetof
          -Winvalid-pch  -Wlarger-than=BYTE-SIZE
          -Wlogical-op  -Wlogical-not-parentheses  -Wlong-long
          -Wmain  -Wmaybe-uninitialized  -Wmemset-elt-size  -Wmemset-transposed-args
          -Wmisleading-indentation  -Wmissing-attributes  -Wmissing-braces
          -Wmissing-field-initializers  -Wmissing-format-attribute
          -Wmissing-include-dirs  -Wmissing-noreturn  -Wmissing-profile
          -Wno-multichar  -Wmultistatement-macros  -Wnonnull  -Wnonnull-compare
          -Wnormalized=[none|id|nfc|nfkc]
          -Wnull-dereference  -Wodr  -Wno-overflow  -Wopenmp-simd
          -Woverride-init-side-effects  -Woverlength-strings
          -Wpacked  -Wpacked-bitfield-compat -Wpacked-not-aligned  -Wpadded
          -Wparentheses  -Wno-pedantic-ms-format
          -Wplacement-new  -Wplacement-new=N
          -Wpointer-arith  -Wpointer-compare  -Wno-pointer-to-int-cast
          -Wno-pragmas  -Wno-prio-ctor-dtor  -Wredundant-decls
          -Wrestrict  -Wno-return-local-addr
          -Wreturn-type  -Wsequence-point  -Wshadow  -Wno-shadow-ivar
          -Wshadow=global,  -Wshadow=local,  -Wshadow=compatible-local
          -Wshift-overflow  -Wshift-overflow=N
          -Wshift-count-negative  -Wshift-count-overflow  -Wshift-negative-value
          -Wsign-compare  -Wsign-conversion  -Wfloat-conversion
          -Wno-scalar-storage-order  -Wsizeof-pointer-div
          -Wsizeof-pointer-memaccess  -Wsizeof-array-argument
          -Wstack-protector  -Wstack-usage=BYTE-SIZE  -Wstrict-aliasing
          -Wstrict-aliasing=n  -Wstrict-overflow  -Wstrict-overflow=N
          -Wstringop-overflow=N  -Wstringop-truncation  -Wsubobject-linkage
          -Wsuggest-attribute=[pure|const|noreturn|format|malloc]
          -Wsuggest-final-types   -Wsuggest-final-methods  -Wsuggest-override
          -Wswitch  -Wswitch-bool  -Wswitch-default  -Wswitch-enum
          -Wswitch-unreachable  -Wsync-nand
          -Wsystem-headers  -Wtautological-compare  -Wtrampolines  -Wtrigraphs
          -Wtype-limits  -Wundef
          -Wuninitialized  -Wunknown-pragmas
          -Wunsuffixed-float-constants  -Wunused  -Wunused-function
          -Wunused-label  -Wunused-local-typedefs  -Wunused-macros
          -Wunused-parameter  -Wno-unused-result
          -Wunused-value  -Wunused-variable
          -Wunused-const-variable  -Wunused-const-variable=N
          -Wunused-but-set-parameter  -Wunused-but-set-variable
          -Wuseless-cast  -Wvariadic-macros  -Wvector-operation-performance
          -Wvla  -Wvla-larger-than=BYTE-SIZE  -Wvolatile-register-var
          -Wwrite-strings
          -Wzero-as-null-pointer-constant

_C and Objective-C-only Warning Options_
          -Wbad-function-cast  -Wmissing-declarations
          -Wmissing-parameter-type  -Wmissing-prototypes  -Wnested-externs
          -Wold-style-declaration  -Wold-style-definition
          -Wstrict-prototypes  -Wtraditional  -Wtraditional-conversion
          -Wdeclaration-after-statement  -Wpointer-sign

_Debugging Options_
     *Note Options for Debugging Your Program: Debugging Options.
          -g  -gLEVEL  -gdwarf  -gdwarf-VERSION
          -ggdb  -grecord-gcc-switches  -gno-record-gcc-switches
          -gstabs  -gstabs+  -gstrict-dwarf  -gno-strict-dwarf
          -gas-loc-support  -gno-as-loc-support
          -gas-locview-support  -gno-as-locview-support
          -gcolumn-info  -gno-column-info
          -gstatement-frontiers  -gno-statement-frontiers
          -gvariable-location-views  -gno-variable-location-views
          -ginternal-reset-location-views  -gno-internal-reset-location-views
          -ginline-points  -gno-inline-points
          -gvms  -gxcoff  -gxcoff+  -gz[=TYPE]
          -gsplit-dwarf  -gdescribe-dies  -gno-describe-dies
          -fdebug-prefix-map=OLD=NEW  -fdebug-types-section
          -fno-eliminate-unused-debug-types
          -femit-struct-debug-baseonly  -femit-struct-debug-reduced
          -femit-struct-debug-detailed[=SPEC-LIST]
          -feliminate-unused-debug-symbols  -femit-class-debug-always
          -fno-merge-debug-strings  -fno-dwarf2-cfi-asm
          -fvar-tracking  -fvar-tracking-assignments

_Optimization Options_
     *Note Options that Control Optimization: Optimize Options.
          -faggressive-loop-optimizations
          -falign-functions[=N[:M:[N2[:M2]]]]
          -falign-jumps[=N[:M:[N2[:M2]]]]
          -falign-labels[=N[:M:[N2[:M2]]]]
          -falign-loops[=N[:M:[N2[:M2]]]]
          -fassociative-math  -fauto-profile  -fauto-profile[=PATH]
          -fauto-inc-dec  -fbranch-probabilities
          -fbranch-target-load-optimize  -fbranch-target-load-optimize2
          -fbtr-bb-exclusive  -fcaller-saves
          -fcombine-stack-adjustments  -fconserve-stack
          -fcompare-elim  -fcprop-registers  -fcrossjumping
          -fcse-follow-jumps  -fcse-skip-blocks  -fcx-fortran-rules
          -fcx-limited-range
          -fdata-sections  -fdce  -fdelayed-branch
          -fdelete-null-pointer-checks  -fdevirtualize  -fdevirtualize-speculatively
          -fdevirtualize-at-ltrans  -fdse
          -fearly-inlining  -fipa-sra  -fexpensive-optimizations  -ffat-lto-objects
          -ffast-math  -ffinite-math-only  -ffloat-store  -fexcess-precision=STYLE
          -fforward-propagate  -ffp-contract=STYLE  -ffunction-sections
          -fgcse  -fgcse-after-reload  -fgcse-las  -fgcse-lm  -fgraphite-identity
          -fgcse-sm  -fhoist-adjacent-loads  -fif-conversion
          -fif-conversion2  -findirect-inlining
          -finline-functions  -finline-functions-called-once  -finline-limit=N
          -finline-small-functions  -fipa-cp  -fipa-cp-clone
          -fipa-bit-cp  -fipa-vrp  -fipa-pta  -fipa-profile  -fipa-pure-const
          -fipa-reference  -fipa-reference-addressable
          -fipa-stack-alignment  -fipa-icf  -fira-algorithm=ALGORITHM
          -flive-patching=LEVEL
          -fira-region=REGION  -fira-hoist-pressure
          -fira-loop-pressure  -fno-ira-share-save-slots
          -fno-ira-share-spill-slots
          -fisolate-erroneous-paths-dereference  -fisolate-erroneous-paths-attribute
          -fivopts  -fkeep-inline-functions  -fkeep-static-functions
          -fkeep-static-consts  -flimit-function-alignment  -flive-range-shrinkage
          -floop-block  -floop-interchange  -floop-strip-mine
          -floop-unroll-and-jam  -floop-nest-optimize
          -floop-parallelize-all  -flra-remat  -flto  -flto-compression-level
          -flto-partition=ALG  -fmerge-all-constants
          -fmerge-constants  -fmodulo-sched  -fmodulo-sched-allow-regmoves
          -fmove-loop-invariants  -fno-branch-count-reg
          -fno-defer-pop  -fno-fp-int-builtin-inexact  -fno-function-cse
          -fno-guess-branch-probability  -fno-inline  -fno-math-errno  -fno-peephole
          -fno-peephole2  -fno-printf-return-value  -fno-sched-interblock
          -fno-sched-spec  -fno-signed-zeros
          -fno-toplevel-reorder  -fno-trapping-math  -fno-zero-initialized-in-bss
          -fomit-frame-pointer  -foptimize-sibling-calls
          -fpartial-inlining  -fpeel-loops  -fpredictive-commoning
          -fprefetch-loop-arrays
          -fprofile-correction
          -fprofile-use  -fprofile-use=PATH  -fprofile-values
          -fprofile-reorder-functions
          -freciprocal-math  -free  -frename-registers  -freorder-blocks
          -freorder-blocks-algorithm=ALGORITHM
          -freorder-blocks-and-partition  -freorder-functions
          -frerun-cse-after-loop  -freschedule-modulo-scheduled-loops
          -frounding-math  -fsave-optimization-record
          -fsched2-use-superblocks  -fsched-pressure
          -fsched-spec-load  -fsched-spec-load-dangerous
          -fsched-stalled-insns-dep[=N]  -fsched-stalled-insns[=N]
          -fsched-group-heuristic  -fsched-critical-path-heuristic
          -fsched-spec-insn-heuristic  -fsched-rank-heuristic
          -fsched-last-insn-heuristic  -fsched-dep-count-heuristic
          -fschedule-fusion
          -fschedule-insns  -fschedule-insns2  -fsection-anchors
          -fselective-scheduling  -fselective-scheduling2
          -fsel-sched-pipelining  -fsel-sched-pipelining-outer-loops
          -fsemantic-interposition  -fshrink-wrap  -fshrink-wrap-separate
          -fsignaling-nans
          -fsingle-precision-constant  -fsplit-ivs-in-unroller  -fsplit-loops
          -fsplit-paths
          -fsplit-wide-types  -fssa-backprop  -fssa-phiopt
          -fstdarg-opt  -fstore-merging  -fstrict-aliasing
          -fthread-jumps  -ftracer  -ftree-bit-ccp
          -ftree-builtin-call-dce  -ftree-ccp  -ftree-ch
          -ftree-coalesce-vars  -ftree-copy-prop  -ftree-dce  -ftree-dominator-opts
          -ftree-dse  -ftree-forwprop  -ftree-fre  -fcode-hoisting
          -ftree-loop-if-convert  -ftree-loop-im
          -ftree-phiprop  -ftree-loop-distribution  -ftree-loop-distribute-patterns
          -ftree-loop-ivcanon  -ftree-loop-linear  -ftree-loop-optimize
          -ftree-loop-vectorize
          -ftree-parallelize-loops=N  -ftree-pre  -ftree-partial-pre  -ftree-pta
          -ftree-reassoc  -ftree-scev-cprop  -ftree-sink  -ftree-slsr  -ftree-sra
          -ftree-switch-conversion  -ftree-tail-merge
          -ftree-ter  -ftree-vectorize  -ftree-vrp  -funconstrained-commons
          -funit-at-a-time  -funroll-all-loops  -funroll-loops
          -funsafe-math-optimizations  -funswitch-loops
          -fipa-ra  -fvariable-expansion-in-unroller  -fvect-cost-model  -fvpt
          -fweb  -fwhole-program  -fwpa  -fuse-linker-plugin
          --param NAME=VALUE
          -O  -O0  -O1  -O2  -O3  -Os  -Ofast  -Og

_Program Instrumentation Options_
     *Note Program Instrumentation Options: Instrumentation Options.
          -p  -pg  -fprofile-arcs  --coverage  -ftest-coverage
          -fprofile-abs-path
          -fprofile-dir=PATH  -fprofile-generate  -fprofile-generate=PATH
          -fprofile-update=METHOD  -fprofile-filter-files=REGEX
          -fprofile-exclude-files=REGEX
          -fsanitize=STYLE  -fsanitize-recover  -fsanitize-recover=STYLE
          -fasan-shadow-offset=NUMBER  -fsanitize-sections=S1,S2,...
          -fsanitize-undefined-trap-on-error  -fbounds-check
          -fcf-protection=[full|branch|return|none]
          -fstack-protector  -fstack-protector-all  -fstack-protector-strong
          -fstack-protector-explicit  -fstack-check
          -fstack-limit-register=REG  -fstack-limit-symbol=SYM
          -fno-stack-limit  -fsplit-stack
          -fvtable-verify=[std|preinit|none]
          -fvtv-counts  -fvtv-debug
          -finstrument-functions
          -finstrument-functions-exclude-function-list=SYM,SYM,...
          -finstrument-functions-exclude-file-list=FILE,FILE,...

_Preprocessor Options_
     *Note Options Controlling the Preprocessor: Preprocessor Options.
          -AQUESTION=ANSWER
          -A-QUESTION[=ANSWER]
          -C  -CC  -DMACRO[=DEFN]
          -dD  -dI  -dM  -dN  -dU
          -fdebug-cpp  -fdirectives-only  -fdollars-in-identifiers
          -fexec-charset=CHARSET  -fextended-identifiers
          -finput-charset=CHARSET  -fmacro-prefix-map=OLD=NEW
          -fno-canonical-system-headers  -fpch-deps  -fpch-preprocess
          -fpreprocessed  -ftabstop=WIDTH  -ftrack-macro-expansion
          -fwide-exec-charset=CHARSET  -fworking-directory
          -H  -imacros FILE  -include FILE
          -M  -MD  -MF  -MG  -MM  -MMD  -MP  -MQ  -MT
          -no-integrated-cpp  -P  -pthread  -remap
          -traditional  -traditional-cpp  -trigraphs
          -UMACRO  -undef
          -Wp,OPTION  -Xpreprocessor OPTION

_Assembler Options_
     *Note Passing Options to the Assembler: Assembler Options.
          -Wa,OPTION  -Xassembler OPTION

_Linker Options_
     *Note Options for Linking: Link Options.
          OBJECT-FILE-NAME  -fuse-ld=LINKER  -lLIBRARY
          -nostartfiles  -nodefaultlibs  -nolibc  -nostdlib
          -e ENTRY  --entry=ENTRY
          -pie  -pthread  -r  -rdynamic
          -s  -static  -static-pie  -static-libgcc  -static-libstdc++
          -static-libasan  -static-libtsan  -static-liblsan  -static-libubsan
          -shared  -shared-libgcc  -symbolic
          -T SCRIPT  -Wl,OPTION  -Xlinker OPTION
          -u SYMBOL  -z KEYWORD

_Directory Options_
     *Note Options for Directory Search: Directory Options.
          -BPREFIX  -IDIR  -I-
          -idirafter DIR
          -imacros FILE  -imultilib DIR
          -iplugindir=DIR  -iprefix FILE
          -iquote DIR  -isysroot DIR  -isystem DIR
          -iwithprefix DIR  -iwithprefixbefore DIR
          -LDIR  -no-canonical-prefixes  --no-sysroot-suffix
          -nostdinc  -nostdinc++  --sysroot=DIR

_Code Generation Options_
     *Note Options for Code Generation Conventions: Code Gen Options.
          -fcall-saved-REG  -fcall-used-REG
          -ffixed-REG  -fexceptions
          -fnon-call-exceptions  -fdelete-dead-exceptions  -funwind-tables
          -fasynchronous-unwind-tables
          -fno-gnu-unique
          -finhibit-size-directive  -fno-common  -fno-ident
          -fpcc-struct-return  -fpic  -fPIC  -fpie  -fPIE  -fno-plt
          -fno-jump-tables
          -frecord-gcc-switches
          -freg-struct-return  -fshort-enums  -fshort-wchar
          -fverbose-asm  -fpack-struct[=N]
          -fleading-underscore  -ftls-model=MODEL
          -fstack-reuse=REUSE_LEVEL
          -ftrampolines  -ftrapv  -fwrapv
          -fvisibility=[default|internal|hidden|protected]
          -fstrict-volatile-bitfields  -fsync-libcalls

_Developer Options_
     *Note GCC Developer Options: Developer Options.
          -dLETTERS  -dumpspecs  -dumpmachine  -dumpversion
          -dumpfullversion  -fchecking  -fchecking=N  -fdbg-cnt-list
          -fdbg-cnt=COUNTER-VALUE-LIST
          -fdisable-ipa-PASS_NAME
          -fdisable-rtl-PASS_NAME
          -fdisable-rtl-PASS-NAME=RANGE-LIST
          -fdisable-tree-PASS_NAME
          -fdisable-tree-PASS-NAME=RANGE-LIST
          -fdump-debug  -fdump-earlydebug
          -fdump-noaddr  -fdump-unnumbered  -fdump-unnumbered-links
          -fdump-final-insns[=FILE]
          -fdump-ipa-all  -fdump-ipa-cgraph  -fdump-ipa-inline
          -fdump-lang-all
          -fdump-lang-SWITCH
          -fdump-lang-SWITCH-OPTIONS
          -fdump-lang-SWITCH-OPTIONS=FILENAME
          -fdump-passes
          -fdump-rtl-PASS  -fdump-rtl-PASS=FILENAME
          -fdump-statistics
          -fdump-tree-all
          -fdump-tree-SWITCH
          -fdump-tree-SWITCH-OPTIONS
          -fdump-tree-SWITCH-OPTIONS=FILENAME
          -fcompare-debug[=OPTS]  -fcompare-debug-second
          -fenable-KIND-PASS
          -fenable-KIND-PASS=RANGE-LIST
          -fira-verbose=N
          -flto-report  -flto-report-wpa  -fmem-report-wpa
          -fmem-report  -fpre-ipa-mem-report  -fpost-ipa-mem-report
          -fopt-info  -fopt-info-OPTIONS[=FILE]
          -fprofile-report
          -frandom-seed=STRING  -fsched-verbose=N
          -fsel-sched-verbose  -fsel-sched-dump-cfg  -fsel-sched-pipelining-verbose
          -fstats  -fstack-usage  -ftime-report  -ftime-report-details
          -fvar-tracking-assignments-toggle  -gtoggle
          -print-file-name=LIBRARY  -print-libgcc-file-name
          -print-multi-directory  -print-multi-lib  -print-multi-os-directory
          -print-prog-name=PROGRAM  -print-search-dirs  -Q
          -print-sysroot  -print-sysroot-headers-suffix
          -save-temps  -save-temps=cwd  -save-temps=obj  -time[=FILE]

_Machine-Dependent Options_
     *Note Machine-Dependent Options: Submodel Options.

     _AArch64 Options_
          -mabi=NAME  -mbig-endian  -mlittle-endian
          -mgeneral-regs-only
          -mcmodel=tiny  -mcmodel=small  -mcmodel=large
          -mstrict-align  -mno-strict-align
          -momit-leaf-frame-pointer
          -mtls-dialect=desc  -mtls-dialect=traditional
          -mtls-size=SIZE
          -mfix-cortex-a53-835769  -mfix-cortex-a53-843419
          -mlow-precision-recip-sqrt  -mlow-precision-sqrt  -mlow-precision-div
          -mpc-relative-literal-loads
          -msign-return-address=SCOPE
          -mbranch-protection=NONE|STANDARD|PAC-RET[+LEAF]|BTI
          -march=NAME  -mcpu=NAME  -mtune=NAME
          -moverride=STRING  -mverbose-cost-dump
          -mstack-protector-guard=GUARD -mstack-protector-guard-reg=SYSREG
          -mstack-protector-guard-offset=OFFSET -mtrack-speculation

     _Adapteva Epiphany Options_
          -mhalf-reg-file  -mprefer-short-insn-regs
          -mbranch-cost=NUM  -mcmove  -mnops=NUM  -msoft-cmpsf
          -msplit-lohi  -mpost-inc  -mpost-modify  -mstack-offset=NUM
          -mround-nearest  -mlong-calls  -mshort-calls  -msmall16
          -mfp-mode=MODE  -mvect-double  -max-vect-align=NUM
          -msplit-vecmove-early  -m1reg-REG

     _AMD GCN Options_
          -march=GPU -mtune=GPU -mstack-size=BYTES

     _ARC Options_
          -mbarrel-shifter  -mjli-always
          -mcpu=CPU  -mA6  -mARC600  -mA7  -mARC700
          -mdpfp  -mdpfp-compact  -mdpfp-fast  -mno-dpfp-lrsr
          -mea  -mno-mpy  -mmul32x16  -mmul64  -matomic
          -mnorm  -mspfp  -mspfp-compact  -mspfp-fast  -msimd  -msoft-float  -mswap
          -mcrc  -mdsp-packa  -mdvbf  -mlock  -mmac-d16  -mmac-24  -mrtsc  -mswape
          -mtelephony  -mxy  -misize  -mannotate-align  -marclinux  -marclinux_prof
          -mlong-calls  -mmedium-calls  -msdata  -mirq-ctrl-saved
          -mrgf-banked-regs  -mlpc-width=WIDTH  -G NUM
          -mvolatile-cache  -mtp-regno=REGNO
          -malign-call  -mauto-modify-reg  -mbbit-peephole  -mno-brcc
          -mcase-vector-pcrel  -mcompact-casesi  -mno-cond-exec  -mearly-cbranchsi
          -mexpand-adddi  -mindexed-loads  -mlra  -mlra-priority-none
          -mlra-priority-compact mlra-priority-noncompact  -mmillicode
          -mmixed-code  -mq-class  -mRcq  -mRcw  -msize-level=LEVEL
          -mtune=CPU  -mmultcost=NUM  -mcode-density-frame
          -munalign-prob-threshold=PROBABILITY  -mmpy-option=MULTO
          -mdiv-rem  -mcode-density  -mll64  -mfpu=FPU  -mrf16  -mbranch-index

     _ARM Options_
          -mapcs-frame  -mno-apcs-frame
          -mabi=NAME
          -mapcs-stack-check  -mno-apcs-stack-check
          -mapcs-reentrant  -mno-apcs-reentrant
          -mgeneral-regs-only
          -msched-prolog  -mno-sched-prolog
          -mlittle-endian  -mbig-endian
          -mbe8  -mbe32
          -mfloat-abi=NAME
          -mfp16-format=NAME
          -mthumb-interwork  -mno-thumb-interwork
          -mcpu=NAME  -march=NAME  -mfpu=NAME
          -mtune=NAME  -mprint-tune-info
          -mstructure-size-boundary=N
          -mabort-on-noreturn
          -mlong-calls  -mno-long-calls
          -msingle-pic-base  -mno-single-pic-base
          -mpic-register=REG
          -mnop-fun-dllimport
          -mpoke-function-name
          -mthumb  -marm  -mflip-thumb
          -mtpcs-frame  -mtpcs-leaf-frame
          -mcaller-super-interworking  -mcallee-super-interworking
          -mtp=NAME  -mtls-dialect=DIALECT
          -mword-relocations
          -mfix-cortex-m3-ldrd
          -munaligned-access
          -mneon-for-64bits
          -mslow-flash-data
          -masm-syntax-unified
          -mrestrict-it
          -mverbose-cost-dump
          -mpure-code
          -mcmse

     _AVR Options_
          -mmcu=MCU  -mabsdata  -maccumulate-args
          -mbranch-cost=COST
          -mcall-prologues  -mgas-isr-prologues  -mint8
          -mn_flash=SIZE  -mno-interrupts
          -mmain-is-OS_task  -mrelax  -mrmw  -mstrict-X  -mtiny-stack
          -mfract-convert-truncate
          -mshort-calls  -nodevicelib
          -Waddr-space-convert  -Wmisspelled-isr

     _Blackfin Options_
          -mcpu=CPU[-SIREVISION]
          -msim  -momit-leaf-frame-pointer  -mno-omit-leaf-frame-pointer
          -mspecld-anomaly  -mno-specld-anomaly  -mcsync-anomaly  -mno-csync-anomaly
          -mlow-64k  -mno-low64k  -mstack-check-l1  -mid-shared-library
          -mno-id-shared-library  -mshared-library-id=N
          -mleaf-id-shared-library  -mno-leaf-id-shared-library
          -msep-data  -mno-sep-data  -mlong-calls  -mno-long-calls
          -mfast-fp  -minline-plt  -mmulticore  -mcorea  -mcoreb  -msdram
          -micplb

     _C6X Options_
          -mbig-endian  -mlittle-endian  -march=CPU
          -msim  -msdata=SDATA-TYPE

     _CRIS Options_
          -mcpu=CPU  -march=CPU  -mtune=CPU
          -mmax-stack-frame=N  -melinux-stacksize=N
          -metrax4  -metrax100  -mpdebug  -mcc-init  -mno-side-effects
          -mstack-align  -mdata-align  -mconst-align
          -m32-bit  -m16-bit  -m8-bit  -mno-prologue-epilogue  -mno-gotplt
          -melf  -maout  -melinux  -mlinux  -sim  -sim2
          -mmul-bug-workaround  -mno-mul-bug-workaround

     _CR16 Options_
          -mmac
          -mcr16cplus  -mcr16c
          -msim  -mint32  -mbit-ops
          -mdata-model=MODEL

     _C-SKY Options_
          -march=ARCH  -mcpu=CPU
          -mbig-endian  -EB  -mlittle-endian  -EL
          -mhard-float  -msoft-float  -mfpu=FPU  -mdouble-float  -mfdivdu
          -melrw  -mistack  -mmp  -mcp  -mcache  -msecurity  -mtrust
          -mdsp  -medsp  -mvdsp
          -mdiv  -msmart  -mhigh-registers  -manchor
          -mpushpop  -mmultiple-stld  -mconstpool  -mstack-size  -mccrt
          -mbranch-cost=N  -mcse-cc  -msched-prolog

     _Darwin Options_
          -all_load  -allowable_client  -arch  -arch_errors_fatal
          -arch_only  -bind_at_load  -bundle  -bundle_loader
          -client_name  -compatibility_version  -current_version
          -dead_strip
          -dependency-file  -dylib_file  -dylinker_install_name
          -dynamic  -dynamiclib  -exported_symbols_list
          -filelist  -flat_namespace  -force_cpusubtype_ALL
          -force_flat_namespace  -headerpad_max_install_names
          -iframework
          -image_base  -init  -install_name  -keep_private_externs
          -multi_module  -multiply_defined  -multiply_defined_unused
          -noall_load   -no_dead_strip_inits_and_terms
          -nofixprebinding  -nomultidefs  -noprebind  -noseglinkedit
          -pagezero_size  -prebind  -prebind_all_twolevel_modules
          -private_bundle  -read_only_relocs  -sectalign
          -sectobjectsymbols  -whyload  -seg1addr
          -sectcreate  -sectobjectsymbols  -sectorder
          -segaddr  -segs_read_only_addr  -segs_read_write_addr
          -seg_addr_table  -seg_addr_table_filename  -seglinkedit
          -segprot  -segs_read_only_addr  -segs_read_write_addr
          -single_module  -static  -sub_library  -sub_umbrella
          -twolevel_namespace  -umbrella  -undefined
          -unexported_symbols_list  -weak_reference_mismatches
          -whatsloaded  -F  -gused  -gfull  -mmacosx-version-min=VERSION
          -mkernel  -mone-byte-bool

     _DEC Alpha Options_
          -mno-fp-regs  -msoft-float
          -mieee  -mieee-with-inexact  -mieee-conformant
          -mfp-trap-mode=MODE  -mfp-rounding-mode=MODE
          -mtrap-precision=MODE  -mbuild-constants
          -mcpu=CPU-TYPE  -mtune=CPU-TYPE
          -mbwx  -mmax  -mfix  -mcix
          -mfloat-vax  -mfloat-ieee
          -mexplicit-relocs  -msmall-data  -mlarge-data
          -msmall-text  -mlarge-text
          -mmemory-latency=TIME

     _FR30 Options_
          -msmall-model  -mno-lsim

     _FT32 Options_
          -msim  -mlra  -mnodiv  -mft32b  -mcompress  -mnopm

     _FRV Options_
          -mgpr-32  -mgpr-64  -mfpr-32  -mfpr-64
          -mhard-float  -msoft-float
          -malloc-cc  -mfixed-cc  -mdword  -mno-dword
          -mdouble  -mno-double
          -mmedia  -mno-media  -mmuladd  -mno-muladd
          -mfdpic  -minline-plt  -mgprel-ro  -multilib-library-pic
          -mlinked-fp  -mlong-calls  -malign-labels
          -mlibrary-pic  -macc-4  -macc-8
          -mpack  -mno-pack  -mno-eflags  -mcond-move  -mno-cond-move
          -moptimize-membar  -mno-optimize-membar
          -mscc  -mno-scc  -mcond-exec  -mno-cond-exec
          -mvliw-branch  -mno-vliw-branch
          -mmulti-cond-exec  -mno-multi-cond-exec  -mnested-cond-exec
          -mno-nested-cond-exec  -mtomcat-stats
          -mTLS  -mtls
          -mcpu=CPU

     _GNU/Linux Options_
          -mglibc  -muclibc  -mmusl  -mbionic  -mandroid
          -tno-android-cc  -tno-android-ld

     _H8/300 Options_
          -mrelax  -mh  -ms  -mn  -mexr  -mno-exr  -mint32  -malign-300

     _HPPA Options_
          -march=ARCHITECTURE-TYPE
          -mcaller-copies  -mdisable-fpregs  -mdisable-indexing
          -mfast-indirect-calls  -mgas  -mgnu-ld   -mhp-ld
          -mfixed-range=REGISTER-RANGE
          -mjump-in-delay  -mlinker-opt  -mlong-calls
          -mlong-load-store  -mno-disable-fpregs
          -mno-disable-indexing  -mno-fast-indirect-calls  -mno-gas
          -mno-jump-in-delay  -mno-long-load-store
          -mno-portable-runtime  -mno-soft-float
          -mno-space-regs  -msoft-float  -mpa-risc-1-0
          -mpa-risc-1-1  -mpa-risc-2-0  -mportable-runtime
          -mschedule=CPU-TYPE  -mspace-regs  -msio  -mwsio
          -munix=UNIX-STD  -nolibdld  -static  -threads

     _IA-64 Options_
          -mbig-endian  -mlittle-endian  -mgnu-as  -mgnu-ld  -mno-pic
          -mvolatile-asm-stop  -mregister-names  -msdata  -mno-sdata
          -mconstant-gp  -mauto-pic  -mfused-madd
          -minline-float-divide-min-latency
          -minline-float-divide-max-throughput
          -mno-inline-float-divide
          -minline-int-divide-min-latency
          -minline-int-divide-max-throughput
          -mno-inline-int-divide
          -minline-sqrt-min-latency  -minline-sqrt-max-throughput
          -mno-inline-sqrt
          -mdwarf2-asm  -mearly-stop-bits
          -mfixed-range=REGISTER-RANGE  -mtls-size=TLS-SIZE
          -mtune=CPU-TYPE  -milp32  -mlp64
          -msched-br-data-spec  -msched-ar-data-spec  -msched-control-spec
          -msched-br-in-data-spec  -msched-ar-in-data-spec  -msched-in-control-spec
          -msched-spec-ldc  -msched-spec-control-ldc
          -msched-prefer-non-data-spec-insns  -msched-prefer-non-control-spec-insns
          -msched-stop-bits-after-every-cycle  -msched-count-spec-in-critical-path
          -msel-sched-dont-check-control-spec  -msched-fp-mem-deps-zero-cost
          -msched-max-memory-insns-hard-limit  -msched-max-memory-insns=MAX-INSNS

     _LM32 Options_
          -mbarrel-shift-enabled  -mdivide-enabled  -mmultiply-enabled
          -msign-extend-enabled  -muser-enabled

     _M32R/D Options_
          -m32r2  -m32rx  -m32r
          -mdebug
          -malign-loops  -mno-align-loops
          -missue-rate=NUMBER
          -mbranch-cost=NUMBER
          -mmodel=CODE-SIZE-MODEL-TYPE
          -msdata=SDATA-TYPE
          -mno-flush-func  -mflush-func=NAME
          -mno-flush-trap  -mflush-trap=NUMBER
          -G NUM

     _M32C Options_
          -mcpu=CPU  -msim  -memregs=NUMBER

     _M680x0 Options_
          -march=ARCH  -mcpu=CPU  -mtune=TUNE
          -m68000  -m68020  -m68020-40  -m68020-60  -m68030  -m68040
          -m68060  -mcpu32  -m5200  -m5206e  -m528x  -m5307  -m5407
          -mcfv4e  -mbitfield  -mno-bitfield  -mc68000  -mc68020
          -mnobitfield  -mrtd  -mno-rtd  -mdiv  -mno-div  -mshort
          -mno-short  -mhard-float  -m68881  -msoft-float  -mpcrel
          -malign-int  -mstrict-align  -msep-data  -mno-sep-data
          -mshared-library-id=n  -mid-shared-library  -mno-id-shared-library
          -mxgot  -mno-xgot  -mlong-jump-table-offsets

     _MCore Options_
          -mhardlit  -mno-hardlit  -mdiv  -mno-div  -mrelax-immediates
          -mno-relax-immediates  -mwide-bitfields  -mno-wide-bitfields
          -m4byte-functions  -mno-4byte-functions  -mcallgraph-data
          -mno-callgraph-data  -mslow-bytes  -mno-slow-bytes  -mno-lsim
          -mlittle-endian  -mbig-endian  -m210  -m340  -mstack-increment

     _MeP Options_
          -mabsdiff  -mall-opts  -maverage  -mbased=N  -mbitops
          -mc=N  -mclip  -mconfig=NAME  -mcop  -mcop32  -mcop64  -mivc2
          -mdc  -mdiv  -meb  -mel  -mio-volatile  -ml  -mleadz  -mm  -mminmax
          -mmult  -mno-opts  -mrepeat  -ms  -msatur  -msdram  -msim  -msimnovec  -mtf
          -mtiny=N

     _MicroBlaze Options_
          -msoft-float  -mhard-float  -msmall-divides  -mcpu=CPU
          -mmemcpy  -mxl-soft-mul  -mxl-soft-div  -mxl-barrel-shift
          -mxl-pattern-compare  -mxl-stack-check  -mxl-gp-opt  -mno-clearbss
          -mxl-multiply-high  -mxl-float-convert  -mxl-float-sqrt
          -mbig-endian  -mlittle-endian  -mxl-reorder  -mxl-mode-APP-MODEL
          -mpic-data-is-text-relative

     _MIPS Options_
          -EL  -EB  -march=ARCH  -mtune=ARCH
          -mips1  -mips2  -mips3  -mips4  -mips32  -mips32r2  -mips32r3  -mips32r5
          -mips32r6  -mips64  -mips64r2  -mips64r3  -mips64r5  -mips64r6
          -mips16  -mno-mips16  -mflip-mips16
          -minterlink-compressed  -mno-interlink-compressed
          -minterlink-mips16  -mno-interlink-mips16
          -mabi=ABI  -mabicalls  -mno-abicalls
          -mshared  -mno-shared  -mplt  -mno-plt  -mxgot  -mno-xgot
          -mgp32  -mgp64  -mfp32  -mfpxx  -mfp64  -mhard-float  -msoft-float
          -mno-float  -msingle-float  -mdouble-float
          -modd-spreg  -mno-odd-spreg
          -mabs=MODE  -mnan=ENCODING
          -mdsp  -mno-dsp  -mdspr2  -mno-dspr2
          -mmcu  -mmno-mcu
          -meva  -mno-eva
          -mvirt  -mno-virt
          -mxpa  -mno-xpa
          -mcrc  -mno-crc
          -mginv  -mno-ginv
          -mmicromips  -mno-micromips
          -mmsa  -mno-msa
          -mloongson-mmi  -mno-loongson-mmi
          -mloongson-ext  -mno-loongson-ext
          -mloongson-ext2  -mno-loongson-ext2
          -mfpu=FPU-TYPE
          -msmartmips  -mno-smartmips
          -mpaired-single  -mno-paired-single  -mdmx  -mno-mdmx
          -mips3d  -mno-mips3d  -mmt  -mno-mt  -mllsc  -mno-llsc
          -mlong64  -mlong32  -msym32  -mno-sym32
          -GNUM  -mlocal-sdata  -mno-local-sdata
          -mextern-sdata  -mno-extern-sdata  -mgpopt  -mno-gopt
          -membedded-data  -mno-embedded-data
          -muninit-const-in-rodata  -mno-uninit-const-in-rodata
          -mcode-readable=SETTING
          -msplit-addresses  -mno-split-addresses
          -mexplicit-relocs  -mno-explicit-relocs
          -mcheck-zero-division  -mno-check-zero-division
          -mdivide-traps  -mdivide-breaks
          -mload-store-pairs  -mno-load-store-pairs
          -mmemcpy  -mno-memcpy  -mlong-calls  -mno-long-calls
          -mmad  -mno-mad  -mimadd  -mno-imadd  -mfused-madd  -mno-fused-madd  -nocpp
          -mfix-24k  -mno-fix-24k
          -mfix-r4000  -mno-fix-r4000  -mfix-r4400  -mno-fix-r4400
          -mfix-r5900  -mno-fix-r5900
          -mfix-r10000  -mno-fix-r10000  -mfix-rm7000  -mno-fix-rm7000
          -mfix-vr4120  -mno-fix-vr4120
          -mfix-vr4130  -mno-fix-vr4130  -mfix-sb1  -mno-fix-sb1
          -mflush-func=FUNC  -mno-flush-func
          -mbranch-cost=NUM  -mbranch-likely  -mno-branch-likely
          -mcompact-branches=POLICY
          -mfp-exceptions  -mno-fp-exceptions
          -mvr4130-align  -mno-vr4130-align  -msynci  -mno-synci
          -mlxc1-sxc1  -mno-lxc1-sxc1  -mmadd4  -mno-madd4
          -mrelax-pic-calls  -mno-relax-pic-calls  -mmcount-ra-address
          -mframe-header-opt  -mno-frame-header-opt

     _MMIX Options_
          -mlibfuncs  -mno-libfuncs  -mepsilon  -mno-epsilon  -mabi=gnu
          -mabi=mmixware  -mzero-extend  -mknuthdiv  -mtoplevel-symbols
          -melf  -mbranch-predict  -mno-branch-predict  -mbase-addresses
          -mno-base-addresses  -msingle-exit  -mno-single-exit

     _MN10300 Options_
          -mmult-bug  -mno-mult-bug
          -mno-am33  -mam33  -mam33-2  -mam34
          -mtune=CPU-TYPE
          -mreturn-pointer-on-d0
          -mno-crt0  -mrelax  -mliw  -msetlb

     _Moxie Options_
          -meb  -mel  -mmul.x  -mno-crt0

     _MSP430 Options_
          -msim  -masm-hex  -mmcu=  -mcpu=  -mlarge  -msmall  -mrelax
          -mwarn-mcu
          -mcode-region=  -mdata-region=
          -msilicon-errata=  -msilicon-errata-warn=
          -mhwmult=  -minrt

     _NDS32 Options_
          -mbig-endian  -mlittle-endian
          -mreduced-regs  -mfull-regs
          -mcmov  -mno-cmov
          -mext-perf  -mno-ext-perf
          -mext-perf2  -mno-ext-perf2
          -mext-string  -mno-ext-string
          -mv3push  -mno-v3push
          -m16bit  -mno-16bit
          -misr-vector-size=NUM
          -mcache-block-size=NUM
          -march=ARCH
          -mcmodel=CODE-MODEL
          -mctor-dtor  -mrelax

     _Nios II Options_
          -G NUM  -mgpopt=OPTION  -mgpopt  -mno-gpopt
          -mgprel-sec=REGEXP  -mr0rel-sec=REGEXP
          -mel  -meb
          -mno-bypass-cache  -mbypass-cache
          -mno-cache-volatile  -mcache-volatile
          -mno-fast-sw-div  -mfast-sw-div
          -mhw-mul  -mno-hw-mul  -mhw-mulx  -mno-hw-mulx  -mno-hw-div  -mhw-div
          -mcustom-INSN=N  -mno-custom-INSN
          -mcustom-fpu-cfg=NAME
          -mhal  -msmallc  -msys-crt0=NAME  -msys-lib=NAME
          -march=ARCH  -mbmx  -mno-bmx  -mcdx  -mno-cdx

     _Nvidia PTX Options_
          -m32  -m64  -mmainkernel  -moptimize

     _OpenRISC Options_
          -mboard=NAME  -mnewlib  -mhard-mul  -mhard-div
          -msoft-mul  -msoft-div
          -mcmov  -mror  -msext  -msfimm  -mshftimm

     _PDP-11 Options_
          -mfpu  -msoft-float  -mac0  -mno-ac0  -m40  -m45  -m10
          -mint32  -mno-int16  -mint16  -mno-int32
          -msplit  -munix-asm  -mdec-asm  -mgnu-asm  -mlra

     _picoChip Options_
          -mae=AE_TYPE  -mvliw-lookahead=N
          -msymbol-as-address  -mno-inefficient-warnings

     _PowerPC Options_ See RS/6000 and PowerPC Options.

     _RISC-V Options_
          -mbranch-cost=N-INSTRUCTION
          -mplt  -mno-plt
          -mabi=ABI-STRING
          -mfdiv  -mno-fdiv
          -mdiv  -mno-div
          -march=ISA-STRING
          -mtune=PROCESSOR-STRING
          -mpreferred-stack-boundary=NUM
          -msmall-data-limit=N-BYTES
          -msave-restore  -mno-save-restore
          -mstrict-align  -mno-strict-align
          -mcmodel=medlow  -mcmodel=medany
          -mexplicit-relocs  -mno-explicit-relocs
          -mrelax  -mno-relax
          -mriscv-attribute  -mmo-riscv-attribute

     _RL78 Options_
          -msim  -mmul=none  -mmul=g13  -mmul=g14  -mallregs
          -mcpu=g10  -mcpu=g13  -mcpu=g14  -mg10  -mg13  -mg14
          -m64bit-doubles  -m32bit-doubles  -msave-mduc-in-interrupts

     _RS/6000 and PowerPC Options_
          -mcpu=CPU-TYPE
          -mtune=CPU-TYPE
          -mcmodel=CODE-MODEL
          -mpowerpc64
          -maltivec  -mno-altivec
          -mpowerpc-gpopt  -mno-powerpc-gpopt
          -mpowerpc-gfxopt  -mno-powerpc-gfxopt
          -mmfcrf  -mno-mfcrf  -mpopcntb  -mno-popcntb  -mpopcntd  -mno-popcntd
          -mfprnd  -mno-fprnd
          -mcmpb  -mno-cmpb  -mmfpgpr  -mno-mfpgpr  -mhard-dfp  -mno-hard-dfp
          -mfull-toc   -mminimal-toc  -mno-fp-in-toc  -mno-sum-in-toc
          -m64  -m32  -mxl-compat  -mno-xl-compat  -mpe
          -malign-power  -malign-natural
          -msoft-float  -mhard-float  -mmultiple  -mno-multiple
          -mupdate  -mno-update
          -mavoid-indexed-addresses  -mno-avoid-indexed-addresses
          -mfused-madd  -mno-fused-madd  -mbit-align  -mno-bit-align
          -mstrict-align  -mno-strict-align  -mrelocatable
          -mno-relocatable  -mrelocatable-lib  -mno-relocatable-lib
          -mtoc  -mno-toc  -mlittle  -mlittle-endian  -mbig  -mbig-endian
          -mdynamic-no-pic  -mswdiv  -msingle-pic-base
          -mprioritize-restricted-insns=PRIORITY
          -msched-costly-dep=DEPENDENCE_TYPE
          -minsert-sched-nops=SCHEME
          -mcall-aixdesc  -mcall-eabi  -mcall-freebsd
          -mcall-linux  -mcall-netbsd  -mcall-openbsd
          -mcall-sysv  -mcall-sysv-eabi  -mcall-sysv-noeabi
          -mtraceback=TRACEBACK_TYPE
          -maix-struct-return  -msvr4-struct-return
          -mabi=ABI-TYPE  -msecure-plt  -mbss-plt
          -mlongcall  -mno-longcall  -mpltseq  -mno-pltseq
          -mblock-move-inline-limit=NUM
          -mblock-compare-inline-limit=NUM
          -mblock-compare-inline-loop-limit=NUM
          -mstring-compare-inline-limit=NUM
          -misel  -mno-isel
          -mvrsave  -mno-vrsave
          -mmulhw  -mno-mulhw
          -mdlmzb  -mno-dlmzb
          -mprototype  -mno-prototype
          -msim  -mmvme  -mads  -myellowknife  -memb  -msdata
          -msdata=OPT  -mreadonly-in-sdata  -mvxworks  -G NUM
          -mrecip  -mrecip=OPT  -mno-recip  -mrecip-precision
          -mno-recip-precision
          -mveclibabi=TYPE  -mfriz  -mno-friz
          -mpointers-to-nested-functions  -mno-pointers-to-nested-functions
          -msave-toc-indirect  -mno-save-toc-indirect
          -mpower8-fusion  -mno-mpower8-fusion  -mpower8-vector  -mno-power8-vector
          -mcrypto  -mno-crypto  -mhtm  -mno-htm
          -mquad-memory  -mno-quad-memory
          -mquad-memory-atomic  -mno-quad-memory-atomic
          -mcompat-align-parm  -mno-compat-align-parm
          -mfloat128  -mno-float128  -mfloat128-hardware  -mno-float128-hardware
          -mgnu-attribute  -mno-gnu-attribute
          -mstack-protector-guard=GUARD -mstack-protector-guard-reg=REG
          -mstack-protector-guard-offset=OFFSET

     _RX Options_
          -m64bit-doubles  -m32bit-doubles  -fpu  -nofpu
          -mcpu=
          -mbig-endian-data  -mlittle-endian-data
          -msmall-data
          -msim  -mno-sim
          -mas100-syntax  -mno-as100-syntax
          -mrelax
          -mmax-constant-size=
          -mint-register=
          -mpid
          -mallow-string-insns  -mno-allow-string-insns
          -mjsr
          -mno-warn-multiple-fast-interrupts
          -msave-acc-in-interrupts

     _S/390 and zSeries Options_
          -mtune=CPU-TYPE  -march=CPU-TYPE
          -mhard-float  -msoft-float  -mhard-dfp  -mno-hard-dfp
          -mlong-double-64  -mlong-double-128
          -mbackchain  -mno-backchain  -mpacked-stack  -mno-packed-stack
          -msmall-exec  -mno-small-exec  -mmvcle  -mno-mvcle
          -m64  -m31  -mdebug  -mno-debug  -mesa  -mzarch
          -mhtm  -mvx  -mzvector
          -mtpf-trace  -mno-tpf-trace  -mfused-madd  -mno-fused-madd
          -mwarn-framesize  -mwarn-dynamicstack  -mstack-size  -mstack-guard
          -mhotpatch=HALFWORDS,HALFWORDS

     _Score Options_
          -meb  -mel
          -mnhwloop
          -muls
          -mmac
          -mscore5  -mscore5u  -mscore7  -mscore7d

     _SH Options_
          -m1  -m2  -m2e
          -m2a-nofpu  -m2a-single-only  -m2a-single  -m2a
          -m3  -m3e
          -m4-nofpu  -m4-single-only  -m4-single  -m4
          -m4a-nofpu  -m4a-single-only  -m4a-single  -m4a  -m4al
          -mb  -ml  -mdalign  -mrelax
          -mbigtable  -mfmovd  -mrenesas  -mno-renesas  -mnomacsave
          -mieee  -mno-ieee  -mbitops  -misize  -minline-ic_invalidate  -mpadstruct
          -mprefergot  -musermode  -multcost=NUMBER  -mdiv=STRATEGY
          -mdivsi3_libfunc=NAME  -mfixed-range=REGISTER-RANGE
          -maccumulate-outgoing-args
          -matomic-model=ATOMIC-MODEL
          -mbranch-cost=NUM  -mzdcbranch  -mno-zdcbranch
          -mcbranch-force-delay-slot
          -mfused-madd  -mno-fused-madd  -mfsca  -mno-fsca  -mfsrra  -mno-fsrra
          -mpretend-cmove  -mtas

     _Solaris 2 Options_
          -mclear-hwcap  -mno-clear-hwcap  -mimpure-text  -mno-impure-text
          -pthreads

     _SPARC Options_
          -mcpu=CPU-TYPE
          -mtune=CPU-TYPE
          -mcmodel=CODE-MODEL
          -mmemory-model=MEM-MODEL
          -m32  -m64  -mapp-regs  -mno-app-regs
          -mfaster-structs  -mno-faster-structs  -mflat  -mno-flat
          -mfpu  -mno-fpu  -mhard-float  -msoft-float
          -mhard-quad-float  -msoft-quad-float
          -mstack-bias  -mno-stack-bias
          -mstd-struct-return  -mno-std-struct-return
          -munaligned-doubles  -mno-unaligned-doubles
          -muser-mode  -mno-user-mode
          -mv8plus  -mno-v8plus  -mvis  -mno-vis
          -mvis2  -mno-vis2  -mvis3  -mno-vis3
          -mvis4  -mno-vis4  -mvis4b  -mno-vis4b
          -mcbcond  -mno-cbcond  -mfmaf  -mno-fmaf  -mfsmuld  -mno-fsmuld
          -mpopc  -mno-popc  -msubxc  -mno-subxc
          -mfix-at697f  -mfix-ut699  -mfix-ut700  -mfix-gr712rc
          -mlra  -mno-lra

     _SPU Options_
          -mwarn-reloc  -merror-reloc
          -msafe-dma  -munsafe-dma
          -mbranch-hints
          -msmall-mem  -mlarge-mem  -mstdmain
          -mfixed-range=REGISTER-RANGE
          -mea32  -mea64
          -maddress-space-conversion  -mno-address-space-conversion
          -mcache-size=CACHE-SIZE
          -matomic-updates  -mno-atomic-updates

     _System V Options_
          -Qy  -Qn  -YP,PATHS  -Ym,DIR

     _TILE-Gx Options_
          -mcpu=CPU  -m32  -m64  -mbig-endian  -mlittle-endian
          -mcmodel=CODE-MODEL

     _TILEPro Options_
          -mcpu=CPU  -m32

     _V850 Options_
          -mlong-calls  -mno-long-calls  -mep  -mno-ep
          -mprolog-function  -mno-prolog-function  -mspace
          -mtda=N  -msda=N  -mzda=N
          -mapp-regs  -mno-app-regs
          -mdisable-callt  -mno-disable-callt
          -mv850e2v3  -mv850e2  -mv850e1  -mv850es
          -mv850e  -mv850  -mv850e3v5
          -mloop
          -mrelax
          -mlong-jumps
          -msoft-float
          -mhard-float
          -mgcc-abi
          -mrh850-abi
          -mbig-switch

     _VAX Options_
          -mg  -mgnu  -munix

     _Visium Options_
          -mdebug  -msim  -mfpu  -mno-fpu  -mhard-float  -msoft-float
          -mcpu=CPU-TYPE  -mtune=CPU-TYPE  -msv-mode  -muser-mode

     _VMS Options_
          -mvms-return-codes  -mdebug-main=PREFIX  -mmalloc64
          -mpointer-size=SIZE

     _VxWorks Options_
          -mrtp  -non-static  -Bstatic  -Bdynamic
          -Xbind-lazy  -Xbind-now

     _x86 Options_
          -mtune=CPU-TYPE  -march=CPU-TYPE
          -mtune-ctrl=FEATURE-LIST  -mdump-tune-features  -mno-default
          -mfpmath=UNIT
          -masm=DIALECT  -mno-fancy-math-387
          -mno-fp-ret-in-387  -m80387  -mhard-float  -msoft-float
          -mno-wide-multiply  -mrtd  -malign-double
          -mpreferred-stack-boundary=NUM
          -mincoming-stack-boundary=NUM
          -mcld  -mcx16  -msahf  -mmovbe  -mcrc32
          -mrecip  -mrecip=OPT
          -mvzeroupper  -mprefer-avx128  -mprefer-vector-width=OPT
          -mmmx  -msse  -msse2  -msse3  -mssse3  -msse4.1  -msse4.2  -msse4  -mavx
          -mavx2  -mavx512f  -mavx512pf  -mavx512er  -mavx512cd  -mavx512vl
          -mavx512bw  -mavx512dq  -mavx512ifma  -mavx512vbmi  -msha  -maes
          -mpclmul  -mfsgsbase  -mrdrnd  -mf16c  -mfma  -mpconfig  -mwbnoinvd
          -mptwrite  -mprefetchwt1  -mclflushopt  -mclwb  -mxsavec  -mxsaves
          -msse4a  -m3dnow  -m3dnowa  -mpopcnt  -mabm  -mbmi  -mtbm  -mfma4  -mxop
          -madx  -mlzcnt  -mbmi2  -mfxsr  -mxsave  -mxsaveopt  -mrtm  -mhle  -mlwp
          -mmwaitx  -mclzero  -mpku  -mthreads  -mgfni  -mvaes  -mwaitpkg
          -mshstk -mmanual-endbr -mforce-indirect-call  -mavx512vbmi2
          -mvpclmulqdq  -mavx512bitalg  -mmovdiri  -mmovdir64b  -mavx512vpopcntdq
          -mavx5124fmaps  -mavx512vnni  -mavx5124vnniw  -mprfchw  -mrdpid
          -mrdseed  -msgx
          -mcldemote  -mms-bitfields  -mno-align-stringops  -minline-all-stringops
          -minline-stringops-dynamically  -mstringop-strategy=ALG
          -mmemcpy-strategy=STRATEGY  -mmemset-strategy=STRATEGY
          -mpush-args  -maccumulate-outgoing-args  -m128bit-long-double
          -m96bit-long-double  -mlong-double-64  -mlong-double-80  -mlong-double-128
          -mregparm=NUM  -msseregparm
          -mveclibabi=TYPE  -mvect8-ret-in-mem
          -mpc32  -mpc64  -mpc80  -mstackrealign
          -momit-leaf-frame-pointer  -mno-red-zone  -mno-tls-direct-seg-refs
          -mcmodel=CODE-MODEL  -mabi=NAME  -maddress-mode=MODE
          -m32  -m64  -mx32  -m16  -miamcu  -mlarge-data-threshold=NUM
          -msse2avx  -mfentry  -mrecord-mcount  -mnop-mcount  -m8bit-idiv
          -minstrument-return=TYPE -mfentry-name=NAME -mfentry-section=NAME
          -mavx256-split-unaligned-load  -mavx256-split-unaligned-store
          -malign-data=TYPE  -mstack-protector-guard=GUARD
          -mstack-protector-guard-reg=REG
          -mstack-protector-guard-offset=OFFSET
          -mstack-protector-guard-symbol=SYMBOL
          -mgeneral-regs-only  -mcall-ms2sysv-xlogues
          -mindirect-branch=CHOICE  -mfunction-return=CHOICE
          -mindirect-branch-register

     _x86 Windows Options_
          -mconsole  -mcygwin  -mno-cygwin  -mdll
          -mnop-fun-dllimport  -mthread
          -municode  -mwin32  -mwindows  -fno-set-stack-executable

     _Xstormy16 Options_
          -msim

     _Xtensa Options_
          -mconst16  -mno-const16
          -mfused-madd  -mno-fused-madd
          -mforce-no-pic
          -mserialize-volatile  -mno-serialize-volatile
          -mtext-section-literals  -mno-text-section-literals
          -mauto-litpools  -mno-auto-litpools
          -mtarget-align  -mno-target-align
          -mlongcalls  -mno-longcalls

     _zSeries Options_ See S/390 and zSeries Options.

==============================================================================
File: gcc.info,  Node: |Overall_Options|,  Next: |Invoking_G++|,  Prev: |Option_Summary|,  Up: |Invoking_GCC|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *Overall_Options*

3.2 Options Controlling the Kind of Output
------------------------------------------

Compilation can involve up to four stages: preprocessing, compilation
proper, assembly and linking, always in that order.  GCC is capable of
preprocessing and compiling several files either into several assembler
input files, or into one assembler input file; then each assembler input
file produces an object file, and linking combines all the object files
(those newly compiled, and those specified as input) into an executable
file.

 For any given input file, the file name suffix determines what kind of
compilation is done:

'FILE.c'
     C source code that must be preprocessed.

'FILE.i'
     C source code that should not be preprocessed.

'FILE.ii'
     C++ source code that should not be preprocessed.

'FILE.m'
     Objective-C source code.  Note that you must link with the
     'libobjc' library to make an Objective-C program work.

'FILE.mi'
     Objective-C source code that should not be preprocessed.

'FILE.mm'
'FILE.M'
     Objective-C++ source code.  Note that you must link with the
     'libobjc' library to make an Objective-C++ program work.  Note that
     '.M' refers to a literal capital M.

'FILE.mii'
     Objective-C++ source code that should not be preprocessed.

'FILE.h'
     C, C++, Objective-C or Objective-C++ header file to be turned into
     a precompiled header (default), or C, C++ header file to be turned
     into an Ada spec (via the '-fdump-ada-spec' switch).

'FILE.cc'
'FILE.cp'
'FILE.cxx'
'FILE.cpp'
'FILE.CPP'
'FILE.c++'
'FILE.C'
     C++ source code that must be preprocessed.  Note that in '.cxx',
     the last two letters must both be literally 'x'.  Likewise, '.C'
     refers to a literal capital C.

'FILE.mm'
'FILE.M'
     Objective-C++ source code that must be preprocessed.

'FILE.mii'
     Objective-C++ source code that should not be preprocessed.

'FILE.hh'
'FILE.H'
'FILE.hp'
'FILE.hxx'
'FILE.hpp'
'FILE.HPP'
'FILE.h++'
'FILE.tcc'
     C++ header file to be turned into a precompiled header or Ada spec.

'FILE.f'
'FILE.for'
'FILE.ftn'
     Fixed form Fortran source code that should not be preprocessed.

'FILE.F'
'FILE.FOR'
'FILE.fpp'
'FILE.FPP'
'FILE.FTN'
     Fixed form Fortran source code that must be preprocessed (with the
     traditional preprocessor).

'FILE.f90'
'FILE.f95'
'FILE.f03'
'FILE.f08'
     Free form Fortran source code that should not be preprocessed.

'FILE.F90'
'FILE.F95'
'FILE.F03'
'FILE.F08'
     Free form Fortran source code that must be preprocessed (with the
     traditional preprocessor).

'FILE.go'
     Go source code.

'FILE.brig'
     BRIG files (binary representation of HSAIL).

'FILE.d'
     D source code.

'FILE.di'
     D interface file.

'FILE.dd'
     D documentation code (Ddoc).

'FILE.ads'
     Ada source code file that contains a library unit declaration (a
     declaration of a package, subprogram, or generic, or a generic
     instantiation), or a library unit renaming declaration (a package,
     generic, or subprogram renaming declaration).  Such files are also
     called "specs".

'FILE.adb'
     Ada source code file containing a library unit body (a subprogram
     or package body).  Such files are also called "bodies".

'FILE.s'
     Assembler code.

'FILE.S'
'FILE.sx'
     Assembler code that must be preprocessed.

'OTHER'
     An object file to be fed straight into linking.  Any file name with
     no recognized suffix is treated this way.

 You can specify the input language explicitly with the '-x' option:

'-x LANGUAGE'
     Specify explicitly the LANGUAGE for the following input files
     (rather than letting the compiler choose a default based on the
     file name suffix).  This option applies to all following input
     files until the next '-x' option.  Possible values for LANGUAGE
     are:
          c  c-header  cpp-output
          c++  c++-header  c++-cpp-output
          objective-c  objective-c-header  objective-c-cpp-output
          objective-c++ objective-c++-header objective-c++-cpp-output
          assembler  assembler-with-cpp
          ada
          d
          f77  f77-cpp-input f95  f95-cpp-input
          go
          brig

'-x none'
     Turn off any specification of a language, so that subsequent files
     are handled according to their file name suffixes (as they are if
     '-x' has not been used at all).

 If you only want some of the stages of compilation, you can use '-x'
(or filename suffixes) to tell 'gcc' where to start, and one of the
options '-c', '-S', or '-E' to say where 'gcc' is to stop.  Note that
some combinations (for example, '-x cpp-output -E') instruct 'gcc' to do
nothing at all.

'-c'
     Compile or assemble the source files, but do not link.  The linking
     stage simply is not done.  The ultimate output is in the form of an
     object file for each source file.

     By default, the object file name for a source file is made by
     replacing the suffix '.c', '.i', '.s', etc., with '.o'.

     Unrecognized input files, not requiring compilation or assembly,
     are ignored.

'-S'
     Stop after the stage of compilation proper; do not assemble.  The
     output is in the form of an assembler code file for each
     non-assembler input file specified.

     By default, the assembler file name for a source file is made by
     replacing the suffix '.c', '.i', etc., with '.s'.

     Input files that don't require compilation are ignored.

'-E'
     Stop after the preprocessing stage; do not run the compiler proper.
     The output is in the form of preprocessed source code, which is
     sent to the standard output.

     Input files that don't require preprocessing are ignored.

'-o FILE'
     Place output in file FILE.  This applies to whatever sort of output
     is being produced, whether it be an executable file, an object
     file, an assembler file or preprocessed C code.

     If '-o' is not specified, the default is to put an executable file
     in 'a.out', the object file for 'SOURCE.SUFFIX' in 'SOURCE.o', its
     assembler file in 'SOURCE.s', a precompiled header file in
     'SOURCE.SUFFIX.gch', and all preprocessed C source on standard
     output.

'-v'
     Print (on standard error output) the commands executed to run the
     stages of compilation.  Also print the version number of the
     compiler driver program and of the preprocessor and the compiler
     proper.

'-###'
     Like '-v' except the commands are not executed and arguments are
     quoted unless they contain only alphanumeric characters or './-_'.
     This is useful for shell scripts to capture the driver-generated
     command lines.

'--help'
     Print (on the standard output) a description of the command-line
     options understood by 'gcc'.  If the '-v' option is also specified
     then '--help' is also passed on to the various processes invoked by
     'gcc', so that they can display the command-line options they
     accept.  If the '-Wextra' option has also been specified (prior to
     the '--help' option), then command-line options that have no
     documentation associated with them are also displayed.

'--target-help'
     Print (on the standard output) a description of target-specific
     command-line options for each tool.  For some targets extra
     target-specific information may also be printed.

'--help={CLASS|[^]QUALIFIER}[,...]'
     Print (on the standard output) a description of the command-line
     options understood by the compiler that fit into all specified
     classes and qualifiers.  These are the supported classes:

     'optimizers'
          Display all of the optimization options supported by the
          compiler.

     'warnings'
          Display all of the options controlling warning messages
          produced by the compiler.

     'target'
          Display target-specific options.  Unlike the '--target-help'
          option however, target-specific options of the linker and
          assembler are not displayed.  This is because those tools do
          not currently support the extended '--help=' syntax.

     'params'
          Display the values recognized by the '--param' option.

     LANGUAGE
          Display the options supported for LANGUAGE, where LANGUAGE is
          the name of one of the languages supported in this version of
          GCC.

     'common'
          Display the options that are common to all languages.

     These are the supported qualifiers:

     'undocumented'
          Display only those options that are undocumented.

     'joined'
          Display options taking an argument that appears after an equal
          sign in the same continuous piece of text, such as:
          '--help=target'.

     'separate'
          Display options taking an argument that appears as a separate
          word following the original option, such as: '-o output-file'.

     Thus for example to display all the undocumented target-specific
     switches supported by the compiler, use:

          --help=target,undocumented

     The sense of a qualifier can be inverted by prefixing it with the
     '^' character, so for example to display all binary warning options
     (i.e., ones that are either on or off and that do not take an
     argument) that have a description, use:

          --help=warnings,^joined,^undocumented

     The argument to '--help=' should not consist solely of inverted
     qualifiers.

     Combining several classes is possible, although this usually
     restricts the output so much that there is nothing to display.  One
     case where it does work, however, is when one of the classes is
     TARGET.  For example, to display all the target-specific
     optimization options, use:

          --help=target,optimizers

     The '--help=' option can be repeated on the command line.  Each
     successive use displays its requested class of options, skipping
     those that have already been displayed.  If '--help' is also
     specified anywhere on the command line then this takes precedence
     over any '--help=' option.

     If the '-Q' option appears on the command line before the '--help='
     option, then the descriptive text displayed by '--help=' is
     changed.  Instead of describing the displayed options, an
     indication is given as to whether the option is enabled, disabled
     or set to a specific value (assuming that the compiler knows this
     at the point where the '--help=' option is used).

     Here is a truncated example from the ARM port of 'gcc':

            % gcc -Q -mabi=2 --help=target -c
            The following options are target specific:
            -mabi=                                2
            -mabort-on-noreturn                   [disabled]
            -mapcs                                [disabled]

     The output is sensitive to the effects of previous command-line
     options, so for example it is possible to find out which
     optimizations are enabled at '-O2' by using:

          -Q -O2 --help=optimizers

     Alternatively you can discover which binary optimizations are
     enabled by '-O3' by using:

          gcc -c -Q -O3 --help=optimizers > /tmp/O3-opts
          gcc -c -Q -O2 --help=optimizers > /tmp/O2-opts
          diff /tmp/O2-opts /tmp/O3-opts | grep enabled

'--version'
     Display the version number and copyrights of the invoked GCC.

'-pass-exit-codes'
     Normally the 'gcc' program exits with the code of 1 if any phase of
     the compiler returns a non-success return code.  If you specify
     '-pass-exit-codes', the 'gcc' program instead returns with the
     numerically highest error produced by any phase returning an error
     indication.  The C, C++, and Fortran front ends return 4 if an
     internal compiler error is encountered.

'-pipe'
     Use pipes rather than temporary files for communication between the
     various stages of compilation.  This fails to work on some systems
     where the assembler is unable to read from a pipe; but the GNU
     assembler has no trouble.

'-specs=FILE'
     Process FILE after the compiler reads in the standard 'specs' file,
     in order to override the defaults which the 'gcc' driver program
     uses when determining what switches to pass to 'cc1', 'cc1plus',
     'as', 'ld', etc.  More than one '-specs=FILE' can be specified on
     the command line, and they are processed in order, from left to
     right.  *Note Spec Files::, for information about the format of the
     FILE.

'-wrapper'
     Invoke all subcommands under a wrapper program.  The name of the
     wrapper program and its parameters are passed as a comma separated
     list.

          gcc -c t.c -wrapper gdb,--args

     This invokes all subprograms of 'gcc' under 'gdb --args', thus the
     invocation of 'cc1' is 'gdb --args cc1 ...'.

'-ffile-prefix-map=OLD=NEW'
     When compiling files residing in directory 'OLD', record any
     references to them in the result of the compilation as if the files
     resided in directory 'NEW' instead.  Specifying this option is
     equivalent to specifying all the individual '-f*-prefix-map'
     options.  This can be used to make reproducible builds that are
     location independent.  See also '-fmacro-prefix-map' and
     '-fdebug-prefix-map'.

'-fplugin=NAME.so'
     Load the plugin code in file NAME.so, assumed to be a shared object
     to be dlopen'd by the compiler.  The base name of the shared object
     file is used to identify the plugin for the purposes of argument
     parsing (See '-fplugin-arg-NAME-KEY=VALUE' below).  Each plugin
     should define the callback functions specified in the Plugins API.

'-fplugin-arg-NAME-KEY=VALUE'
     Define an argument called KEY with a value of VALUE for the plugin
     called NAME.

'-fdump-ada-spec[-slim]'
     For C and C++ source and include files, generate corresponding Ada
     specs.  *Note (gnat_ugn)Generating Ada Bindings for C and C++
     headers::, which provides detailed documentation on this feature.

'-fada-spec-parent=UNIT'
     In conjunction with '-fdump-ada-spec[-slim]' above, generate Ada
     specs as child units of parent UNIT.

'-fdump-go-spec=FILE'
     For input files in any language, generate corresponding Go
     declarations in FILE.  This generates Go 'const', 'type', 'var',
     and 'func' declarations which may be a useful way to start writing
     a Go interface to code written in some other language.

'@FILE'
     Read command-line options from FILE.  The options read are inserted
     in place of the original @FILE option.  If FILE does not exist, or
     cannot be read, then the option will be treated literally, and not
     removed.

     Options in FILE are separated by whitespace.  A whitespace
     character may be included in an option by surrounding the entire
     option in either single or double quotes.  Any character (including
     a backslash) may be included by prefixing the character to be
     included with a backslash.  The FILE may itself contain additional
     @FILE options; any such options will be processed recursively.

==============================================================================
File: gcc.info,  Node: |Invoking_G++|,  Next: |C_Dialect_Options|,  Prev: |Overall_Options|,  Up: |Invoking_GCC|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Invoking_G++*

3.3 Compiling C++ Programs
--------------------------

C++ source files conventionally use one of the suffixes '.C', '.cc',
'.cpp', '.CPP', '.c++', '.cp', or '.cxx'; C++ header files often use
'.hh', '.hpp', '.H', or (for shared template code) '.tcc'; and
preprocessed C++ files use the suffix '.ii'.  GCC recognizes files with
these names and compiles them as C++ programs even if you call the
compiler the same way as for compiling C programs (usually with the name
'gcc').

 However, the use of 'gcc' does not add the C++ library.  'g++' is a
program that calls GCC and automatically specifies linking against the
C++ library.  It treats '.c', '.h' and '.i' files as C++ source files
instead of C source files unless '-x' is used.  This program is also
useful when precompiling a C header file with a '.h' extension for use
in C++ compilations.  On many systems, 'g++' is also installed with the
name 'c++'.

 When you compile C++ programs, you may specify many of the same
command-line options that you use for compiling programs in any
language; or command-line options meaningful for C and related
languages; or options that are meaningful only for C++ programs.  *Note
Options Controlling C Dialect: C Dialect Options, for explanations of
options for languages related to C.  *Note Options Controlling C++
Dialect: C++ Dialect Options, for explanations of options that are
meaningful only for C++ programs.

==============================================================================
File: gcc.info,  Node: |C_Dialect_Options|,  Next: |C++_Dialect_Options|,  Prev: |Invoking_G++|,  Up: |Invoking_GCC|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *C_Dialect_Options*

3.4 Options Controlling C Dialect
---------------------------------

The following options control the dialect of C (or languages derived
from C, such as C++, Objective-C and Objective-C++) that the compiler
accepts:

'-ansi'
     In C mode, this is equivalent to '-std=c90'.  In C++ mode, it is
     equivalent to '-std=c++98'.

     This turns off certain features of GCC that are incompatible with
     ISO C90 (when compiling C code), or of standard C++ (when compiling
     C++ code), such as the 'asm' and 'typeof' keywords, and predefined
     macros such as 'unix' and 'vax' that identify the type of system
     you are using.  It also enables the undesirable and rarely used ISO
     trigraph feature.  For the C compiler, it disables recognition of
     C++ style '//' comments as well as the 'inline' keyword.

     The alternate keywords '__asm__', '__extension__', '__inline__' and
     '__typeof__' continue to work despite '-ansi'.  You would not want
     to use them in an ISO C program, of course, but it is useful to put
     them in header files that might be included in compilations done
     with '-ansi'.  Alternate predefined macros such as '__unix__' and
     '__vax__' are also available, with or without '-ansi'.

     The '-ansi' option does not cause non-ISO programs to be rejected
     gratuitously.  For that, '-Wpedantic' is required in addition to
     '-ansi'.  *Note Warning Options::.

     The macro '__STRICT_ANSI__' is predefined when the '-ansi' option
     is used.  Some header files may notice this macro and refrain from
     declaring certain functions or defining certain macros that the ISO
     standard doesn't call for; this is to avoid interfering with any
     programs that might use these names for other things.

     Functions that are normally built in but do not have semantics
     defined by ISO C (such as 'alloca' and 'ffs') are not built-in
     functions when '-ansi' is used.  *Note Other built-in functions
     provided by GCC: Other Builtins, for details of the functions
     affected.

'-std='
     Determine the language standard.  *Note Language Standards
     Supported by GCC: Standards, for details of these standard
     versions.  This option is currently only supported when compiling C
     or C++.

     The compiler can accept several base standards, such as 'c90' or
     'c++98', and GNU dialects of those standards, such as 'gnu90' or
     'gnu++98'.  When a base standard is specified, the compiler accepts
     all programs following that standard plus those using GNU
     extensions that do not contradict it.  For example, '-std=c90'
     turns off certain features of GCC that are incompatible with ISO
     C90, such as the 'asm' and 'typeof' keywords, but not other GNU
     extensions that do not have a meaning in ISO C90, such as omitting
     the middle term of a '?:' expression.  On the other hand, when a
     GNU dialect of a standard is specified, all features supported by
     the compiler are enabled, even when those features change the
     meaning of the base standard.  As a result, some strict-conforming
     programs may be rejected.  The particular standard is used by
     '-Wpedantic' to identify which features are GNU extensions given
     that version of the standard.  For example '-std=gnu90 -Wpedantic'
     warns about C++ style '//' comments, while '-std=gnu99 -Wpedantic'
     does not.

     A value for this option must be provided; possible values are

     'c90'
     'c89'
     'iso9899:1990'
          Support all ISO C90 programs (certain GNU extensions that
          conflict with ISO C90 are disabled).  Same as '-ansi' for C
          code.

     'iso9899:199409'
          ISO C90 as modified in amendment 1.

     'c99'
     'c9x'
     'iso9899:1999'
     'iso9899:199x'
          ISO C99.  This standard is substantially completely supported,
          modulo bugs and floating-point issues (mainly but not entirely
          relating to optional C99 features from Annexes F and G). See
          <http://gcc.gnu.org/c99status.html> for more information.  The
          names 'c9x' and 'iso9899:199x' are deprecated.

     'c11'
     'c1x'
     'iso9899:2011'
          ISO C11, the 2011 revision of the ISO C standard.  This
          standard is substantially completely supported, modulo bugs,
          floating-point issues (mainly but not entirely relating to
          optional C11 features from Annexes F and G) and the optional
          Annexes K (Bounds-checking interfaces) and L (Analyzability).
          The name 'c1x' is deprecated.

     'c17'
     'c18'
     'iso9899:2017'
     'iso9899:2018'
          ISO C17, the 2017 revision of the ISO C standard (published in
          2018).  This standard is same as C11 except for corrections of
          defects (all of which are also applied with '-std=c11') and a
          new value of '__STDC_VERSION__', and so is supported to the
          same extent as C11.

     'c2x'
          The next version of the ISO C standard, still under
          development.  The support for this version is experimental and
          incomplete.

     'gnu90'
     'gnu89'
          GNU dialect of ISO C90 (including some C99 features).

     'gnu99'
     'gnu9x'
          GNU dialect of ISO C99.  The name 'gnu9x' is deprecated.

     'gnu11'
     'gnu1x'
          GNU dialect of ISO C11.  The name 'gnu1x' is deprecated.

     'gnu17'
     'gnu18'
          GNU dialect of ISO C17.  This is the default for C code.

     'gnu2x'
          The next version of the ISO C standard, still under
          development, plus GNU extensions.  The support for this
          version is experimental and incomplete.

     'c++98'
     'c++03'
          The 1998 ISO C++ standard plus the 2003 technical corrigendum
          and some additional defect reports.  Same as '-ansi' for C++
          code.

     'gnu++98'
     'gnu++03'
          GNU dialect of '-std=c++98'.

     'c++11'
     'c++0x'
          The 2011 ISO C++ standard plus amendments.  The name 'c++0x'
          is deprecated.

     'gnu++11'
     'gnu++0x'
          GNU dialect of '-std=c++11'.  The name 'gnu++0x' is
          deprecated.

     'c++14'
     'c++1y'
          The 2014 ISO C++ standard plus amendments.  The name 'c++1y'
          is deprecated.

     'gnu++14'
     'gnu++1y'
          GNU dialect of '-std=c++14'.  This is the default for C++
          code.  The name 'gnu++1y' is deprecated.

     'c++17'
     'c++1z'
          The 2017 ISO C++ standard plus amendments.  The name 'c++1z'
          is deprecated.

     'gnu++17'
     'gnu++1z'
          GNU dialect of '-std=c++17'.  The name 'gnu++1z' is
          deprecated.

     'c++2a'
          The next revision of the ISO C++ standard, tentatively planned
          for 2020.  Support is highly experimental, and will almost
          certainly change in incompatible ways in future releases.

     'gnu++2a'
          GNU dialect of '-std=c++2a'.  Support is highly experimental,
          and will almost certainly change in incompatible ways in
          future releases.

'-fgnu89-inline'
     The option '-fgnu89-inline' tells GCC to use the traditional GNU
     semantics for 'inline' functions when in C99 mode.  *Note An Inline
     Function is As Fast As a Macro: Inline.  Using this option is
     roughly equivalent to adding the 'gnu_inline' function attribute to
     all inline functions (*note Function Attributes::).

     The option '-fno-gnu89-inline' explicitly tells GCC to use the C99
     semantics for 'inline' when in C99 or gnu99 mode (i.e., it
     specifies the default behavior).  This option is not supported in
     '-std=c90' or '-std=gnu90' mode.

     The preprocessor macros '__GNUC_GNU_INLINE__' and
     '__GNUC_STDC_INLINE__' may be used to check which semantics are in
     effect for 'inline' functions.  *Note (cpp)Common Predefined
     Macros::.

'-fpermitted-flt-eval-methods=STYLE'
     ISO/IEC TS 18661-3 defines new permissible values for
     'FLT_EVAL_METHOD' that indicate that operations and constants with
     a semantic type that is an interchange or extended format should be
     evaluated to the precision and range of that type.  These new
     values are a superset of those permitted under C99/C11, which does
     not specify the meaning of other positive values of
     'FLT_EVAL_METHOD'.  As such, code conforming to C11 may not have
     been written expecting the possibility of the new values.

     '-fpermitted-flt-eval-methods' specifies whether the compiler
     should allow only the values of 'FLT_EVAL_METHOD' specified in
     C99/C11, or the extended set of values specified in ISO/IEC TS
     18661-3.

     STYLE is either 'c11' or 'ts-18661-3' as appropriate.

     The default when in a standards compliant mode ('-std=c11' or
     similar) is '-fpermitted-flt-eval-methods=c11'.  The default when
     in a GNU dialect ('-std=gnu11' or similar) is
     '-fpermitted-flt-eval-methods=ts-18661-3'.

'-aux-info FILENAME'
     Output to the given filename prototyped declarations for all
     functions declared and/or defined in a translation unit, including
     those in header files.  This option is silently ignored in any
     language other than C.

     Besides declarations, the file indicates, in comments, the origin
     of each declaration (source file and line), whether the declaration
     was implicit, prototyped or unprototyped ('I', 'N' for new or 'O'
     for old, respectively, in the first character after the line number
     and the colon), and whether it came from a declaration or a
     definition ('C' or 'F', respectively, in the following character).
     In the case of function definitions, a K&R-style list of arguments
     followed by their declarations is also provided, inside comments,
     after the declaration.

'-fallow-parameterless-variadic-functions'
     Accept variadic functions without named parameters.

     Although it is possible to define such a function, this is not very
     useful as it is not possible to read the arguments.  This is only
     supported for C as this construct is allowed by C++.

'-fno-asm'
     Do not recognize 'asm', 'inline' or 'typeof' as a keyword, so that
     code can use these words as identifiers.  You can use the keywords
     '__asm__', '__inline__' and '__typeof__' instead.  '-ansi' implies
     '-fno-asm'.

     In C++, this switch only affects the 'typeof' keyword, since 'asm'
     and 'inline' are standard keywords.  You may want to use the
     '-fno-gnu-keywords' flag instead, which has the same effect.  In
     C99 mode ('-std=c99' or '-std=gnu99'), this switch only affects the
     'asm' and 'typeof' keywords, since 'inline' is a standard keyword
     in ISO C99.

'-fno-builtin'
'-fno-builtin-FUNCTION'
     Don't recognize built-in functions that do not begin with
     '__builtin_' as prefix.  *Note Other built-in functions provided by
     GCC: Other Builtins, for details of the functions affected,
     including those which are not built-in functions when '-ansi' or
     '-std' options for strict ISO C conformance are used because they
     do not have an ISO standard meaning.

     GCC normally generates special code to handle certain built-in
     functions more efficiently; for instance, calls to 'alloca' may
     become single instructions which adjust the stack directly, and
     calls to 'memcpy' may become inline copy loops.  The resulting code
     is often both smaller and faster, but since the function calls no
     longer appear as such, you cannot set a breakpoint on those calls,
     nor can you change the behavior of the functions by linking with a
     different library.  In addition, when a function is recognized as a
     built-in function, GCC may use information about that function to
     warn about problems with calls to that function, or to generate
     more efficient code, even if the resulting code still contains
     calls to that function.  For example, warnings are given with
     '-Wformat' for bad calls to 'printf' when 'printf' is built in and
     'strlen' is known not to modify global memory.

     With the '-fno-builtin-FUNCTION' option only the built-in function
     FUNCTION is disabled.  FUNCTION must not begin with '__builtin_'.
     If a function is named that is not built-in in this version of GCC,
     this option is ignored.  There is no corresponding
     '-fbuiltin-FUNCTION' option; if you wish to enable built-in
     functions selectively when using '-fno-builtin' or
     '-ffreestanding', you may define macros such as:

          #define abs(n)          __builtin_abs ((n))
          #define strcpy(d, s)    __builtin_strcpy ((d), (s))

'-fgimple'

     Enable parsing of function definitions marked with '__GIMPLE'.
     This is an experimental feature that allows unit testing of GIMPLE
     passes.

'-fhosted'

     Assert that compilation targets a hosted environment.  This implies
     '-fbuiltin'.  A hosted environment is one in which the entire
     standard library is available, and in which 'main' has a return
     type of 'int'.  Examples are nearly everything except a kernel.
     This is equivalent to '-fno-freestanding'.

'-ffreestanding'

     Assert that compilation targets a freestanding environment.  This
     implies '-fno-builtin'.  A freestanding environment is one in which
     the standard library may not exist, and program startup may not
     necessarily be at 'main'.  The most obvious example is an OS
     kernel.  This is equivalent to '-fno-hosted'.

     *Note Language Standards Supported by GCC: Standards, for details
     of freestanding and hosted environments.

'-fopenacc'
     Enable handling of OpenACC directives '#pragma acc' in C/C++ and
     '!$acc' in Fortran.  When '-fopenacc' is specified, the compiler
     generates accelerated code according to the OpenACC Application
     Programming Interface v2.0 <https://www.openacc.org>.  This option
     implies '-pthread', and thus is only supported on targets that have
     support for '-pthread'.

'-fopenacc-dim=GEOM'
     Specify default compute dimensions for parallel offload regions
     that do not explicitly specify.  The GEOM value is a triple of
     ':'-separated sizes, in order 'gang', 'worker' and, 'vector'.  A
     size can be omitted, to use a target-specific default value.

'-fopenmp'
     Enable handling of OpenMP directives '#pragma omp' in C/C++ and
     '!$omp' in Fortran.  When '-fopenmp' is specified, the compiler
     generates parallel code according to the OpenMP Application Program
     Interface v4.5 <https://www.openmp.org>.  This option implies
     '-pthread', and thus is only supported on targets that have support
     for '-pthread'.  '-fopenmp' implies '-fopenmp-simd'.

'-fopenmp-simd'
     Enable handling of OpenMP's SIMD directives with '#pragma omp' in
     C/C++ and '!$omp' in Fortran.  Other OpenMP directives are ignored.

'-fgnu-tm'
     When the option '-fgnu-tm' is specified, the compiler generates
     code for the Linux variant of Intel's current Transactional Memory
     ABI specification document (Revision 1.1, May 6 2009).  This is an
     experimental feature whose interface may change in future versions
     of GCC, as the official specification changes.  Please note that
     not all architectures are supported for this feature.

     For more information on GCC's support for transactional memory,
     *Note The GNU Transactional Memory Library: (libitm)Enabling
     libitm.

     Note that the transactional memory feature is not supported with
     non-call exceptions ('-fnon-call-exceptions').

'-fms-extensions'
     Accept some non-standard constructs used in Microsoft header files.

     In C++ code, this allows member names in structures to be similar
     to previous types declarations.

          typedef int UOW;
          struct ABC {
            UOW UOW;
          };

     Some cases of unnamed fields in structures and unions are only
     accepted with this option.  *Note Unnamed struct/union fields
     within structs/unions: Unnamed Fields, for details.

     Note that this option is off for all targets but x86 targets using
     ms-abi.

'-fplan9-extensions'
     Accept some non-standard constructs used in Plan 9 code.

     This enables '-fms-extensions', permits passing pointers to
     structures with anonymous fields to functions that expect pointers
     to elements of the type of the field, and permits referring to
     anonymous fields declared using a typedef.  *Note Unnamed
     struct/union fields within structs/unions: Unnamed Fields, for
     details.  This is only supported for C, not C++.

'-fcond-mismatch'
     Allow conditional expressions with mismatched types in the second
     and third arguments.  The value of such an expression is void.
     This option is not supported for C++.

'-flax-vector-conversions'
     Allow implicit conversions between vectors with differing numbers
     of elements and/or incompatible element types.  This option should
     not be used for new code.

'-funsigned-char'
     Let the type 'char' be unsigned, like 'unsigned char'.

     Each kind of machine has a default for what 'char' should be.  It
     is either like 'unsigned char' by default or like 'signed char' by
     default.

     Ideally, a portable program should always use 'signed char' or
     'unsigned char' when it depends on the signedness of an object.
     But many programs have been written to use plain 'char' and expect
     it to be signed, or expect it to be unsigned, depending on the
     machines they were written for.  This option, and its inverse, let
     you make such a program work with the opposite default.

     The type 'char' is always a distinct type from each of 'signed
     char' or 'unsigned char', even though its behavior is always just
     like one of those two.

'-fsigned-char'
     Let the type 'char' be signed, like 'signed char'.

     Note that this is equivalent to '-fno-unsigned-char', which is the
     negative form of '-funsigned-char'.  Likewise, the option
     '-fno-signed-char' is equivalent to '-funsigned-char'.

'-fsigned-bitfields'
'-funsigned-bitfields'
'-fno-signed-bitfields'
'-fno-unsigned-bitfields'
     These options control whether a bit-field is signed or unsigned,
     when the declaration does not use either 'signed' or 'unsigned'.
     By default, such a bit-field is signed, because this is consistent:
     the basic integer types such as 'int' are signed types.

'-fsso-struct=ENDIANNESS'
     Set the default scalar storage order of structures and unions to
     the specified endianness.  The accepted values are 'big-endian',
     'little-endian' and 'native' for the native endianness of the
     target (the default).  This option is not supported for C++.

     Warning: the '-fsso-struct' switch causes GCC to generate code
     that is not binary compatible with code generated without it if the
     specified endianness is not the native endianness of the target.

==============================================================================
File: gcc.info,  Node: |C++_Dialect_Options|,  Next: |Objective_C_and_Objective_C++_Dialect_Options|,  Prev: |C_Dialect_Options|,  Up: |Invoking_GCC|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               *C++_Dialect_Options*

3.5 Options Controlling C++ Dialect
-----------------------------------

This section describes the command-line options that are only meaningful
for C++ programs.  You can also use most of the GNU compiler options
regardless of what language your program is in.  For example, you might
compile a file 'firstClass.C' like this:

     g++ -g -fstrict-enums -O -c firstClass.C

In this example, only '-fstrict-enums' is an option meant only for C++
programs; you can use the other options with any language supported by
GCC.

 Some options for compiling C programs, such as '-std', are also
relevant for C++ programs.  *Note Options Controlling C Dialect: C
Dialect Options.

 Here is a list of options that are _only_ for compiling C++ programs:

'-fabi-version=N'
     Use version N of the C++ ABI.  The default is version 0.

     Version 0 refers to the version conforming most closely to the C++
     ABI specification.  Therefore, the ABI obtained using version 0
     will change in different versions of G++ as ABI bugs are fixed.

     Version 1 is the version of the C++ ABI that first appeared in G++
     3.2.

     Version 2 is the version of the C++ ABI that first appeared in G++
     3.4, and was the default through G++ 4.9.

     Version 3 corrects an error in mangling a constant address as a
     template argument.

     Version 4, which first appeared in G++ 4.5, implements a standard
     mangling for vector types.

     Version 5, which first appeared in G++ 4.6, corrects the mangling
     of attribute const/volatile on function pointer types, decltype of
     a plain decl, and use of a function parameter in the declaration of
     another parameter.

     Version 6, which first appeared in G++ 4.7, corrects the promotion
     behavior of C++11 scoped enums and the mangling of template
     argument packs, const/static_cast, prefix ++ and -, and a class
     scope function used as a template argument.

     Version 7, which first appeared in G++ 4.8, that treats nullptr_t
     as a builtin type and corrects the mangling of lambdas in default
     argument scope.

     Version 8, which first appeared in G++ 4.9, corrects the
     substitution behavior of function types with
     function-cv-qualifiers.

     Version 9, which first appeared in G++ 5.2, corrects the alignment
     of 'nullptr_t'.

     Version 10, which first appeared in G++ 6.1, adds mangling of
     attributes that affect type identity, such as ia32 calling
     convention attributes (e.g. 'stdcall').

     Version 11, which first appeared in G++ 7, corrects the mangling of
     sizeof...  expressions and operator names.  For multiple entities
     with the same name within a function, that are declared in
     different scopes, the mangling now changes starting with the
     twelfth occurrence.  It also implies '-fnew-inheriting-ctors'.

     Version 12, which first appeared in G++ 8, corrects the calling
     conventions for empty classes on the x86_64 target and for classes
     with only deleted copy/move constructors.  It accidentally changes
     the calling convention for classes with a deleted copy constructor
     and a trivial move constructor.

     Version 13, which first appeared in G++ 8.2, fixes the accidental
     change in version 12.

     See also '-Wabi'.

'-fabi-compat-version=N'
     On targets that support strong aliases, G++ works around mangling
     changes by creating an alias with the correct mangled name when
     defining a symbol with an incorrect mangled name.  This switch
     specifies which ABI version to use for the alias.

     With '-fabi-version=0' (the default), this defaults to 11 (GCC 7
     compatibility).  If another ABI version is explicitly selected,
     this defaults to 0.  For compatibility with GCC versions 3.2
     through 4.9, use '-fabi-compat-version=2'.

     If this option is not provided but '-Wabi=N' is, that version is
     used for compatibility aliases.  If this option is provided along
     with '-Wabi' (without the version), the version from this option is
     used for the warning.

'-fno-access-control'
     Turn off all access checking.  This switch is mainly useful for
     working around bugs in the access control code.

'-faligned-new'
     Enable support for C++17 'new' of types that require more alignment
     than 'void* ::operator new(std::size_t)' provides.  A numeric
     argument such as '-faligned-new=32' can be used to specify how much
     alignment (in bytes) is provided by that function, but few users
     will need to override the default of 'alignof(std::max_align_t)'.

     This flag is enabled by default for '-std=c++17'.

'-fchar8_t'
'-fno-char8_t'
     Enable support for 'char8_t' as adopted for C++2a.  This includes
     the addition of a new 'char8_t' fundamental type, changes to the
     types of UTF-8 string and character literals, new signatures for
     user-defined literals, associated standard library updates, and new
     '__cpp_char8_t' and '__cpp_lib_char8_t' feature test macros.

     This option enables functions to be overloaded for ordinary and
     UTF-8 strings:

          int f(const char *);    // #1
          int f(const char8_t *); // #2
          int v1 = f("text");     // Calls #1
          int v2 = f(u8"text");   // Calls #2

     and introduces new signatures for user-defined literals:

          int operator""_udl1(char8_t);
          int v3 = u8'x'_udl1;
          int operator""_udl2(const char8_t*, std::size_t);
          int v4 = u8"text"_udl2;
          template<typename T, T...> int operator""_udl3();
          int v5 = u8"text"_udl3;

     The change to the types of UTF-8 string and character literals
     introduces incompatibilities with ISO C++11 and later standards.
     For example, the following code is well-formed under ISO C++11, but
     is ill-formed when '-fchar8_t' is specified.

          char ca[] = u8"xx";     // error: char-array initialized from wide
                                  //        string
          const char *cp = u8"xx";// error: invalid conversion from
                                  //        `const char8_t*' to `const char*'
          int f(const char*);
          auto v = f(u8"xx");     // error: invalid conversion from
                                  //        `const char8_t*' to `const char*'
          std::string s{u8"xx"};  // error: no matching function for call to
                                  //        `std::basic_string<char>::basic_string()'
          using namespace std::literals;
          s = u8"xx"s;            // error: conversion from
                                  //        `basic_string<char8_t>' to non-scalar
                                  //        type `basic_string<char>' requested

'-fcheck-new'
     Check that the pointer returned by 'operator new' is non-null
     before attempting to modify the storage allocated.  This check is
     normally unnecessary because the C++ standard specifies that
     'operator new' only returns '0' if it is declared 'throw()', in
     which case the compiler always checks the return value even without
     this option.  In all other cases, when 'operator new' has a
     non-empty exception specification, memory exhaustion is signalled
     by throwing 'std::bad_alloc'.  See also 'new (nothrow)'.

'-fconcepts'
     Enable support for the C++ Extensions for Concepts Technical
     Specification, ISO 19217 (2015), which allows code like

          template <class T> concept bool Addable = requires (T t) { t + t; };
          template <Addable T> T add (T a, T b) { return a + b; }

'-fconstexpr-depth=N'
     Set the maximum nested evaluation depth for C++11 constexpr
     functions to N.  A limit is needed to detect endless recursion
     during constant expression evaluation.  The minimum specified by
     the standard is 512.

'-fconstexpr-loop-limit=N'
     Set the maximum number of iterations for a loop in C++14 constexpr
     functions to N.  A limit is needed to detect infinite loops during
     constant expression evaluation.  The default is 262144 (1<<18).

'-fconstexpr-ops-limit=N'
     Set the maximum number of operations during a single constexpr
     evaluation.  Even when number of iterations of a single loop is
     limited with the above limit, if there are several nested loops and
     each of them has many iterations but still smaller than the above
     limit, or if in a body of some loop or even outside of a loop too
     many expressions need to be evaluated, the resulting constexpr
     evaluation might take too long.  The default is 33554432 (1<<25).

'-fdeduce-init-list'
     Enable deduction of a template type parameter as
     'std::initializer_list' from a brace-enclosed initializer list,
     i.e.

          template <class T> auto forward(T t) -> decltype (realfn (t))
          {
            return realfn (t);
          }

          void f()
          {
            forward({1,2}); // call forward<std::initializer_list<int>>
          }

     This deduction was implemented as a possible extension to the
     originally proposed semantics for the C++11 standard, but was not
     part of the final standard, so it is disabled by default.  This
     option is deprecated, and may be removed in a future version of
     G++.

'-fno-elide-constructors'
     The C++ standard allows an implementation to omit creating a
     temporary that is only used to initialize another object of the
     same type.  Specifying this option disables that optimization, and
     forces G++ to call the copy constructor in all cases.  This option
     also causes G++ to call trivial member functions which otherwise
     would be expanded inline.

     In C++17, the compiler is required to omit these temporaries, but
     this option still affects trivial member functions.

'-fno-enforce-eh-specs'
     Don't generate code to check for violation of exception
     specifications at run time.  This option violates the C++ standard,
     but may be useful for reducing code size in production builds, much
     like defining 'NDEBUG'.  This does not give user code permission to
     throw exceptions in violation of the exception specifications; the
     compiler still optimizes based on the specifications, so throwing
     an unexpected exception results in undefined behavior at run time.

'-fextern-tls-init'
'-fno-extern-tls-init'
     The C++11 and OpenMP standards allow 'thread_local' and
     'threadprivate' variables to have dynamic (runtime) initialization.
     To support this, any use of such a variable goes through a wrapper
     function that performs any necessary initialization.  When the use
     and definition of the variable are in the same translation unit,
     this overhead can be optimized away, but when the use is in a
     different translation unit there is significant overhead even if
     the variable doesn't actually need dynamic initialization.  If the
     programmer can be sure that no use of the variable in a
     non-defining TU needs to trigger dynamic initialization (either
     because the variable is statically initialized, or a use of the
     variable in the defining TU will be executed before any uses in
     another TU), they can avoid this overhead with the
     '-fno-extern-tls-init' option.

     On targets that support symbol aliases, the default is
     '-fextern-tls-init'.  On targets that do not support symbol
     aliases, the default is '-fno-extern-tls-init'.

'-fno-gnu-keywords'
     Do not recognize 'typeof' as a keyword, so that code can use this
     word as an identifier.  You can use the keyword '__typeof__'
     instead.  This option is implied by the strict ISO C++ dialects:
     '-ansi', '-std=c++98', '-std=c++11', etc.

'-fno-implicit-templates'
     Never emit code for non-inline templates that are instantiated
     implicitly (i.e. by use); only emit code for explicit
     instantiations.  If you use this option, you must take care to
     structure your code to include all the necessary explicit
     instantiations to avoid getting undefined symbols at link time.
     *Note Template Instantiation::, for more information.

'-fno-implicit-inline-templates'
     Don't emit code for implicit instantiations of inline templates,
     either.  The default is to handle inlines differently so that
     compiles with and without optimization need the same set of
     explicit instantiations.

'-fno-implement-inlines'
     To save space, do not emit out-of-line copies of inline functions
     controlled by '#pragma implementation'.  This causes linker errors
     if these functions are not inlined everywhere they are called.

'-fms-extensions'
     Disable Wpedantic warnings about constructs used in MFC, such as
     implicit int and getting a pointer to member function via
     non-standard syntax.

'-fnew-inheriting-ctors'
     Enable the P0136 adjustment to the semantics of C++11 constructor
     inheritance.  This is part of C++17 but also considered to be a
     Defect Report against C++11 and C++14.  This flag is enabled by
     default unless '-fabi-version=10' or lower is specified.

'-fnew-ttp-matching'
     Enable the P0522 resolution to Core issue 150, template template
     parameters and default arguments: this allows a template with
     default template arguments as an argument for a template template
     parameter with fewer template parameters.  This flag is enabled by
     default for '-std=c++17'.

'-fno-nonansi-builtins'
     Disable built-in declarations of functions that are not mandated by
     ANSI/ISO C.  These include 'ffs', 'alloca', '_exit', 'index',
     'bzero', 'conjf', and other related functions.

'-fnothrow-opt'
     Treat a 'throw()' exception specification as if it were a
     'noexcept' specification to reduce or eliminate the text size
     overhead relative to a function with no exception specification.
     If the function has local variables of types with non-trivial
     destructors, the exception specification actually makes the
     function smaller because the EH cleanups for those variables can be
     optimized away.  The semantic effect is that an exception thrown
     out of a function with such an exception specification results in a
     call to 'terminate' rather than 'unexpected'.

'-fno-operator-names'
     Do not treat the operator name keywords 'and', 'bitand', 'bitor',
     'compl', 'not', 'or' and 'xor' as synonyms as keywords.

'-fno-optional-diags'
     Disable diagnostics that the standard says a compiler does not need
     to issue.  Currently, the only such diagnostic issued by G++ is the
     one for a name having multiple meanings within a class.

'-fpermissive'
     Downgrade some diagnostics about nonconformant code from errors to
     warnings.  Thus, using '-fpermissive' allows some nonconforming
     code to compile.

'-fno-pretty-templates'
     When an error message refers to a specialization of a function
     template, the compiler normally prints the signature of the
     template followed by the template arguments and any typedefs or
     typenames in the signature (e.g. 'void f(T) [with T = int]' rather
     than 'void f(int)') so that it's clear which template is involved.
     When an error message refers to a specialization of a class
     template, the compiler omits any template arguments that match the
     default template arguments for that template.  If either of these
     behaviors make it harder to understand the error message rather
     than easier, you can use '-fno-pretty-templates' to disable them.

'-frepo'
     Enable automatic template instantiation at link time.  This option
     also implies '-fno-implicit-templates'.  *Note Template
     Instantiation::, for more information.

'-fno-rtti'
     Disable generation of information about every class with virtual
     functions for use by the C++ run-time type identification features
     ('dynamic_cast' and 'typeid').  If you don't use those parts of the
     language, you can save some space by using this flag.  Note that
     exception handling uses the same information, but G++ generates it
     as needed.  The 'dynamic_cast' operator can still be used for casts
     that do not require run-time type information, i.e. casts to 'void
     *' or to unambiguous base classes.

     Mixing code compiled with '-frtti' with that compiled with
     '-fno-rtti' may not work.  For example, programs may fail to link
     if a class compiled with '-fno-rtti' is used as a base for a class
     compiled with '-frtti'.

'-fsized-deallocation'
     Enable the built-in global declarations
          void operator delete (void *, std::size_t) noexcept;
          void operator delete[] (void *, std::size_t) noexcept;
     as introduced in C++14.  This is useful for user-defined
     replacement deallocation functions that, for example, use the size
     of the object to make deallocation faster.  Enabled by default
     under '-std=c++14' and above.  The flag '-Wsized-deallocation'
     warns about places that might want to add a definition.

'-fstrict-enums'
     Allow the compiler to optimize using the assumption that a value of
     enumerated type can only be one of the values of the enumeration
     (as defined in the C++ standard; basically, a value that can be
     represented in the minimum number of bits needed to represent all
     the enumerators).  This assumption may not be valid if the program
     uses a cast to convert an arbitrary integer value to the enumerated
     type.

'-fstrong-eval-order'
     Evaluate member access, array subscripting, and shift expressions
     in left-to-right order, and evaluate assignment in right-to-left
     order, as adopted for C++17.  Enabled by default with '-std=c++17'.
     '-fstrong-eval-order=some' enables just the ordering of member
     access and shift expressions, and is the default without
     '-std=c++17'.

'-ftemplate-backtrace-limit=N'
     Set the maximum number of template instantiation notes for a single
     warning or error to N.  The default value is 10.

'-ftemplate-depth=N'
     Set the maximum instantiation depth for template classes to N.  A
     limit on the template instantiation depth is needed to detect
     endless recursions during template class instantiation.  ANSI/ISO
     C++ conforming programs must not rely on a maximum depth greater
     than 17 (changed to 1024 in C++11).  The default value is 900, as
     the compiler can run out of stack space before hitting 1024 in some
     situations.

'-fno-threadsafe-statics'
     Do not emit the extra code to use the routines specified in the C++
     ABI for thread-safe initialization of local statics.  You can use
     this option to reduce code size slightly in code that doesn't need
     to be thread-safe.

'-fuse-cxa-atexit'
     Register destructors for objects with static storage duration with
     the '__cxa_atexit' function rather than the 'atexit' function.
     This option is required for fully standards-compliant handling of
     static destructors, but only works if your C library supports
     '__cxa_atexit'.

'-fno-use-cxa-get-exception-ptr'
     Don't use the '__cxa_get_exception_ptr' runtime routine.  This
     causes 'std::uncaught_exception' to be incorrect, but is necessary
     if the runtime routine is not available.

'-fvisibility-inlines-hidden'
     This switch declares that the user does not attempt to compare
     pointers to inline functions or methods where the addresses of the
     two functions are taken in different shared objects.

     The effect of this is that GCC may, effectively, mark inline
     methods with '__attribute__ ((visibility ("hidden")))' so that they
     do not appear in the export table of a DSO and do not require a PLT
     indirection when used within the DSO.  Enabling this option can
     have a dramatic effect on load and link times of a DSO as it
     massively reduces the size of the dynamic export table when the
     library makes heavy use of templates.

     The behavior of this switch is not quite the same as marking the
     methods as hidden directly, because it does not affect static
     variables local to the function or cause the compiler to deduce
     that the function is defined in only one shared object.

     You may mark a method as having a visibility explicitly to negate
     the effect of the switch for that method.  For example, if you do
     want to compare pointers to a particular inline method, you might
     mark it as having default visibility.  Marking the enclosing class
     with explicit visibility has no effect.

     Explicitly instantiated inline methods are unaffected by this
     option as their linkage might otherwise cross a shared library
     boundary.  *Note Template Instantiation::.

'-fvisibility-ms-compat'
     This flag attempts to use visibility settings to make GCC's C++
     linkage model compatible with that of Microsoft Visual Studio.

     The flag makes these changes to GCC's linkage model:

       1. It sets the default visibility to 'hidden', like
          '-fvisibility=hidden'.

       2. Types, but not their members, are not hidden by default.

       3. The One Definition Rule is relaxed for types without explicit
          visibility specifications that are defined in more than one
          shared object: those declarations are permitted if they are
          permitted when this option is not used.

     In new code it is better to use '-fvisibility=hidden' and export
     those classes that are intended to be externally visible.
     Unfortunately it is possible for code to rely, perhaps
     accidentally, on the Visual Studio behavior.

     Among the consequences of these changes are that static data
     members of the same type with the same name but defined in
     different shared objects are different, so changing one does not
     change the other; and that pointers to function members defined in
     different shared objects may not compare equal.  When this flag is
     given, it is a violation of the ODR to define types with the same
     name differently.

'-fno-weak'
     Do not use weak symbol support, even if it is provided by the
     linker.  By default, G++ uses weak symbols if they are available.
     This option exists only for testing, and should not be used by
     end-users; it results in inferior code and has no benefits.  This
     option may be removed in a future release of G++.

'-nostdinc++'
     Do not search for header files in the standard directories specific
     to C++, but do still search the other standard directories.  (This
     option is used when building the C++ library.)

 In addition, these optimization, warning, and code generation options
have meanings only for C++ programs:

'-Wabi (C, Objective-C, C++ and Objective-C++ only)'
     Warn when G++ it generates code that is probably not compatible
     with the vendor-neutral C++ ABI.  Since G++ now defaults to
     updating the ABI with each major release, normally '-Wabi' will
     warn only if there is a check added later in a release series for
     an ABI issue discovered since the initial release.  '-Wabi' will
     warn about more things if an older ABI version is selected (with
     '-fabi-version=N').

     '-Wabi' can also be used with an explicit version number to warn
     about compatibility with a particular '-fabi-version' level, e.g.
     '-Wabi=2' to warn about changes relative to '-fabi-version=2'.

     If an explicit version number is provided and
     '-fabi-compat-version' is not specified, the version number from
     this option is used for compatibility aliases.  If no explicit
     version number is provided with this option, but
     '-fabi-compat-version' is specified, that version number is used
     for ABI warnings.

     Although an effort has been made to warn about all such cases,
     there are probably some cases that are not warned about, even
     though G++ is generating incompatible code.  There may also be
     cases where warnings are emitted even though the code that is
     generated is compatible.

     You should rewrite your code to avoid these warnings if you are
     concerned about the fact that code generated by G++ may not be
     binary compatible with code generated by other compilers.

     Known incompatibilities in '-fabi-version=2' (which was the default
     from GCC 3.4 to 4.9) include:

        * A template with a non-type template parameter of reference
          type was mangled incorrectly:
               extern int N;
               template <int &> struct S {};
               void n (S<N>) {2}

          This was fixed in '-fabi-version=3'.

        * SIMD vector types declared using '__attribute ((vector_size))'
          were mangled in a non-standard way that does not allow for
          overloading of functions taking vectors of different sizes.

          The mangling was changed in '-fabi-version=4'.

        * '__attribute ((const))' and 'noreturn' were mangled as type
          qualifiers, and 'decltype' of a plain declaration was folded
          away.

          These mangling issues were fixed in '-fabi-version=5'.

        * Scoped enumerators passed as arguments to a variadic function
          are promoted like unscoped enumerators, causing 'va_arg' to
          complain.  On most targets this does not actually affect the
          parameter passing ABI, as there is no way to pass an argument
          smaller than 'int'.

          Also, the ABI changed the mangling of template argument packs,
          'const_cast', 'static_cast', prefix increment/decrement, and a
          class scope function used as a template argument.

          These issues were corrected in '-fabi-version=6'.

        * Lambdas in default argument scope were mangled incorrectly,
          and the ABI changed the mangling of 'nullptr_t'.

          These issues were corrected in '-fabi-version=7'.

        * When mangling a function type with function-cv-qualifiers, the
          un-qualified function type was incorrectly treated as a
          substitution candidate.

          This was fixed in '-fabi-version=8', the default for GCC 5.1.

        * 'decltype(nullptr)' incorrectly had an alignment of 1, leading
          to unaligned accesses.  Note that this did not affect the ABI
          of a function with a 'nullptr_t' parameter, as parameters have
          a minimum alignment.

          This was fixed in '-fabi-version=9', the default for GCC 5.2.

        * Target-specific attributes that affect the identity of a type,
          such as ia32 calling conventions on a function type (stdcall,
          regparm, etc.), did not affect the mangled name, leading to
          name collisions when function pointers were used as template
          arguments.

          This was fixed in '-fabi-version=10', the default for GCC 6.1.

     It also warns about psABI-related changes.  The known psABI changes
     at this point include:

        * For SysV/x86-64, unions with 'long double' members are passed
          in memory as specified in psABI. For example:

               union U {
                 long double ld;
                 int i;
               };

          'union U' is always passed in memory.

'-Wabi-tag (C++ and Objective-C++ only)'
     Warn when a type with an ABI tag is used in a context that does not
     have that ABI tag.  See *note C++ Attributes:: for more information
     about ABI tags.

'-Wctor-dtor-privacy (C++ and Objective-C++ only)'
     Warn when a class seems unusable because all the constructors or
     destructors in that class are private, and it has neither friends
     nor public static member functions.  Also warn if there are no
     non-private methods, and there's at least one private member
     function that isn't a constructor or destructor.

'-Wdelete-non-virtual-dtor (C++ and Objective-C++ only)'
     Warn when 'delete' is used to destroy an instance of a class that
     has virtual functions and non-virtual destructor.  It is unsafe to
     delete an instance of a derived class through a pointer to a base
     class if the base class does not have a virtual destructor.  This
     warning is enabled by '-Wall'.

'-Wdeprecated-copy (C++ and Objective-C++ only)'
     Warn that the implicit declaration of a copy constructor or copy
     assignment operator is deprecated if the class has a user-provided
     copy constructor or copy assignment operator, in C++11 and up.
     This warning is enabled by '-Wextra'.  With
     '-Wdeprecated-copy-dtor', also deprecate if the class has a
     user-provided destructor.

'-Wno-init-list-lifetime (C++ and Objective-C++ only)'
     Do not warn about uses of 'std::initializer_list' that are likely
     to result in dangling pointers.  Since the underlying array for an
     'initializer_list' is handled like a normal C++ temporary object,
     it is easy to inadvertently keep a pointer to the array past the
     end of the array's lifetime.  For example:

        * If a function returns a temporary 'initializer_list', or a
          local 'initializer_list' variable, the array's lifetime ends
          at the end of the return statement, so the value returned has
          a dangling pointer.

        * If a new-expression creates an 'initializer_list', the array
          only lives until the end of the enclosing full-expression, so
          the 'initializer_list' in the heap has a dangling pointer.

        * When an 'initializer_list' variable is assigned from a
          brace-enclosed initializer list, the temporary array created
          for the right side of the assignment only lives until the end
          of the full-expression, so at the next statement the
          'initializer_list' variable has a dangling pointer.

               // li's initial underlying array lives as long as li
               std::initializer_list<int> li = { 1,2,3 };
               // assignment changes li to point to a temporary array
               li = { 4, 5 };
               // now the temporary is gone and li has a dangling pointer
               int i = li.begin()[0] // undefined behavior

        * When a list constructor stores the 'begin' pointer from the
          'initializer_list' argument, this doesn't extend the lifetime
          of the array, so if a class variable is constructed from a
          temporary 'initializer_list', the pointer is left dangling by
          the end of the variable declaration statement.

'-Wliteral-suffix (C++ and Objective-C++ only)'
     Warn when a string or character literal is followed by a ud-suffix
     which does not begin with an underscore.  As a conforming
     extension, GCC treats such suffixes as separate preprocessing
     tokens in order to maintain backwards compatibility with code that
     uses formatting macros from '<inttypes.h>'.  For example:

          #define __STDC_FORMAT_MACROS
          #include <inttypes.h>
          #include <stdio.h>

          int main() {
            int64_t i64 = 123;
            printf("My int64: %" PRId64"\n", i64);
          }

     In this case, 'PRId64' is treated as a separate preprocessing
     token.

     Additionally, warn when a user-defined literal operator is declared
     with a literal suffix identifier that doesn't begin with an
     underscore.  Literal suffix identifiers that don't begin with an
     underscore are reserved for future standardization.

     This warning is enabled by default.

'-Wlto-type-mismatch'

     During the link-time optimization warn about type mismatches in
     global declarations from different compilation units.  Requires
     '-flto' to be enabled.  Enabled by default.

'-Wno-narrowing (C++ and Objective-C++ only)'
     For C++11 and later standards, narrowing conversions are diagnosed
     by default, as required by the standard.  A narrowing conversion
     from a constant produces an error, and a narrowing conversion from
     a non-constant produces a warning, but '-Wno-narrowing' suppresses
     the diagnostic.  Note that this does not affect the meaning of
     well-formed code; narrowing conversions are still considered
     ill-formed in SFINAE contexts.

     With '-Wnarrowing' in C++98, warn when a narrowing conversion
     prohibited by C++11 occurs within '{ }', e.g.

          int i = { 2.2 }; // error: narrowing from double to int

     This flag is included in '-Wall' and '-Wc++11-compat'.

'-Wnoexcept (C++ and Objective-C++ only)'
     Warn when a noexcept-expression evaluates to false because of a
     call to a function that does not have a non-throwing exception
     specification (i.e.  'throw()' or 'noexcept') but is known by the
     compiler to never throw an exception.

'-Wnoexcept-type (C++ and Objective-C++ only)'
     Warn if the C++17 feature making 'noexcept' part of a function type
     changes the mangled name of a symbol relative to C++14.  Enabled by
     '-Wabi' and '-Wc++17-compat'.

     As an example:

          template <class T> void f(T t) { t(); };
          void g() noexcept;
          void h() { f(g); }

     In C++14, 'f' calls 'f<void(*)()>', but in C++17 it calls
     'f<void(*)()noexcept>'.

'-Wclass-memaccess (C++ and Objective-C++ only)'
     Warn when the destination of a call to a raw memory function such
     as 'memset' or 'memcpy' is an object of class type, and when
     writing into such an object might bypass the class non-trivial or
     deleted constructor or copy assignment, violate const-correctness
     or encapsulation, or corrupt virtual table pointers.  Modifying the
     representation of such objects may violate invariants maintained by
     member functions of the class.  For example, the call to 'memset'
     below is undefined because it modifies a non-trivial class object
     and is, therefore, diagnosed.  The safe way to either initialize or
     clear the storage of objects of such types is by using the
     appropriate constructor or assignment operator, if one is
     available.
          std::string str = "abc";
          memset (&str, 0, sizeof str);
     The '-Wclass-memaccess' option is enabled by '-Wall'.  Explicitly
     casting the pointer to the class object to 'void *' or to a type
     that can be safely accessed by the raw memory function suppresses
     the warning.

'-Wnon-virtual-dtor (C++ and Objective-C++ only)'
     Warn when a class has virtual functions and an accessible
     non-virtual destructor itself or in an accessible polymorphic base
     class, in which case it is possible but unsafe to delete an
     instance of a derived class through a pointer to the class itself
     or base class.  This warning is automatically enabled if '-Weffc++'
     is specified.

'-Wregister (C++ and Objective-C++ only)'
     Warn on uses of the 'register' storage class specifier, except when
     it is part of the GNU *note Explicit Register Variables::
     extension.  The use of the 'register' keyword as storage class
     specifier has been deprecated in C++11 and removed in C++17.
     Enabled by default with '-std=c++17'.

'-Wreorder (C++ and Objective-C++ only)'
     Warn when the order of member initializers given in the code does
     not match the order in which they must be executed.  For instance:

          struct A {
            int i;
            int j;
            A(): j (0), i (1) { }
          };

     The compiler rearranges the member initializers for 'i' and 'j' to
     match the declaration order of the members, emitting a warning to
     that effect.  This warning is enabled by '-Wall'.

'-Wno-pessimizing-move (C++ and Objective-C++ only)'
     This warning warns when a call to 'std::move' prevents copy
     elision.  A typical scenario when copy elision can occur is when
     returning in a function with a class return type, when the
     expression being returned is the name of a non-volatile automatic
     object, and is not a function parameter, and has the same type as
     the function return type.

          struct T {
          ...
          };
          T fn()
          {
            T t;
            ...
            return std::move (t);
          }

     But in this example, the 'std::move' call prevents copy elision.

     This warning is enabled by '-Wall'.

'-Wno-redundant-move (C++ and Objective-C++ only)'
     This warning warns about redundant calls to 'std::move'; that is,
     when a move operation would have been performed even without the
     'std::move' call.  This happens because the compiler is forced to
     treat the object as if it were an rvalue in certain situations such
     as returning a local variable, where copy elision isn't applicable.
     Consider:

          struct T {
          ...
          };
          T fn(T t)
          {
            ...
            return std::move (t);
          }

     Here, the 'std::move' call is redundant.  Because G++ implements
     Core Issue 1579, another example is:

          struct T { // convertible to U
          ...
          };
          struct U {
          ...
          };
          U fn()
          {
            T t;
            ...
            return std::move (t);
          }
     In this example, copy elision isn't applicable because the type of
     the expression being returned and the function return type differ,
     yet G++ treats the return value as if it were designated by an
     rvalue.

     This warning is enabled by '-Wextra'.

'-fext-numeric-literals (C++ and Objective-C++ only)'
     Accept imaginary, fixed-point, or machine-defined literal number
     suffixes as GNU extensions.  When this option is turned off these
     suffixes are treated as C++11 user-defined literal numeric
     suffixes.  This is on by default for all pre-C++11 dialects and all
     GNU dialects: '-std=c++98', '-std=gnu++98', '-std=gnu++11',
     '-std=gnu++14'.  This option is off by default for ISO C++11
     onwards ('-std=c++11', ...).

 The following '-W...' options are not affected by '-Wall'.

'-Weffc++ (C++ and Objective-C++ only)'
     Warn about violations of the following style guidelines from Scott
     Meyers' 'Effective C++' series of books:

        * Define a copy constructor and an assignment operator for
          classes with dynamically-allocated memory.

        * Prefer initialization to assignment in constructors.

        * Have 'operator=' return a reference to '*this'.

        * Don't try to return a reference when you must return an
          object.

        * Distinguish between prefix and postfix forms of increment and
          decrement operators.

        * Never overload '&&', '||', or ','.

     This option also enables '-Wnon-virtual-dtor', which is also one of
     the effective C++ recommendations.  However, the check is extended
     to warn about the lack of virtual destructor in accessible
     non-polymorphic bases classes too.

     When selecting this option, be aware that the standard library
     headers do not obey all of these guidelines; use 'grep -v' to
     filter out those warnings.

'-Wstrict-null-sentinel (C++ and Objective-C++ only)'
     Warn about the use of an uncasted 'NULL' as sentinel.  When
     compiling only with GCC this is a valid sentinel, as 'NULL' is
     defined to '__null'.  Although it is a null pointer constant rather
     than a null pointer, it is guaranteed to be of the same size as a
     pointer.  But this use is not portable across different compilers.

'-Wno-non-template-friend (C++ and Objective-C++ only)'
     Disable warnings when non-template friend functions are declared
     within a template.  In very old versions of GCC that predate
     implementation of the ISO standard, declarations such as 'friend
     int foo(int)', where the name of the friend is an unqualified-id,
     could be interpreted as a particular specialization of a template
     function; the warning exists to diagnose compatibility problems,
     and is enabled by default.

'-Wold-style-cast (C++ and Objective-C++ only)'
     Warn if an old-style (C-style) cast to a non-void type is used
     within a C++ program.  The new-style casts ('dynamic_cast',
     'static_cast', 'reinterpret_cast', and 'const_cast') are less
     vulnerable to unintended effects and much easier to search for.

'-Woverloaded-virtual (C++ and Objective-C++ only)'
     Warn when a function declaration hides virtual functions from a
     base class.  For example, in:

          struct A {
            virtual void f();
          };

          struct B: public A {
            void f(int);
          };

     the 'A' class version of 'f' is hidden in 'B', and code like:

          B* b;
          b->f();

     fails to compile.

'-Wno-pmf-conversions (C++ and Objective-C++ only)'
     Disable the diagnostic for converting a bound pointer to member
     function to a plain pointer.

'-Wsign-promo (C++ and Objective-C++ only)'
     Warn when overload resolution chooses a promotion from unsigned or
     enumerated type to a signed type, over a conversion to an unsigned
     type of the same size.  Previous versions of G++ tried to preserve
     unsignedness, but the standard mandates the current behavior.

'-Wtemplates (C++ and Objective-C++ only)'
     Warn when a primary template declaration is encountered.  Some
     coding rules disallow templates, and this may be used to enforce
     that rule.  The warning is inactive inside a system header file,
     such as the STL, so one can still use the STL. One may also
     instantiate or specialize templates.

'-Wmultiple-inheritance (C++ and Objective-C++ only)'
     Warn when a class is defined with multiple direct base classes.
     Some coding rules disallow multiple inheritance, and this may be
     used to enforce that rule.  The warning is inactive inside a system
     header file, such as the STL, so one can still use the STL. One may
     also define classes that indirectly use multiple inheritance.

'-Wvirtual-inheritance'
     Warn when a class is defined with a virtual direct base class.
     Some coding rules disallow multiple inheritance, and this may be
     used to enforce that rule.  The warning is inactive inside a system
     header file, such as the STL, so one can still use the STL. One may
     also define classes that indirectly use virtual inheritance.

'-Wnamespaces'
     Warn when a namespace definition is opened.  Some coding rules
     disallow namespaces, and this may be used to enforce that rule.
     The warning is inactive inside a system header file, such as the
     STL, so one can still use the STL. One may also use using
     directives and qualified names.

'-Wno-terminate (C++ and Objective-C++ only)'
     Disable the warning about a throw-expression that will immediately
     result in a call to 'terminate'.

'-Wno-class-conversion (C++ and Objective-C++ only)'
     Disable the warning about the case when a conversion function
     converts an object to the same type, to a base class of that type,
     or to void; such a conversion function will never be called.

==============================================================================
File: gcc.info,  Node: |Objective_C_and_Objective_C++_Dialect_Options|,  Next: |Diagnostic_Message_Formatting_Options|,  Prev: |C++_Dialect_Options|,  Up: |Invoking_GCC|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Objective_C_and_Objective_C++_Dialect_Options*

3.6 Options Controlling Objective-C and Objective-C++ Dialects
--------------------------------------------------------------

(NOTE: This manual does not describe the Objective-C and Objective-C++
languages themselves.  *Note Language Standards Supported by GCC:
Standards, for references.)

 This section describes the command-line options that are only
meaningful for Objective-C and Objective-C++ programs.  You can also use
most of the language-independent GNU compiler options.  For example, you
might compile a file 'some_class.m' like this:

     gcc -g -fgnu-runtime -O -c some_class.m

In this example, '-fgnu-runtime' is an option meant only for Objective-C
and Objective-C++ programs; you can use the other options with any
language supported by GCC.

 Note that since Objective-C is an extension of the C language,
Objective-C compilations may also use options specific to the C
front-end (e.g., '-Wtraditional').  Similarly, Objective-C++
compilations may use C++-specific options (e.g., '-Wabi').

 Here is a list of options that are _only_ for compiling Objective-C and
Objective-C++ programs:

'-fconstant-string-class=CLASS-NAME'
     Use CLASS-NAME as the name of the class to instantiate for each
     literal string specified with the syntax '@"..."'.  The default
     class name is 'NXConstantString' if the GNU runtime is being used,
     and 'NSConstantString' if the NeXT runtime is being used (see
     below).  The '-fconstant-cfstrings' option, if also present,
     overrides the '-fconstant-string-class' setting and cause '@"..."'
     literals to be laid out as constant CoreFoundation strings.

'-fgnu-runtime'
     Generate object code compatible with the standard GNU Objective-C
     runtime.  This is the default for most types of systems.

'-fnext-runtime'
     Generate output compatible with the NeXT runtime.  This is the
     default for NeXT-based systems, including Darwin and Mac OS X.  The
     macro '__NEXT_RUNTIME__' is predefined if (and only if) this option
     is used.

'-fno-nil-receivers'
     Assume that all Objective-C message dispatches ('[receiver
     message:arg]') in this translation unit ensure that the receiver is
     not 'nil'.  This allows for more efficient entry points in the
     runtime to be used.  This option is only available in conjunction
     with the NeXT runtime and ABI version 0 or 1.

'-fobjc-abi-version=N'
     Use version N of the Objective-C ABI for the selected runtime.
     This option is currently supported only for the NeXT runtime.  In
     that case, Version 0 is the traditional (32-bit) ABI without
     support for properties and other Objective-C 2.0 additions.
     Version 1 is the traditional (32-bit) ABI with support for
     properties and other Objective-C 2.0 additions.  Version 2 is the
     modern (64-bit) ABI. If nothing is specified, the default is
     Version 0 on 32-bit target machines, and Version 2 on 64-bit target
     machines.

'-fobjc-call-cxx-cdtors'
     For each Objective-C class, check if any of its instance variables
     is a C++ object with a non-trivial default constructor.  If so,
     synthesize a special '- (id) .cxx_construct' instance method which
     runs non-trivial default constructors on any such instance
     variables, in order, and then return 'self'.  Similarly, check if
     any instance variable is a C++ object with a non-trivial
     destructor, and if so, synthesize a special '- (void)
     .cxx_destruct' method which runs all such default destructors, in
     reverse order.

     The '- (id) .cxx_construct' and '- (void) .cxx_destruct' methods
     thusly generated only operate on instance variables declared in the
     current Objective-C class, and not those inherited from
     superclasses.  It is the responsibility of the Objective-C runtime
     to invoke all such methods in an object's inheritance hierarchy.
     The '- (id) .cxx_construct' methods are invoked by the runtime
     immediately after a new object instance is allocated; the '- (void)
     .cxx_destruct' methods are invoked immediately before the runtime
     deallocates an object instance.

     As of this writing, only the NeXT runtime on Mac OS X 10.4 and
     later has support for invoking the '- (id) .cxx_construct' and '-
     (void) .cxx_destruct' methods.

'-fobjc-direct-dispatch'
     Allow fast jumps to the message dispatcher.  On Darwin this is
     accomplished via the comm page.

'-fobjc-exceptions'
     Enable syntactic support for structured exception handling in
     Objective-C, similar to what is offered by C++.  This option is
     required to use the Objective-C keywords '@try', '@throw',
     '@catch', '@finally' and '@synchronized'.  This option is available
     with both the GNU runtime and the NeXT runtime (but not available
     in conjunction with the NeXT runtime on Mac OS X 10.2 and earlier).

'-fobjc-gc'
     Enable garbage collection (GC) in Objective-C and Objective-C++
     programs.  This option is only available with the NeXT runtime; the
     GNU runtime has a different garbage collection implementation that
     does not require special compiler flags.

'-fobjc-nilcheck'
     For the NeXT runtime with version 2 of the ABI, check for a nil
     receiver in method invocations before doing the actual method call.
     This is the default and can be disabled using '-fno-objc-nilcheck'.
     Class methods and super calls are never checked for nil in this way
     no matter what this flag is set to.  Currently this flag does
     nothing when the GNU runtime, or an older version of the NeXT
     runtime ABI, is used.

'-fobjc-std=objc1'
     Conform to the language syntax of Objective-C 1.0, the language
     recognized by GCC 4.0.  This only affects the Objective-C additions
     to the C/C++ language; it does not affect conformance to C/C++
     standards, which is controlled by the separate C/C++ dialect option
     flags.  When this option is used with the Objective-C or
     Objective-C++ compiler, any Objective-C syntax that is not
     recognized by GCC 4.0 is rejected.  This is useful if you need to
     make sure that your Objective-C code can be compiled with older
     versions of GCC.

'-freplace-objc-classes'
     Emit a special marker instructing 'ld(1)' not to statically link in
     the resulting object file, and allow 'dyld(1)' to load it in at run
     time instead.  This is used in conjunction with the
     Fix-and-Continue debugging mode, where the object file in question
     may be recompiled and dynamically reloaded in the course of program
     execution, without the need to restart the program itself.
     Currently, Fix-and-Continue functionality is only available in
     conjunction with the NeXT runtime on Mac OS X 10.3 and later.

'-fzero-link'
     When compiling for the NeXT runtime, the compiler ordinarily
     replaces calls to 'objc_getClass("...")' (when the name of the
     class is known at compile time) with static class references that
     get initialized at load time, which improves run-time performance.
     Specifying the '-fzero-link' flag suppresses this behavior and
     causes calls to 'objc_getClass("...")' to be retained.  This is
     useful in Zero-Link debugging mode, since it allows for individual
     class implementations to be modified during program execution.  The
     GNU runtime currently always retains calls to
     'objc_get_class("...")' regardless of command-line options.

'-fno-local-ivars'
     By default instance variables in Objective-C can be accessed as if
     they were local variables from within the methods of the class
     they're declared in.  This can lead to shadowing between instance
     variables and other variables declared either locally inside a
     class method or globally with the same name.  Specifying the
     '-fno-local-ivars' flag disables this behavior thus avoiding
     variable shadowing issues.

'-fivar-visibility=[public|protected|private|package]'
     Set the default instance variable visibility to the specified
     option so that instance variables declared outside the scope of any
     access modifier directives default to the specified visibility.

'-gen-decls'
     Dump interface declarations for all classes seen in the source file
     to a file named 'SOURCENAME.decl'.

'-Wassign-intercept (Objective-C and Objective-C++ only)'
     Warn whenever an Objective-C assignment is being intercepted by the
     garbage collector.

'-Wno-protocol (Objective-C and Objective-C++ only)'
     If a class is declared to implement a protocol, a warning is issued
     for every method in the protocol that is not implemented by the
     class.  The default behavior is to issue a warning for every method
     not explicitly implemented in the class, even if a method
     implementation is inherited from the superclass.  If you use the
     '-Wno-protocol' option, then methods inherited from the superclass
     are considered to be implemented, and no warning is issued for
     them.

'-Wselector (Objective-C and Objective-C++ only)'
     Warn if multiple methods of different types for the same selector
     are found during compilation.  The check is performed on the list
     of methods in the final stage of compilation.  Additionally, a
     check is performed for each selector appearing in a
     '@selector(...)' expression, and a corresponding method for that
     selector has been found during compilation.  Because these checks
     scan the method table only at the end of compilation, these
     warnings are not produced if the final stage of compilation is not
     reached, for example because an error is found during compilation,
     or because the '-fsyntax-only' option is being used.

'-Wstrict-selector-match (Objective-C and Objective-C++ only)'
     Warn if multiple methods with differing argument and/or return
     types are found for a given selector when attempting to send a
     message using this selector to a receiver of type 'id' or 'Class'.
     When this flag is off (which is the default behavior), the compiler
     omits such warnings if any differences found are confined to types
     that share the same size and alignment.

'-Wundeclared-selector (Objective-C and Objective-C++ only)'
     Warn if a '@selector(...)' expression referring to an undeclared
     selector is found.  A selector is considered undeclared if no
     method with that name has been declared before the '@selector(...)'
     expression, either explicitly in an '@interface' or '@protocol'
     declaration, or implicitly in an '@implementation' section.  This
     option always performs its checks as soon as a '@selector(...)'
     expression is found, while '-Wselector' only performs its checks in
     the final stage of compilation.  This also enforces the coding
     style convention that methods and selectors must be declared before
     being used.

'-print-objc-runtime-info'
     Generate C header describing the largest structure that is passed
     by value, if any.

==============================================================================
File: gcc.info,  Node: |Diagnostic_Message_Formatting_Options|,  Next: |Warning_Options|,  Prev: |Objective_C_and_Objective_C++_Dialect_Options|,  Up: |Invoking_GCC|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *Diagnostic_Message_Formatting_Options*

3.7 Options to Control Diagnostic Messages Formatting
-----------------------------------------------------

Traditionally, diagnostic messages have been formatted irrespective of
the output device's aspect (e.g. its width, ...).  You can use the
options described below to control the formatting algorithm for
diagnostic messages, e.g. how many characters per line, how often source
location information should be reported.  Note that some language front
ends may not honor these options.

'-fmessage-length=N'
     Try to format error messages so that they fit on lines of about N
     characters.  If N is zero, then no line-wrapping is done; each
     error message appears on a single line.  This is the default for
     all front ends.

     Note - this option also affects the display of the '#error' and
     '#warning' pre-processor directives, and the 'deprecated'
     function/type/variable attribute.  It does not however affect the
     'pragma GCC warning' and 'pragma GCC error' pragmas.

'-fdiagnostics-show-location=once'
     Only meaningful in line-wrapping mode.  Instructs the diagnostic
     messages reporter to emit source location information _once_; that
     is, in case the message is too long to fit on a single physical
     line and has to be wrapped, the source location won't be emitted
     (as prefix) again, over and over, in subsequent continuation lines.
     This is the default behavior.

'-fdiagnostics-show-location=every-line'
     Only meaningful in line-wrapping mode.  Instructs the diagnostic
     messages reporter to emit the same source location information (as
     prefix) for physical lines that result from the process of breaking
     a message which is too long to fit on a single line.

'-fdiagnostics-color[=WHEN]'
'-fno-diagnostics-color'
     Use color in diagnostics.  WHEN is 'never', 'always', or 'auto'.
     The default depends on how the compiler has been configured, it can
     be any of the above WHEN options or also 'never' if 'GCC_COLORS'
     environment variable isn't present in the environment, and 'auto'
     otherwise.  'auto' means to use color only when the standard error
     is a terminal.  The forms '-fdiagnostics-color' and
     '-fno-diagnostics-color' are aliases for
     '-fdiagnostics-color=always' and '-fdiagnostics-color=never',
     respectively.

     The colors are defined by the environment variable 'GCC_COLORS'.
     Its value is a colon-separated list of capabilities and Select
     Graphic Rendition (SGR) substrings.  SGR commands are interpreted
     by the terminal or terminal emulator.  (See the section in the
     documentation of your text terminal for permitted values and their
     meanings as character attributes.)  These substring values are
     integers in decimal representation and can be concatenated with
     semicolons.  Common values to concatenate include '1' for bold, '4'
     for underline, '5' for blink, '7' for inverse, '39' for default
     foreground color, '30' to '37' for foreground colors, '90' to '97'
     for 16-color mode foreground colors, '38;5;0' to '38;5;255' for
     88-color and 256-color modes foreground colors, '49' for default
     background color, '40' to '47' for background colors, '100' to
     '107' for 16-color mode background colors, and '48;5;0' to
     '48;5;255' for 88-color and 256-color modes background colors.

     The default 'GCC_COLORS' is
          error=01;31:warning=01;35:note=01;36:range1=32:range2=34:locus=01:\
          quote=01:fixit-insert=32:fixit-delete=31:\
          diff-filename=01:diff-hunk=32:diff-delete=31:diff-insert=32:\
          type-diff=01;32
     where '01;31' is bold red, '01;35' is bold magenta, '01;36' is bold
     cyan, '32' is green, '34' is blue, '01' is bold, and '31' is red.
     Setting 'GCC_COLORS' to the empty string disables colors.
     Supported capabilities are as follows.

     'error='
          SGR substring for error: markers.

     'warning='
          SGR substring for warning: markers.

     'note='
          SGR substring for note: markers.

     'range1='
          SGR substring for first additional range.

     'range2='
          SGR substring for second additional range.

     'locus='
          SGR substring for location information, 'file:line' or
          'file:line:column' etc.

     'quote='
          SGR substring for information printed within quotes.

     'fixit-insert='
          SGR substring for fix-it hints suggesting text to be inserted
          or replaced.

     'fixit-delete='
          SGR substring for fix-it hints suggesting text to be deleted.

     'diff-filename='
          SGR substring for filename headers within generated patches.

     'diff-hunk='
          SGR substring for the starts of hunks within generated
          patches.

     'diff-delete='
          SGR substring for deleted lines within generated patches.

     'diff-insert='
          SGR substring for inserted lines within generated patches.

     'type-diff='
          SGR substring for highlighting mismatching types within
          template arguments in the C++ frontend.

'-fno-diagnostics-show-option'
     By default, each diagnostic emitted includes text indicating the
     command-line option that directly controls the diagnostic (if such
     an option is known to the diagnostic machinery).  Specifying the
     '-fno-diagnostics-show-option' flag suppresses that behavior.

'-fno-diagnostics-show-caret'
     By default, each diagnostic emitted includes the original source
     line and a caret '^' indicating the column.  This option suppresses
     this information.  The source line is truncated to N characters, if
     the '-fmessage-length=n' option is given.  When the output is done
     to the terminal, the width is limited to the width given by the
     'COLUMNS' environment variable or, if not set, to the terminal
     width.

'-fno-diagnostics-show-labels'
     By default, when printing source code (via
     '-fdiagnostics-show-caret'), diagnostics can label ranges of source
     code with pertinent information, such as the types of expressions:

              printf ("foo %s bar", long_i + long_j);
                           ~^       ~~~~~~~~~~~~~~~
                            |              |
                            char *         long int

     This option suppresses the printing of these labels (in the example
     above, the vertical bars and the "char *" and "long int" text).

'-fno-diagnostics-show-line-numbers'
     By default, when printing source code (via
     '-fdiagnostics-show-caret'), a left margin is printed, showing line
     numbers.  This option suppresses this left margin.

'-fdiagnostics-minimum-margin-width=WIDTH'
     This option controls the minimum width of the left margin printed
     by '-fdiagnostics-show-line-numbers'.  It defaults to 6.

'-fdiagnostics-parseable-fixits'
     Emit fix-it hints in a machine-parseable format, suitable for
     consumption by IDEs.  For each fix-it, a line will be printed after
     the relevant diagnostic, starting with the string "fix-it:".  For
     example:

          fix-it:"test.c":{45:3-45:21}:"gtk_widget_show_all"

     The location is expressed as a half-open range, expressed as a
     count of bytes, starting at byte 1 for the initial column.  In the
     above example, bytes 3 through 20 of line 45 of "test.c" are to be
     replaced with the given string:

          00000000011111111112222222222
          12345678901234567890123456789
            gtk_widget_showall (dlg);
            ^^^^^^^^^^^^^^^^^^
            gtk_widget_show_all

     The filename and replacement string escape backslash as "\\", tab
     as "\t", newline as "\n", double quotes as "\"", non-printable
     characters as octal (e.g.  vertical tab as "\013").

     An empty replacement string indicates that the given range is to be
     removed.  An empty range (e.g.  "45:3-45:3") indicates that the
     string is to be inserted at the given position.

'-fdiagnostics-generate-patch'
     Print fix-it hints to stderr in unified diff format, after any
     diagnostics are printed.  For example:

          --- test.c
          +++ test.c
          @ -42,5 +42,5 @

           void show_cb(GtkDialog *dlg)
           {
          -  gtk_widget_showall(dlg);
          +  gtk_widget_show_all(dlg);
           }


     The diff may or may not be colorized, following the same rules as
     for diagnostics (see '-fdiagnostics-color').

'-fdiagnostics-show-template-tree'

     In the C++ frontend, when printing diagnostics showing mismatching
     template types, such as:

            could not convert 'std::map<int, std::vector<double> >()'
              from 'map<[...],vector<double>>' to 'map<[...],vector<float>>

     the '-fdiagnostics-show-template-tree' flag enables printing a
     tree-like structure showing the common and differing parts of the
     types, such as:

            map<
              [...],
              vector<
                [double != float]>>

     The parts that differ are highlighted with color ("double" and
     "float" in this case).

'-fno-elide-type'
     By default when the C++ frontend prints diagnostics showing
     mismatching template types, common parts of the types are printed
     as "[...]"  to simplify the error message.  For example:

            could not convert 'std::map<int, std::vector<double> >()'
              from 'map<[...],vector<double>>' to 'map<[...],vector<float>>

     Specifying the '-fno-elide-type' flag suppresses that behavior.
     This flag also affects the output of the
     '-fdiagnostics-show-template-tree' flag.

'-fno-show-column'
     Do not print column numbers in diagnostics.  This may be necessary
     if diagnostics are being scanned by a program that does not
     understand the column numbers, such as 'dejagnu'.

'-fdiagnostics-format=FORMAT'
     Select a different format for printing diagnostics.  FORMAT is
     'text' or 'json'.  The default is 'text'.

     The 'json' format consists of a top-level JSON array containing
     JSON objects representing the diagnostics.

     The JSON is emitted as one line, without formatting; the examples
     below have been formatted for clarity.

     Diagnostics can have child diagnostics.  For example, this error
     and note:

          misleading-indentation.c:15:3: warning: this 'if' clause does not
            guard... [-Wmisleading-indentation]
             15 |   if (flag)
                |   ^~
          misleading-indentation.c:17:5: note: ...this statement, but the latter
            is misleadingly indented as if it were guarded by the 'if'
             17 |     y = 2;
                |     ^

     might be printed in JSON form (after formatting) like this:

          [
              {
                  "kind": "warning",
                  "locations": [
                      {
                          "caret": {
                              "column": 3,
                              "file": "misleading-indentation.c",
                              "line": 15
                          },
                          "finish": {
                              "column": 4,
                              "file": "misleading-indentation.c",
                              "line": 15
                          }
                      }
                  ],
                  "message": "this \u2018if\u2019 clause does not guard...",
                  "option": "-Wmisleading-indentation",
                  "children": [
                      {
                          "kind": "note",
                          "locations": [
                              {
                                  "caret": {
                                      "column": 5,
                                      "file": "misleading-indentation.c",
                                      "line": 17
                                  }
                              }
                          ],
                          "message": "...this statement, but the latter is ..."
                      }
                  ]
              },
              ...
          ]

     where the 'note' is a child of the 'warning'.

     A diagnostic has a 'kind'.  If this is 'warning', then there is an
     'option' key describing the command-line option controlling the
     warning.

     A diagnostic can contain zero or more locations.  Each location has
     up to three positions within it: a 'caret' position and optional
     'start' and 'finish' positions.  A location can also have an
     optional 'label' string.  For example, this error:

          bad-binary-ops.c:64:23: error: invalid operands to binary + (have 'S' {aka
             'struct s'} and 'T' {aka 'struct t'})
             64 |   return callee_4a () + callee_4b ();
                |          ~~~~~~~~~~~~ ^ ~~~~~~~~~~~~
                |          |              |
                |          |              T {aka struct t}
                |          S {aka struct s}

     has three locations.  Its primary location is at the "+" token at
     column 23.  It has two secondary locations, describing the left and
     right-hand sides of the expression, which have labels.  It might be
     printed in JSON form as:

              {
                  "children": [],
                  "kind": "error",
                  "locations": [
                      {
                          "caret": {
                              "column": 23, "file": "bad-binary-ops.c", "line": 64
                          }
                      },
                      {
                          "caret": {
                              "column": 10, "file": "bad-binary-ops.c", "line": 64
                          },
                          "finish": {
                              "column": 21, "file": "bad-binary-ops.c", "line": 64
                          },
                          "label": "S {aka struct s}"
                      },
                      {
                          "caret": {
                              "column": 25, "file": "bad-binary-ops.c", "line": 64
                          },
                          "finish": {
                              "column": 36, "file": "bad-binary-ops.c", "line": 64
                          },
                          "label": "T {aka struct t}"
                      }
                  ],
                  "message": "invalid operands to binary + ..."
              }

     If a diagnostic contains fix-it hints, it has a 'fixits' array,
     consisting of half-open intervals, similar to the output of
     '-fdiagnostics-parseable-fixits'.  For example, this diagnostic
     with a replacement fix-it hint:

          demo.c:8:15: error: 'struct s' has no member named 'colour'; did you
            mean 'color'?
              8 |   return ptr->colour;
                |               ^~~~~~
                |               color

     might be printed in JSON form as:

              {
                  "children": [],
                  "fixits": [
                      {
                          "next": {
                              "column": 21,
                              "file": "demo.c",
                              "line": 8
                          },
                          "start": {
                              "column": 15,
                              "file": "demo.c",
                              "line": 8
                          },
                          "string": "color"
                      }
                  ],
                  "kind": "error",
                  "locations": [
                      {
                          "caret": {
                              "column": 15,
                              "file": "demo.c",
                              "line": 8
                          },
                          "finish": {
                              "column": 20,
                              "file": "demo.c",
                              "line": 8
                          }
                      }
                  ],
                  "message": "\u2018struct s\u2019 has no member named ..."
              }

     where the fix-it hint suggests replacing the text from 'start' up
     to but not including 'next' with 'string''s value.  Deletions are
     expressed via an empty value for 'string', insertions by having
     'start' equal 'next'.

==============================================================================
File: gcc.info,  Node: |Warning_Options|,  Next: |Debugging_Options|,  Prev: |Diagnostic_Message_Formatting_Options|,  Up: |Invoking_GCC|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *Warning_Options*

3.8 Options to Request or Suppress Warnings
-------------------------------------------

Warnings are diagnostic messages that report constructions that are not
inherently erroneous but that are risky or suggest there may have been
an error.

 The following language-independent options do not enable specific
warnings but control the kinds of diagnostics produced by GCC.

'-fsyntax-only'
     Check the code for syntax errors, but don't do anything beyond
     that.

'-fmax-errors=N'
     Limits the maximum number of error messages to N, at which point
     GCC bails out rather than attempting to continue processing the
     source code.  If N is 0 (the default), there is no limit on the
     number of error messages produced.  If '-Wfatal-errors' is also
     specified, then '-Wfatal-errors' takes precedence over this option.

'-w'
     Inhibit all warning messages.

'-Werror'
     Make all warnings into errors.

'-Werror='
     Make the specified warning into an error.  The specifier for a
     warning is appended; for example '-Werror=switch' turns the
     warnings controlled by '-Wswitch' into errors.  This switch takes a
     negative form, to be used to negate '-Werror' for specific
     warnings; for example '-Wno-error=switch' makes '-Wswitch' warnings
     not be errors, even when '-Werror' is in effect.

     The warning message for each controllable warning includes the
     option that controls the warning.  That option can then be used
     with '-Werror=' and '-Wno-error=' as described above.  (Printing of
     the option in the warning message can be disabled using the
     '-fno-diagnostics-show-option' flag.)

     Note that specifying '-Werror='FOO automatically implies '-W'FOO.
     However, '-Wno-error='FOO does not imply anything.

'-Wfatal-errors'
     This option causes the compiler to abort compilation on the first
     error occurred rather than trying to keep going and printing
     further error messages.

 You can request many specific warnings with options beginning with
'-W', for example '-Wimplicit' to request warnings on implicit
declarations.  Each of these specific warning options also has a
negative form beginning '-Wno-' to turn off warnings; for example,
'-Wno-implicit'.  This manual lists only one of the two forms, whichever
is not the default.  For further language-specific options also refer to
*note C++ Dialect Options:: and *note Objective-C and Objective-C++
Dialect Options::.

 Some options, such as '-Wall' and '-Wextra', turn on other options,
such as '-Wunused', which may turn on further options, such as
'-Wunused-value'.  The combined effect of positive and negative forms is
that more specific options have priority over less specific ones,
independently of their position in the command-line.  For options of the
same specificity, the last one takes effect.  Options enabled or
disabled via pragmas (*note Diagnostic Pragmas::) take effect as if they
appeared at the end of the command-line.

 When an unrecognized warning option is requested (e.g.,
'-Wunknown-warning'), GCC emits a diagnostic stating that the option is
not recognized.  However, if the '-Wno-' form is used, the behavior is
slightly different: no diagnostic is produced for '-Wno-unknown-warning'
unless other diagnostics are being produced.  This allows the use of new
'-Wno-' options with old compilers, but if something goes wrong, the
compiler warns that an unrecognized option is present.

'-Wpedantic'
'-pedantic'
     Issue all the warnings demanded by strict ISO C and ISO C++; reject
     all programs that use forbidden extensions, and some other programs
     that do not follow ISO C and ISO C++.  For ISO C, follows the
     version of the ISO C standard specified by any '-std' option used.

     Valid ISO C and ISO C++ programs should compile properly with or
     without this option (though a rare few require '-ansi' or a '-std'
     option specifying the required version of ISO C).  However, without
     this option, certain GNU extensions and traditional C and C++
     features are supported as well.  With this option, they are
     rejected.

     '-Wpedantic' does not cause warning messages for use of the
     alternate keywords whose names begin and end with '__'.  Pedantic
     warnings are also disabled in the expression that follows
     '__extension__'.  However, only system header files should use
     these escape routes; application programs should avoid them.  *Note
     Alternate Keywords::.

     Some users try to use '-Wpedantic' to check programs for strict ISO
     C conformance.  They soon find that it does not do quite what they
     want: it finds some non-ISO practices, but not all--only those for
     which ISO C _requires_ a diagnostic, and some others for which
     diagnostics have been added.

     A feature to report any failure to conform to ISO C might be useful
     in some instances, but would require considerable additional work
     and would be quite different from '-Wpedantic'.  We don't have
     plans to support such a feature in the near future.

     Where the standard specified with '-std' represents a GNU extended
     dialect of C, such as 'gnu90' or 'gnu99', there is a corresponding
     "base standard", the version of ISO C on which the GNU extended
     dialect is based.  Warnings from '-Wpedantic' are given where they
     are required by the base standard.  (It does not make sense for
     such warnings to be given only for features not in the specified
     GNU C dialect, since by definition the GNU dialects of C include
     all features the compiler supports with the given option, and there
     would be nothing to warn about.)

'-pedantic-errors'
     Give an error whenever the "base standard" (see '-Wpedantic')
     requires a diagnostic, in some cases where there is undefined
     behavior at compile-time and in some other cases that do not
     prevent compilation of programs that are valid according to the
     standard.  This is not equivalent to '-Werror=pedantic', since
     there are errors enabled by this option and not enabled by the
     latter and vice versa.

'-Wall'
     This enables all the warnings about constructions that some users
     consider questionable, and that are easy to avoid (or modify to
     prevent the warning), even in conjunction with macros.  This also
     enables some language-specific warnings described in *note C++
     Dialect Options:: and *note Objective-C and Objective-C++ Dialect
     Options::.

     '-Wall' turns on the following warning flags:

          -Waddress
          -Warray-bounds=1 (only with -O2)
          -Wbool-compare
          -Wbool-operation
          -Wc++11-compat  -Wc++14-compat
          -Wcatch-value (C++ and Objective-C++ only)
          -Wchar-subscripts
          -Wcomment
          -Wduplicate-decl-specifier (C and Objective-C only)
          -Wenum-compare (in C/ObjC; this is on by default in C++)
          -Wformat
          -Wint-in-bool-context
          -Wimplicit (C and Objective-C only)
          -Wimplicit-int (C and Objective-C only)
          -Wimplicit-function-declaration (C and Objective-C only)
          -Winit-self (only for C++)
          -Wlogical-not-parentheses
          -Wmain (only for C/ObjC and unless -ffreestanding)
          -Wmaybe-uninitialized
          -Wmemset-elt-size
          -Wmemset-transposed-args
          -Wmisleading-indentation (only for C/C++)
          -Wmissing-attributes
          -Wmissing-braces (only for C/ObjC)
          -Wmultistatement-macros
          -Wnarrowing (only for C++)
          -Wnonnull
          -Wnonnull-compare
          -Wopenmp-simd
          -Wparentheses
          -Wpessimizing-move (only for C++)
          -Wpointer-sign
          -Wreorder
          -Wrestrict
          -Wreturn-type
          -Wsequence-point
          -Wsign-compare (only in C++)
          -Wsizeof-pointer-div
          -Wsizeof-pointer-memaccess
          -Wstrict-aliasing
          -Wstrict-overflow=1
          -Wswitch
          -Wtautological-compare
          -Wtrigraphs
          -Wuninitialized
          -Wunknown-pragmas
          -Wunused-function
          -Wunused-label
          -Wunused-value
          -Wunused-variable
          -Wvolatile-register-var

     Note that some warning flags are not implied by '-Wall'.  Some of
     them warn about constructions that users generally do not consider
     questionable, but which occasionally you might wish to check for;
     others warn about constructions that are necessary or hard to avoid
     in some cases, and there is no simple way to modify the code to
     suppress the warning.  Some of them are enabled by '-Wextra' but
     many of them must be enabled individually.

'-Wextra'
     This enables some extra warning flags that are not enabled by
     '-Wall'.  (This option used to be called '-W'.  The older name is
     still supported, but the newer name is more descriptive.)

          -Wclobbered
          -Wcast-function-type
          -Wdeprecated-copy (C++ only)
          -Wempty-body
          -Wignored-qualifiers
          -Wimplicit-fallthrough=3
          -Wmissing-field-initializers
          -Wmissing-parameter-type (C only)
          -Wold-style-declaration (C only)
          -Woverride-init
          -Wsign-compare (C only)
          -Wredundant-move (only for C++)
          -Wtype-limits
          -Wuninitialized
          -Wshift-negative-value (in C++03 and in C99 and newer)
          -Wunused-parameter (only with -Wunused or -Wall)
          -Wunused-but-set-parameter (only with -Wunused or -Wall)

     The option '-Wextra' also prints warning messages for the following
     cases:

        * A pointer is compared against integer zero with '<', '<=',
          '>', or '>='.

        * (C++ only) An enumerator and a non-enumerator both appear in a
          conditional expression.

        * (C++ only) Ambiguous virtual bases.

        * (C++ only) Subscripting an array that has been declared
          'register'.

        * (C++ only) Taking the address of a variable that has been
          declared 'register'.

        * (C++ only) A base class is not initialized in the copy
          constructor of a derived class.

'-Wchar-subscripts'
     Warn if an array subscript has type 'char'.  This is a common cause
     of error, as programmers often forget that this type is signed on
     some machines.  This warning is enabled by '-Wall'.

'-Wno-coverage-mismatch'
     Warn if feedback profiles do not match when using the
     '-fprofile-use' option.  If a source file is changed between
     compiling with '-fprofile-generate' and with '-fprofile-use', the
     files with the profile feedback can fail to match the source file
     and GCC cannot use the profile feedback information.  By default,
     this warning is enabled and is treated as an error.
     '-Wno-coverage-mismatch' can be used to disable the warning or
     '-Wno-error=coverage-mismatch' can be used to disable the error.
     Disabling the error for this warning can result in poorly optimized
     code and is useful only in the case of very minor changes such as
     bug fixes to an existing code-base.  Completely disabling the
     warning is not recommended.

'-Wno-cpp'
     (C, Objective-C, C++, Objective-C++ and Fortran only)

     Suppress warning messages emitted by '#warning' directives.

'-Wdouble-promotion (C, C++, Objective-C and Objective-C++ only)'
     Give a warning when a value of type 'float' is implicitly promoted
     to 'double'.  CPUs with a 32-bit "single-precision" floating-point
     unit implement 'float' in hardware, but emulate 'double' in
     software.  On such a machine, doing computations using 'double'
     values is much more expensive because of the overhead required for
     software emulation.

     It is easy to accidentally do computations with 'double' because
     floating-point literals are implicitly of type 'double'.  For
     example, in:
          float area(float radius)
          {
             return 3.14159 * radius * radius;
          }
     the compiler performs the entire computation with 'double' because
     the floating-point literal is a 'double'.

'-Wduplicate-decl-specifier (C and Objective-C only)'
     Warn if a declaration has duplicate 'const', 'volatile', 'restrict'
     or '_Atomic' specifier.  This warning is enabled by '-Wall'.

'-Wformat'
'-Wformat=N'
     Check calls to 'printf' and 'scanf', etc., to make sure that the
     arguments supplied have types appropriate to the format string
     specified, and that the conversions specified in the format string
     make sense.  This includes standard functions, and others specified
     by format attributes (*note Function Attributes::), in the
     'printf', 'scanf', 'strftime' and 'strfmon' (an X/Open extension,
     not in the C standard) families (or other target-specific
     families).  Which functions are checked without format attributes
     having been specified depends on the standard version selected, and
     such checks of functions without the attribute specified are
     disabled by '-ffreestanding' or '-fno-builtin'.

     The formats are checked against the format features supported by
     GNU libc version 2.2.  These include all ISO C90 and C99 features,
     as well as features from the Single Unix Specification and some BSD
     and GNU extensions.  Other library implementations may not support
     all these features; GCC does not support warning about features
     that go beyond a particular library's limitations.  However, if
     '-Wpedantic' is used with '-Wformat', warnings are given about
     format features not in the selected standard version (but not for
     'strfmon' formats, since those are not in any version of the C
     standard).  *Note Options Controlling C Dialect: C Dialect Options.

     '-Wformat=1'
     '-Wformat'
          Option '-Wformat' is equivalent to '-Wformat=1', and
          '-Wno-format' is equivalent to '-Wformat=0'.  Since '-Wformat'
          also checks for null format arguments for several functions,
          '-Wformat' also implies '-Wnonnull'.  Some aspects of this
          level of format checking can be disabled by the options:
          '-Wno-format-contains-nul', '-Wno-format-extra-args', and
          '-Wno-format-zero-length'.  '-Wformat' is enabled by '-Wall'.

     '-Wno-format-contains-nul'
          If '-Wformat' is specified, do not warn about format strings
          that contain NUL bytes.

     '-Wno-format-extra-args'
          If '-Wformat' is specified, do not warn about excess arguments
          to a 'printf' or 'scanf' format function.  The C standard
          specifies that such arguments are ignored.

          Where the unused arguments lie between used arguments that are
          specified with '$' operand number specifications, normally
          warnings are still given, since the implementation could not
          know what type to pass to 'va_arg' to skip the unused
          arguments.  However, in the case of 'scanf' formats, this
          option suppresses the warning if the unused arguments are all
          pointers, since the Single Unix Specification says that such
          unused arguments are allowed.

     '-Wformat-overflow'
     '-Wformat-overflow=LEVEL'
          Warn about calls to formatted input/output functions such as
          'sprintf' and 'vsprintf' that might overflow the destination
          buffer.  When the exact number of bytes written by a format
          directive cannot be determined at compile-time it is estimated
          based on heuristics that depend on the LEVEL argument and on
          optimization.  While enabling optimization will in most cases
          improve the accuracy of the warning, it may also result in
          false positives.

          '-Wformat-overflow'
          '-Wformat-overflow=1'
               Level 1 of '-Wformat-overflow' enabled by '-Wformat'
               employs a conservative approach that warns only about
               calls that most likely overflow the buffer.  At this
               level, numeric arguments to format directives with
               unknown values are assumed to have the value of one, and
               strings of unknown length to be empty.  Numeric arguments
               that are known to be bounded to a subrange of their type,
               or string arguments whose output is bounded either by
               their directive's precision or by a finite set of string
               literals, are assumed to take on the value within the
               range that results in the most bytes on output.  For
               example, the call to 'sprintf' below is diagnosed because
               even with both A and B equal to zero, the terminating NUL
               character (''\0'') appended by the function to the
               destination buffer will be written past its end.
               Increasing the size of the buffer by a single byte is
               sufficient to avoid the warning, though it may not be
               sufficient to avoid the overflow.

                    void f (int a, int b)
                    {
                      char buf [13];
                      sprintf (buf, "a = %i, b = %i\n", a, b);
                    }

          '-Wformat-overflow=2'
               Level 2 warns also about calls that might overflow the
               destination buffer given an argument of sufficient length
               or magnitude.  At level 2, unknown numeric arguments are
               assumed to have the minimum representable value for
               signed types with a precision greater than 1, and the
               maximum representable value otherwise.  Unknown string
               arguments whose length cannot be assumed to be bounded
               either by the directive's precision, or by a finite set
               of string literals they may evaluate to, or the character
               array they may point to, are assumed to be 1 character
               long.

               At level 2, the call in the example above is again
               diagnosed, but this time because with A equal to a 32-bit
               'INT_MIN' the first '%i' directive will write some of its
               digits beyond the end of the destination buffer.  To make
               the call safe regardless of the values of the two
               variables, the size of the destination buffer must be
               increased to at least 34 bytes.  GCC includes the minimum
               size of the buffer in an informational note following the
               warning.

               An alternative to increasing the size of the destination
               buffer is to constrain the range of formatted values.
               The maximum length of string arguments can be bounded by
               specifying the precision in the format directive.  When
               numeric arguments of format directives can be assumed to
               be bounded by less than the precision of their type,
               choosing an appropriate length modifier to the format
               specifier will reduce the required buffer size.  For
               example, if A and B in the example above can be assumed
               to be within the precision of the 'short int' type then
               using either the '%hi' format directive or casting the
               argument to 'short' reduces the maximum required size of
               the buffer to 24 bytes.

                    void f (int a, int b)
                    {
                      char buf [23];
                      sprintf (buf, "a = %hi, b = %i\n", a, (short)b);
                    }

     '-Wno-format-zero-length'
          If '-Wformat' is specified, do not warn about zero-length
          formats.  The C standard specifies that zero-length formats
          are allowed.

     '-Wformat=2'
          Enable '-Wformat' plus additional format checks.  Currently
          equivalent to '-Wformat -Wformat-nonliteral -Wformat-security
          -Wformat-y2k'.

     '-Wformat-nonliteral'
          If '-Wformat' is specified, also warn if the format string is
          not a string literal and so cannot be checked, unless the
          format function takes its format arguments as a 'va_list'.

     '-Wformat-security'
          If '-Wformat' is specified, also warn about uses of format
          functions that represent possible security problems.  At
          present, this warns about calls to 'printf' and 'scanf'
          functions where the format string is not a string literal and
          there are no format arguments, as in 'printf (foo);'.  This
          may be a security hole if the format string came from
          untrusted input and contains '%n'.  (This is currently a
          subset of what '-Wformat-nonliteral' warns about, but in
          future warnings may be added to '-Wformat-security' that are
          not included in '-Wformat-nonliteral'.)

     '-Wformat-signedness'
          If '-Wformat' is specified, also warn if the format string
          requires an unsigned argument and the argument is signed and
          vice versa.

     '-Wformat-truncation'
     '-Wformat-truncation=LEVEL'
          Warn about calls to formatted input/output functions such as
          'snprintf' and 'vsnprintf' that might result in output
          truncation.  When the exact number of bytes written by a
          format directive cannot be determined at compile-time it is
          estimated based on heuristics that depend on the LEVEL
          argument and on optimization.  While enabling optimization
          will in most cases improve the accuracy of the warning, it may
          also result in false positives.  Except as noted otherwise,
          the option uses the same logic '-Wformat-overflow'.

          '-Wformat-truncation'
          '-Wformat-truncation=1'
               Level 1 of '-Wformat-truncation' enabled by '-Wformat'
               employs a conservative approach that warns only about
               calls to bounded functions whose return value is unused
               and that will most likely result in output truncation.

          '-Wformat-truncation=2'
               Level 2 warns also about calls to bounded functions whose
               return value is used and that might result in truncation
               given an argument of sufficient length or magnitude.

     '-Wformat-y2k'
          If '-Wformat' is specified, also warn about 'strftime' formats
          that may yield only a two-digit year.

'-Wnonnull'
     Warn about passing a null pointer for arguments marked as requiring
     a non-null value by the 'nonnull' function attribute.

     '-Wnonnull' is included in '-Wall' and '-Wformat'.  It can be
     disabled with the '-Wno-nonnull' option.

'-Wnonnull-compare'
     Warn when comparing an argument marked with the 'nonnull' function
     attribute against null inside the function.

     '-Wnonnull-compare' is included in '-Wall'.  It can be disabled
     with the '-Wno-nonnull-compare' option.

'-Wnull-dereference'
     Warn if the compiler detects paths that trigger erroneous or
     undefined behavior due to dereferencing a null pointer.  This
     option is only active when '-fdelete-null-pointer-checks' is
     active, which is enabled by optimizations in most targets.  The
     precision of the warnings depends on the optimization options used.

'-Winit-self (C, C++, Objective-C and Objective-C++ only)'
     Warn about uninitialized variables that are initialized with
     themselves.  Note this option can only be used with the
     '-Wuninitialized' option.

     For example, GCC warns about 'i' being uninitialized in the
     following snippet only when '-Winit-self' has been specified:
          int f()
          {
            int i = i;
            return i;
          }

     This warning is enabled by '-Wall' in C++.

'-Wimplicit-int (C and Objective-C only)'
     Warn when a declaration does not specify a type.  This warning is
     enabled by '-Wall'.

'-Wimplicit-function-declaration (C and Objective-C only)'
     Give a warning whenever a function is used before being declared.
     In C99 mode ('-std=c99' or '-std=gnu99'), this warning is enabled
     by default and it is made into an error by '-pedantic-errors'.
     This warning is also enabled by '-Wall'.

'-Wimplicit (C and Objective-C only)'
     Same as '-Wimplicit-int' and '-Wimplicit-function-declaration'.
     This warning is enabled by '-Wall'.

'-Wimplicit-fallthrough'
     '-Wimplicit-fallthrough' is the same as '-Wimplicit-fallthrough=3'
     and '-Wno-implicit-fallthrough' is the same as
     '-Wimplicit-fallthrough=0'.

'-Wimplicit-fallthrough=N'
     Warn when a switch case falls through.  For example:

          switch (cond)
            {
            case 1:
              a = 1;
              break;
            case 2:
              a = 2;
            case 3:
              a = 3;
              break;
            }

     This warning does not warn when the last statement of a case cannot
     fall through, e.g.  when there is a return statement or a call to
     function declared with the noreturn attribute.
     '-Wimplicit-fallthrough=' also takes into account control flow
     statements, such as ifs, and only warns when appropriate.  E.g.

          switch (cond)
            {
            case 1:
              if (i > 3) {
                bar (5);
                break;
              } else if (i < 1) {
                bar (0);
              } else
                return;
            default:
              ...
            }

     Since there are occasions where a switch case fall through is
     desirable, GCC provides an attribute, '__attribute__
     ((fallthrough))', that is to be used along with a null statement to
     suppress this warning that would normally occur:

          switch (cond)
            {
            case 1:
              bar (0);
              __attribute__ ((fallthrough));
            default:
              ...
            }

     C++17 provides a standard way to suppress the
     '-Wimplicit-fallthrough' warning using '[[fallthrough]];' instead
     of the GNU attribute.  In C++11 or C++14 users can use
     '[[gnu::fallthrough]];', which is a GNU extension.  Instead of
     these attributes, it is also possible to add a fallthrough comment
     to silence the warning.  The whole body of the C or C++ style
     comment should match the given regular expressions listed below.
     The option argument N specifies what kind of comments are accepted:

        * '-Wimplicit-fallthrough=0' disables the warning altogether.

        * '-Wimplicit-fallthrough=1' matches '.*' regular expression,
          any comment is used as fallthrough comment.

        * '-Wimplicit-fallthrough=2' case insensitively matches
          '.falls?[ \t-]thr(ough|u).*' regular expression.

        * '-Wimplicit-fallthrough=3' case sensitively matches one of the
          following regular expressions:

             * '-fallthrough'

             * '@fallthrough@'

             * 'lint -fallthrough[ \t]*'

             * '[ \t.!]*(ELSE,? |INTENTIONAL(LY)? )?
               FALL(S | |-)?THR(OUGH|U)[ \t.!]*(-[^\n\r]*)?'

             * '[ \t.!]*(Else,? |Intentional(ly)? )?
               Fall((s | |-)[Tt]|t)hr(ough|u)[ \t.!]*(-[^\n\r]*)?'

             * '[ \t.!]*([Ee]lse,? |[Ii]ntentional(ly)? )?
               fall(s | |-)?thr(ough|u)[ \t.!]*(-[^\n\r]*)?'

        * '-Wimplicit-fallthrough=4' case sensitively matches one of the
          following regular expressions:

             * '-fallthrough'

             * '@fallthrough@'

             * 'lint -fallthrough[ \t]*'

             * '[ \t]*FALLTHR(OUGH|U)[ \t]*'

        * '-Wimplicit-fallthrough=5' doesn't recognize any comments as
          fallthrough comments, only attributes disable the warning.

     The comment needs to be followed after optional whitespace and
     other comments by 'case' or 'default' keywords or by a user label
     that precedes some 'case' or 'default' label.

          switch (cond)
            {
            case 1:
              bar (0);
              /* FALLTHRU */
            default:
              ...
            }

     The '-Wimplicit-fallthrough=3' warning is enabled by '-Wextra'.

'-Wif-not-aligned (C, C++, Objective-C and Objective-C++ only)'
     Control if warning triggered by the 'warn_if_not_aligned' attribute
     should be issued.  This is enabled by default.  Use
     '-Wno-if-not-aligned' to disable it.

'-Wignored-qualifiers (C and C++ only)'
     Warn if the return type of a function has a type qualifier such as
     'const'.  For ISO C such a type qualifier has no effect, since the
     value returned by a function is not an lvalue.  For C++, the
     warning is only emitted for scalar types or 'void'.  ISO C
     prohibits qualified 'void' return types on function definitions, so
     such return types always receive a warning even without this
     option.

     This warning is also enabled by '-Wextra'.

'-Wignored-attributes (C and C++ only)'
     Warn when an attribute is ignored.  This is different from the
     '-Wattributes' option in that it warns whenever the compiler
     decides to drop an attribute, not that the attribute is either
     unknown, used in a wrong place, etc.  This warning is enabled by
     default.

'-Wmain'
     Warn if the type of 'main' is suspicious.  'main' should be a
     function with external linkage, returning int, taking either zero
     arguments, two, or three arguments of appropriate types.  This
     warning is enabled by default in C++ and is enabled by either
     '-Wall' or '-Wpedantic'.

'-Wmisleading-indentation (C and C++ only)'
     Warn when the indentation of the code does not reflect the block
     structure.  Specifically, a warning is issued for 'if', 'else',
     'while', and 'for' clauses with a guarded statement that does not
     use braces, followed by an unguarded statement with the same
     indentation.

     In the following example, the call to "bar" is misleadingly
     indented as if it were guarded by the "if" conditional.

            if (some_condition ())
              foo ();
              bar ();  /* Gotcha: this is not guarded by the "if".  */

     In the case of mixed tabs and spaces, the warning uses the
     '-ftabstop=' option to determine if the statements line up
     (defaulting to 8).

     The warning is not issued for code involving multiline preprocessor
     logic such as the following example.

            if (flagA)
              foo (0);
          #if SOME_CONDITION_THAT_DOES_NOT_HOLD
            if (flagB)
          #endif
              foo (1);

     The warning is not issued after a '#line' directive, since this
     typically indicates autogenerated code, and no assumptions can be
     made about the layout of the file that the directive references.

     This warning is enabled by '-Wall' in C and C++.

'-Wmissing-attributes'
     Warn when a declaration of a function is missing one or more
     attributes that a related function is declared with and whose
     absence may adversely affect the correctness or efficiency of
     generated code.  For example, the warning is issued for
     declarations of aliases that use attributes to specify less
     restrictive requirements than those of their targets.  This
     typically represents a potential optimization opportunity.  By
     contrast, the '-Wattribute-alias=2' option controls warnings issued
     when the alias is more restrictive than the target, which could
     lead to incorrect code generation.  Attributes considered include
     'alloc_align', 'alloc_size', 'cold', 'const', 'hot', 'leaf',
     'malloc', 'nonnull', 'noreturn', 'nothrow', 'pure',
     'returns_nonnull', and 'returns_twice'.

     In C++, the warning is issued when an explicit specialization of a
     primary template declared with attribute 'alloc_align',
     'alloc_size', 'assume_aligned', 'format', 'format_arg', 'malloc',
     or 'nonnull' is declared without it.  Attributes 'deprecated',
     'error', and 'warning' suppress the warning.  (*note Function
     Attributes::).

     You can use the 'copy' attribute to apply the same set of
     attributes to a declaration as that on another declaration without
     explicitly enumerating the attributes.  This attribute can be
     applied to declarations of functions (*note Common Function
     Attributes::), variables (*note Common Variable Attributes::), or
     types (*note Common Type Attributes::).

     '-Wmissing-attributes' is enabled by '-Wall'.

     For example, since the declaration of the primary function template
     below makes use of both attribute 'malloc' and 'alloc_size' the
     declaration of the explicit specialization of the template is
     diagnosed because it is missing one of the attributes.

          template <class T>
          T* __attribute__ ((malloc, alloc_size (1)))
          allocate (size_t);

          template <>
          void* __attribute__ ((malloc))   // missing alloc_size
          allocate<void> (size_t);

'-Wmissing-braces'
     Warn if an aggregate or union initializer is not fully bracketed.
     In the following example, the initializer for 'a' is not fully
     bracketed, but that for 'b' is fully bracketed.  This warning is
     enabled by '-Wall' in C.

          int a[2][2] = { 0, 1, 2, 3 };
          int b[2][2] = { { 0, 1 }, { 2, 3 } };

     This warning is enabled by '-Wall'.

'-Wmissing-include-dirs (C, C++, Objective-C and Objective-C++ only)'
     Warn if a user-supplied include directory does not exist.

'-Wmissing-profile'
     Warn if feedback profiles are missing when using the
     '-fprofile-use' option.  This option diagnoses those cases where a
     new function or a new file is added to the user code between
     compiling with '-fprofile-generate' and with '-fprofile-use',
     without regenerating the profiles.  In these cases, the profile
     feedback data files do not contain any profile feedback information
     for the newly added function or file respectively.  Also, in the
     case when profile count data (.gcda) files are removed, GCC cannot
     use any profile feedback information.  In all these cases, warnings
     are issued to inform the user that a profile generation step is
     due.  '-Wno-missing-profile' can be used to disable the warning.
     Ignoring the warning can result in poorly optimized code.
     Completely disabling the warning is not recommended and should be
     done only when non-existent profile data is justified.

'-Wmultistatement-macros'
     Warn about unsafe multiple statement macros that appear to be
     guarded by a clause such as 'if', 'else', 'for', 'switch', or
     'while', in which only the first statement is actually guarded
     after the macro is expanded.

     For example:

          #define DOIT x++; y++
          if (c)
            DOIT;

     will increment 'y' unconditionally, not just when 'c' holds.  The
     can usually be fixed by wrapping the macro in a do-while loop:
          #define DOIT do { x++; y++; } while (0)
          if (c)
            DOIT;

     This warning is enabled by '-Wall' in C and C++.

'-Wparentheses'
     Warn if parentheses are omitted in certain contexts, such as when
     there is an assignment in a context where a truth value is
     expected, or when operators are nested whose precedence people
     often get confused about.

     Also warn if a comparison like 'x<=y<=z' appears; this is
     equivalent to '(x<=y ? 1 : 0) <= z', which is a different
     interpretation from that of ordinary mathematical notation.

     Also warn for dangerous uses of the GNU extension to '?:' with
     omitted middle operand.  When the condition in the '?': operator is
     a boolean expression, the omitted value is always 1.  Often
     programmers expect it to be a value computed inside the conditional
     expression instead.

     For C++ this also warns for some cases of unnecessary parentheses
     in declarations, which can indicate an attempt at a function call
     instead of a declaration:
          {
            // Declares a local variable called mymutex.
            std::unique_lock<std::mutex> (mymutex);
            // User meant std::unique_lock<std::mutex> lock (mymutex);
          }

     This warning is enabled by '-Wall'.

'-Wsequence-point'
     Warn about code that may have undefined semantics because of
     violations of sequence point rules in the C and C++ standards.

     The C and C++ standards define the order in which expressions in a
     C/C++ program are evaluated in terms of "sequence points", which
     represent a partial ordering between the execution of parts of the
     program: those executed before the sequence point, and those
     executed after it.  These occur after the evaluation of a full
     expression (one which is not part of a larger expression), after
     the evaluation of the first operand of a '&&', '||', '? :' or ','
     (comma) operator, before a function is called (but after the
     evaluation of its arguments and the expression denoting the called
     function), and in certain other places.  Other than as expressed by
     the sequence point rules, the order of evaluation of subexpressions
     of an expression is not specified.  All these rules describe only a
     partial order rather than a total order, since, for example, if two
     functions are called within one expression with no sequence point
     between them, the order in which the functions are called is not
     specified.  However, the standards committee have ruled that
     function calls do not overlap.

     It is not specified when between sequence points modifications to
     the values of objects take effect.  Programs whose behavior depends
     on this have undefined behavior; the C and C++ standards specify
     that "Between the previous and next sequence point an object shall
     have its stored value modified at most once by the evaluation of an
     expression.  Furthermore, the prior value shall be read only to
     determine the value to be stored.".  If a program breaks these
     rules, the results on any particular implementation are entirely
     unpredictable.

     Examples of code with undefined behavior are 'a = a++;', 'a[n] =
     b[n++]' and 'a[i++] = i;'.  Some more complicated cases are not
     diagnosed by this option, and it may give an occasional false
     positive result, but in general it has been found fairly effective
     at detecting this sort of problem in programs.

     The C++17 standard will define the order of evaluation of operands
     in more cases: in particular it requires that the right-hand side
     of an assignment be evaluated before the left-hand side, so the
     above examples are no longer undefined.  But this warning will
     still warn about them, to help people avoid writing code that is
     undefined in C and earlier revisions of C++.

     The standard is worded confusingly, therefore there is some debate
     over the precise meaning of the sequence point rules in subtle
     cases.  Links to discussions of the problem, including proposed
     formal definitions, may be found on the GCC readings page, at
     <http://gcc.gnu.org/readings.html>.

     This warning is enabled by '-Wall' for C and C++.

'-Wno-return-local-addr'
     Do not warn about returning a pointer (or in C++, a reference) to a
     variable that goes out of scope after the function returns.

'-Wreturn-type'
     Warn whenever a function is defined with a return type that
     defaults to 'int'.  Also warn about any 'return' statement with no
     return value in a function whose return type is not 'void' (falling
     off the end of the function body is considered returning without a
     value).

     For C only, warn about a 'return' statement with an expression in a
     function whose return type is 'void', unless the expression type is
     also 'void'.  As a GNU extension, the latter case is accepted
     without a warning unless '-Wpedantic' is used.  Attempting to use
     the return value of a non-'void' function other than 'main' that
     flows off the end by reaching the closing curly brace that
     terminates the function is undefined.

     Unlike in C, in C++, flowing off the end of a non-'void' function
     other than 'main' results in undefined behavior even when the value
     of the function is not used.

     This warning is enabled by default in C++ and by '-Wall' otherwise.

'-Wshift-count-negative'
     Warn if shift count is negative.  This warning is enabled by
     default.

'-Wshift-count-overflow'
     Warn if shift count >= width of type.  This warning is enabled by
     default.

'-Wshift-negative-value'
     Warn if left shifting a negative value.  This warning is enabled by
     '-Wextra' in C99 and C++11 modes (and newer).

'-Wshift-overflow'
'-Wshift-overflow=N'
     Warn about left shift overflows.  This warning is enabled by
     default in C99 and C++11 modes (and newer).

     '-Wshift-overflow=1'
     vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
