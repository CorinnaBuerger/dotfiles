          O(N^2) in the number of edges incoming to each block.
          Increasing values mean more aggressive optimization, making
          the compilation time increase with probably small improvement
          in executable size.

     'min-crossjump-insns'
          The minimum number of instructions that must be matched at the
          end of two blocks before cross-jumping is performed on them.
          This value is ignored in the case where all instructions in
          the block being cross-jumped from are matched.

     'max-grow-copy-bb-insns'
          The maximum code size expansion factor when copying basic
          blocks instead of jumping.  The expansion is relative to a
          jump instruction.

     'max-goto-duplication-insns'
          The maximum number of instructions to duplicate to a block
          that jumps to a computed goto.  To avoid O(N^2) behavior in a
          number of passes, GCC factors computed gotos early in the
          compilation process, and unfactors them as late as possible.
          Only computed jumps at the end of a basic blocks with no more
          than max-goto-duplication-insns are unfactored.

     'max-delay-slot-insn-search'
          The maximum number of instructions to consider when looking
          for an instruction to fill a delay slot.  If more than this
          arbitrary number of instructions are searched, the time
          savings from filling the delay slot are minimal, so stop
          searching.  Increasing values mean more aggressive
          optimization, making the compilation time increase with
          probably small improvement in execution time.

     'max-delay-slot-live-search'
          When trying to fill delay slots, the maximum number of
          instructions to consider when searching for a block with valid
          live register information.  Increasing this arbitrarily chosen
          value means more aggressive optimization, increasing the
          compilation time.  This parameter should be removed when the
          delay slot code is rewritten to maintain the control-flow
          graph.

     'max-gcse-memory'
          The approximate maximum amount of memory that can be allocated
          in order to perform the global common subexpression
          elimination optimization.  If more memory than specified is
          required, the optimization is not done.

     'max-gcse-insertion-ratio'
          If the ratio of expression insertions to deletions is larger
          than this value for any expression, then RTL PRE inserts or
          removes the expression and thus leaves partially redundant
          computations in the instruction stream.

     'max-pending-list-length'
          The maximum number of pending dependencies scheduling allows
          before flushing the current state and starting over.  Large
          functions with few branches or calls can create excessively
          large lists which needlessly consume memory and resources.

     'max-modulo-backtrack-attempts'
          The maximum number of backtrack attempts the scheduler should
          make when modulo scheduling a loop.  Larger values can
          exponentially increase compilation time.

     'max-inline-insns-single'
          Several parameters control the tree inliner used in GCC.  This
          number sets the maximum number of instructions (counted in
          GCC's internal representation) in a single function that the
          tree inliner considers for inlining.  This only affects
          functions declared inline and methods implemented in a class
          declaration (C++).

     'max-inline-insns-auto'
          When you use '-finline-functions' (included in '-O3'), a lot
          of functions that would otherwise not be considered for
          inlining by the compiler are investigated.  To those
          functions, a different (more restrictive) limit compared to
          functions declared inline can be applied.

     'max-inline-insns-small'
          This is bound applied to calls which are considered relevant
          with '-finline-small-functions'.

     'max-inline-insns-size'
          This is bound applied to calls which are optimized for size.
          Small growth may be desirable to anticipate optimization
          oppurtunities exposed by inlining.

     'uninlined-function-insns'
          Number of instructions accounted by inliner for function
          overhead such as function prologue and epilogue.

     'uninlined-function-time'
          Extra time accounted by inliner for function overhead such as
          time needed to execute function prologue and epilogue

     'uninlined-thunk-insns'
     'uninlined-thunk-time'
          Same as '--param uninlined-function-insns' and '--param
          uninlined-function-time' but applied to function thunks

     'inline-min-speedup'
          When estimated performance improvement of caller + callee
          runtime exceeds this threshold (in percent), the function can
          be inlined regardless of the limit on '--param
          max-inline-insns-single' and '--param max-inline-insns-auto'.

     'large-function-insns'
          The limit specifying really large functions.  For functions
          larger than this limit after inlining, inlining is constrained
          by '--param large-function-growth'.  This parameter is useful
          primarily to avoid extreme compilation time caused by
          non-linear algorithms used by the back end.

     'large-function-growth'
          Specifies maximal growth of large function caused by inlining
          in percents.  For example, parameter value 100 limits large
          function growth to 2.0 times the original size.

     'large-unit-insns'
          The limit specifying large translation unit.  Growth caused by
          inlining of units larger than this limit is limited by
          '--param inline-unit-growth'.  For small units this might be
          too tight.  For example, consider a unit consisting of
          function A that is inline and B that just calls A three times.
          If B is small relative to A, the growth of unit is 300\% and
          yet such inlining is very sane.  For very large units
          consisting of small inlineable functions, however, the overall
          unit growth limit is needed to avoid exponential explosion of
          code size.  Thus for smaller units, the size is increased to
          '--param large-unit-insns' before applying '--param
          inline-unit-growth'.

     'inline-unit-growth'
          Specifies maximal overall growth of the compilation unit
          caused by inlining.  For example, parameter value 20 limits
          unit growth to 1.2 times the original size.  Cold functions
          (either marked cold via an attribute or by profile feedback)
          are not accounted into the unit size.

     'ipcp-unit-growth'
          Specifies maximal overall growth of the compilation unit
          caused by interprocedural constant propagation.  For example,
          parameter value 10 limits unit growth to 1.1 times the
          original size.

     'large-stack-frame'
          The limit specifying large stack frames.  While inlining the
          algorithm is trying to not grow past this limit too much.

     'large-stack-frame-growth'
          Specifies maximal growth of large stack frames caused by
          inlining in percents.  For example, parameter value 1000
          limits large stack frame growth to 11 times the original size.

     'max-inline-insns-recursive'
     'max-inline-insns-recursive-auto'
          Specifies the maximum number of instructions an out-of-line
          copy of a self-recursive inline function can grow into by
          performing recursive inlining.

          '--param max-inline-insns-recursive' applies to functions
          declared inline.  For functions not declared inline, recursive
          inlining happens only when '-finline-functions' (included in
          '-O3') is enabled; '--param max-inline-insns-recursive-auto'
          applies instead.

     'max-inline-recursive-depth'
     'max-inline-recursive-depth-auto'
          Specifies the maximum recursion depth used for recursive
          inlining.

          '--param max-inline-recursive-depth' applies to functions
          declared inline.  For functions not declared inline, recursive
          inlining happens only when '-finline-functions' (included in
          '-O3') is enabled; '--param max-inline-recursive-depth-auto'
          applies instead.

     'min-inline-recursive-probability'
          Recursive inlining is profitable only for function having deep
          recursion in average and can hurt for function having little
          recursion depth by increasing the prologue size or complexity
          of function body to other optimizers.

          When profile feedback is available (see '-fprofile-generate')
          the actual recursion depth can be guessed from the probability
          that function recurses via a given call expression.  This
          parameter limits inlining only to call expressions whose
          probability exceeds the given threshold (in percents).

     'early-inlining-insns'
          Specify growth that the early inliner can make.  In effect it
          increases the amount of inlining for code having a large
          abstraction penalty.

     'max-early-inliner-iterations'
          Limit of iterations of the early inliner.  This basically
          bounds the number of nested indirect calls the early inliner
          can resolve.  Deeper chains are still handled by late
          inlining.

     'comdat-sharing-probability'
          Probability (in percent) that C++ inline function with comdat
          visibility are shared across multiple compilation units.

     'profile-func-internal-id'
          A parameter to control whether to use function internal id in
          profile database lookup.  If the value is 0, the compiler uses
          an id that is based on function assembler name and filename,
          which makes old profile data more tolerant to source changes
          such as function reordering etc.

     'min-vect-loop-bound'
          The minimum number of iterations under which loops are not
          vectorized when '-ftree-vectorize' is used.  The number of
          iterations after vectorization needs to be greater than the
          value specified by this option to allow vectorization.

     'gcse-cost-distance-ratio'
          Scaling factor in calculation of maximum distance an
          expression can be moved by GCSE optimizations.  This is
          currently supported only in the code hoisting pass.  The
          bigger the ratio, the more aggressive code hoisting is with
          simple expressions, i.e., the expressions that have cost less
          than 'gcse-unrestricted-cost'.  Specifying 0 disables hoisting
          of simple expressions.

     'gcse-unrestricted-cost'
          Cost, roughly measured as the cost of a single typical machine
          instruction, at which GCSE optimizations do not constrain the
          distance an expression can travel.  This is currently
          supported only in the code hoisting pass.  The lesser the
          cost, the more aggressive code hoisting is.  Specifying 0
          allows all expressions to travel unrestricted distances.

     'max-hoist-depth'
          The depth of search in the dominator tree for expressions to
          hoist.  This is used to avoid quadratic behavior in hoisting
          algorithm.  The value of 0 does not limit on the search, but
          may slow down compilation of huge functions.

     'max-tail-merge-comparisons'
          The maximum amount of similar bbs to compare a bb with.  This
          is used to avoid quadratic behavior in tree tail merging.

     'max-tail-merge-iterations'
          The maximum amount of iterations of the pass over the
          function.  This is used to limit compilation time in tree tail
          merging.

     'store-merging-allow-unaligned'
          Allow the store merging pass to introduce unaligned stores if
          it is legal to do so.

     'max-stores-to-merge'
          The maximum number of stores to attempt to merge into wider
          stores in the store merging pass.

     'max-unrolled-insns'
          The maximum number of instructions that a loop may have to be
          unrolled.  If a loop is unrolled, this parameter also
          determines how many times the loop code is unrolled.

     'max-average-unrolled-insns'
          The maximum number of instructions biased by probabilities of
          their execution that a loop may have to be unrolled.  If a
          loop is unrolled, this parameter also determines how many
          times the loop code is unrolled.

     'max-unroll-times'
          The maximum number of unrollings of a single loop.

     'max-peeled-insns'
          The maximum number of instructions that a loop may have to be
          peeled.  If a loop is peeled, this parameter also determines
          how many times the loop code is peeled.

     'max-peel-times'
          The maximum number of peelings of a single loop.

     'max-peel-branches'
          The maximum number of branches on the hot path through the
          peeled sequence.

     'max-completely-peeled-insns'
          The maximum number of insns of a completely peeled loop.

     'max-completely-peel-times'
          The maximum number of iterations of a loop to be suitable for
          complete peeling.

     'max-completely-peel-loop-nest-depth'
          The maximum depth of a loop nest suitable for complete
          peeling.

     'max-unswitch-insns'
          The maximum number of insns of an unswitched loop.

     'max-unswitch-level'
          The maximum number of branches unswitched in a single loop.

     'lim-expensive'
          The minimum cost of an expensive expression in the loop
          invariant motion.

     'iv-consider-all-candidates-bound'
          Bound on number of candidates for induction variables, below
          which all candidates are considered for each use in induction
          variable optimizations.  If there are more candidates than
          this, only the most relevant ones are considered to avoid
          quadratic time complexity.

     'iv-max-considered-uses'
          The induction variable optimizations give up on loops that
          contain more induction variable uses.

     'iv-always-prune-cand-set-bound'
          If the number of candidates in the set is smaller than this
          value, always try to remove unnecessary ivs from the set when
          adding a new one.

     'avg-loop-niter'
          Average number of iterations of a loop.

     'dse-max-object-size'
          Maximum size (in bytes) of objects tracked bytewise by dead
          store elimination.  Larger values may result in larger
          compilation times.

     'dse-max-alias-queries-per-store'
          Maximum number of queries into the alias oracle per store.
          Larger values result in larger compilation times and may
          result in more removed dead stores.

     'scev-max-expr-size'
          Bound on size of expressions used in the scalar evolutions
          analyzer.  Large expressions slow the analyzer.

     'scev-max-expr-complexity'
          Bound on the complexity of the expressions in the scalar
          evolutions analyzer.  Complex expressions slow the analyzer.

     'max-tree-if-conversion-phi-args'
          Maximum number of arguments in a PHI supported by TREE if
          conversion unless the loop is marked with simd pragma.

     'vect-max-version-for-alignment-checks'
          The maximum number of run-time checks that can be performed
          when doing loop versioning for alignment in the vectorizer.

     'vect-max-version-for-alias-checks'
          The maximum number of run-time checks that can be performed
          when doing loop versioning for alias in the vectorizer.

     'vect-max-peeling-for-alignment'
          The maximum number of loop peels to enhance access alignment
          for vectorizer.  Value -1 means no limit.

     'max-iterations-to-track'
          The maximum number of iterations of a loop the brute-force
          algorithm for analysis of the number of iterations of the loop
          tries to evaluate.

     'hot-bb-count-ws-permille'
          A basic block profile count is considered hot if it
          contributes to the given permillage (i.e. 0...1000) of the
          entire profiled execution.

     'hot-bb-frequency-fraction'
          Select fraction of the entry block frequency of executions of
          basic block in function given basic block needs to have to be
          considered hot.

     'max-predicted-iterations'
          The maximum number of loop iterations we predict statically.
          This is useful in cases where a function contains a single
          loop with known bound and another loop with unknown bound.
          The known number of iterations is predicted correctly, while
          the unknown number of iterations average to roughly 10.  This
          means that the loop without bounds appears artificially cold
          relative to the other one.

     'builtin-expect-probability'
          Control the probability of the expression having the specified
          value.  This parameter takes a percentage (i.e. 0 ...  100) as
          input.

     'builtin-string-cmp-inline-length'
          The maximum length of a constant string for a builtin string
          cmp call eligible for inlining.

     'align-threshold'

          Select fraction of the maximal frequency of executions of a
          basic block in a function to align the basic block.

     'align-loop-iterations'

          A loop expected to iterate at least the selected number of
          iterations is aligned.

     'tracer-dynamic-coverage'
     'tracer-dynamic-coverage-feedback'

          This value is used to limit superblock formation once the
          given percentage of executed instructions is covered.  This
          limits unnecessary code size expansion.

          The 'tracer-dynamic-coverage-feedback' parameter is used only
          when profile feedback is available.  The real profiles (as
          opposed to statically estimated ones) are much less balanced
          allowing the threshold to be larger value.

     'tracer-max-code-growth'
          Stop tail duplication once code growth has reached given
          percentage.  This is a rather artificial limit, as most of the
          duplicates are eliminated later in cross jumping, so it may be
          set to much higher values than is the desired code growth.

     'tracer-min-branch-ratio'

          Stop reverse growth when the reverse probability of best edge
          is less than this threshold (in percent).

     'tracer-min-branch-probability'
     'tracer-min-branch-probability-feedback'

          Stop forward growth if the best edge has probability lower
          than this threshold.

          Similarly to 'tracer-dynamic-coverage' two parameters are
          provided.  'tracer-min-branch-probability-feedback' is used
          for compilation with profile feedback and
          'tracer-min-branch-probability' compilation without.  The
          value for compilation with profile feedback needs to be more
          conservative (higher) in order to make tracer effective.

     'stack-clash-protection-guard-size'
          Specify the size of the operating system provided stack guard
          as 2 raised to NUM bytes.  Higher values may reduce the number
          of explicit probes, but a value larger than the operating
          system provided guard will leave code vulnerable to stack
          clash style attacks.

     'stack-clash-protection-probe-interval'
          Stack clash protection involves probing stack space as it is
          allocated.  This param controls the maximum distance between
          probes into the stack as 2 raised to NUM bytes.  Higher values
          may reduce the number of explicit probes, but a value larger
          than the operating system provided guard will leave code
          vulnerable to stack clash style attacks.

     'max-cse-path-length'

          The maximum number of basic blocks on path that CSE considers.

     'max-cse-insns'
          The maximum number of instructions CSE processes before
          flushing.

     'ggc-min-expand'

          GCC uses a garbage collector to manage its own memory
          allocation.  This parameter specifies the minimum percentage
          by which the garbage collector's heap should be allowed to
          expand between collections.  Tuning this may improve
          compilation speed; it has no effect on code generation.

          The default is 30% + 70% * (RAM/1GB) with an upper bound of
          100% when RAM >= 1GB.  If 'getrlimit' is available, the notion
          of "RAM" is the smallest of actual RAM and 'RLIMIT_DATA' or
          'RLIMIT_AS'.  If GCC is not able to calculate RAM on a
          particular platform, the lower bound of 30% is used.  Setting
          this parameter and 'ggc-min-heapsize' to zero causes a full
          collection to occur at every opportunity.  This is extremely
          slow, but can be useful for debugging.

     'ggc-min-heapsize'

          Minimum size of the garbage collector's heap before it begins
          bothering to collect garbage.  The first collection occurs
          after the heap expands by 'ggc-min-expand'% beyond
          'ggc-min-heapsize'.  Again, tuning this may improve
          compilation speed, and has no effect on code generation.

          The default is the smaller of RAM/8, RLIMIT_RSS, or a limit
          that tries to ensure that RLIMIT_DATA or RLIMIT_AS are not
          exceeded, but with a lower bound of 4096 (four megabytes) and
          an upper bound of 131072 (128 megabytes).  If GCC is not able
          to calculate RAM on a particular platform, the lower bound is
          used.  Setting this parameter very large effectively disables
          garbage collection.  Setting this parameter and
          'ggc-min-expand' to zero causes a full collection to occur at
          every opportunity.

     'max-reload-search-insns'
          The maximum number of instruction reload should look backward
          for equivalent register.  Increasing values mean more
          aggressive optimization, making the compilation time increase
          with probably slightly better performance.

     'max-cselib-memory-locations'
          The maximum number of memory locations cselib should take into
          account.  Increasing values mean more aggressive optimization,
          making the compilation time increase with probably slightly
          better performance.

     'max-sched-ready-insns'
          The maximum number of instructions ready to be issued the
          scheduler should consider at any given time during the first
          scheduling pass.  Increasing values mean more thorough
          searches, making the compilation time increase with probably
          little benefit.

     'max-sched-region-blocks'
          The maximum number of blocks in a region to be considered for
          interblock scheduling.

     'max-pipeline-region-blocks'
          The maximum number of blocks in a region to be considered for
          pipelining in the selective scheduler.

     'max-sched-region-insns'
          The maximum number of insns in a region to be considered for
          interblock scheduling.

     'max-pipeline-region-insns'
          The maximum number of insns in a region to be considered for
          pipelining in the selective scheduler.

     'min-spec-prob'
          The minimum probability (in percents) of reaching a source
          block for interblock speculative scheduling.

     'max-sched-extend-regions-iters'
          The maximum number of iterations through CFG to extend
          regions.  A value of 0 disables region extensions.

     'max-sched-insn-conflict-delay'
          The maximum conflict delay for an insn to be considered for
          speculative motion.

     'sched-spec-prob-cutoff'
          The minimal probability of speculation success (in percents),
          so that speculative insns are scheduled.

     'sched-state-edge-prob-cutoff'
          The minimum probability an edge must have for the scheduler to
          save its state across it.

     'sched-mem-true-dep-cost'
          Minimal distance (in CPU cycles) between store and load
          targeting same memory locations.

     'selsched-max-lookahead'
          The maximum size of the lookahead window of selective
          scheduling.  It is a depth of search for available
          instructions.

     'selsched-max-sched-times'
          The maximum number of times that an instruction is scheduled
          during selective scheduling.  This is the limit on the number
          of iterations through which the instruction may be pipelined.

     'selsched-insns-to-rename'
          The maximum number of best instructions in the ready list that
          are considered for renaming in the selective scheduler.

     'sms-min-sc'
          The minimum value of stage count that swing modulo scheduler
          generates.

     'max-last-value-rtl'
          The maximum size measured as number of RTLs that can be
          recorded in an expression in combiner for a pseudo register as
          last known value of that register.

     'max-combine-insns'
          The maximum number of instructions the RTL combiner tries to
          combine.

     'integer-share-limit'
          Small integer constants can use a shared data structure,
          reducing the compiler's memory usage and increasing its speed.
          This sets the maximum value of a shared integer constant.

     'ssp-buffer-size'
          The minimum size of buffers (i.e. arrays) that receive stack
          smashing protection when '-fstack-protection' is used.

     'min-size-for-stack-sharing'
          The minimum size of variables taking part in stack slot
          sharing when not optimizing.

     'max-jump-thread-duplication-stmts'
          Maximum number of statements allowed in a block that needs to
          be duplicated when threading jumps.

     'max-fields-for-field-sensitive'
          Maximum number of fields in a structure treated in a field
          sensitive manner during pointer analysis.

     'prefetch-latency'
          Estimate on average number of instructions that are executed
          before prefetch finishes.  The distance prefetched ahead is
          proportional to this constant.  Increasing this number may
          also lead to less streams being prefetched (see
          'simultaneous-prefetches').

     'simultaneous-prefetches'
          Maximum number of prefetches that can run at the same time.

     'l1-cache-line-size'
          The size of cache line in L1 data cache, in bytes.

     'l1-cache-size'
          The size of L1 data cache, in kilobytes.

     'l2-cache-size'
          The size of L2 data cache, in kilobytes.

     'prefetch-dynamic-strides'
          Whether the loop array prefetch pass should issue software
          prefetch hints for strides that are non-constant.  In some
          cases this may be beneficial, though the fact the stride is
          non-constant may make it hard to predict when there is clear
          benefit to issuing these hints.

          Set to 1 if the prefetch hints should be issued for
          non-constant strides.  Set to 0 if prefetch hints should be
          issued only for strides that are known to be constant and
          below 'prefetch-minimum-stride'.

     'prefetch-minimum-stride'
          Minimum constant stride, in bytes, to start using prefetch
          hints for.  If the stride is less than this threshold,
          prefetch hints will not be issued.

          This setting is useful for processors that have hardware
          prefetchers, in which case there may be conflicts between the
          hardware prefetchers and the software prefetchers.  If the
          hardware prefetchers have a maximum stride they can handle, it
          should be used here to improve the use of software
          prefetchers.

          A value of -1 means we don't have a threshold and therefore
          prefetch hints can be issued for any constant stride.

          This setting is only useful for strides that are known and
          constant.

     'loop-interchange-max-num-stmts'
          The maximum number of stmts in a loop to be interchanged.

     'loop-interchange-stride-ratio'
          The minimum ratio between stride of two loops for interchange
          to be profitable.

     'min-insn-to-prefetch-ratio'
          The minimum ratio between the number of instructions and the
          number of prefetches to enable prefetching in a loop.

     'prefetch-min-insn-to-mem-ratio'
          The minimum ratio between the number of instructions and the
          number of memory references to enable prefetching in a loop.

     'use-canonical-types'
          Whether the compiler should use the "canonical" type system.
          Should always be 1, which uses a more efficient internal
          mechanism for comparing types in C++ and Objective-C++.
          However, if bugs in the canonical type system are causing
          compilation failures, set this value to 0 to disable canonical
          types.

     'switch-conversion-max-branch-ratio'
          Switch initialization conversion refuses to create arrays that
          are bigger than 'switch-conversion-max-branch-ratio' times the
          number of branches in the switch.

     'max-partial-antic-length'
          Maximum length of the partial antic set computed during the
          tree partial redundancy elimination optimization
          ('-ftree-pre') when optimizing at '-O3' and above.  For some
          sorts of source code the enhanced partial redundancy
          elimination optimization can run away, consuming all of the
          memory available on the host machine.  This parameter sets a
          limit on the length of the sets that are computed, which
          prevents the runaway behavior.  Setting a value of 0 for this
          parameter allows an unlimited set length.

     'rpo-vn-max-loop-depth'
          Maximum loop depth that is value-numbered optimistically.
          When the limit hits the innermost RPO-VN-MAX-LOOP-DEPTH loops
          and the outermost loop in the loop nest are value-numbered
          optimistically and the remaining ones not.

     'sccvn-max-alias-queries-per-access'
          Maximum number of alias-oracle queries we perform when looking
          for redundancies for loads and stores.  If this limit is hit
          the search is aborted and the load or store is not considered
          redundant.  The number of queries is algorithmically limited
          to the number of stores on all paths from the load to the
          function entry.

     'ira-max-loops-num'
          IRA uses regional register allocation by default.  If a
          function contains more loops than the number given by this
          parameter, only at most the given number of the most
          frequently-executed loops form regions for regional register
          allocation.

     'ira-max-conflict-table-size'
          Although IRA uses a sophisticated algorithm to compress the
          conflict table, the table can still require excessive amounts
          of memory for huge functions.  If the conflict table for a
          function could be more than the size in MB given by this
          parameter, the register allocator instead uses a faster,
          simpler, and lower-quality algorithm that does not require
          building a pseudo-register conflict table.

     'ira-loop-reserved-regs'
          IRA can be used to evaluate more accurate register pressure in
          loops for decisions to move loop invariants (see '-O3').  The
          number of available registers reserved for some other purposes
          is given by this parameter.  Default of the parameter is the
          best found from numerous experiments.

     'lra-inheritance-ebb-probability-cutoff'
          LRA tries to reuse values reloaded in registers in subsequent
          insns.  This optimization is called inheritance.  EBB is used
          as a region to do this optimization.  The parameter defines a
          minimal fall-through edge probability in percentage used to
          add BB to inheritance EBB in LRA. The default value was chosen
          from numerous runs of SPEC2000 on x86-64.

     'loop-invariant-max-bbs-in-loop'
          Loop invariant motion can be very expensive, both in
          compilation time and in amount of needed compile-time memory,
          with very large loops.  Loops with more basic blocks than this
          parameter won't have loop invariant motion optimization
          performed on them.

     'loop-max-datarefs-for-datadeps'
          Building data dependencies is expensive for very large loops.
          This parameter limits the number of data references in loops
          that are considered for data dependence analysis.  These large
          loops are no handled by the optimizations using loop data
          dependencies.

     'max-vartrack-size'
          Sets a maximum number of hash table slots to use during
          variable tracking dataflow analysis of any function.  If this
          limit is exceeded with variable tracking at assignments
          enabled, analysis for that function is retried without it,
          after removing all debug insns from the function.  If the
          limit is exceeded even without debug insns, var tracking
          analysis is completely disabled for the function.  Setting the
          parameter to zero makes it unlimited.

     'max-vartrack-expr-depth'
          Sets a maximum number of recursion levels when attempting to
          map variable names or debug temporaries to value expressions.
          This trades compilation time for more complete debug
          information.  If this is set too low, value expressions that
          are available and could be represented in debug information
          may end up not being used; setting this higher may enable the
          compiler to find more complex debug expressions, but compile
          time and memory use may grow.

     'max-debug-marker-count'
          Sets a threshold on the number of debug markers (e.g. begin
          stmt markers) to avoid complexity explosion at inlining or
          expanding to RTL. If a function has more such gimple stmts
          than the set limit, such stmts will be dropped from the
          inlined copy of a function, and from its RTL expansion.

     'min-nondebug-insn-uid'
          Use uids starting at this parameter for nondebug insns.  The
          range below the parameter is reserved exclusively for debug
          insns created by '-fvar-tracking-assignments', but debug insns
          may get (non-overlapping) uids above it if the reserved range
          is exhausted.

     'ipa-sra-ptr-growth-factor'
          IPA-SRA replaces a pointer to an aggregate with one or more
          new parameters only when their cumulative size is less or
          equal to 'ipa-sra-ptr-growth-factor' times the size of the
          original pointer parameter.

     'sra-max-scalarization-size-Ospeed'
     'sra-max-scalarization-size-Osize'
          The two Scalar Reduction of Aggregates passes (SRA and
          IPA-SRA) aim to replace scalar parts of aggregates with uses
          of independent scalar variables.  These parameters control the
          maximum size, in storage units, of aggregate which is
          considered for replacement when compiling for speed
          ('sra-max-scalarization-size-Ospeed') or size
          ('sra-max-scalarization-size-Osize') respectively.

     'tm-max-aggregate-size'
          When making copies of thread-local variables in a transaction,
          this parameter specifies the size in bytes after which
          variables are saved with the logging functions as opposed to
          save/restore code sequence pairs.  This option only applies
          when using '-fgnu-tm'.

     'graphite-max-nb-scop-params'
          To avoid exponential effects in the Graphite loop transforms,
          the number of parameters in a Static Control Part (SCoP) is
          bounded.  A value of zero can be used to lift the bound.  A
          variable whose value is unknown at compilation time and
          defined outside a SCoP is a parameter of the SCoP.

     'loop-block-tile-size'
          Loop blocking or strip mining transforms, enabled with
          '-floop-block' or '-floop-strip-mine', strip mine each loop in
          the loop nest by a given number of iterations.  The strip
          length can be changed using the 'loop-block-tile-size'
          parameter.

     'ipa-cp-value-list-size'
          IPA-CP attempts to track all possible values and types passed
          to a function's parameter in order to propagate them and
          perform devirtualization.  'ipa-cp-value-list-size' is the
          maximum number of values and types it stores per one formal
          parameter of a function.

     'ipa-cp-eval-threshold'
          IPA-CP calculates its own score of cloning profitability
          heuristics and performs those cloning opportunities with
          scores that exceed 'ipa-cp-eval-threshold'.

     'ipa-cp-recursion-penalty'
          Percentage penalty the recursive functions will receive when
          they are evaluated for cloning.

     'ipa-cp-single-call-penalty'
          Percentage penalty functions containing a single call to
          another function will receive when they are evaluated for
          cloning.

     'ipa-max-agg-items'
          IPA-CP is also capable to propagate a number of scalar values
          passed in an aggregate.  'ipa-max-agg-items' controls the
          maximum number of such values per one parameter.

     'ipa-cp-loop-hint-bonus'
          When IPA-CP determines that a cloning candidate would make the
          number of iterations of a loop known, it adds a bonus of
          'ipa-cp-loop-hint-bonus' to the profitability score of the
          candidate.

     'ipa-cp-array-index-hint-bonus'
          When IPA-CP determines that a cloning candidate would make the
          index of an array access known, it adds a bonus of
          'ipa-cp-array-index-hint-bonus' to the profitability score of
          the candidate.

     'ipa-max-aa-steps'
          During its analysis of function bodies, IPA-CP employs alias
          analysis in order to track values pointed to by function
          parameters.  In order not spend too much time analyzing huge
          functions, it gives up and consider all memory clobbered after
          examining 'ipa-max-aa-steps' statements modifying memory.

     'lto-partitions'
          Specify desired number of partitions produced during WHOPR
          compilation.  The number of partitions should exceed the
          number of CPUs used for compilation.

     'lto-min-partition'
          Size of minimal partition for WHOPR (in estimated
          instructions).  This prevents expenses of splitting very small
          programs into too many partitions.

     'lto-max-partition'
          Size of max partition for WHOPR (in estimated instructions).
          to provide an upper bound for individual size of partition.
          Meant to be used only with balanced partitioning.

     'lto-max-streaming-parallelism'
          Maximal number of parallel processes used for LTO streaming.

     'cxx-max-namespaces-for-diagnostic-help'
          The maximum number of namespaces to consult for suggestions
          when C++ name lookup fails for an identifier.

     'sink-frequency-threshold'
          The maximum relative execution frequency (in percents) of the
          target block relative to a statement's original block to allow
          statement sinking of a statement.  Larger numbers result in
          more aggressive statement sinking.  A small positive
          adjustment is applied for statements with memory operands as
          those are even more profitable so sink.

     'max-stores-to-sink'
          The maximum number of conditional store pairs that can be
          sunk.  Set to 0 if either vectorization ('-ftree-vectorize')
          or if-conversion ('-ftree-loop-if-convert') is disabled.

     'allow-store-data-races'
          Allow optimizers to introduce new data races on stores.  Set
          to 1 to allow, otherwise to 0.

     'case-values-threshold'
          The smallest number of different values for which it is best
          to use a jump-table instead of a tree of conditional branches.
          If the value is 0, use the default for the machine.

     'tree-reassoc-width'
          Set the maximum number of instructions executed in parallel in
          reassociated tree.  This parameter overrides target dependent
          heuristics used by default if has non zero value.

     'sched-pressure-algorithm'
          Choose between the two available implementations of
          '-fsched-pressure'.  Algorithm 1 is the original
          implementation and is the more likely to prevent instructions
          from being reordered.  Algorithm 2 was designed to be a
          compromise between the relatively conservative approach taken
          by algorithm 1 and the rather aggressive approach taken by the
          default scheduler.  It relies more heavily on having a regular
          register file and accurate register pressure classes.  See
          'haifa-sched.c' in the GCC sources for more details.

          The default choice depends on the target.

     'max-slsr-cand-scan'
          Set the maximum number of existing candidates that are
          considered when seeking a basis for a new straight-line
          strength reduction candidate.

     'asan-globals'
          Enable buffer overflow detection for global objects.  This
          kind of protection is enabled by default if you are using
          '-fsanitize=address' option.  To disable global objects
          protection use '--param asan-globals=0'.

     'asan-stack'
          Enable buffer overflow detection for stack objects.  This kind
          of protection is enabled by default when using
          '-fsanitize=address'.  To disable stack protection use
          '--param asan-stack=0' option.

     'asan-instrument-reads'
          Enable buffer overflow detection for memory reads.  This kind
          of protection is enabled by default when using
          '-fsanitize=address'.  To disable memory reads protection use
          '--param asan-instrument-reads=0'.

     'asan-instrument-writes'
          Enable buffer overflow detection for memory writes.  This kind
          of protection is enabled by default when using
          '-fsanitize=address'.  To disable memory writes protection use
          '--param asan-instrument-writes=0' option.

     'asan-memintrin'
          Enable detection for built-in functions.  This kind of
          protection is enabled by default when using
          '-fsanitize=address'.  To disable built-in functions
          protection use '--param asan-memintrin=0'.

     'asan-use-after-return'
          Enable detection of use-after-return.  This kind of protection
          is enabled by default when using the '-fsanitize=address'
          option.  To disable it use '--param asan-use-after-return=0'.

          Note: By default the check is disabled at run time.  To enable
          it, add 'detect_stack_use_after_return=1' to the environment
          variable 'ASAN_OPTIONS'.

     'asan-instrumentation-with-call-threshold'
          If number of memory accesses in function being instrumented is
          greater or equal to this number, use callbacks instead of
          inline checks.  E.g.  to disable inline code use '--param
          asan-instrumentation-with-call-threshold=0'.

     'use-after-scope-direct-emission-threshold'
          If the size of a local variable in bytes is smaller or equal
          to this number, directly poison (or unpoison) shadow memory
          instead of using run-time callbacks.

     'max-fsm-thread-path-insns'
          Maximum number of instructions to copy when duplicating blocks
          on a finite state automaton jump thread path.

     'max-fsm-thread-length'
          Maximum number of basic blocks on a finite state automaton
          jump thread path.

     'max-fsm-thread-paths'
          Maximum number of new jump thread paths to create for a finite
          state automaton.

     'parloops-chunk-size'
          Chunk size of omp schedule for loops parallelized by parloops.

     'parloops-schedule'
          Schedule type of omp schedule for loops parallelized by
          parloops (static, dynamic, guided, auto, runtime).

     'parloops-min-per-thread'
          The minimum number of iterations per thread of an innermost
          parallelized loop for which the parallelized variant is
          preferred over the single threaded one.  Note that for a
          parallelized loop nest the minimum number of iterations of the
          outermost loop per thread is two.

     'max-ssa-name-query-depth'
          Maximum depth of recursion when querying properties of SSA
          names in things like fold routines.  One level of recursion
          corresponds to following a use-def chain.

     'hsa-gen-debug-stores'
          Enable emission of special debug stores within HSA kernels
          which are then read and reported by libgomp plugin.
          Generation of these stores is disabled by default, use
          '--param hsa-gen-debug-stores=1' to enable it.

     'max-speculative-devirt-maydefs'
          The maximum number of may-defs we analyze when looking for a
          must-def specifying the dynamic type of an object that invokes
          a virtual call we may be able to devirtualize speculatively.

     'max-vrp-switch-assertions'
          The maximum number of assertions to add along the default edge
          of a switch statement during VRP.

     'unroll-jam-min-percent'
          The minimum percentage of memory references that must be
          optimized away for the unroll-and-jam transformation to be
          considered profitable.

     'unroll-jam-max-unroll'
          The maximum number of times the outer loop should be unrolled
          by the unroll-and-jam transformation.

     'max-rtl-if-conversion-unpredictable-cost'
          Maximum permissible cost for the sequence that would be
          generated by the RTL if-conversion pass for a branch that is
          considered unpredictable.

     'max-variable-expansions-in-unroller'
          If '-fvariable-expansion-in-unroller' is used, the maximum
          number of times that an individual variable will be expanded
          during loop unrolling.

     'tracer-min-branch-probability-feedback'
          Stop forward growth if the probability of best edge is less
          than this threshold (in percent).  Used when profile feedback
          is available.

     'partial-inlining-entry-probability'
          Maximum probability of the entry BB of split region (in
          percent relative to entry BB of the function) to make partial
          inlining happen.

     'max-tracked-strlens'
          Maximum number of strings for which strlen optimization pass
          will track string lengths.

     'gcse-after-reload-partial-fraction'
          The threshold ratio for performing partial redundancy
          elimination after reload.

     'gcse-after-reload-critical-fraction'
          The threshold ratio of critical edges execution count that
          permit performing redundancy elimination after reload.

     'max-loop-header-insns'
          The maximum number of insns in loop header duplicated by the
          copy loop headers pass.

     'vect-epilogues-nomask'
          Enable loop epilogue vectorization using smaller vector size.

     'slp-max-insns-in-bb'
          Maximum number of instructions in basic block to be considered
          for SLP vectorization.

     'avoid-fma-max-bits'
          Maximum number of bits for which we avoid creating FMAs.

     'sms-loop-average-count-threshold'
          A threshold on the average loop count considered by the swing
          modulo scheduler.

     'sms-dfa-history'
          The number of cycles the swing modulo scheduler considers when
          checking conflicts using DFA.

     'hot-bb-count-fraction'
          Select fraction of the maximal count of repetitions of basic
          block in program given basic block needs to have to be
          considered hot (used in non-LTO mode)

     'max-inline-insns-recursive-auto'
          The maximum number of instructions non-inline function can
          grow to via recursive inlining.

     'graphite-allow-codegen-errors'
          Whether codegen errors should be ICEs when '-fchecking'.

     'sms-max-ii-factor'
          A factor for tuning the upper bound that swing modulo
          scheduler uses for scheduling a loop.

     'lra-max-considered-reload-pseudos'
          The max number of reload pseudos which are considered during
          spilling a non-reload pseudo.

     'max-pow-sqrt-depth'
          Maximum depth of sqrt chains to use when synthesizing
          exponentiation by a real constant.

     'max-dse-active-local-stores'
          Maximum number of active local stores in RTL dead store
          elimination.

     'asan-instrument-allocas'
          Enable asan allocas/VLAs protection.

     'max-iterations-computation-cost'
          Bound on the cost of an expression to compute the number of
          iterations.

     'max-isl-operations'
          Maximum number of isl operations, 0 means unlimited.

     'graphite-max-arrays-per-scop'
          Maximum number of arrays per scop.

     'max-vartrack-reverse-op-size'
          Max.  size of loc list for which reverse ops should be added.

     'unlikely-bb-count-fraction'
          The minimum fraction of profile runs a given basic block
          execution count must be not to be considered unlikely.

     'tracer-dynamic-coverage-feedback'
          The percentage of function, weighted by execution frequency,
          that must be covered by trace formation.  Used when profile
          feedback is available.

     'max-inline-recursive-depth-auto'
          The maximum depth of recursive inlining for non-inline
          functions.

     'fsm-scale-path-stmts'
          Scale factor to apply to the number of statements in a
          threading path when comparing to the number of (scaled)
          blocks.

     'fsm-maximum-phi-arguments'
          Maximum number of arguments a PHI may have before the FSM
          threader will not try to thread through its block.

     'uninit-control-dep-attempts'
          Maximum number of nested calls to search for control
          dependencies during uninitialized variable analysis.

     'indir-call-topn-profile'
          Track top N target addresses in indirect-call profile.

     'max-once-peeled-insns'
          The maximum number of insns of a peeled loop that rolls only
          once.

     'sra-max-scalarization-size-Osize'
          Maximum size, in storage units, of an aggregate which should
          be considered for scalarization when compiling for size.

     'fsm-scale-path-blocks'
          Scale factor to apply to the number of blocks in a threading
          path when comparing to the number of (scaled) statements.

     'sched-autopref-queue-depth'
          Hardware autoprefetcher scheduler model control flag.  Number
          of lookahead cycles the model looks into; at ' ' only enable
          instruction sorting heuristic.

     'loop-versioning-max-inner-insns'
          The maximum number of instructions that an inner loop can have
          before the loop versioning pass considers it too big to copy.

     'loop-versioning-max-outer-insns'
          The maximum number of instructions that an outer loop can have
          before the loop versioning pass considers it too big to copy,
          discounting any instructions in inner loops that directly
          benefit from versioning.

     'ssa-name-def-chain-limit'
          The maximum number of SSA_NAME assignments to follow in
          determining a property of a variable such as its value.  This
          limits the number of iterations or recursive calls GCC
          performs when optimizing certain statements or when
          determining their validity prior to issuing diagnostics.

==============================================================================
File: gcc.info,  Node: |Instrumentation_Options|,  Next: |Preprocessor_Options|,  Prev: |Optimize_Options|,  Up: |Invoking_GCC|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *Instrumentation_Options*

3.11 Program Instrumentation Options
==========--------------------------

GCC supports a number of command-line options that control adding
run-time instrumentation to the code it normally generates.  For
example, one purpose of instrumentation is collect profiling statistics
for use in finding program hot spots, code coverage analysis, or
profile-guided optimizations.  Another class of program instrumentation
is adding run-time checking to detect programming errors like invalid
pointer dereferences or out-of-bounds array accesses, as well as
deliberately hostile attacks such as stack smashing or C++ vtable
hijacking.  There is also a general hook which can be used to implement
other forms of tracing or function-level instrumentation for debug or
program analysis purposes.

'-p'
'-pg'
     Generate extra code to write profile information suitable for the
     analysis program 'prof' (for '-p') or 'gprof' (for '-pg').  You
     must use this option when compiling the source files you want data
     about, and you must also use it when linking.

     You can use the function attribute 'no_instrument_function' to
     suppress profiling of individual functions when compiling with
     these options.  *Note Common Function Attributes::.

'-fprofile-arcs'
     Add code so that program flow "arcs" are instrumented.  During
     execution the program records how many times each branch and call
     is executed and how many times it is taken or returns.  On targets
     that support constructors with priority support, profiling properly
     handles constructors, destructors and C++ constructors (and
     destructors) of classes which are used as a type of a global
     variable.

     When the compiled program exits it saves this data to a file called
     'AUXNAME.gcda' for each source file.  The data may be used for
     profile-directed optimizations ('-fbranch-probabilities'), or for
     test coverage analysis ('-ftest-coverage').  Each object file's
     AUXNAME is generated from the name of the output file, if
     explicitly specified and it is not the final executable, otherwise
     it is the basename of the source file.  In both cases any suffix is
     removed (e.g. 'foo.gcda' for input file 'dir/foo.c', or
     'dir/foo.gcda' for output file specified as '-o dir/foo.o').  *Note
     Cross-profiling::.

'--coverage'

     This option is used to compile and link code instrumented for
     coverage analysis.  The option is a synonym for '-fprofile-arcs'
     '-ftest-coverage' (when compiling) and '-lgcov' (when linking).
     See the documentation for those options for more details.

        * Compile the source files with '-fprofile-arcs' plus
          optimization and code generation options.  For test coverage
          analysis, use the additional '-ftest-coverage' option.  You do
          not need to profile every source file in a program.

        * Compile the source files additionally with
          '-fprofile-abs-path' to create absolute path names in the
          '.gcno' files.  This allows 'gcov' to find the correct sources
          in projects where compilations occur with different working
          directories.

        * Link your object files with '-lgcov' or '-fprofile-arcs' (the
          latter implies the former).

        * Run the program on a representative workload to generate the
          arc profile information.  This may be repeated any number of
          times.  You can run concurrent instances of your program, and
          provided that the file system supports locking, the data files
          will be correctly updated.  Unless a strict ISO C dialect
          option is in effect, 'fork' calls are detected and correctly
          handled without double counting.

        * For profile-directed optimizations, compile the source files
          again with the same optimization and code generation options
          plus '-fbranch-probabilities' (*note Options that Control
          Optimization: Optimize Options.).

        * For test coverage analysis, use 'gcov' to produce human
          readable information from the '.gcno' and '.gcda' files.
          Refer to the 'gcov' documentation for further information.

     With '-fprofile-arcs', for each function of your program GCC
     creates a program flow graph, then finds a spanning tree for the
     graph.  Only arcs that are not on the spanning tree have to be
     instrumented: the compiler adds code to count the number of times
     that these arcs are executed.  When an arc is the only exit or only
     entrance to a block, the instrumentation code can be added to the
     block; otherwise, a new basic block must be created to hold the
     instrumentation code.

'-ftest-coverage'
     Produce a notes file that the 'gcov' code-coverage utility (*note
     'gcov'--a Test Coverage Program: Gcov.) can use to show program
     coverage.  Each source file's note file is called 'AUXNAME.gcno'.
     Refer to the '-fprofile-arcs' option above for a description of
     AUXNAME and instructions on how to generate test coverage data.
     Coverage data matches the source files more closely if you do not
     optimize.

'-fprofile-abs-path'
     Automatically convert relative source file names to absolute path
     names in the '.gcno' files.  This allows 'gcov' to find the correct
     sources in projects where compilations occur with different working
     directories.

'-fprofile-dir=PATH'

     Set the directory to search for the profile data files in to PATH.
     This option affects only the profile data generated by
     '-fprofile-generate', '-ftest-coverage', '-fprofile-arcs' and used
     by '-fprofile-use' and '-fbranch-probabilities' and its related
     options.  Both absolute and relative paths can be used.  By
     default, GCC uses the current directory as PATH, thus the profile
     data file appears in the same directory as the object file.  In
     order to prevent the file name clashing, if the object file name is
     not an absolute path, we mangle the absolute path of the
     'SOURCENAME.gcda' file and use it as the file name of a '.gcda'
     file.

     When an executable is run in a massive parallel environment, it is
     recommended to save profile to different folders.  That can be done
     with variables in PATH that are exported during run-time:

     '%p'
          process ID.

     '%q{VAR}'
          value of environment variable VAR

'-fprofile-generate'
'-fprofile-generate=PATH'

     Enable options usually used for instrumenting application to
     produce profile useful for later recompilation with profile
     feedback based optimization.  You must use '-fprofile-generate'
     both when compiling and when linking your program.

     The following options are enabled: '-fprofile-arcs',
     '-fprofile-values', '-finline-functions', and '-fipa-bit-cp'.

     If PATH is specified, GCC looks at the PATH to find the profile
     feedback data files.  See '-fprofile-dir'.

     To optimize the program based on the collected profile information,
     use '-fprofile-use'.  *Note Optimize Options::, for more
     information.

'-fprofile-update=METHOD'

     Alter the update method for an application instrumented for profile
     feedback based optimization.  The METHOD argument should be one of
     'single', 'atomic' or 'prefer-atomic'.  The first one is useful for
     single-threaded applications, while the second one prevents profile
     corruption by emitting thread-safe code.

     Warning: When an application does not properly join all threads
     (or creates an detached thread), a profile file can be still
     corrupted.

     Using 'prefer-atomic' would be transformed either to 'atomic', when
     supported by a target, or to 'single' otherwise.  The GCC driver
     automatically selects 'prefer-atomic' when '-pthread' is present in
     the command line.

'-fprofile-filter-files=REGEX'

     Instrument only functions from files where names match any regular
     expression (separated by a semi-colon).

     For example, '-fprofile-filter-files=main.c;module.*.c' will
     instrument only 'main.c' and all C files starting with 'module'.

'-fprofile-exclude-files=REGEX'

     Instrument only functions from files where names do not match all
     the regular expressions (separated by a semi-colon).

     For example, '-fprofile-exclude-files=/usr/*' will prevent
     instrumentation of all files that are located in '/usr/' folder.

'-fsanitize=address'
     Enable AddressSanitizer, a fast memory error detector.  Memory
     access instructions are instrumented to detect out-of-bounds and
     use-after-free bugs.  The option enables
     '-fsanitize-address-use-after-scope'.  See
     <https://github.com/google/sanitizers/wiki/AddressSanitizer> for
     more details.  The run-time behavior can be influenced using the
     'ASAN_OPTIONS' environment variable.  When set to 'help=1', the
     available options are shown at startup of the instrumented program.
     See
     <https://github.com/google/sanitizers/wiki/AddressSanitizerFlags#run-time-flags>
     for a list of supported options.  The option cannot be combined
     with '-fsanitize=thread'.

'-fsanitize=kernel-address'
     Enable AddressSanitizer for Linux kernel.  See
     <https://github.com/google/kasan/wiki> for more details.

'-fsanitize=pointer-compare'
     Instrument comparison operation (<, <=, >, >=) with pointer
     operands.  The option must be combined with either
     '-fsanitize=kernel-address' or '-fsanitize=address' The option
     cannot be combined with '-fsanitize=thread'.  Note: By default the
     check is disabled at run time.  To enable it, add
     'detect_invalid_pointer_pairs=2' to the environment variable
     'ASAN_OPTIONS'.  Using 'detect_invalid_pointer_pairs=1' detects
     invalid operation only when both pointers are non-null.

'-fsanitize=pointer-subtract'
     Instrument subtraction with pointer operands.  The option must be
     combined with either '-fsanitize=kernel-address' or
     '-fsanitize=address' The option cannot be combined with
     '-fsanitize=thread'.  Note: By default the check is disabled at run
     time.  To enable it, add 'detect_invalid_pointer_pairs=2' to the
     environment variable 'ASAN_OPTIONS'.  Using
     'detect_invalid_pointer_pairs=1' detects invalid operation only
     when both pointers are non-null.

'-fsanitize=thread'
     Enable ThreadSanitizer, a fast data race detector.  Memory access
     instructions are instrumented to detect data race bugs.  See
     <https://github.com/google/sanitizers/wiki#threadsanitizer> for
     more details.  The run-time behavior can be influenced using the
     'TSAN_OPTIONS' environment variable; see
     <https://github.com/google/sanitizers/wiki/ThreadSanitizerFlags>
     for a list of supported options.  The option cannot be combined
     with '-fsanitize=address', '-fsanitize=leak'.

     Note that sanitized atomic builtins cannot throw exceptions when
     operating on invalid memory addresses with non-call exceptions
     ('-fnon-call-exceptions').

'-fsanitize=leak'
     Enable LeakSanitizer, a memory leak detector.  This option only
     matters for linking of executables and the executable is linked
     against a library that overrides 'malloc' and other allocator
     functions.  See
     <https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer>
     for more details.  The run-time behavior can be influenced using
     the 'LSAN_OPTIONS' environment variable.  The option cannot be
     combined with '-fsanitize=thread'.

'-fsanitize=undefined'
     Enable UndefinedBehaviorSanitizer, a fast undefined behavior
     detector.  Various computations are instrumented to detect
     undefined behavior at runtime.  Current suboptions are:

     '-fsanitize=shift'
          This option enables checking that the result of a shift
          operation is not undefined.  Note that what exactly is
          considered undefined differs slightly between C and C++, as
          well as between ISO C90 and C99, etc.  This option has two
          suboptions, '-fsanitize=shift-base' and
          '-fsanitize=shift-exponent'.

     '-fsanitize=shift-exponent'
          This option enables checking that the second argument of a
          shift operation is not negative and is smaller than the
          precision of the promoted first argument.

     '-fsanitize=shift-base'
          If the second argument of a shift operation is within range,
          check that the result of a shift operation is not undefined.
          Note that what exactly is considered undefined differs
          slightly between C and C++, as well as between ISO C90 and
          C99, etc.

     '-fsanitize=integer-divide-by-zero'
          Detect integer division by zero as well as 'INT_MIN / -1'
          division.

     '-fsanitize=unreachable'
          With this option, the compiler turns the
          '__builtin_unreachable' call into a diagnostics message call
          instead.  When reaching the '__builtin_unreachable' call, the
          behavior is undefined.

     '-fsanitize=vla-bound'
          This option instructs the compiler to check that the size of a
          variable length array is positive.

     '-fsanitize=null'
          This option enables pointer checking.  Particularly, the
          application built with this option turned on will issue an
          error message when it tries to dereference a NULL pointer, or
          if a reference (possibly an rvalue reference) is bound to a
          NULL pointer, or if a method is invoked on an object pointed
          by a NULL pointer.

     '-fsanitize=return'
          This option enables return statement checking.  Programs built
          with this option turned on will issue an error message when
          the end of a non-void function is reached without actually
          returning a value.  This option works in C++ only.

     '-fsanitize=signed-integer-overflow'
          This option enables signed integer overflow checking.  We
          check that the result of '+', '*', and both unary and binary
          '-' does not overflow in the signed arithmetics.  Note,
          integer promotion rules must be taken into account.  That is,
          the following is not an overflow:
               signed char a = SCHAR_MAX;
               a++;

     '-fsanitize=bounds'
          This option enables instrumentation of array bounds.  Various
          out of bounds accesses are detected.  Flexible array members,
          flexible array member-like arrays, and initializers of
          variables with static storage are not instrumented.

     '-fsanitize=bounds-strict'
          This option enables strict instrumentation of array bounds.
          Most out of bounds accesses are detected, including flexible
          array members and flexible array member-like arrays.
          Initializers of variables with static storage are not
          instrumented.

     '-fsanitize=alignment'

          This option enables checking of alignment of pointers when
          they are dereferenced, or when a reference is bound to
          insufficiently aligned target, or when a method or constructor
          is invoked on insufficiently aligned object.

     '-fsanitize=object-size'
          This option enables instrumentation of memory references using
          the '__builtin_object_size' function.  Various out of bounds
          pointer accesses are detected.

     '-fsanitize=float-divide-by-zero'
          Detect floating-point division by zero.  Unlike other similar
          options, '-fsanitize=float-divide-by-zero' is not enabled by
          '-fsanitize=undefined', since floating-point division by zero
          can be a legitimate way of obtaining infinities and NaNs.

     '-fsanitize=float-cast-overflow'
          This option enables floating-point type to integer conversion
          checking.  We check that the result of the conversion does not
          overflow.  Unlike other similar options,
          '-fsanitize=float-cast-overflow' is not enabled by
          '-fsanitize=undefined'.  This option does not work well with
          'FE_INVALID' exceptions enabled.

     '-fsanitize=nonnull-attribute'

          This option enables instrumentation of calls, checking whether
          null values are not passed to arguments marked as requiring a
          non-null value by the 'nonnull' function attribute.

     '-fsanitize=returns-nonnull-attribute'

          This option enables instrumentation of return statements in
          functions marked with 'returns_nonnull' function attribute, to
          detect returning of null values from such functions.

     '-fsanitize=bool'

          This option enables instrumentation of loads from bool.  If a
          value other than 0/1 is loaded, a run-time error is issued.

     '-fsanitize=enum'

          This option enables instrumentation of loads from an enum
          type.  If a value outside the range of values for the enum
          type is loaded, a run-time error is issued.

     '-fsanitize=vptr'

          This option enables instrumentation of C++ member function
          calls, member accesses and some conversions between pointers
          to base and derived classes, to verify the referenced object
          has the correct dynamic type.

     '-fsanitize=pointer-overflow'

          This option enables instrumentation of pointer arithmetics.
          If the pointer arithmetics overflows, a run-time error is
          issued.

     '-fsanitize=builtin'

          This option enables instrumentation of arguments to selected
          builtin functions.  If an invalid value is passed to such
          arguments, a run-time error is issued.  E.g. passing 0 as the
          argument to '__builtin_ctz' or '__builtin_clz' invokes
          undefined behavior and is diagnosed by this option.

     While '-ftrapv' causes traps for signed overflows to be emitted,
     '-fsanitize=undefined' gives a diagnostic message.  This currently
     works only for the C family of languages.

'-fno-sanitize=all'

     This option disables all previously enabled sanitizers.
     '-fsanitize=all' is not allowed, as some sanitizers cannot be used
     together.

'-fasan-shadow-offset=NUMBER'
     This option forces GCC to use custom shadow offset in
     AddressSanitizer checks.  It is useful for experimenting with
     different shadow memory layouts in Kernel AddressSanitizer.

'-fsanitize-sections=S1,S2,...'
     Sanitize global variables in selected user-defined sections.  SI
     may contain wildcards.

'-fsanitize-recover[=OPTS]'
     '-fsanitize-recover=' controls error recovery mode for sanitizers
     mentioned in comma-separated list of OPTS.  Enabling this option
     for a sanitizer component causes it to attempt to continue running
     the program as if no error happened.  This means multiple runtime
     errors can be reported in a single program run, and the exit code
     of the program may indicate success even when errors have been
     reported.  The '-fno-sanitize-recover=' option can be used to alter
     this behavior: only the first detected error is reported and
     program then exits with a non-zero exit code.

     Currently this feature only works for '-fsanitize=undefined' (and
     its suboptions except for '-fsanitize=unreachable' and
     '-fsanitize=return'), '-fsanitize=float-cast-overflow',
     '-fsanitize=float-divide-by-zero', '-fsanitize=bounds-strict',
     '-fsanitize=kernel-address' and '-fsanitize=address'.  For these
     sanitizers error recovery is turned on by default, except
     '-fsanitize=address', for which this feature is experimental.
     '-fsanitize-recover=all' and '-fno-sanitize-recover=all' is also
     accepted, the former enables recovery for all sanitizers that
     support it, the latter disables recovery for all sanitizers that
     support it.

     Even if a recovery mode is turned on the compiler side, it needs to
     be also enabled on the runtime library side, otherwise the failures
     are still fatal.  The runtime library defaults to 'halt_on_error=0'
     for ThreadSanitizer and UndefinedBehaviorSanitizer, while default
     value for AddressSanitizer is 'halt_on_error=1'.  This can be
     overridden through setting the 'halt_on_error' flag in the
     corresponding environment variable.

     Syntax without an explicit OPTS parameter is deprecated.  It is
     equivalent to specifying an OPTS list of:

          undefined,float-cast-overflow,float-divide-by-zero,bounds-strict

'-fsanitize-address-use-after-scope'
     Enable sanitization of local variables to detect use-after-scope
     bugs.  The option sets '-fstack-reuse' to 'none'.

'-fsanitize-undefined-trap-on-error'
     The '-fsanitize-undefined-trap-on-error' option instructs the
     compiler to report undefined behavior using '__builtin_trap' rather
     than a 'libubsan' library routine.  The advantage of this is that
     the 'libubsan' library is not needed and is not linked in, so this
     is usable even in freestanding environments.

'-fsanitize-coverage=trace-pc'
     Enable coverage-guided fuzzing code instrumentation.  Inserts a
     call to '__sanitizer_cov_trace_pc' into every basic block.

'-fsanitize-coverage=trace-cmp'
     Enable dataflow guided fuzzing code instrumentation.  Inserts a
     call to '__sanitizer_cov_trace_cmp1', '__sanitizer_cov_trace_cmp2',
     '__sanitizer_cov_trace_cmp4' or '__sanitizer_cov_trace_cmp8' for
     integral comparison with both operands variable or
     '__sanitizer_cov_trace_const_cmp1',
     '__sanitizer_cov_trace_const_cmp2',
     '__sanitizer_cov_trace_const_cmp4' or
     '__sanitizer_cov_trace_const_cmp8' for integral comparison with one
     operand constant, '__sanitizer_cov_trace_cmpf' or
     '__sanitizer_cov_trace_cmpd' for float or double comparisons and
     '__sanitizer_cov_trace_switch' for switch statements.

'-fcf-protection=[full|branch|return|none]'
     Enable code instrumentation of control-flow transfers to increase
     program security by checking that target addresses of control-flow
     transfer instructions (such as indirect function call, function
     return, indirect jump) are valid.  This prevents diverting the flow
     of control to an unexpected target.  This is intended to protect
     against such threats as Return-oriented Programming (ROP), and
     similarly call/jmp-oriented programming (COP/JOP).

     The value 'branch' tells the compiler to implement checking of
     validity of control-flow transfer at the point of indirect branch
     instructions, i.e. call/jmp instructions.  The value 'return'
     implements checking of validity at the point of returning from a
     function.  The value 'full' is an alias for specifying both
     'branch' and 'return'.  The value 'none' turns off instrumentation.

     The macro '__CET__' is defined when '-fcf-protection' is used.  The
     first bit of '__CET__' is set to 1 for the value 'branch' and the
     second bit of '__CET__' is set to 1 for the 'return'.

     You can also use the 'nocf_check' attribute to identify which
     functions and calls should be skipped from instrumentation (*note
     Function Attributes::).

     Currently the x86 GNU/Linux target provides an implementation based
     on Intel Control-flow Enforcement Technology (CET).

'-fstack-protector'
     Emit extra code to check for buffer overflows, such as stack
     smashing attacks.  This is done by adding a guard variable to
     functions with vulnerable objects.  This includes functions that
     call 'alloca', and functions with buffers larger than 8 bytes.  The
     guards are initialized when a function is entered and then checked
     when the function exits.  If a guard check fails, an error message
     is printed and the program exits.

'-fstack-protector-all'
     Like '-fstack-protector' except that all functions are protected.

'-fstack-protector-strong'
     Like '-fstack-protector' but includes additional functions to be
     protected -- those that have local array definitions, or have
     references to local frame addresses.

'-fstack-protector-explicit'
     Like '-fstack-protector' but only protects those functions which
     have the 'stack_protect' attribute.

'-fstack-check'
     Generate code to verify that you do not go beyond the boundary of
     the stack.  You should specify this flag if you are running in an
     environment with multiple threads, but you only rarely need to
     specify it in a single-threaded environment since stack overflow is
     automatically detected on nearly all systems if there is only one
     stack.

     Note that this switch does not actually cause checking to be done;
     the operating system or the language runtime must do that.  The
     switch causes generation of code to ensure that they see the stack
     being extended.

     You can additionally specify a string parameter: 'no' means no
     checking, 'generic' means force the use of old-style checking,
     'specific' means use the best checking method and is equivalent to
     bare '-fstack-check'.

     Old-style checking is a generic mechanism that requires no specific
     target support in the compiler but comes with the following
     drawbacks:

       1. Modified allocation strategy for large objects: they are
          always allocated dynamically if their size exceeds a fixed
          threshold.  Note this may change the semantics of some code.

       2. Fixed limit on the size of the static frame of functions: when
          it is topped by a particular function, stack checking is not
          reliable and a warning is issued by the compiler.

       3. Inefficiency: because of both the modified allocation strategy
          and the generic implementation, code performance is hampered.

     Note that old-style stack checking is also the fallback method for
     'specific' if no target support has been added in the compiler.

     '-fstack-check=' is designed for Ada's needs to detect infinite
     recursion and stack overflows.  'specific' is an excellent choice
     when compiling Ada code.  It is not generally sufficient to protect
     against stack-clash attacks.  To protect against those you want
     '-fstack-clash-protection'.

'-fstack-clash-protection'
     Generate code to prevent stack clash style attacks.  When this
     option is enabled, the compiler will only allocate one page of
     stack space at a time and each page is accessed immediately after
     allocation.  Thus, it prevents allocations from jumping over any
     stack guard page provided by the operating system.

     Most targets do not fully support stack clash protection.  However,
     on those targets '-fstack-clash-protection' will protect dynamic
     stack allocations.  '-fstack-clash-protection' may also provide
     limited protection for static stack allocations if the target
     supports '-fstack-check=specific'.

'-fstack-limit-register=REG'
'-fstack-limit-symbol=SYM'
'-fno-stack-limit'
     Generate code to ensure that the stack does not grow beyond a
     certain value, either the value of a register or the address of a
     symbol.  If a larger stack is required, a signal is raised at run
     time.  For most targets, the signal is raised before the stack
     overruns the boundary, so it is possible to catch the signal
     without taking special precautions.

     For instance, if the stack starts at absolute address '0x80000000'
     and grows downwards, you can use the flags
     '-fstack-limit-symbol=__stack_limit' and
     '-Wl,--defsym,__stack_limit=0x7ffe0000' to enforce a stack limit of
     128KB.  Note that this may only work with the GNU linker.

     You can locally override stack limit checking by using the
     'no_stack_limit' function attribute (*note Function Attributes::).

'-fsplit-stack'
     Generate code to automatically split the stack before it overflows.
     The resulting program has a discontiguous stack which can only
     overflow if the program is unable to allocate any more memory.
     This is most useful when running threaded programs, as it is no
     longer necessary to calculate a good stack size to use for each
     thread.  This is currently only implemented for the x86 targets
     running GNU/Linux.

     When code compiled with '-fsplit-stack' calls code compiled without
     '-fsplit-stack', there may not be much stack space available for
     the latter code to run.  If compiling all code, including library
     code, with '-fsplit-stack' is not an option, then the linker can
     fix up these calls so that the code compiled without
     '-fsplit-stack' always has a large stack.  Support for this is
     implemented in the gold linker in GNU binutils release 2.21 and
     later.

'-fvtable-verify=[std|preinit|none]'
     This option is only available when compiling C++ code.  It turns on
     (or off, if using '-fvtable-verify=none') the security feature that
     verifies at run time, for every virtual call, that the vtable
     pointer through which the call is made is valid for the type of the
     object, and has not been corrupted or overwritten.  If an invalid
     vtable pointer is detected at run time, an error is reported and
     execution of the program is immediately halted.

     This option causes run-time data structures to be built at program
     startup, which are used for verifying the vtable pointers.  The
     options 'std' and 'preinit' control the timing of when these data
     structures are built.  In both cases the data structures are built
     before execution reaches 'main'.  Using '-fvtable-verify=std'
     causes the data structures to be built after shared libraries have
     been loaded and initialized.  '-fvtable-verify=preinit' causes them
     to be built before shared libraries have been loaded and
     initialized.

     If this option appears multiple times in the command line with
     different values specified, 'none' takes highest priority over both
     'std' and 'preinit'; 'preinit' takes priority over 'std'.

'-fvtv-debug'
     When used in conjunction with '-fvtable-verify=std' or
     '-fvtable-verify=preinit', causes debug versions of the runtime
     functions for the vtable verification feature to be called.  This
     flag also causes the compiler to log information about which vtable
     pointers it finds for each class.  This information is written to a
     file named 'vtv_set_ptr_data.log' in the directory named by the
     environment variable 'VTV_LOGS_DIR' if that is defined or the
     current working directory otherwise.

     Note: This feature _appends_ data to the log file.  If you want a
     fresh log file, be sure to delete any existing one.

'-fvtv-counts'
     This is a debugging flag.  When used in conjunction with
     '-fvtable-verify=std' or '-fvtable-verify=preinit', this causes the
     compiler to keep track of the total number of virtual calls it
     encounters and the number of verifications it inserts.  It also
     counts the number of calls to certain run-time library functions
     that it inserts and logs this information for each compilation
     unit.  The compiler writes this information to a file named
     'vtv_count_data.log' in the directory named by the environment
     variable 'VTV_LOGS_DIR' if that is defined or the current working
     directory otherwise.  It also counts the size of the vtable pointer
     sets for each class, and writes this information to
     'vtv_class_set_sizes.log' in the same directory.

     Note: This feature _appends_ data to the log files.  To get fresh
     log files, be sure to delete any existing ones.

'-finstrument-functions'
     Generate instrumentation calls for entry and exit to functions.
     Just after function entry and just before function exit, the
     following profiling functions are called with the address of the
     current function and its call site.  (On some platforms,
     '__builtin_return_address' does not work beyond the current
     function, so the call site information may not be available to the
     profiling functions otherwise.)

          void __cyg_profile_func_enter (void *this_fn,
                                         void *call_site);
          void __cyg_profile_func_exit  (void *this_fn,
                                         void *call_site);

     The first argument is the address of the start of the current
     function, which may be looked up exactly in the symbol table.

     This instrumentation is also done for functions expanded inline in
     other functions.  The profiling calls indicate where, conceptually,
     the inline function is entered and exited.  This means that
     addressable versions of such functions must be available.  If all
     your uses of a function are expanded inline, this may mean an
     additional expansion of code size.  If you use 'extern inline' in
     your C code, an addressable version of such functions must be
     provided.  (This is normally the case anyway, but if you get lucky
     and the optimizer always expands the functions inline, you might
     have gotten away without providing static copies.)

     A function may be given the attribute 'no_instrument_function', in
     which case this instrumentation is not done.  This can be used, for
     example, for the profiling functions listed above, high-priority
     interrupt routines, and any functions from which the profiling
     functions cannot safely be called (perhaps signal handlers, if the
     profiling routines generate output or allocate memory).  *Note
     Common Function Attributes::.

'-finstrument-functions-exclude-file-list=FILE,FILE,...'

     Set the list of functions that are excluded from instrumentation
     (see the description of '-finstrument-functions').  If the file
     that contains a function definition matches with one of FILE, then
     that function is not instrumented.  The match is done on
     substrings: if the FILE parameter is a substring of the file name,
     it is considered to be a match.

     For example:

          -finstrument-functions-exclude-file-list=/bits/stl,include/sys

     excludes any inline function defined in files whose pathnames
     contain '/bits/stl' or 'include/sys'.

     If, for some reason, you want to include letter ',' in one of SYM,
     write '\,'.  For example,
     '-finstrument-functions-exclude-file-list='\,\,tmp'' (note the
     single quote surrounding the option).

'-finstrument-functions-exclude-function-list=SYM,SYM,...'

     This is similar to '-finstrument-functions-exclude-file-list', but
     this option sets the list of function names to be excluded from
     instrumentation.  The function name to be matched is its
     user-visible name, such as 'vector<int> blah(const vector<int> &)',
     not the internal mangled name (e.g., '_Z4blahRSt6vectorIiSaIiEE').
     The match is done on substrings: if the SYM parameter is a
     substring of the function name, it is considered to be a match.
     For C99 and C++ extended identifiers, the function name must be
     given in UTF-8, not using universal character names.

'-fpatchable-function-entry=N[,M]'
     Generate N NOPs right at the beginning of each function, with the
     function entry point before the Mth NOP. If M is omitted, it
     defaults to '0' so the function entry points to the address just at
     the first NOP. The NOP instructions reserve extra space which can
     be used to patch in any desired instrumentation at run time,
     provided that the code segment is writable.  The amount of space is
     controllable indirectly via the number of NOPs; the NOP instruction
     used corresponds to the instruction emitted by the internal GCC
     back-end interface 'gen_nop'.  This behavior is target-specific and
     may also depend on the architecture variant and/or other
     compilation options.

     For run-time identification, the starting addresses of these areas,
     which correspond to their respective function entries minus M, are
     additionally collected in the '__patchable_function_entries'
     section of the resulting binary.

     Note that the value of '__attribute__ ((patchable_function_entry
     (N,M)))' takes precedence over command-line option
     '-fpatchable-function-entry=N,M'.  This can be used to increase the
     area size or to remove it completely on a single function.  If
     'N=0', no pad location is recorded.

     The NOP instructions are inserted at--and maybe before, depending
     on M--the function entry address, even before the prologue.

==============================================================================
File: gcc.info,  Node: |Preprocessor_Options|,  Next: |Assembler_Options|,  Prev: |Instrumentation_Options|,  Up: |Invoking_GCC|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Preprocessor_Options*

3.12 Options Controlling the Preprocessor
==========-------------------------------

These options control the C preprocessor, which is run on each C source
file before actual compilation.

 If you use the '-E' option, nothing is done except preprocessing.  Some
of these options make sense only together with '-E' because they cause
the preprocessor output to be unsuitable for actual compilation.

 In addition to the options listed here, there are a number of options
to control search paths for include files documented in *note Directory
Options::.  Options to control preprocessor diagnostics are listed in
*note Warning Options::.

'-D NAME'
     Predefine NAME as a macro, with definition '1'.

'-D NAME=DEFINITION'
     The contents of DEFINITION are tokenized and processed as if they
     appeared during translation phase three in a '#define' directive.
     In particular, the definition is truncated by embedded newline
     characters.

     If you are invoking the preprocessor from a shell or shell-like
     program you may need to use the shell's quoting syntax to protect
     characters such as spaces that have a meaning in the shell syntax.

     If you wish to define a function-like macro on the command line,
     write its argument list with surrounding parentheses before the
     equals sign (if any).  Parentheses are meaningful to most shells,
     so you should quote the option.  With 'sh' and 'csh',
     '-D'NAME(ARGS...)=DEFINITION'' works.

     '-D' and '-U' options are processed in the order they are given on
     the command line.  All '-imacros FILE' and '-include FILE' options
     are processed after all '-D' and '-U' options.

'-U NAME'
     Cancel any previous definition of NAME, either built in or provided
     with a '-D' option.

'-include FILE'
     Process FILE as if '#include "file"' appeared as the first line of
     the primary source file.  However, the first directory searched for
     FILE is the preprocessor's working directory _instead of_ the
     directory containing the main source file.  If not found there, it
     is searched for in the remainder of the '#include "..."' search
     chain as normal.

     If multiple '-include' options are given, the files are included in
     the order they appear on the command line.

'-imacros FILE'
     Exactly like '-include', except that any output produced by
     scanning FILE is thrown away.  Macros it defines remain defined.
     This allows you to acquire all the macros from a header without
     also processing its declarations.

     All files specified by '-imacros' are processed before all files
     specified by '-include'.

'-undef'
     Do not predefine any system-specific or GCC-specific macros.  The
     standard predefined macros remain defined.

'-pthread'
     Define additional macros required for using the POSIX threads
     library.  You should use this option consistently for both
     compilation and linking.  This option is supported on GNU/Linux
     targets, most other Unix derivatives, and also on x86 Cygwin and
     MinGW targets.

'-M'
     Instead of outputting the result of preprocessing, output a rule
     suitable for 'make' describing the dependencies of the main source
     file.  The preprocessor outputs one 'make' rule containing the
     object file name for that source file, a colon, and the names of
     all the included files, including those coming from '-include' or
     '-imacros' command-line options.

     Unless specified explicitly (with '-MT' or '-MQ'), the object file
     name consists of the name of the source file with any suffix
     replaced with object file suffix and with any leading directory
     parts removed.  If there are many included files then the rule is
     split into several lines using '\'-newline.  The rule has no
     commands.

     This option does not suppress the preprocessor's debug output, such
     as '-dM'.  To avoid mixing such debug output with the dependency
     rules you should explicitly specify the dependency output file with
     '-MF', or use an environment variable like 'DEPENDENCIES_OUTPUT'
     (*note Environment Variables::).  Debug output is still sent to the
     regular output stream as normal.

     Passing '-M' to the driver implies '-E', and suppresses warnings
     with an implicit '-w'.

'-MM'
     Like '-M' but do not mention header files that are found in system
     header directories, nor header files that are included, directly or
     indirectly, from such a header.

     This implies that the choice of angle brackets or double quotes in
     an '#include' directive does not in itself determine whether that
     header appears in '-MM' dependency output.

'-MF FILE'
     When used with '-M' or '-MM', specifies a file to write the
     dependencies to.  If no '-MF' switch is given the preprocessor
     sends the rules to the same place it would send preprocessed
     output.

     When used with the driver options '-MD' or '-MMD', '-MF' overrides
     the default dependency output file.

     If FILE is '-', then the dependencies are written to 'stdout'.

'-MG'
     In conjunction with an option such as '-M' requesting dependency
     generation, '-MG' assumes missing header files are generated files
     and adds them to the dependency list without raising an error.  The
     dependency filename is taken directly from the '#include' directive
     without prepending any path.  '-MG' also suppresses preprocessed
     output, as a missing header file renders this useless.

     This feature is used in automatic updating of makefiles.

'-MP'
     This option instructs CPP to add a phony target for each dependency
     other than the main file, causing each to depend on nothing.  These
     dummy rules work around errors 'make' gives if you remove header
     files without updating the 'Makefile' to match.

     This is typical output:

          test.o: test.c test.h

          test.h:

'-MT TARGET'

     Change the target of the rule emitted by dependency generation.  By
     default CPP takes the name of the main input file, deletes any
     directory components and any file suffix such as '.c', and appends
     the platform's usual object suffix.  The result is the target.

     An '-MT' option sets the target to be exactly the string you
     specify.  If you want multiple targets, you can specify them as a
     single argument to '-MT', or use multiple '-MT' options.

     For example, '-MT '$(objpfx)foo.o'' might give

          $(objpfx)foo.o: foo.c

'-MQ TARGET'

     Same as '-MT', but it quotes any characters which are special to
     Make.  '-MQ '$(objpfx)foo.o'' gives

          $$(objpfx)foo.o: foo.c

     The default target is automatically quoted, as if it were given
     with '-MQ'.

'-MD'
     '-MD' is equivalent to '-M -MF FILE', except that '-E' is not
     implied.  The driver determines FILE based on whether an '-o'
     option is given.  If it is, the driver uses its argument but with a
     suffix of '.d', otherwise it takes the name of the input file,
     removes any directory components and suffix, and applies a '.d'
     suffix.

     If '-MD' is used in conjunction with '-E', any '-o' switch is
     understood to specify the dependency output file (*note -MF:
     dashMF.), but if used without '-E', each '-o' is understood to
     specify a target object file.

     Since '-E' is not implied, '-MD' can be used to generate a
     dependency output file as a side effect of the compilation process.

'-MMD'
     Like '-MD' except mention only user header files, not system header
     files.

'-fpreprocessed'
     Indicate to the preprocessor that the input file has already been
     preprocessed.  This suppresses things like macro expansion,
     trigraph conversion, escaped newline splicing, and processing of
     most directives.  The preprocessor still recognizes and removes
     comments, so that you can pass a file preprocessed with '-C' to the
     compiler without problems.  In this mode the integrated
     preprocessor is little more than a tokenizer for the front ends.

     '-fpreprocessed' is implicit if the input file has one of the
     extensions '.i', '.ii' or '.mi'.  These are the extensions that GCC
     uses for preprocessed files created by '-save-temps'.

'-fdirectives-only'
     When preprocessing, handle directives, but do not expand macros.

     The option's behavior depends on the '-E' and '-fpreprocessed'
     options.

     With '-E', preprocessing is limited to the handling of directives
     such as '#define', '#ifdef', and '#error'.  Other preprocessor
     operations, such as macro expansion and trigraph conversion are not
     performed.  In addition, the '-dD' option is implicitly enabled.

     With '-fpreprocessed', predefinition of command line and most
     builtin macros is disabled.  Macros such as '__LINE__', which are
     contextually dependent, are handled normally.  This enables
     compilation of files previously preprocessed with '-E
     -fdirectives-only'.

     With both '-E' and '-fpreprocessed', the rules for '-fpreprocessed'
     take precedence.  This enables full preprocessing of files
     previously preprocessed with '-E -fdirectives-only'.

'-fdollars-in-identifiers'
     Accept '$' in identifiers.

'-fextended-identifiers'
     Accept universal character names in identifiers.  This option is
     enabled by default for C99 (and later C standard versions) and C++.

'-fno-canonical-system-headers'
     When preprocessing, do not shorten system header paths with
     canonicalization.

'-ftabstop=WIDTH'
     Set the distance between tab stops.  This helps the preprocessor
     report correct column numbers in warnings or errors, even if tabs
     appear on the line.  If the value is less than 1 or greater than
     100, the option is ignored.  The default is 8.

'-ftrack-macro-expansion[=LEVEL]'
     Track locations of tokens across macro expansions.  This allows the
     compiler to emit diagnostic about the current macro expansion stack
     when a compilation error occurs in a macro expansion.  Using this
     option makes the preprocessor and the compiler consume more memory.
     The LEVEL parameter can be used to choose the level of precision of
     token location tracking thus decreasing the memory consumption if
     necessary.  Value '0' of LEVEL de-activates this option.  Value '1'
     tracks tokens locations in a degraded mode for the sake of minimal
     memory overhead.  In this mode all tokens resulting from the
     expansion of an argument of a function-like macro have the same
     location.  Value '2' tracks tokens locations completely.  This
     value is the most memory hungry.  When this option is given no
     argument, the default parameter value is '2'.

     Note that '-ftrack-macro-expansion=2' is activated by default.

'-fmacro-prefix-map=OLD=NEW'
     When preprocessing files residing in directory 'OLD', expand the
     '__FILE__' and '__BASE_FILE__' macros as if the files resided in
     directory 'NEW' instead.  This can be used to change an absolute
     path to a relative path by using '.' for NEW which can result in
     more reproducible builds that are location independent.  This
     option also affects '__builtin_FILE()' during compilation.  See
     also '-ffile-prefix-map'.

'-fexec-charset=CHARSET'
     Set the execution character set, used for string and character
     constants.  The default is UTF-8.  CHARSET can be any encoding
     supported by the system's 'iconv' library routine.

'-fwide-exec-charset=CHARSET'
     Set the wide execution character set, used for wide string and
     character constants.  The default is UTF-32 or UTF-16, whichever
     corresponds to the width of 'wchar_t'.  As with '-fexec-charset',
     CHARSET can be any encoding supported by the system's 'iconv'
     library routine; however, you will have problems with encodings
     that do not fit exactly in 'wchar_t'.

'-finput-charset=CHARSET'
     Set the input character set, used for translation from the
     character set of the input file to the source character set used by
     GCC.  If the locale does not specify, or GCC cannot get this
     information from the locale, the default is UTF-8.  This can be
     overridden by either the locale or this command-line option.
     Currently the command-line option takes precedence if there's a
     conflict.  CHARSET can be any encoding supported by the system's
     'iconv' library routine.

'-fpch-deps'
     When using precompiled headers (*note Precompiled Headers::), this
     flag causes the dependency-output flags to also list the files from
     the precompiled header's dependencies.  If not specified, only the
     precompiled header are listed and not the files that were used to
     create it, because those files are not consulted when a precompiled
     header is used.

'-fpch-preprocess'
     This option allows use of a precompiled header (*note Precompiled
     Headers::) together with '-E'.  It inserts a special '#pragma',
     '#pragma GCC pch_preprocess "FILENAME"' in the output to mark the
     place where the precompiled header was found, and its FILENAME.
     When '-fpreprocessed' is in use, GCC recognizes this '#pragma' and
     loads the PCH.

     This option is off by default, because the resulting preprocessed
     output is only really suitable as input to GCC.  It is switched on
     by '-save-temps'.

     You should not write this '#pragma' in your own code, but it is
     safe to edit the filename if the PCH file is available in a
     different location.  The filename may be absolute or it may be
     relative to GCC's current directory.

'-fworking-directory'
     Enable generation of linemarkers in the preprocessor output that
     let the compiler know the current working directory at the time of
     preprocessing.  When this option is enabled, the preprocessor
     emits, after the initial linemarker, a second linemarker with the
     current working directory followed by two slashes.  GCC uses this
     directory, when it's present in the preprocessed input, as the
     directory emitted as the current working directory in some
     debugging information formats.  This option is implicitly enabled
     if debugging information is enabled, but this can be inhibited with
     the negated form '-fno-working-directory'.  If the '-P' flag is
     present in the command line, this option has no effect, since no
     '#line' directives are emitted whatsoever.

'-A PREDICATE=ANSWER'
     Make an assertion with the predicate PREDICATE and answer ANSWER.
     This form is preferred to the older form '-A PREDICATE(ANSWER)',
     which is still supported, because it does not use shell special
     characters.

'-A -PREDICATE=ANSWER'
     Cancel an assertion with the predicate PREDICATE and answer ANSWER.

'-C'
     Do not discard comments.  All comments are passed through to the
     output file, except for comments in processed directives, which are
     deleted along with the directive.

     You should be prepared for side effects when using '-C'; it causes
     the preprocessor to treat comments as tokens in their own right.
     For example, comments appearing at the start of what would be a
     directive line have the effect of turning that line into an
     ordinary source line, since the first token on the line is no
     longer a '#'.

'-CC'
     Do not discard comments, including during macro expansion.  This is
     like '-C', except that comments contained within macros are also
     passed through to the output file where the macro is expanded.

     In addition to the side effects of the '-C' option, the '-CC'
     option causes all C++-style comments inside a macro to be converted
     to C-style comments.  This is to prevent later use of that macro
     from inadvertently commenting out the remainder of the source line.

     The '-CC' option is generally used to support lint comments.

'-P'
     Inhibit generation of linemarkers in the output from the
     preprocessor.  This might be useful when running the preprocessor
     on something that is not C code, and will be sent to a program
     which might be confused by the linemarkers.

'-traditional'
'-traditional-cpp'

     Try to imitate the behavior of pre-standard C preprocessors, as
     opposed to ISO C preprocessors.  See the GNU CPP manual for
     details.

     Note that GCC does not otherwise attempt to emulate a pre-standard
     C compiler, and these options are only supported with the '-E'
     switch, or when invoking CPP explicitly.

'-trigraphs'
     Support ISO C trigraphs.  These are three-character sequences, all
     starting with '??', that are defined by ISO C to stand for single
     characters.  For example, '??/' stands for '\', so ''??/n'' is a
     character constant for a newline.

     The nine trigraphs and their replacements are

          Trigraph:       ??(  ??)  ??<  ??>  ??=  ??/  ??'  ??!  ??-
          Replacement:      [    ]    {    }    #    \    ^    |    ~

     By default, GCC ignores trigraphs, but in standard-conforming modes
     it converts them.  See the '-std' and '-ansi' options.

'-remap'
     Enable special code to work around file systems which only permit
     very short file names, such as MS-DOS.

'-H'
     Print the name of each header file used, in addition to other
     normal activities.  Each name is indented to show how deep in the
     '#include' stack it is.  Precompiled header files are also printed,
     even if they are found to be invalid; an invalid precompiled header
     file is printed with '...x' and a valid one with '...!' .

'-dLETTERS'
     Says to make debugging dumps during compilation as specified by
     LETTERS.  The flags documented here are those relevant to the
     preprocessor.  Other LETTERS are interpreted by the compiler
     proper, or reserved for future versions of GCC, and so are silently
     ignored.  If you specify LETTERS whose behavior conflicts, the
     result is undefined.  *Note Developer Options::, for more
     information.

     '-dM'
          Instead of the normal output, generate a list of '#define'
          directives for all the macros defined during the execution of
          the preprocessor, including predefined macros.  This gives you
          a way of finding out what is predefined in your version of the
          preprocessor.  Assuming you have no file 'foo.h', the command

               touch foo.h; cpp -dM foo.h

          shows all the predefined macros.

          If you use '-dM' without the '-E' option, '-dM' is interpreted
          as a synonym for '-fdump-rtl-mach'.  *Note (gcc)Developer
          Options::.

     '-dD'
          Like '-dM' except in two respects: it does _not_ include the
          predefined macros, and it outputs _both_ the '#define'
          directives and the result of preprocessing.  Both kinds of
          output go to the standard output file.

     '-dN'
          Like '-dD', but emit only the macro names, not their
          expansions.

     '-dI'
          Output '#include' directives in addition to the result of
          preprocessing.

     '-dU'
          Like '-dD' except that only macros that are expanded, or whose
          definedness is tested in preprocessor directives, are output;
          the output is delayed until the use or test of the macro; and
          '#undef' directives are also output for macros tested but
          undefined at the time.

'-fdebug-cpp'
     This option is only useful for debugging GCC. When used from CPP or
     with '-E', it dumps debugging information about location maps.
     Every token in the output is preceded by the dump of the map its
     location belongs to.

     When used from GCC without '-E', this option has no effect.

'-Wp,OPTION'
     You can use '-Wp,OPTION' to bypass the compiler driver and pass
     OPTION directly through to the preprocessor.  If OPTION contains
     commas, it is split into multiple options at the commas.  However,
     many options are modified, translated or interpreted by the
     compiler driver before being passed to the preprocessor, and '-Wp'
     forcibly bypasses this phase.  The preprocessor's direct interface
     is undocumented and subject to change, so whenever possible you
     should avoid using '-Wp' and let the driver handle the options
     instead.

'-Xpreprocessor OPTION'
     Pass OPTION as an option to the preprocessor.  You can use this to
     supply system-specific preprocessor options that GCC does not
     recognize.

     If you want to pass an option that takes an argument, you must use
     '-Xpreprocessor' twice, once for the option and once for the
     argument.

'-no-integrated-cpp'
     Perform preprocessing as a separate pass before compilation.  By
     default, GCC performs preprocessing as an integrated part of input
     tokenization and parsing.  If this option is provided, the
     appropriate language front end ('cc1', 'cc1plus', or 'cc1obj' for
     C, C++, and Objective-C, respectively) is instead invoked twice,
     once for preprocessing only and once for actual compilation of the
     preprocessed input.  This option may be useful in conjunction with
     the '-B' or '-wrapper' options to specify an alternate preprocessor
     or perform additional processing of the program source between
     normal preprocessing and compilation.

==============================================================================
File: gcc.info,  Node: |Assembler_Options|,  Next: |Link_Options|,  Prev: |Preprocessor_Options|,  Up: |Invoking_GCC|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Assembler_Options*

3.13 Passing Options to the Assembler
==========---------------------------

You can pass options to the assembler.

'-Wa,OPTION'
     Pass OPTION as an option to the assembler.  If OPTION contains
     commas, it is split into multiple options at the commas.

'-Xassembler OPTION'
     Pass OPTION as an option to the assembler.  You can use this to
     supply system-specific assembler options that GCC does not
     recognize.

     If you want to pass an option that takes an argument, you must use
     '-Xassembler' twice, once for the option and once for the argument.

==============================================================================
File: gcc.info,  Node: |Link_Options|,  Next: |Directory_Options|,  Prev: |Assembler_Options|,  Up: |Invoking_GCC|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *Link_Options*

3.14 Options for Linking
==========--------------

These options come into play when the compiler links object files into
an executable output file.  They are meaningless if the compiler is not
doing a link step.

'OBJECT-FILE-NAME'
     A file name that does not end in a special recognized suffix is
     considered to name an object file or library.  (Object files are
     distinguished from libraries by the linker according to the file
     contents.)  If linking is done, these object files are used as
     input to the linker.

'-c'
'-S'
'-E'
     If any of these options is used, then the linker is not run, and
     object file names should not be used as arguments.  *Note Overall
     Options::.

'-flinker-output=TYPE'
     This option controls the code generation of the link time
     optimizer.  By default the linker output is determined by the
     linker plugin automatically.  For debugging the compiler and in the
     case of incremental linking to non-lto object file is desired, it
     may be useful to control the type manually.

     If TYPE is 'exec' the code generation is configured to produce
     static binary.  In this case '-fpic' and '-fpie' are both disabled.

     If TYPE is 'dyn' the code generation is configured to produce
     shared library.  In this case '-fpic' or '-fPIC' is preserved, but
     not enabled automatically.  This makes it possible to build shared
     libraries without position independent code on architectures this
     is possible, i.e. on x86.

     If TYPE is 'pie' the code generation is configured to produce
     '-fpie' executable.  This result in similar optimizations as 'exec'
     except that '-fpie' is not disabled if specified at compilation
     time.

     If TYPE is 'rel' the compiler assumes that incremental linking is
     done.  The sections containing intermediate code for link-time
     optimization are merged, pre-optimized, and output to the resulting
     object file.  In addition, if '-ffat-lto-objects' is specified the
     binary code is produced for future non-lto linking.  The object
     file produced by incremental linking will be smaller than a static
     library produced from the same object files.  At link-time the
     result of incremental linking will also load faster to compiler
     than a static library assuming that majority of objects in the
     library are used.

     Finally 'nolto-rel' configure compiler to for incremental linking
     where code generation is forced, final binary is produced and the
     intermediate code for later link-time optimization is stripped.
     When multiple object files are linked together the resulting code
     will be optimized better than with link time optimizations disabled
     (for example, the cross-module inlining will happen), most of
     benefits of whole program optimizations are however lost.

     During the incremental link (by '-r') the linker plugin will
     default to 'rel'.  With current interfaces to GNU Binutils it is
     however not possible to link incrementally LTO objects and non-LTO
     objects into a single mixed object file.  In the case any of object
     files in incremental link cannot be used for link-time optimization
     the linker plugin will output warning and use 'nolto-rel'.  To
     maintain the whole program optimization it is recommended to link
     such objects into static library instead.  Alternatively it is
     possible to use H.J. Lu's binutils with support for mixed objects.

'-fuse-ld=bfd'
     Use the 'bfd' linker instead of the default linker.

'-fuse-ld=gold'
     Use the 'gold' linker instead of the default linker.

'-fuse-ld=lld'
     Use the LLVM 'lld' linker instead of the default linker.

'-lLIBRARY'
'-l LIBRARY'
     Search the library named LIBRARY when linking.  (The second
     alternative with the library as a separate argument is only for
     POSIX compliance and is not recommended.)

     The '-l' option is passed directly to the linker by GCC. Refer to
     your linker documentation for exact details.  The general
     description below applies to the GNU linker.

     The linker searches a standard list of directories for the library.
     The directories searched include several standard system
     directories plus any that you specify with '-L'.

     Static libraries are archives of object files, and have file names
     like 'libLIBRARY.a'.  Some targets also support shared libraries,
     which typically have names like 'libLIBRARY.so'.  If both static
     and shared libraries are found, the linker gives preference to
     linking with the shared library unless the '-static' option is
     used.

     It makes a difference where in the command you write this option;
     the linker searches and processes libraries and object files in the
     order they are specified.  Thus, 'foo.o -lz bar.o' searches library
     'z' after file 'foo.o' but before 'bar.o'.  If 'bar.o' refers to
     functions in 'z', those functions may not be loaded.

'-lobjc'
     You need this special case of the '-l' option in order to link an
     Objective-C or Objective-C++ program.

'-nostartfiles'
     Do not use the standard system startup files when linking.  The
     standard system libraries are used normally, unless '-nostdlib',
     '-nolibc', or '-nodefaultlibs' is used.

'-nodefaultlibs'
     Do not use the standard system libraries when linking.  Only the
     libraries you specify are passed to the linker, and options
     specifying linkage of the system libraries, such as
     '-static-libgcc' or '-shared-libgcc', are ignored.  The standard
     startup files are used normally, unless '-nostartfiles' is used.

     The compiler may generate calls to 'memcmp', 'memset', 'memcpy' and
     'memmove'.  These entries are usually resolved by entries in libc.
     These entry points should be supplied through some other mechanism
     when this option is specified.

'-nolibc'
     Do not use the C library or system libraries tightly coupled with
     it when linking.  Still link with the startup files, 'libgcc' or
     toolchain provided language support libraries such as 'libgnat',
     'libgfortran' or 'libstdc++' unless options preventing their
     inclusion are used as well.  This typically removes '-lc' from the
     link command line, as well as system libraries that normally go
     with it and become meaningless when absence of a C library is
     assumed, for example '-lpthread' or '-lm' in some configurations.
     This is intended for bare-board targets when there is indeed no C
     library available.

'-nostdlib'
     Do not use the standard system startup files or libraries when
     linking.  No startup files and only the libraries you specify are
     passed to the linker, and options specifying linkage of the system
     libraries, such as '-static-libgcc' or '-shared-libgcc', are
     ignored.

     The compiler may generate calls to 'memcmp', 'memset', 'memcpy' and
     'memmove'.  These entries are usually resolved by entries in libc.
     These entry points should be supplied through some other mechanism
     when this option is specified.

     One of the standard libraries bypassed by '-nostdlib' and
     '-nodefaultlibs' is 'libgcc.a', a library of internal subroutines
     which GCC uses to overcome shortcomings of particular machines, or
     special needs for some languages.  (*Note Interfacing to GCC
     Output: (gccint)Interface, for more discussion of 'libgcc.a'.)  In
     most cases, you need 'libgcc.a' even when you want to avoid other
     standard libraries.  In other words, when you specify '-nostdlib'
     or '-nodefaultlibs' you should usually specify '-lgcc' as well.
     This ensures that you have no unresolved references to internal GCC
     library subroutines.  (An example of such an internal subroutine is
     '__main', used to ensure C++ constructors are called; *note
     'collect2': (gccint)Collect2.)

'-e ENTRY'
'--entry=ENTRY'

     Specify that the program entry point is ENTRY.  The argument is
     interpreted by the linker; the GNU linker accepts either a symbol
     name or an address.

'-pie'
     Produce a dynamically linked position independent executable on
     targets that support it.  For predictable results, you must also
     specify the same set of options used for compilation ('-fpie',
     '-fPIE', or model suboptions) when you specify this linker option.

'-no-pie'
     Don't produce a dynamically linked position independent executable.

'-static-pie'
     Produce a static position independent executable on targets that
     support it.  A static position independent executable is similar to
     a static executable, but can be loaded at any address without a
     dynamic linker.  For predictable results, you must also specify the
     same set of options used for compilation ('-fpie', '-fPIE', or
     model suboptions) when you specify this linker option.

'-pthread'
     Link with the POSIX threads library.  This option is supported on
     GNU/Linux targets, most other Unix derivatives, and also on x86
     Cygwin and MinGW targets.  On some targets this option also sets
     flags for the preprocessor, so it should be used consistently for
     both compilation and linking.

'-r'
     Produce a relocatable object as output.  This is also known as
     partial linking.

'-rdynamic'
     Pass the flag '-export-dynamic' to the ELF linker, on targets that
     support it.  This instructs the linker to add all symbols, not only
     used ones, to the dynamic symbol table.  This option is needed for
     some uses of 'dlopen' or to allow obtaining backtraces from within
     a program.

'-s'
     Remove all symbol table and relocation information from the
     executable.

'-static'
     On systems that support dynamic linking, this overrides '-pie' and
     prevents linking with the shared libraries.  On other systems, this
     option has no effect.

'-shared'
     Produce a shared object which can then be linked with other objects
     to form an executable.  Not all systems support this option.  For
     predictable results, you must also specify the same set of options
     used for compilation ('-fpic', '-fPIC', or model suboptions) when
     you specify this linker option.(1)

'-shared-libgcc'
'-static-libgcc'
     On systems that provide 'libgcc' as a shared library, these options
     force the use of either the shared or static version, respectively.
     If no shared version of 'libgcc' was built when the compiler was
     configured, these options have no effect.

     There are several situations in which an application should use the
     shared 'libgcc' instead of the static version.  The most common of
     these is when the application wishes to throw and catch exceptions
     across different shared libraries.  In that case, each of the
     libraries as well as the application itself should use the shared
     'libgcc'.

     Therefore, the G++ driver automatically adds '-shared-libgcc'
     whenever you build a shared library or a main executable, because
     C++ programs typically use exceptions, so this is the right thing
     to do.

     If, instead, you use the GCC driver to create shared libraries, you
     may find that they are not always linked with the shared 'libgcc'.
     If GCC finds, at its configuration time, that you have a non-GNU
     linker or a GNU linker that does not support option
     '--eh-frame-hdr', it links the shared version of 'libgcc' into
     shared libraries by default.  Otherwise, it takes advantage of the
     linker and optimizes away the linking with the shared version of
     'libgcc', linking with the static version of libgcc by default.
     This allows exceptions to propagate through such shared libraries,
     without incurring relocation costs at library load time.

     However, if a library or main executable is supposed to throw or
     catch exceptions, you must link it using the G++ driver, or using
     the option '-shared-libgcc', such that it is linked with the shared
     'libgcc'.

'-static-libasan'
     When the '-fsanitize=address' option is used to link a program, the
     GCC driver automatically links against 'libasan'.  If 'libasan' is
     available as a shared library, and the '-static' option is not
     used, then this links against the shared version of 'libasan'.  The
     '-static-libasan' option directs the GCC driver to link 'libasan'
     statically, without necessarily linking other libraries statically.

'-static-libtsan'
     When the '-fsanitize=thread' option is used to link a program, the
     GCC driver automatically links against 'libtsan'.  If 'libtsan' is
     available as a shared library, and the '-static' option is not
     used, then this links against the shared version of 'libtsan'.  The
     '-static-libtsan' option directs the GCC driver to link 'libtsan'
     statically, without necessarily linking other libraries statically.

'-static-liblsan'
     When the '-fsanitize=leak' option is used to link a program, the
     GCC driver automatically links against 'liblsan'.  If 'liblsan' is
     available as a shared library, and the '-static' option is not
     used, then this links against the shared version of 'liblsan'.  The
     '-static-liblsan' option directs the GCC driver to link 'liblsan'
     statically, without necessarily linking other libraries statically.

'-static-libubsan'
     When the '-fsanitize=undefined' option is used to link a program,
     the GCC driver automatically links against 'libubsan'.  If
     'libubsan' is available as a shared library, and the '-static'
     option is not used, then this links against the shared version of
     'libubsan'.  The '-static-libubsan' option directs the GCC driver
     to link 'libubsan' statically, without necessarily linking other
     libraries statically.

'-static-libstdc++'
     When the 'g++' program is used to link a C++ program, it normally
     automatically links against 'libstdc++'.  If 'libstdc++' is
     available as a shared library, and the '-static' option is not
     used, then this links against the shared version of 'libstdc++'.
     That is normally fine.  However, it is sometimes useful to freeze
     the version of 'libstdc++' used by the program without going all
     the way to a fully static link.  The '-static-libstdc++' option
     directs the 'g++' driver to link 'libstdc++' statically, without
     necessarily linking other libraries statically.

'-symbolic'
     Bind references to global symbols when building a shared object.
     Warn about any unresolved references (unless overridden by the link
     editor option '-Xlinker -z -Xlinker defs').  Only a few systems
     support this option.

'-T SCRIPT'
     Use SCRIPT as the linker script.  This option is supported by most
     systems using the GNU linker.  On some targets, such as bare-board
     targets without an operating system, the '-T' option may be
     required when linking to avoid references to undefined symbols.

'-Xlinker OPTION'
     Pass OPTION as an option to the linker.  You can use this to supply
     system-specific linker options that GCC does not recognize.

     If you want to pass an option that takes a separate argument, you
     must use '-Xlinker' twice, once for the option and once for the
     argument.  For example, to pass '-assert definitions', you must
     write '-Xlinker -assert -Xlinker definitions'.  It does not work to
     write '-Xlinker "-assert definitions"', because this passes the
     entire string as a single argument, which is not what the linker
     expects.

     When using the GNU linker, it is usually more convenient to pass
     arguments to linker options using the 'OPTION=VALUE' syntax than as
     separate arguments.  For example, you can specify '-Xlinker
     -Map=output.map' rather than '-Xlinker -Map -Xlinker output.map'.
     Other linkers may not support this syntax for command-line options.

'-Wl,OPTION'
     Pass OPTION as an option to the linker.  If OPTION contains commas,
     it is split into multiple options at the commas.  You can use this
     syntax to pass an argument to the option.  For example,
     '-Wl,-Map,output.map' passes '-Map output.map' to the linker.  When
     using the GNU linker, you can also get the same effect with
     '-Wl,-Map=output.map'.

'-u SYMBOL'
     Pretend the symbol SYMBOL is undefined, to force linking of library
     modules to define it.  You can use '-u' multiple times with
     different symbols to force loading of additional library modules.

'-z KEYWORD'
     '-z' is passed directly on to the linker along with the keyword
     KEYWORD.  See the section in the documentation of your linker for
     permitted values and their meanings.

   ---------- Footnotes ----------

   (1) On some systems, 'gcc -shared' needs to build supplementary stub
code for constructors to work.  On multi-libbed systems, 'gcc -shared'
must select the correct support libraries to link against.  Failing to
supply the correct flags may lead to subtle defects.  Supplying them in
cases where they are not necessary is innocuous.

==============================================================================
File: gcc.info,  Node: |Directory_Options|,  Next: |Code_Gen_Options|,  Prev: |Link_Options|,  Up: |Invoking_GCC|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Directory_Options*

3.15 Options for Directory Search
==========-----------------------

These options specify directories to search for header files, for
libraries and for parts of the compiler:

'-I DIR'
'-iquote DIR'
'-isystem DIR'
'-idirafter DIR'
     Add the directory DIR to the list of directories to be searched for
     header files during preprocessing.  If DIR begins with '=' or
     '$SYSROOT', then the '=' or '$SYSROOT' is replaced by the sysroot
     prefix; see '--sysroot' and '-isysroot'.

     Directories specified with '-iquote' apply only to the quote form
     of the directive, '#include "FILE"'.  Directories specified with
     '-I', '-isystem', or '-idirafter' apply to lookup for both the
     '#include "FILE"' and '#include <FILE>' directives.

     You can specify any number or combination of these options on the
     command line to search for header files in several directories.
     The lookup order is as follows:

       1. For the quote form of the include directive, the directory of
          the current file is searched first.

       2. For the quote form of the include directive, the directories
          specified by '-iquote' options are searched in left-to-right
          order, as they appear on the command line.

       3. Directories specified with '-I' options are scanned in
          left-to-right order.

       4. Directories specified with '-isystem' options are scanned in
          left-to-right order.

       5. Standard system directories are scanned.

       6. Directories specified with '-idirafter' options are scanned in
          left-to-right order.

     You can use '-I' to override a system header file, substituting
     your own version, since these directories are searched before the
     standard system header file directories.  However, you should not
     use this option to add directories that contain vendor-supplied
     system header files; use '-isystem' for that.

     The '-isystem' and '-idirafter' options also mark the directory as
     a system directory, so that it gets the same special treatment that
     is applied to the standard system directories.

     If a standard system include directory, or a directory specified
     with '-isystem', is also specified with '-I', the '-I' option is
     ignored.  The directory is still searched but as a system directory
     at its normal position in the system include chain.  This is to
     ensure that GCC's procedure to fix buggy system headers and the
     ordering for the '#include_next' directive are not inadvertently
     changed.  If you really need to change the search order for system
     directories, use the '-nostdinc' and/or '-isystem' options.

'-I-'
     Split the include path.  This option has been deprecated.  Please
     use '-iquote' instead for '-I' directories before the '-I-' and
     remove the '-I-' option.

     Any directories specified with '-I' options before '-I-' are
     searched only for headers requested with '#include "FILE"'; they
     are not searched for '#include <FILE>'.  If additional directories
     are specified with '-I' options after the '-I-', those directories
     are searched for all '#include' directives.

     In addition, '-I-' inhibits the use of the directory of the current
     file directory as the first search directory for '#include "FILE"'.
     There is no way to override this effect of '-I-'.

'-iprefix PREFIX'
     Specify PREFIX as the prefix for subsequent '-iwithprefix' options.
     If the prefix represents a directory, you should include the final
     '/'.

'-iwithprefix DIR'
'-iwithprefixbefore DIR'
     Append DIR to the prefix specified previously with '-iprefix', and
     add the resulting directory to the include search path.
     '-iwithprefixbefore' puts it in the same place '-I' would;
     '-iwithprefix' puts it where '-idirafter' would.

'-isysroot DIR'
     This option is like the '--sysroot' option, but applies only to
     header files (except for Darwin targets, where it applies to both
     header files and libraries).  See the '--sysroot' option for more
     information.

'-imultilib DIR'
     Use DIR as a subdirectory of the directory containing
     target-specific C++ headers.

'-nostdinc'
     Do not search the standard system directories for header files.
     Only the directories explicitly specified with '-I', '-iquote',
     '-isystem', and/or '-idirafter' options (and the directory of the
     current file, if appropriate) are searched.

'-nostdinc++'
     Do not search for header files in the C++-specific standard
     directories, but do still search the other standard directories.
     (This option is used when building the C++ library.)

'-iplugindir=DIR'
     Set the directory to search for plugins that are passed by
     '-fplugin=NAME' instead of '-fplugin=PATH/NAME.so'.  This option is
     not meant to be used by the user, but only passed by the driver.

'-LDIR'
     Add directory DIR to the list of directories to be searched for
     '-l'.

'-BPREFIX'
     This option specifies where to find the executables, libraries,
     include files, and data files of the compiler itself.

     The compiler driver program runs one or more of the subprograms
     'cpp', 'cc1', 'as' and 'ld'.  It tries PREFIX as a prefix for each
     program it tries to run, both with and without 'MACHINE/VERSION/'
     for the corresponding target machine and compiler version.

     For each subprogram to be run, the compiler driver first tries the
     '-B' prefix, if any.  If that name is not found, or if '-B' is not
     specified, the driver tries two standard prefixes, '/usr/lib/gcc/'
     and '/usr/local/lib/gcc/'.  If neither of those results in a file
     name that is found, the unmodified program name is searched for
     using the directories specified in your 'PATH' environment
     variable.

     The compiler checks to see if the path provided by '-B' refers to a
     directory, and if necessary it adds a directory separator character
     at the end of the path.

     '-B' prefixes that effectively specify directory names also apply
     to libraries in the linker, because the compiler translates these
     options into '-L' options for the linker.  They also apply to
     include files in the preprocessor, because the compiler translates
     these options into '-isystem' options for the preprocessor.  In
     this case, the compiler appends 'include' to the prefix.

     The runtime support file 'libgcc.a' can also be searched for using
     the '-B' prefix, if needed.  If it is not found there, the two
     standard prefixes above are tried, and that is all.  The file is
     left out of the link if it is not found by those means.

     Another way to specify a prefix much like the '-B' prefix is to use
     the environment variable 'GCC_EXEC_PREFIX'.  *Note Environment
     Variables::.

     As a special kludge, if the path provided by '-B' is
     '[dir/]stageN/', where N is a number in the range 0 to 9, then it
     is replaced by '[dir/]include'.  This is to help with
     boot-strapping the compiler.

'-no-canonical-prefixes'
     Do not expand any symbolic links, resolve references to '/../' or
     '/./', or make the path absolute when generating a relative prefix.

'--sysroot=DIR'
     Use DIR as the logical root directory for headers and libraries.
     For example, if the compiler normally searches for headers in
     '/usr/include' and libraries in '/usr/lib', it instead searches
     'DIR/usr/include' and 'DIR/usr/lib'.

     If you use both this option and the '-isysroot' option, then the
     '--sysroot' option applies to libraries, but the '-isysroot' option
     applies to header files.

     The GNU linker (beginning with version 2.16) has the necessary
     support for this option.  If your linker does not support this
     option, the header file aspect of '--sysroot' still works, but the
     library aspect does not.

'--no-sysroot-suffix'
     For some targets, a suffix is added to the root directory specified
     with '--sysroot', depending on the other options used, so that
     headers may for example be found in 'DIR/SUFFIX/usr/include'
     instead of 'DIR/usr/include'.  This option disables the addition of
     such a suffix.

==============================================================================
File: gcc.info,  Node: |Code_Gen_Options|,  Next: |Developer_Options|,  Prev: |Directory_Options|,  Up: |Invoking_GCC|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Code_Gen_Options*

3.16 Options for Code Generation Conventions
==========----------------------------------

These machine-independent options control the interface conventions used
in code generation.

 Most of them have both positive and negative forms; the negative form
of '-ffoo' is '-fno-foo'.  In the table below, only one of the forms is
listed--the one that is not the default.  You can figure out the other
form by either removing 'no-' or adding it.

'-fstack-reuse=REUSE-LEVEL'
     This option controls stack space reuse for user declared local/auto
     variables and compiler generated temporaries.  REUSE_LEVEL can be
     'all', 'named_vars', or 'none'.  'all' enables stack reuse for all
     local variables and temporaries, 'named_vars' enables the reuse
     only for user defined local variables with names, and 'none'
     disables stack reuse completely.  The default value is 'all'.  The
     option is needed when the program extends the lifetime of a scoped
     local variable or a compiler generated temporary beyond the end
     point defined by the language.  When a lifetime of a variable ends,
     and if the variable lives in memory, the optimizing compiler has
     the freedom to reuse its stack space with other temporaries or
     scoped local variables whose live range does not overlap with it.
     Legacy code extending local lifetime is likely to break with the
     stack reuse optimization.

     For example,

             int *p;
             {
               int local1;

               p = &local1;
               local1 = 10;
               ....
             }
             {
                int local2;
                local2 = 20;
                ...
             }

             if (*p == 10)  // out of scope use of local1
               {

               }

     Another example:

             struct A
             {
                 A(int k) : i(k), j(k) { }
                 int i;
                 int j;
             };

             A *ap;

             void foo(const A& ar)
             {
                ap = &ar;
             }

             void bar()
             {
                foo(A(10)); // temp object's lifetime ends when foo returns

                {
                  A a(20);
                  ....
                }
                ap->i+= 10;  // ap references out of scope temp whose space
                             // is reused with a. What is the value of ap->i?
             }


     The lifetime of a compiler generated temporary is well defined by
     the C++ standard.  When a lifetime of a temporary ends, and if the
     temporary lives in memory, the optimizing compiler has the freedom
     to reuse its stack space with other temporaries or scoped local
     variables whose live range does not overlap with it.  However some
     of the legacy code relies on the behavior of older compilers in
     which temporaries' stack space is not reused, the aggressive stack
     reuse can lead to runtime errors.  This option is used to control
     the temporary stack reuse optimization.

'-ftrapv'
     This option generates traps for signed overflow on addition,
     subtraction, multiplication operations.  The options '-ftrapv' and
     '-fwrapv' override each other, so using '-ftrapv' '-fwrapv' on the
     command-line results in '-fwrapv' being effective.  Note that only
     active options override, so using '-ftrapv' '-fwrapv' '-fno-wrapv'
     on the command-line results in '-ftrapv' being effective.

'-fwrapv'
     This option instructs the compiler to assume that signed arithmetic
     overflow of addition, subtraction and multiplication wraps around
     using twos-complement representation.  This flag enables some
     optimizations and disables others.  The options '-ftrapv' and
     '-fwrapv' override each other, so using '-ftrapv' '-fwrapv' on the
     command-line results in '-fwrapv' being effective.  Note that only
     active options override, so using '-ftrapv' '-fwrapv' '-fno-wrapv'
     on the command-line results in '-ftrapv' being effective.

'-fwrapv-pointer'
     This option instructs the compiler to assume that pointer
     arithmetic overflow on addition and subtraction wraps around using
     twos-complement representation.  This flag disables some
     optimizations which assume pointer overflow is invalid.

'-fstrict-overflow'
     This option implies '-fno-wrapv' '-fno-wrapv-pointer' and when
     negated implies '-fwrapv' '-fwrapv-pointer'.

'-fexceptions'
     Enable exception handling.  Generates extra code needed to
     propagate exceptions.  For some targets, this implies GCC generates
     frame unwind information for all functions, which can produce
     significant data size overhead, although it does not affect
     execution.  If you do not specify this option, GCC enables it by
     default for languages like C++ that normally require exception
     handling, and disables it for languages like C that do not normally
     require it.  However, you may need to enable this option when
     compiling C code that needs to interoperate properly with exception
     handlers written in C++.  You may also wish to disable this option
     if you are compiling older C++ programs that don't use exception
     handling.

'-fnon-call-exceptions'
     Generate code that allows trapping instructions to throw
     exceptions.  Note that this requires platform-specific runtime
     support that does not exist everywhere.  Moreover, it only allows
     _trapping_ instructions to throw exceptions, i.e. memory references
     or floating-point instructions.  It does not allow exceptions to be
     thrown from arbitrary signal handlers such as 'SIGALRM'.

'-fdelete-dead-exceptions'
     Consider that instructions that may throw exceptions but don't
     otherwise contribute to the execution of the program can be
     optimized away.  This option is enabled by default for the Ada
     front end, as permitted by the Ada language specification.
     Optimization passes that cause dead exceptions to be removed are
     enabled independently at different optimization levels.

'-funwind-tables'
     Similar to '-fexceptions', except that it just generates any needed
     static data, but does not affect the generated code in any other
     way.  You normally do not need to enable this option; instead, a
     language processor that needs this handling enables it on your
     behalf.

'-fasynchronous-unwind-tables'
     Generate unwind table in DWARF format, if supported by target
     machine.  The table is exact at each instruction boundary, so it
     can be used for stack unwinding from asynchronous events (such as
     debugger or garbage collector).

'-fno-gnu-unique'
     On systems with recent GNU assembler and C library, the C++
     compiler uses the 'STB_GNU_UNIQUE' binding to make sure that
     definitions of template static data members and static local
     variables in inline functions are unique even in the presence of
     'RTLD_LOCAL'; this is necessary to avoid problems with a library
     used by two different 'RTLD_LOCAL' plugins depending on a
     definition in one of them and therefore disagreeing with the other
     one about the binding of the symbol.  But this causes 'dlclose' to
     be ignored for affected DSOs; if your program relies on
     reinitialization of a DSO via 'dlclose' and 'dlopen', you can use
     '-fno-gnu-unique'.

'-fpcc-struct-return'
     Return "short" 'struct' and 'union' values in memory like longer
     ones, rather than in registers.  This convention is less efficient,
     but it has the advantage of allowing intercallability between
     GCC-compiled files and files compiled with other compilers,
     particularly the Portable C Compiler (pcc).

     The precise convention for returning structures in memory depends
     on the target configuration macros.

     Short structures and unions are those whose size and alignment
     match that of some integer type.

     Warning: code compiled with the '-fpcc-struct-return' switch is
     not binary compatible with code compiled with the
     '-freg-struct-return' switch.  Use it to conform to a non-default
     application binary interface.

'-freg-struct-return'
     Return 'struct' and 'union' values in registers when possible.
     This is more efficient for small structures than
     '-fpcc-struct-return'.

     If you specify neither '-fpcc-struct-return' nor
     '-freg-struct-return', GCC defaults to whichever convention is
     standard for the target.  If there is no standard convention, GCC
     defaults to '-fpcc-struct-return', except on targets where GCC is
     the principal compiler.  In those cases, we can choose the
     standard, and we chose the more efficient register return
     alternative.

     Warning: code compiled with the '-freg-struct-return' switch is
     not binary compatible with code compiled with the
     '-fpcc-struct-return' switch.  Use it to conform to a non-default
     application binary interface.

'-fshort-enums'
     Allocate to an 'enum' type only as many bytes as it needs for the
     declared range of possible values.  Specifically, the 'enum' type
     is equivalent to the smallest integer type that has enough room.

     Warning: the '-fshort-enums' switch causes GCC to generate code
     that is not binary compatible with code generated without that
     switch.  Use it to conform to a non-default application binary
     interface.

'-fshort-wchar'
     Override the underlying type for 'wchar_t' to be 'short unsigned
     int' instead of the default for the target.  This option is useful
     for building programs to run under WINE.

     Warning: the '-fshort-wchar' switch causes GCC to generate code
     that is not binary compatible with code generated without that
     switch.  Use it to conform to a non-default application binary
     interface.

'-fno-common'
     In C code, this option controls the placement of global variables
     defined without an initializer, known as "tentative definitions" in
     the C standard.  Tentative definitions are distinct from
     declarations of a variable with the 'extern' keyword, which do not
     allocate storage.

     Unix C compilers have traditionally allocated storage for
     uninitialized global variables in a common block.  This allows the
     linker to resolve all tentative definitions of the same variable in
     different compilation units to the same object, or to a
     non-tentative definition.  This is the behavior specified by
     '-fcommon', and is the default for GCC on most targets.  On the
     other hand, this behavior is not required by ISO C, and on some
     targets may carry a speed or code size penalty on variable
     references.

     The '-fno-common' option specifies that the compiler should instead
     place uninitialized global variables in the BSS section of the
     object file.  This inhibits the merging of tentative definitions by
     the linker so you get a multiple-definition error if the same
     variable is defined in more than one compilation unit.  Compiling
     with '-fno-common' is useful on targets for which it provides
     better performance, or if you wish to verify that the program will
     work on other systems that always treat uninitialized variable
     definitions this way.

'-fno-ident'
     Ignore the '#ident' directive.

'-finhibit-size-directive'
     Don't output a '.size' assembler directive, or anything else that
     would cause trouble if the function is split in the middle, and the
     two halves are placed at locations far apart in memory.  This
     option is used when compiling 'crtstuff.c'; you should not need to
     use it for anything else.

'-fverbose-asm'
     Put extra commentary information in the generated assembly code to
     make it more readable.  This option is generally only of use to
     those who actually need to read the generated assembly code
     (perhaps while debugging the compiler itself).

     '-fno-verbose-asm', the default, causes the extra information to be
     omitted and is useful when comparing two assembler files.

     The added comments include:

        * information on the compiler version and command-line options,

        * the source code lines associated with the assembly
          instructions, in the form FILENAME:LINENUMBER:CONTENT OF LINE,

        * hints on which high-level expressions correspond to the
          various assembly instruction operands.

     For example, given this C source file:

          int test (int n)
          {
            int i;
            int total = 0;

            for (i = 0; i < n; i++)
              total += i * i;

            return total;
          }

     compiling to (x86_64) assembly via '-S' and emitting the result
     direct to stdout via '-o' '-'

          gcc -S test.c -fverbose-asm -Os -o -

     gives output similar to this:

          	.file	"test.c"
          # GNU C11 (GCC) version 7.0.0 20160809 (experimental) (x86_64-pc-linux-gnu)
            [...snip...]
          # options passed:
            [...snip...]

          	.text
          	.globl	test
          	.type	test, @function
          test:
          .LFB0:
          	.cfi_startproc
          # test.c:4:   int total = 0;
          	xorl	%eax, %eax	# <retval>
          # test.c:6:   for (i = 0; i < n; i++)
          	xorl	%edx, %edx	# i
          .L2:
          # test.c:6:   for (i = 0; i < n; i++)
          	cmpl	%edi, %edx	# n, i
          	jge	.L5	#,
          # test.c:7:     total += i * i;
          	movl	%edx, %ecx	# i, tmp92
          	imull	%edx, %ecx	# i, tmp92
          # test.c:6:   for (i = 0; i < n; i++)
          	incl	%edx	# i
          # test.c:7:     total += i * i;
          	addl	%ecx, %eax	# tmp92, <retval>
          	jmp	.L2	#
          .L5:
          # test.c:10: }
          	ret
          	.cfi_endproc
          .LFE0:
          	.size	test, .-test
          	.ident	"GCC: (GNU) 7.0.0 20160809 (experimental)"
          	.section	.note.GNU-stack,"",@progbits

     The comments are intended for humans rather than machines and hence
     the precise format of the comments is subject to change.

'-frecord-gcc-switches'
     This switch causes the command line used to invoke the compiler to
     be recorded into the object file that is being created.  This
     switch is only implemented on some targets and the exact format of
     the recording is target and binary file format dependent, but it
     usually takes the form of a section containing ASCII text.  This
     switch is related to the '-fverbose-asm' switch, but that switch
     only records information in the assembler output file as comments,
     so it never reaches the object file.  See also
     '-grecord-gcc-switches' for another way of storing compiler options
     into the object file.

'-fpic'
     Generate position-independent code (PIC) suitable for use in a
     shared library, if supported for the target machine.  Such code
     accesses all constant addresses through a global offset table
     (GOT).  The dynamic loader resolves the GOT entries when the
     program starts (the dynamic loader is not part of GCC; it is part
     of the operating system).  If the GOT size for the linked
     executable exceeds a machine-specific maximum size, you get an
     error message from the linker indicating that '-fpic' does not
     work; in that case, recompile with '-fPIC' instead.  (These
     maximums are 8k on the SPARC, 28k on AArch64 and 32k on the m68k
     and RS/6000.  The x86 has no such limit.)

     Position-independent code requires special support, and therefore
     works only on certain machines.  For the x86, GCC supports PIC for
     System V but not for the Sun 386i.  Code generated for the IBM
     RS/6000 is always position-independent.

     When this flag is set, the macros '__pic__' and '__PIC__' are
     defined to 1.

'-fPIC'
     If supported for the target machine, emit position-independent
     code, suitable for dynamic linking and avoiding any limit on the
     size of the global offset table.  This option makes a difference on
     AArch64, m68k, PowerPC and SPARC.

     Position-independent code requires special support, and therefore
     works only on certain machines.

     When this flag is set, the macros '__pic__' and '__PIC__' are
     defined to 2.

'-fpie'
'-fPIE'
     These options are similar to '-fpic' and '-fPIC', but the generated
     position-independent code can be only linked into executables.
     Usually these options are used to compile code that will be linked
     using the '-pie' GCC option.

     '-fpie' and '-fPIE' both define the macros '__pie__' and '__PIE__'.
     The macros have the value 1 for '-fpie' and 2 for '-fPIE'.

'-fno-plt'
     Do not use the PLT for external function calls in
     position-independent code.  Instead, load the callee address at
     call sites from the GOT and branch to it.  This leads to more
     efficient code by eliminating PLT stubs and exposing GOT loads to
     optimizations.  On architectures such as 32-bit x86 where PLT stubs
     expect the GOT pointer in a specific register, this gives more
     register allocation freedom to the compiler.  Lazy binding requires
     use of the PLT; with '-fno-plt' all external symbols are resolved
     at load time.

     Alternatively, the function attribute 'noplt' can be used to avoid
     calls through the PLT for specific external functions.

     In position-dependent code, a few targets also convert calls to
     functions that are marked to not use the PLT to use the GOT
     instead.

'-fno-jump-tables'
     Do not use jump tables for switch statements even where it would be
     more efficient than other code generation strategies.  This option
     is of use in conjunction with '-fpic' or '-fPIC' for building code
     that forms part of a dynamic linker and cannot reference the
     address of a jump table.  On some targets, jump tables do not
     require a GOT and this option is not needed.

'-ffixed-REG'
     Treat the register named REG as a fixed register; generated code
     should never refer to it (except perhaps as a stack pointer, frame
     pointer or in some other fixed role).

     REG must be the name of a register.  The register names accepted
     are machine-specific and are defined in the 'REGISTER_NAMES' macro
     in the machine description macro file.

     This flag does not have a negative form, because it specifies a
     three-way choice.

'-fcall-used-REG'
     Treat the register named REG as an allocable register that is
     clobbered by function calls.  It may be allocated for temporaries
     or variables that do not live across a call.  Functions compiled
     this way do not save and restore the register REG.

     It is an error to use this flag with the frame pointer or stack
     pointer.  Use of this flag for other registers that have fixed
     pervasive roles in the machine's execution model produces
     disastrous results.

     This flag does not have a negative form, because it specifies a
     three-way choice.

'-fcall-saved-REG'
     Treat the register named REG as an allocable register saved by
     functions.  It may be allocated even for temporaries or variables
     that live across a call.  Functions compiled this way save and
     restore the register REG if they use it.

     It is an error to use this flag with the frame pointer or stack
     pointer.  Use of this flag for other registers that have fixed
     pervasive roles in the machine's execution model produces
     disastrous results.

     A different sort of disaster results from the use of this flag for
     a register in which function values may be returned.

     This flag does not have a negative form, because it specifies a
     three-way choice.

'-fpack-struct[=N]'
     Without a value specified, pack all structure members together
     without holes.  When a value is specified (which must be a small
     power of two), pack structure members according to this value,
     representing the maximum alignment (that is, objects with default
     alignment requirements larger than this are output potentially
     unaligned at the next fitting location.

     Warning: the '-fpack-struct' switch causes GCC to generate code
     that is not binary compatible with code generated without that
     switch.  Additionally, it makes the code suboptimal.  Use it to
     conform to a non-default application binary interface.

'-fleading-underscore'
     This option and its counterpart, '-fno-leading-underscore',
     forcibly change the way C symbols are represented in the object
     file.  One use is to help link with legacy assembly code.

     Warning: the '-fleading-underscore' switch causes GCC to generate
     code that is not binary compatible with code generated without that
     switch.  Use it to conform to a non-default application binary
     interface.  Not all targets provide complete support for this
     switch.

'-ftls-model=MODEL'
     Alter the thread-local storage model to be used (*note
     Thread-Local::).  The MODEL argument should be one of
     'global-dynamic', 'local-dynamic', 'initial-exec' or 'local-exec'.
     Note that the choice is subject to optimization: the compiler may
     use a more efficient model for symbols not visible outside of the
     translation unit, or if '-fpic' is not given on the command line.

     The default without '-fpic' is 'initial-exec'; with '-fpic' the
     default is 'global-dynamic'.

'-ftrampolines'
     For targets that normally need trampolines for nested functions,
     always generate them instead of using descriptors.  Otherwise, for
     targets that do not need them, like for example HP-PA or IA-64, do
     nothing.

     A trampoline is a small piece of code that is created at run time
     on the stack when the address of a nested function is taken, and is
     used to call the nested function indirectly.  Therefore, it
     requires the stack to be made executable in order for the program
     to work properly.

     '-fno-trampolines' is enabled by default on a language by language
     basis to let the compiler avoid generating them, if it computes
     that this is safe, and replace them with descriptors.  Descriptors
     are made up of data only, but the generated code must be prepared
     to deal with them.  As of this writing, '-fno-trampolines' is
     enabled by default only for Ada.

     Moreover, code compiled with '-ftrampolines' and code compiled with
     '-fno-trampolines' are not binary compatible if nested functions
     are present.  This option must therefore be used on a program-wide
     basis and be manipulated with extreme care.

'-fvisibility=[default|internal|hidden|protected]'
     Set the default ELF image symbol visibility to the specified
     option--all symbols are marked with this unless overridden within
     the code.  Using this feature can very substantially improve
     linking and load times of shared object libraries, produce more
     optimized code, provide near-perfect API export and prevent symbol
     clashes.  It is strongly recommended that you use this in any
     shared objects you distribute.

     Despite the nomenclature, 'default' always means public; i.e.,
     available to be linked against from outside the shared object.
     'protected' and 'internal' are pretty useless in real-world usage
     so the only other commonly used option is 'hidden'.  The default if
     '-fvisibility' isn't specified is 'default', i.e., make every
     symbol public.

     A good explanation of the benefits offered by ensuring ELF symbols
     have the correct visibility is given by "How To Write Shared
     Libraries" by Ulrich Drepper (which can be found at
     <https://www.akkadia.org/drepper/>)--however a superior solution
     made possible by this option to marking things hidden when the
     default is public is to make the default hidden and mark things
     public.  This is the norm with DLLs on Windows and with
     '-fvisibility=hidden' and '__attribute__ ((visibility("default")))'
     instead of '__declspec(dllexport)' you get almost identical
     semantics with identical syntax.  This is a great boon to those
     working with cross-platform projects.

     For those adding visibility support to existing code, you may find
     '#pragma GCC visibility' of use.  This works by you enclosing the
     declarations you wish to set visibility for with (for example)
     '#pragma GCC visibility push(hidden)' and '#pragma GCC visibility
     pop'.  Bear in mind that symbol visibility should be viewed *as
     part of the API interface contract* and thus all new code should
     always specify visibility when it is not the default; i.e.,
     declarations only for use within the local DSO should always be
     marked explicitly as hidden as so to avoid PLT indirection
     overheads--making this abundantly clear also aids readability and
     self-documentation of the code.  Note that due to ISO C++
     specification requirements, 'operator new' and 'operator delete'
     must always be of default visibility.

     Be aware that headers from outside your project, in particular
     system headers and headers from any other library you use, may not
     be expecting to be compiled with visibility other than the default.
     You may need to explicitly say '#pragma GCC visibility
     push(default)' before including any such headers.

     'extern' declarations are not affected by '-fvisibility', so a lot
     of code can be recompiled with '-fvisibility=hidden' with no
     modifications.  However, this means that calls to 'extern'
     functions with no explicit visibility use the PLT, so it is more
     effective to use '__attribute ((visibility))' and/or '#pragma GCC
     visibility' to tell the compiler which 'extern' declarations should
     be treated as hidden.

     Note that '-fvisibility' does affect C++ vague linkage entities.
     This means that, for instance, an exception class that is be thrown
     between DSOs must be explicitly marked with default visibility so
     that the 'type_info' nodes are unified between the DSOs.

     An overview of these techniques, their benefits and how to use them
     is at <http://gcc.gnu.org/wiki/Visibility>.

'-fstrict-volatile-bitfields'
     This option should be used if accesses to volatile bit-fields (or
     other structure fields, although the compiler usually honors those
     types anyway) should use a single access of the width of the
     field's type, aligned to a natural alignment if possible.  For
     example, targets with memory-mapped peripheral registers might
     require all such accesses to be 16 bits wide; with this flag you
     can declare all peripheral bit-fields as 'unsigned short' (assuming
     short is 16 bits on these targets) to force GCC to use 16-bit
     accesses instead of, perhaps, a more efficient 32-bit access.

     If this option is disabled, the compiler uses the most efficient
     instruction.  In the previous example, that might be a 32-bit load
     instruction, even though that accesses bytes that do not contain
     any portion of the bit-field, or memory-mapped registers unrelated
     to the one being updated.

     In some cases, such as when the 'packed' attribute is applied to a
     structure field, it may not be possible to access the field with a
     single read or write that is correctly aligned for the target
     machine.  In this case GCC falls back to generating multiple
     accesses rather than code that will fault or truncate the result at
     run time.

     Note: Due to restrictions of the C/C++11 memory model, write
     accesses are not allowed to touch non bit-field members.  It is
     therefore recommended to define all bits of the field's type as
     bit-field members.

     The default value of this option is determined by the application
     binary interface for the target processor.

'-fsync-libcalls'
     This option controls whether any out-of-line instance of the
     '__sync' family of functions may be used to implement the C++11
     '__atomic' family of functions.

     The default value of this option is enabled, thus the only useful
     form of the option is '-fno-sync-libcalls'.  This option is used in
     the implementation of the 'libatomic' runtime library.

==============================================================================
File: gcc.info,  Node: |Developer_Options|,  Next: |Submodel_Options|,  Prev: |Code_Gen_Options|,  Up: |Invoking_GCC|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Developer_Options*

3.17 GCC Developer Options
==========----------------

This section describes command-line options that are primarily of
interest to GCC developers, including options to support compiler
testing and investigation of compiler bugs and compile-time performance
problems.  This includes options that produce debug dumps at various
points in the compilation; that print statistics such as memory use and
execution time; and that print information about GCC's configuration,
such as where it searches for libraries.  You should rarely need to use
any of these options for ordinary compilation and linking tasks.

 Many developer options that cause GCC to dump output to a file take an
optional '=FILENAME' suffix.  You can specify 'stdout' or '-' to dump to
standard output, and 'stderr' for standard error.

 If '=FILENAME' is omitted, a default dump file name is constructed by
concatenating the base dump file name, a pass number, phase letter, and
pass name.  The base dump file name is the name of output file produced
by the compiler if explicitly specified and not an executable; otherwise
it is the source file name.  The pass number is determined by the order
passes are registered with the compiler's pass manager.  This is
generally the same as the order of execution, but passes registered by
plugins, target-specific passes, or passes that are otherwise registered
late are numbered higher than the pass named 'final', even if they are
executed earlier.  The phase letter is one of 'i' (inter-procedural
analysis), 'l' (language-specific), 'r' (RTL), or 't' (tree).  The files
are created in the directory of the output file.

'-dLETTERS'
'-fdump-rtl-PASS'
'-fdump-rtl-PASS=FILENAME'
     Says to make debugging dumps during compilation at times specified
     by LETTERS.  This is used for debugging the RTL-based passes of the
     compiler.

     Some '-dLETTERS' switches have different meaning when '-E' is used
     for preprocessing.  *Note Preprocessor Options::, for information
     about preprocessor-specific dump options.

     Debug dumps can be enabled with a '-fdump-rtl' switch or some '-d'
     option LETTERS.  Here are the possible letters for use in PASS and
     LETTERS, and their meanings:

     '-fdump-rtl-alignments'
          Dump after branch alignments have been computed.

     '-fdump-rtl-asmcons'
          Dump after fixing rtl statements that have unsatisfied in/out
          constraints.

     '-fdump-rtl-auto_inc_dec'
          Dump after auto-inc-dec discovery.  This pass is only run on
          architectures that have auto inc or auto dec instructions.

     '-fdump-rtl-barriers'
          Dump after cleaning up the barrier instructions.

     '-fdump-rtl-bbpart'
          Dump after partitioning hot and cold basic blocks.

     '-fdump-rtl-bbro'
          Dump after block reordering.

     '-fdump-rtl-btl1'
     '-fdump-rtl-btl2'
          '-fdump-rtl-btl1' and '-fdump-rtl-btl2' enable dumping after
          the two branch target load optimization passes.

     '-fdump-rtl-bypass'
          Dump after jump bypassing and control flow optimizations.

     '-fdump-rtl-combine'
          Dump after the RTL instruction combination pass.

     '-fdump-rtl-compgotos'
          Dump after duplicating the computed gotos.

     '-fdump-rtl-ce1'
     '-fdump-rtl-ce2'
     '-fdump-rtl-ce3'
          '-fdump-rtl-ce1', '-fdump-rtl-ce2', and '-fdump-rtl-ce3'
          enable dumping after the three if conversion passes.

     '-fdump-rtl-cprop_hardreg'
          Dump after hard register copy propagation.

     '-fdump-rtl-csa'
          Dump after combining stack adjustments.

     '-fdump-rtl-cse1'
     '-fdump-rtl-cse2'
          '-fdump-rtl-cse1' and '-fdump-rtl-cse2' enable dumping after
          the two common subexpression elimination passes.

     '-fdump-rtl-dce'
          Dump after the standalone dead code elimination passes.

     '-fdump-rtl-dbr'
          Dump after delayed branch scheduling.

     '-fdump-rtl-dce1'
     '-fdump-rtl-dce2'
          '-fdump-rtl-dce1' and '-fdump-rtl-dce2' enable dumping after
          the two dead store elimination passes.

     '-fdump-rtl-eh'
          Dump after finalization of EH handling code.

     '-fdump-rtl-eh_ranges'
          Dump after conversion of EH handling range regions.

     '-fdump-rtl-expand'
          Dump after RTL generation.

     '-fdump-rtl-fwprop1'
     '-fdump-rtl-fwprop2'
          '-fdump-rtl-fwprop1' and '-fdump-rtl-fwprop2' enable dumping
          after the two forward propagation passes.

     '-fdump-rtl-gcse1'
     '-fdump-rtl-gcse2'
          '-fdump-rtl-gcse1' and '-fdump-rtl-gcse2' enable dumping after
          global common subexpression elimination.

     '-fdump-rtl-init-regs'
          Dump after the initialization of the registers.

     '-fdump-rtl-initvals'
          Dump after the computation of the initial value sets.

     '-fdump-rtl-into_cfglayout'
          Dump after converting to cfglayout mode.

     '-fdump-rtl-ira'
          Dump after iterated register allocation.

     '-fdump-rtl-jump'
          Dump after the second jump optimization.

     '-fdump-rtl-loop2'
          '-fdump-rtl-loop2' enables dumping after the rtl loop
          optimization passes.

     '-fdump-rtl-mach'
          Dump after performing the machine dependent reorganization
          pass, if that pass exists.

     '-fdump-rtl-mode_sw'
          Dump after removing redundant mode switches.

     '-fdump-rtl-rnreg'
          Dump after register renumbering.

     '-fdump-rtl-outof_cfglayout'
          Dump after converting from cfglayout mode.

     '-fdump-rtl-peephole2'
          Dump after the peephole pass.

     '-fdump-rtl-postreload'
          Dump after post-reload optimizations.

     '-fdump-rtl-pro_and_epilogue'
          Dump after generating the function prologues and epilogues.

     '-fdump-rtl-sched1'
     '-fdump-rtl-sched2'
          '-fdump-rtl-sched1' and '-fdump-rtl-sched2' enable dumping
          after the basic block scheduling passes.

     '-fdump-rtl-ree'
          Dump after sign/zero extension elimination.

     '-fdump-rtl-seqabstr'
          Dump after common sequence discovery.

     '-fdump-rtl-shorten'
          Dump after shortening branches.

     '-fdump-rtl-sibling'
          Dump after sibling call optimizations.

     '-fdump-rtl-split1'
     '-fdump-rtl-split2'
     '-fdump-rtl-split3'
     '-fdump-rtl-split4'
     '-fdump-rtl-split5'
          These options enable dumping after five rounds of instruction
          splitting.

     '-fdump-rtl-sms'
          Dump after modulo scheduling.  This pass is only run on some
          architectures.

     '-fdump-rtl-stack'
          Dump after conversion from GCC's "flat register file"
          registers to the x87's stack-like registers.  This pass is
          only run on x86 variants.

     '-fdump-rtl-subreg1'
     '-fdump-rtl-subreg2'
          '-fdump-rtl-subreg1' and '-fdump-rtl-subreg2' enable dumping
          after the two subreg expansion passes.

     '-fdump-rtl-unshare'
          Dump after all rtl has been unshared.

     '-fdump-rtl-vartrack'
          Dump after variable tracking.

     '-fdump-rtl-vregs'
          Dump after converting virtual registers to hard registers.

     '-fdump-rtl-web'
          Dump after live range splitting.

     '-fdump-rtl-regclass'
     '-fdump-rtl-subregs_of_mode_init'
     '-fdump-rtl-subregs_of_mode_finish'
     '-fdump-rtl-dfinit'
     '-fdump-rtl-dfinish'
          These dumps are defined but always produce empty files.

     '-da'
     '-fdump-rtl-all'
          Produce all the dumps listed above.

     '-dA'
          Annotate the assembler output with miscellaneous debugging
          information.

     '-dD'
          Dump all macro definitions, at the end of preprocessing, in
          addition to normal output.

     '-dH'
          Produce a core dump whenever an error occurs.

     '-dp'
          Annotate the assembler output with a comment indicating which
          pattern and alternative is used.  The length and cost of each
          instruction are also printed.

     '-dP'
          Dump the RTL in the assembler output as a comment before each
          instruction.  Also turns on '-dp' annotation.

     '-dx'
          Just generate RTL for a function instead of compiling it.
          Usually used with '-fdump-rtl-expand'.

'-fdump-debug'
     Dump debugging information generated during the debug generation
     phase.

'-fdump-earlydebug'
     Dump debugging information generated during the early debug
     generation phase.

'-fdump-noaddr'
     When doing debugging dumps, suppress address output.  This makes it
     more feasible to use diff on debugging dumps for compiler
     invocations with different compiler binaries and/or different text
     / bss / data / heap / stack / dso start locations.

'-freport-bug'
     Collect and dump debug information into a temporary file if an
     internal compiler error (ICE) occurs.

'-fdump-unnumbered'
     When doing debugging dumps, suppress instruction numbers and
     address output.  This makes it more feasible to use diff on
     debugging dumps for compiler invocations with different options, in
     particular with and without '-g'.

'-fdump-unnumbered-links'
     When doing debugging dumps (see '-d' option above), suppress
     instruction numbers for the links to the previous and next
     instructions in a sequence.

'-fdump-ipa-SWITCH'
'-fdump-ipa-SWITCH-OPTIONS'
     Control the dumping at various stages of inter-procedural analysis
     language tree to a file.  The file name is generated by appending a
     switch specific suffix to the source file name, and the file is
     created in the same directory as the output file.  The following
     dumps are possible:

     'all'
          Enables all inter-procedural analysis dumps.

     'cgraph'
          Dumps information about call-graph optimization, unused
          function removal, and inlining decisions.

     'inline'
          Dump after function inlining.

     Additionally, the options '-optimized', '-missed', '-note', and
     '-all' can be provided, with the same meaning as for '-fopt-info',
     defaulting to '-optimized'.

     For example, '-fdump-ipa-inline-optimized-missed' will emit
     information on callsites that were inlined, along with callsites
     that were not inlined.

     By default, the dump will contain messages about successful
     optimizations (equivalent to '-optimized') together with low-level
     details about the analysis.

'-fdump-lang-all'
'-fdump-lang-SWITCH'
'-fdump-lang-SWITCH-OPTIONS'
'-fdump-lang-SWITCH-OPTIONS=FILENAME'
     Control the dumping of language-specific information.  The OPTIONS
     and FILENAME portions behave as described in the '-fdump-tree'
     option.  The following SWITCH values are accepted:

     'all'

          Enable all language-specific dumps.

     'class'
          Dump class hierarchy information.  Virtual table information
          is emitted unless ''slim'' is specified.  This option is
          applicable to C++ only.

     'raw'
          Dump the raw internal tree data.  This option is applicable to
          C++ only.

'-fdump-passes'
     Print on 'stderr' the list of optimization passes that are turned
     on and off by the current command-line options.

'-fdump-statistics-OPTION'
     Enable and control dumping of pass statistics in a separate file.
     The file name is generated by appending a suffix ending in
     '.statistics' to the source file name, and the file is created in
     the same directory as the output file.  If the '-OPTION' form is
     used, '-stats' causes counters to be summed over the whole
     compilation unit while '-details' dumps every event as the passes
     generate them.  The default with no option is to sum counters for
     each function compiled.

'-fdump-tree-all'
'-fdump-tree-SWITCH'
'-fdump-tree-SWITCH-OPTIONS'
'-fdump-tree-SWITCH-OPTIONS=FILENAME'
     Control the dumping at various stages of processing the
     intermediate language tree to a file.  If the '-OPTIONS' form is
     used, OPTIONS is a list of '-' separated options which control the
     details of the dump.  Not all options are applicable to all dumps;
     those that are not meaningful are ignored.  The following options
     are available

     'address'
          Print the address of each node.  Usually this is not
          meaningful as it changes according to the environment and
          source file.  Its primary use is for tying up a dump file with
          a debug environment.
     'asmname'
          If 'DECL_ASSEMBLER_NAME' has been set for a given decl, use
          that in the dump instead of 'DECL_NAME'.  Its primary use is
          ease of use working backward from mangled names in the
          assembly file.
     'slim'
          When dumping front-end intermediate representations, inhibit
          dumping of members of a scope or body of a function merely
          because that scope has been reached.  Only dump such items
          when they are directly reachable by some other path.

          When dumping pretty-printed trees, this option inhibits
          dumping the bodies of control structures.

          When dumping RTL, print the RTL in slim (condensed) form
          instead of the default LISP-like representation.
     'raw'
          Print a raw representation of the tree.  By default, trees are
          pretty-printed into a C-like representation.
     'details'
          Enable more detailed dumps (not honored by every dump option).
          Also include information from the optimization passes.
     'stats'
          Enable dumping various statistics about the pass (not honored
          by every dump option).
     'blocks'
          Enable showing basic block boundaries (disabled in raw dumps).
     'graph'
          For each of the other indicated dump files
          ('-fdump-rtl-PASS'), dump a representation of the control flow
          graph suitable for viewing with GraphViz to
          'FILE.PASSID.PASS.dot'.  Each function in the file is
          pretty-printed as a subgraph, so that GraphViz can render them
          all in a single plot.

          This option currently only works for RTL dumps, and the RTL is
          always dumped in slim form.
     'vops'
          Enable showing virtual operands for every statement.
     'lineno'
          Enable showing line numbers for statements.
     'uid'
          Enable showing the unique ID ('DECL_UID') for each variable.
     'verbose'
          Enable showing the tree dump for each statement.
     'eh'
          Enable showing the EH region number holding each statement.
     'scev'
          Enable showing scalar evolution analysis details.
     'optimized'
          Enable showing optimization information (only available in
          certain passes).
     'missed'
          Enable showing missed optimization information (only available
          in certain passes).
     'note'
          Enable other detailed optimization information (only available
          in certain passes).
     'all'
          Turn on all options, except 'raw', 'slim', 'verbose' and
          'lineno'.
     'optall'
          Turn on all optimization options, i.e., 'optimized', 'missed',
          and 'note'.

     To determine what tree dumps are available or find the dump for a
     pass of interest follow the steps below.

       1. Invoke GCC with '-fdump-passes' and in the 'stderr' output
          look for a code that corresponds to the pass you are
          interested in.  For example, the codes 'tree-evrp',
          'tree-vrp1', and 'tree-vrp2' correspond to the three Value
          Range Propagation passes.  The number at the end distinguishes
          distinct invocations of the same pass.
       2. To enable the creation of the dump file, append the pass code
          to the '-fdump-' option prefix and invoke GCC with it.  For
          example, to enable the dump from the Early Value Range
          Propagation pass, invoke GCC with the '-fdump-tree-evrp'
          option.  Optionally, you may specify the name of the dump
          file.  If you don't specify one, GCC creates as described
          below.
       3. Find the pass dump in a file whose name is composed of three
          components separated by a period: the name of the source file
          GCC was invoked to compile, a numeric suffix indicating the
          pass number followed by the letter 't' for tree passes (and
          the letter 'r' for RTL passes), and finally the pass code.
          For example, the Early VRP pass dump might be in a file named
          'myfile.c.038t.evrp' in the current working directory.  Note
          that the numeric codes are not stable and may change from one
          version of GCC to another.

'-fopt-info'
'-fopt-info-OPTIONS'
'-fopt-info-OPTIONS=FILENAME'
     Controls optimization dumps from various optimization passes.  If
     the '-OPTIONS' form is used, OPTIONS is a list of '-' separated
     option keywords to select the dump details and optimizations.

     The OPTIONS can be divided into three groups:
       1. options describing what kinds of messages should be emitted,
       2. options describing the verbosity of the dump, and
       3. options describing which optimizations should be included.
     The options from each group can be freely mixed as they are
     non-overlapping.  However, in case of any conflicts, the later
     options override the earlier options on the command line.

     The following options control which kinds of messages should be
     emitted:

     'optimized'
          Print information when an optimization is successfully
          applied.  It is up to a pass to decide which information is
          relevant.  For example, the vectorizer passes print the source
          location of loops which are successfully vectorized.
     'missed'
          Print information about missed optimizations.  Individual
          passes control which information to include in the output.
     'note'
          Print verbose information about optimizations, such as certain
          transformations, more detailed messages about decisions etc.
     'all'
          Print detailed optimization information.  This includes
          'optimized', 'missed', and 'note'.

     The following option controls the dump verbosity:

     'internals'
          By default, only "high-level" messages are emitted.  This
          option enables additional, more detailed, messages, which are
          likely to only be of interest to GCC developers.

     One or more of the following option keywords can be used to
     describe a group of optimizations:

     'ipa'
          Enable dumps from all interprocedural optimizations.
     'loop'
          Enable dumps from all loop optimizations.
     'inline'
          Enable dumps from all inlining optimizations.
     'omp'
          Enable dumps from all OMP (Offloading and Multi Processing)
          optimizations.
     'vec'
          Enable dumps from all vectorization optimizations.
     'optall'
          Enable dumps from all optimizations.  This is a superset of
          the optimization groups listed above.

     If OPTIONS is omitted, it defaults to 'optimized-optall', which
     means to dump messages about successful optimizations from all the
     passes, omitting messages that are treated as "internals".

     If the FILENAME is provided, then the dumps from all the applicable
     optimizations are concatenated into the FILENAME.  Otherwise the
     dump is output onto 'stderr'.  Though multiple '-fopt-info' options
     are accepted, only one of them can include a FILENAME.  If other
     filenames are provided then all but the first such option are
     ignored.

     Note that the output FILENAME is overwritten in case of multiple
     translation units.  If a combined output from multiple translation
     units is desired, 'stderr' should be used instead.

     In the following example, the optimization info is output to
     'stderr':

          gcc -O3 -fopt-info

     This example:
          gcc -O3 -fopt-info-missed=missed.all

     outputs missed optimization report from all the passes into
     'missed.all', and this one:

          gcc -O2 -ftree-vectorize -fopt-info-vec-missed

     prints information about missed optimization opportunities from
     vectorization passes on 'stderr'.  Note that
     '-fopt-info-vec-missed' is equivalent to '-fopt-info-missed-vec'.
     The order of the optimization group names and message types listed
     after '-fopt-info' does not matter.

     As another example,
          gcc -O3 -fopt-info-inline-optimized-missed=inline.txt

     outputs information about missed optimizations as well as optimized
     locations from all the inlining passes into 'inline.txt'.

     Finally, consider:

          gcc -fopt-info-vec-missed=vec.miss -fopt-info-loop-optimized=loop.opt

     Here the two output filenames 'vec.miss' and 'loop.opt' are in
     conflict since only one output file is allowed.  In this case, only
     the first option takes effect and the subsequent options are
     ignored.  Thus only 'vec.miss' is produced which contains dumps
     from the vectorizer about missed opportunities.

'-fsave-optimization-record'
     Write a SRCFILE.opt-record.json.gz file detailing what
     optimizations were performed, for those optimizations that support
     '-fopt-info'.

     This option is experimental and the format of the data within the
     compressed JSON file is subject to change.

     It is roughly equivalent to a machine-readable version of
     '-fopt-info-all', as a collection of messages with source file,
     line number and column number, with the following additional data
     for each message:

        * the execution count of the code being optimized, along with
          metadata about whether this was from actual profile data, or
          just an estimate, allowing consumers to prioritize messages by
          code hotness,

        * the function name of the code being optimized, where
          applicable,

        * the "inlining chain" for the code being optimized, so that
          when a function is inlined into several different places
          (which might themselves be inlined), the reader can
          distinguish between the copies,

        * objects identifying those parts of the message that refer to
          expressions, statements or symbol-table nodes, which of these
          categories they are, and, when available, their source code
          location,

        * the GCC pass that emitted the message, and

        * the location in GCC's own code from which the message was
          emitted

     Additionally, some messages are logically nested within other
     messages, reflecting implementation details of the optimization
     passes.

'-fsched-verbose=N'
     On targets that use instruction scheduling, this option controls
     the amount of debugging output the scheduler prints to the dump
     files.

     For N greater than zero, '-fsched-verbose' outputs the same
     information as '-fdump-rtl-sched1' and '-fdump-rtl-sched2'.  For N
     greater than one, it also output basic block probabilities,
     detailed ready list information and unit/insn info.  For N greater
     than two, it includes RTL at abort point, control-flow and regions
     info.  And for N over four, '-fsched-verbose' also includes
     dependence info.

'-fenable-KIND-PASS'
'-fdisable-KIND-PASS=RANGE-LIST'

     This is a set of options that are used to explicitly disable/enable
     optimization passes.  These options are intended for use for
     debugging GCC. Compiler users should use regular options for
     enabling/disabling passes instead.

     '-fdisable-ipa-PASS'
          Disable IPA pass PASS.  PASS is the pass name.  If the same
          pass is statically invoked in the compiler multiple times, the
          pass name should be appended with a sequential number starting
          from 1.

     '-fdisable-rtl-PASS'
     '-fdisable-rtl-PASS=RANGE-LIST'
          Disable RTL pass PASS.  PASS is the pass name.  If the same
          pass is statically invoked in the compiler multiple times, the
          pass name should be appended with a sequential number starting
          from 1.  RANGE-LIST is a comma-separated list of function
          ranges or assembler names.  Each range is a number pair
          separated by a colon.  The range is inclusive in both ends.
          If the range is trivial, the number pair can be simplified as
          a single number.  If the function's call graph node's UID
          falls within one of the specified ranges, the PASS is disabled
          for that function.  The UID is shown in the function header of
          a dump file, and the pass names can be dumped by using option
          '-fdump-passes'.

     '-fdisable-tree-PASS'
     '-fdisable-tree-PASS=RANGE-LIST'
          Disable tree pass PASS.  See '-fdisable-rtl' for the
          description of option arguments.

     '-fenable-ipa-PASS'
          Enable IPA pass PASS.  PASS is the pass name.  If the same
          pass is statically invoked in the compiler multiple times, the
          pass name should be appended with a sequential number starting
          from 1.

     '-fenable-rtl-PASS'
     '-fenable-rtl-PASS=RANGE-LIST'
          Enable RTL pass PASS.  See '-fdisable-rtl' for option argument
          description and examples.

     '-fenable-tree-PASS'
     '-fenable-tree-PASS=RANGE-LIST'
          Enable tree pass PASS.  See '-fdisable-rtl' for the
          description of option arguments.

     Here are some examples showing uses of these options.


          # disable ccp1 for all functions
             -fdisable-tree-ccp1
          # disable complete unroll for function whose cgraph node uid is 1
             -fenable-tree-cunroll=1
          # disable gcse2 for functions at the following ranges [1,1],
          # [300,400], and [400,1000]
          # disable gcse2 for functions foo and foo2
             -fdisable-rtl-gcse2=foo,foo2
          # disable early inlining
             -fdisable-tree-einline
          # disable ipa inlining
             -fdisable-ipa-inline
          # enable tree full unroll
             -fenable-tree-unroll


'-fchecking'
'-fchecking=N'
     Enable internal consistency checking.  The default depends on the
     compiler configuration.  '-fchecking=2' enables further internal
     consistency checking that might affect code generation.

'-frandom-seed=STRING'
     This option provides a seed that GCC uses in place of random
     numbers in generating certain symbol names that have to be
     different in every compiled file.  It is also used to place unique
     stamps in coverage data files and the object files that produce
     them.  You can use the '-frandom-seed' option to produce
     reproducibly identical object files.

     The STRING can either be a number (decimal, octal or hex) or an
     arbitrary string (in which case it's converted to a number by
     computing CRC32).

     The STRING should be different for every file you compile.

'-save-temps'
'-save-temps=cwd'
     Store the usual "temporary" intermediate files permanently; place
     them in the current directory and name them based on the source
     file.  Thus, compiling 'foo.c' with '-c -save-temps' produces files
     'foo.i' and 'foo.s', as well as 'foo.o'.  This creates a
     preprocessed 'foo.i' output file even though the compiler now
     normally uses an integrated preprocessor.

     When used in combination with the '-x' command-line option,
     '-save-temps' is sensible enough to avoid over writing an input
     source file with the same extension as an intermediate file.  The
     corresponding intermediate file may be obtained by renaming the
     source file before using '-save-temps'.

     If you invoke GCC in parallel, compiling several different source
     files that share a common base name in different subdirectories or
     the same source file compiled for multiple output destinations, it
     is likely that the different parallel compilers will interfere with
     each other, and overwrite the temporary files.  For instance:

          gcc -save-temps -o outdir1/foo.o indir1/foo.c&
          gcc -save-temps -o outdir2/foo.o indir2/foo.c&

     may result in 'foo.i' and 'foo.o' being written to simultaneously
     by both compilers.

'-save-temps=obj'
     Store the usual "temporary" intermediate files permanently.  If the
     '-o' option is used, the temporary files are based on the object
     file.  If the '-o' option is not used, the '-save-temps=obj' switch
     behaves like '-save-temps'.

     For example:

          gcc -save-temps=obj -c foo.c
          gcc -save-temps=obj -c bar.c -o dir/xbar.o
          gcc -save-temps=obj foobar.c -o dir2/yfoobar

     creates 'foo.i', 'foo.s', 'dir/xbar.i', 'dir/xbar.s',
     'dir2/yfoobar.i', 'dir2/yfoobar.s', and 'dir2/yfoobar.o'.

'-time[=FILE]'
     Report the CPU time taken by each subprocess in the compilation
     sequence.  For C source files, this is the compiler proper and
     assembler (plus the linker if linking is done).

     Without the specification of an output file, the output looks like
     this:

          # cc1 0.12 0.01
          # as 0.00 0.01

     The first number on each line is the "user time", that is time
     spent executing the program itself.  The second number is "system
     time", time spent executing operating system routines on behalf of
     the program.  Both numbers are in seconds.

     With the specification of an output file, the output is appended to
     the named file, and it looks like this:

          0.12 0.01 cc1 OPTIONS
          0.00 0.01 as OPTIONS

     The "user time" and the "system time" are moved before the program
     name, and the options passed to the program are displayed, so that
     one can later tell what file was being compiled, and with which
     options.

'-fdump-final-insns[=FILE]'
     Dump the final internal representation (RTL) to FILE.  If the
     optional argument is omitted (or if FILE is '.'), the name of the
     dump file is determined by appending '.gkd' to the compilation
     output file name.

'-fcompare-debug[=OPTS]'
     If no error occurs during compilation, run the compiler a second
     time, adding OPTS and '-fcompare-debug-second' to the arguments
     passed to the second compilation.  Dump the final internal
     representation in both compilations, and print an error if they
     differ.

     If the equal sign is omitted, the default '-gtoggle' is used.

     The environment variable 'GCC_COMPARE_DEBUG', if defined, non-empty
     and nonzero, implicitly enables '-fcompare-debug'.  If
     'GCC_COMPARE_DEBUG' is defined to a string starting with a dash,
     then it is used for OPTS, otherwise the default '-gtoggle' is used.

     '-fcompare-debug=', with the equal sign but without OPTS, is
     equivalent to '-fno-compare-debug', which disables the dumping of
     the final representation and the second compilation, preventing
     even 'GCC_COMPARE_DEBUG' from taking effect.

     To verify full coverage during '-fcompare-debug' testing, set
     'GCC_COMPARE_DEBUG' to say '-fcompare-debug-not-overridden', which
     GCC rejects as an invalid option in any actual compilation (rather
     than preprocessing, assembly or linking).  To get just a warning,
     setting 'GCC_COMPARE_DEBUG' to '-w%n-fcompare-debug not overridden'
     will do.

'-fcompare-debug-second'
     This option is implicitly passed to the compiler for the second
     compilation requested by '-fcompare-debug', along with options to
     silence warnings, and omitting other options that would cause the
     compiler to produce output to files or to standard output as a side
     effect.  Dump files and preserved temporary files are renamed so as
     to contain the '.gk' additional extension during the second
     compilation, to avoid overwriting those generated by the first.

     When this option is passed to the compiler driver, it causes the
     _first_ compilation to be skipped, which makes it useful for little
     other than debugging the compiler proper.

'-gtoggle'
     Turn off generation of debug info, if leaving out this option
     generates it, or turn it on at level 2 otherwise.  The position of
     this argument in the command line does not matter; it takes effect
     after all other options are processed, and it does so only once, no
     matter how many times it is given.  This is mainly intended to be
     used with '-fcompare-debug'.

'-fvar-tracking-assignments-toggle'
     Toggle '-fvar-tracking-assignments', in the same way that
     '-gtoggle' toggles '-g'.

'-Q'
     Makes the compiler print out each function name as it is compiled,
     and print some statistics about each pass when it finishes.

'-ftime-report'
     Makes the compiler print some statistics about the time consumed by
     each pass when it finishes.

'-ftime-report-details'
     Record the time consumed by infrastructure parts separately for
     each pass.

'-fira-verbose=N'
     Control the verbosity of the dump file for the integrated register
     allocator.  The default value is 5.  If the value N is greater or
     equal to 10, the dump output is sent to stderr using the same
     format as N minus 10.

'-flto-report'
     Prints a report with internal details on the workings of the
     link-time optimizer.  The contents of this report vary from version
     to version.  It is meant to be useful to GCC developers when
     processing object files in LTO mode (via '-flto').

     Disabled by default.

'-flto-report-wpa'
     Like '-flto-report', but only print for the WPA phase of Link Time
     Optimization.

'-fmem-report'
     Makes the compiler print some statistics about permanent memory
     allocation when it finishes.

'-fmem-report-wpa'
     Makes the compiler print some statistics about permanent memory
     allocation for the WPA phase only.

'-fpre-ipa-mem-report'
'-fpost-ipa-mem-report'
     Makes the compiler print some statistics about permanent memory
     allocation before or after interprocedural optimization.

'-fprofile-report'
     Makes the compiler print some statistics about consistency of the
     (estimated) profile and effect of individual passes.

'-fstack-usage'
     Makes the compiler output stack usage information for the program,
     on a per-function basis.  The filename for the dump is made by
     appending '.su' to the AUXNAME.  AUXNAME is generated from the name
     of the output file, if explicitly specified and it is not an
     executable, otherwise it is the basename of the source file.  An
     entry is made up of three fields:

        * The name of the function.
        * A number of bytes.
        * One or more qualifiers: 'static', 'dynamic', 'bounded'.

     The qualifier 'static' means that the function manipulates the
     stack statically: a fixed number of bytes are allocated for the
     frame on function entry and released on function exit; no stack
     adjustments are otherwise made in the function.  The second field
     is this fixed number of bytes.

     The qualifier 'dynamic' means that the function manipulates the
     stack dynamically: in addition to the static allocation described
     above, stack adjustments are made in the body of the function, for
     example to push/pop arguments around function calls.  If the
     qualifier 'bounded' is also present, the amount of these
     adjustments is bounded at compile time and the second field is an
     upper bound of the total amount of stack used by the function.  If
     it is not present, the amount of these adjustments is not bounded
     at compile time and the second field only represents the bounded
     part.

'-fstats'
     Emit statistics about front-end processing at the end of the
     compilation.  This option is supported only by the C++ front end,
     and the information is generally only useful to the G++ development
     team.

'-fdbg-cnt-list'
     Print the name and the counter upper bound for all debug counters.

'-fdbg-cnt=COUNTER-VALUE-LIST'
     Set the internal debug counter lower and upper bound.
     COUNTER-VALUE-LIST is a comma-separated list of
     NAME:LOWER_BOUND:UPPER_BOUND tuples which sets the lower and the
     upper bound of each debug counter NAME.  The LOWER_BOUND is
     optional and is zero initialized if not set.  All debug counters
     have the initial upper bound of 'UINT_MAX'; thus 'dbg_cnt' returns
     true always unless the upper bound is set by this option.  For
     example, with '-fdbg-cnt=dce:2:4,tail_call:10', 'dbg_cnt(dce)'
     returns true only for third and fourth invocation.  For
     'dbg_cnt(tail_call)' true is returned for first 10 invocations.

'-print-file-name=LIBRARY'
     Print the full absolute name of the library file LIBRARY that would
     be used when linking--and don't do anything else.  With this
     option, GCC does not compile or link anything; it just prints the
     file name.

'-print-multi-directory'
     Print the directory name corresponding to the multilib selected by
     any other switches present in the command line.  This directory is
     supposed to exist in 'GCC_EXEC_PREFIX'.

'-print-multi-lib'
     Print the mapping from multilib directory names to compiler
     switches that enable them.  The directory name is separated from
     the switches by ';', and each switch starts with an '@' instead of
     the '-', without spaces between multiple switches.  This is
     supposed to ease shell processing.

'-print-multi-os-directory'
     Print the path to OS libraries for the selected multilib, relative
     to some 'lib' subdirectory.  If OS libraries are present in the
     'lib' subdirectory and no multilibs are used, this is usually just
     '.', if OS libraries are present in 'libSUFFIX' sibling directories
     this prints e.g. '../lib64', '../lib' or '../lib32', or if OS
     libraries are present in 'lib/SUBDIR' subdirectories it prints e.g.
     'amd64', 'sparcv9' or 'ev6'.

'-print-multiarch'
     Print the path to OS libraries for the selected multiarch, relative
     to some 'lib' subdirectory.

'-print-prog-name=PROGRAM'
     Like '-print-file-name', but searches for a program such as 'cpp'.

'-print-libgcc-file-name'
     Same as '-print-file-name=libgcc.a'.

     This is useful when you use '-nostdlib' or '-nodefaultlibs' but you
     do want to link with 'libgcc.a'.  You can do:

          gcc -nostdlib FILES... `gcc -print-libgcc-file-name`

'-print-search-dirs'
     Print the name of the configured installation directory and a list
     of program and library directories 'gcc' searches--and don't do
     anything else.

     This is useful when 'gcc' prints the error message 'installation
     problem, cannot exec cpp0: No such file or directory'.  To resolve
     this you either need to put 'cpp0' and the other compiler
     components where 'gcc' expects to find them, or you can set the
     environment variable 'GCC_EXEC_PREFIX' to the directory where you
     installed them.  Don't forget the trailing '/'.  *Note Environment
     Variables::.

'-print-sysroot'
     Print the target sysroot directory that is used during compilation.
     This is the target sysroot specified either at configure time or
     using the '--sysroot' option, possibly with an extra suffix that
     depends on compilation options.  If no target sysroot is specified,
     the option prints nothing.

'-print-sysroot-headers-suffix'
     Print the suffix added to the target sysroot when searching for
     headers, or give an error if the compiler is not configured with
     such a suffix--and don't do anything else.

'-dumpmachine'
     Print the compiler's target machine (for example,
     'i686-pc-linux-gnu')--and don't do anything else.

'-dumpversion'
     Print the compiler version (for example, '3.0', '6.3.0' or
     '7')--and don't do anything else.  This is the compiler version
     used in filesystem paths and specs.  Depending on how the compiler
     has been configured it can be just a single number (major version),
     two numbers separated by a dot (major and minor version) or three
     numbers separated by dots (major, minor and patchlevel version).

'-dumpfullversion'
     Print the full compiler version--and don't do anything else.  The
     output is always three numbers separated by dots, major, minor and
     patchlevel version.

'-dumpspecs'
     Print the compiler's built-in specs--and don't do anything else.
     (This is used when GCC itself is being built.)  *Note Spec Files::.

==============================================================================
File: gcc.info,  Node: |Submodel_Options|,  Next: |Spec_Files|,  Prev: |Developer_Options|,  Up: |Invoking_GCC|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Submodel_Options*

3.18 Machine-Dependent Options
==========--------------------

Each target machine supported by GCC can have its own options--for
example, to allow you to compile for a particular processor variant or
ABI, or to control optimizations specific to that machine.  By
convention, the names of machine-specific options start with '-m'.

 Some configurations of the compiler also support additional
target-specific options, usually for compatibility with other compilers
on the same platform.

MENU

* |AArch64_Options|::
* |Adapteva_Epiphany_Options|::
* |AMD_GCN_Options|::
* |ARC_Options|::
* |ARM_Options|::
* |AVR_Options|::
* |Blackfin_Options|::
* |C6X_Options|::
* |CRIS_Options|::
* |CR16_Options|::
* |C_SKY_Options|::
* |Darwin_Options|::
* |DEC_Alpha_Options|::
* |FR30_Options|::
* |FT32_Options|::
* |FRV_Options|::
* |GNU/Linux_Options|::
* |H8/300_Options|::
* |HPPA_Options|::
* |IA_64_Options|::
* |LM32_Options|::
* |M32C_Options|::
* |M32R/D_Options|::
* |M680x0_Options|::
* |MCore_Options|::
* |MeP_Options|::
* |MicroBlaze_Options|::
* |MIPS_Options|::
* |MMIX_Options|::
* |MN10300_Options|::
* |Moxie_Options|::
* |MSP430_Options|::
* |NDS32_Options|::
* |Nios_II_Options|::
* |Nvidia_PTX_Options|::
* |OpenRISC_Options|::
* |PDP_11_Options|::
* |picoChip_Options|::
* |PowerPC_Options|::
* |RISC_V_Options|::
* |RL78_Options|::
* |RS/6000_and_PowerPC_Options|::
* |RX_Options|::
* |S/390_and_zSeries_Options|::
* |Score_Options|::
* |SH_Options|::
* |Solaris_2_Options|::
* |SPARC_Options|::
* |SPU_Options|::
* |System_V_Options|::
* |TILE_Gx_Options|::
* |TILEPro_Options|::
* |V850_Options|::
* |VAX_Options|::
* |Visium_Options|::
* |VMS_Options|::
* |VxWorks_Options|::
* |x86_Options|::
* |x86_Windows_Options|::
* |Xstormy16_Options|::
* |Xtensa_Options|::
* |zSeries_Options|::

==============================================================================
File: gcc.info,  Node: |AArch64_Options|,  Next: |Adapteva_Epiphany_Options|,  Up: Submodel Options
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *AArch64_Options*

3.18.1 AArch64 Options
----------------------

These options are defined for AArch64 implementations:

'-mabi=NAME'
     Generate code for the specified data model.  Permissible values are
     'ilp32' for SysV-like data model where int, long int and pointers
     are 32 bits, and 'lp64' for SysV-like data model where int is 32
     bits, but long int and pointers are 64 bits.

     The default depends on the specific target configuration.  Note
     that the LP64 and ILP32 ABIs are not link-compatible; you must
     compile your entire program with the same ABI, and link with a
     compatible set of libraries.

'-mbig-endian'
     Generate big-endian code.  This is the default when GCC is
     configured for an 'aarch64_be--' target.

'-mgeneral-regs-only'
     Generate code which uses only the general-purpose registers.  This
     will prevent the compiler from using floating-point and Advanced
     SIMD registers but will not impose any restrictions on the
     assembler.

'-mlittle-endian'
     Generate little-endian code.  This is the default when GCC is
     configured for an 'aarch64--' but not an 'aarch64_be-*-*' target.

'-mcmodel=tiny'
     Generate code for the tiny code model.  The program and its
     statically defined symbols must be within 1MB of each other.
     Programs can be statically or dynamically linked.

'-mcmodel=small'
     Generate code for the small code model.  The program and its
     statically defined symbols must be within 4GB of each other.
     Programs can be statically or dynamically linked.  This is the
     default code model.

'-mcmodel=large'
     Generate code for the large code model.  This makes no assumptions
     about addresses and sizes of sections.  Programs can be statically
     linked only.

'-mstrict-align'
'-mno-strict-align'
     Avoid or allow generating memory accesses that may not be aligned
     on a natural object boundary as described in the architecture
     specification.

'-momit-leaf-frame-pointer'
'-mno-omit-leaf-frame-pointer'
     Omit or keep the frame pointer in leaf functions.  The former
     behavior is the default.

'-mstack-protector-guard=GUARD'
'-mstack-protector-guard-reg=REG'
'-mstack-protector-guard-offset=OFFSET'
     Generate stack protection code using canary at GUARD.  Supported
     locations are 'global' for a global canary or 'sysreg' for a canary
     in an appropriate system register.

     With the latter choice the options
     '-mstack-protector-guard-reg=REG' and
     '-mstack-protector-guard-offset=OFFSET' furthermore specify which
     system register to use as base register for reading the canary, and
     from what offset from that base register.  There is no default
     register or offset as this is entirely for use within the Linux
     kernel.

'-mstack-protector-guard=GUARD'
'-mstack-protector-guard-reg=REG'
'-mstack-protector-guard-offset=OFFSET'
     Generate stack protection code using canary at GUARD.  Supported
     locations are 'global' for a global canary or 'sysreg' for a canary
     in an appropriate system register.

     With the latter choice the options
     '-mstack-protector-guard-reg=REG' and
     '-mstack-protector-guard-offset=OFFSET' furthermore specify which
     system register to use as base register for reading the canary, and
     from what offset from that base register.  There is no default
     register or offset as this is entirely for use within the Linux
     kernel.

'-mtls-dialect=desc'
     Use TLS descriptors as the thread-local storage mechanism for
     dynamic accesses of TLS variables.  This is the default.

'-mtls-dialect=traditional'
     Use traditional TLS as the thread-local storage mechanism for
     dynamic accesses of TLS variables.

'-mtls-size=SIZE'
     Specify bit size of immediate TLS offsets.  Valid values are 12,
     24, 32, 48.  This option requires binutils 2.26 or newer.

'-mfix-cortex-a53-835769'
'-mno-fix-cortex-a53-835769'
     Enable or disable the workaround for the ARM Cortex-A53 erratum
     number 835769.  This involves inserting a NOP instruction between
     memory instructions and 64-bit integer multiply-accumulate
     instructions.

'-mfix-cortex-a53-843419'
'-mno-fix-cortex-a53-843419'
     Enable or disable the workaround for the ARM Cortex-A53 erratum
     number 843419.  This erratum workaround is made at link time and
     this will only pass the corresponding flag to the linker.

'-mlow-precision-recip-sqrt'
'-mno-low-precision-recip-sqrt'
     Enable or disable the reciprocal square root approximation.  This
     option only has an effect if '-ffast-math' or
     '-funsafe-math-optimizations' is used as well.  Enabling this
     reduces precision of reciprocal square root results to about 16
     bits for single precision and to 32 bits for double precision.

'-mlow-precision-sqrt'
'-mno-low-precision-sqrt'
     Enable or disable the square root approximation.  This option only
     has an effect if '-ffast-math' or '-funsafe-math-optimizations' is
     used as well.  Enabling this reduces precision of square root
     results to about 16 bits for single precision and to 32 bits for
     double precision.  If enabled, it implies
     '-mlow-precision-recip-sqrt'.

'-mlow-precision-div'
'-mno-low-precision-div'
     Enable or disable the division approximation.  This option only has
     an effect if '-ffast-math' or '-funsafe-math-optimizations' is used
     as well.  Enabling this reduces precision of division results to
     about 16 bits for single precision and to 32 bits for double
     precision.

'-mtrack-speculation'
'-mno-track-speculation'
     Enable or disable generation of additional code to track
     speculative execution through conditional branches.  The tracking
     state can then be used by the compiler when expanding calls to
     '__builtin_speculation_safe_copy' to permit a more efficient code
     sequence to be generated.

'-march=NAME'
     Specify the name of the target architecture and, optionally, one or
     more feature modifiers.  This option has the form
     '-march=ARCH{+[no]FEATURE}*'.

     The permissible values for ARCH are 'armv8-a', 'armv8.1-a',
     'armv8.2-a', 'armv8.3-a', 'armv8.4-a', 'armv8.5-a' or NATIVE.

     The value 'armv8.5-a' implies 'armv8.4-a' and enables compiler
     support for the ARMv8.5-A architecture extensions.

     The value 'armv8.4-a' implies 'armv8.3-a' and enables compiler
     support for the ARMv8.4-A architecture extensions.

     The value 'armv8.3-a' implies 'armv8.2-a' and enables compiler
     support for the ARMv8.3-A architecture extensions.

     The value 'armv8.2-a' implies 'armv8.1-a' and enables compiler
     support for the ARMv8.2-A architecture extensions.

     The value 'armv8.1-a' implies 'armv8-a' and enables compiler
     support for the ARMv8.1-A architecture extension.  In particular,
     it enables the '+crc', '+lse', and '+rdma' features.

     The value 'native' is available on native AArch64 GNU/Linux and
     causes the compiler to pick the architecture of the host system.
     This option has no effect if the compiler is unable to recognize
     the architecture of the host system,

     The permissible values for FEATURE are listed in the sub-section on
     *note '-march' and '-mcpu' Feature Modifiers:
     aarch64-feature-modifiers.  Where conflicting feature modifiers are
     specified, the right-most feature is used.

     GCC uses NAME to determine what kind of instructions it can emit
     when generating assembly code.  If '-march' is specified without
     either of '-mtune' or '-mcpu' also being specified, the code is
     tuned to perform well across a range of target processors
     implementing the target architecture.

'-mtune=NAME'
     Specify the name of the target processor for which GCC should tune
     the performance of the code.  Permissible values for this option
     are: 'generic', 'cortex-a35', 'cortex-a53', 'cortex-a55',
     'cortex-a57', 'cortex-a72', 'cortex-a73', 'cortex-a75',
     'cortex-a76', 'ares', 'exynos-m1', 'emag', 'falkor',
     'neoverse-e1','neoverse-n1','qdf24xx', 'saphira', 'phecda',
     'xgene1', 'vulcan', 'octeontx', 'octeontx81', 'octeontx83',
     'thunderx', 'thunderxt88', 'thunderxt88p1', 'thunderxt81',
     'tsv110', 'thunderxt83', 'thunderx2t99', 'cortex-a57.cortex-a53',
     'cortex-a72.cortex-a53', 'cortex-a73.cortex-a35',
     'cortex-a73.cortex-a53', 'cortex-a75.cortex-a55',
     'cortex-a76.cortex-a55' 'native'.

     The values 'cortex-a57.cortex-a53', 'cortex-a72.cortex-a53',
     'cortex-a73.cortex-a35', 'cortex-a73.cortex-a53',
     'cortex-a75.cortex-a55', 'cortex-a76.cortex-a55' specify that GCC
     should tune for a big.LITTLE system.

     Additionally on native AArch64 GNU/Linux systems the value 'native'
     tunes performance to the host system.  This option has no effect if
     the compiler is unable to recognize the processor of the host
     system.

     Where none of '-mtune=', '-mcpu=' or '-march=' are specified, the
     code is tuned to perform well across a range of target processors.

     This option cannot be suffixed by feature modifiers.

'-mcpu=NAME'
     Specify the name of the target processor, optionally suffixed by
     one or more feature modifiers.  This option has the form
     '-mcpu=CPU{+[no]FEATURE}*', where the permissible values for CPU
     are the same as those available for '-mtune'.  The permissible
     values for FEATURE are documented in the sub-section on *note
     '-march' and '-mcpu' Feature Modifiers: aarch64-feature-modifiers.
     Where conflicting feature modifiers are specified, the right-most
     feature is used.

     GCC uses NAME to determine what kind of instructions it can emit
     when generating assembly code (as if by '-march') and to determine
     the target processor for which to tune for performance (as if by
     '-mtune').  Where this option is used in conjunction with '-march'
     or '-mtune', those options take precedence over the appropriate
     part of this option.

'-moverride=STRING'
     Override tuning decisions made by the back-end in response to a
     '-mtune=' switch.  The syntax, semantics, and accepted values for
     STRING in this option are not guaranteed to be consistent across
     releases.

     This option is only intended to be useful when developing GCC.

'-mverbose-cost-dump'
     Enable verbose cost model dumping in the debug dump files.  This
     option is provided for use in debugging the compiler.

'-mpc-relative-literal-loads'
'-mno-pc-relative-literal-loads'
     Enable or disable PC-relative literal loads.  With this option
     literal pools are accessed using a single instruction and emitted
     after each function.  This limits the maximum size of functions to
     1MB. This is enabled by default for '-mcmodel=tiny'.

'-msign-return-address=SCOPE'
     Select the function scope on which return address signing will be
     applied.  Permissible values are 'none', which disables return
     address signing, 'non-leaf', which enables pointer signing for
     vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
