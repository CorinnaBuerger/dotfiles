standard:

 The identifier '__func__' is implicitly declared by the translator as
if, immediately following the opening brace of each function definition,
the declaration

     static const char __func__[] = "function-name";

appeared, where function-name is the name of the lexically-enclosing
function.  This name is the unadorned name of the function.  As an
extension, at file (or, in C++, namespace scope), '__func__' evaluates
to the empty string.

 '__FUNCTION__' is another name for '__func__', provided for backward
compatibility with old versions of GCC.

 In C, '__PRETTY_FUNCTION__' is yet another name for '__func__', except
that at file (or, in C++, namespace scope), it evaluates to the string
'"top level"'.  In addition, in C++, '__PRETTY_FUNCTION__' contains the
signature of the function as well as its bare name.  For example, this
program:

     extern "C" int printf (const char *, ...);

     class a {
      public:
       void sub (int i)
         {
           printf ("__FUNCTION__ = %s\n", __FUNCTION__);
           printf ("__PRETTY_FUNCTION__ = %s\n", __PRETTY_FUNCTION__);
         }
     };

     int
     main (void)
     {
       a ax;
       ax.sub (0);
       return 0;
     }

gives this output:

     __FUNCTION__ = sub
     __PRETTY_FUNCTION__ = void a::sub(int)

 These identifiers are variables, not preprocessor macros, and may not
be used to initialize 'char' arrays or be concatenated with string
literals.

==============================================================================
File: gcc.info,  Node: |Return_Address|,  Next: |Vector_Extensions|,  Prev: |Function_Names|,  Up: |C_Extensions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Return_Address*

6.51 Getting the Return or Frame Address of a Function
------------------------------------------------------

These functions may be used to get information about the callers of a
function.

 -- Built-in Function: void * __builtin_return_address (unsigned int
          LEVEL)
     This function returns the return address of the current function,
     or of one of its callers.  The LEVEL argument is number of frames
     to scan up the call stack.  A value of '0' yields the return
     address of the current function, a value of '1' yields the return
     address of the caller of the current function, and so forth.  When
     inlining the expected behavior is that the function returns the
     address of the function that is returned to.  To work around this
     behavior use the 'noinline' function attribute.

     The LEVEL argument must be a constant integer.

     On some machines it may be impossible to determine the return
     address of any function other than the current one; in such cases,
     or when the top of the stack has been reached, this function
     returns '0' or a random value.  In addition,
     '__builtin_frame_address' may be used to determine if the top of
     the stack has been reached.

     Additional post-processing of the returned value may be needed, see
     '__builtin_extract_return_addr'.

     Calling this function with a nonzero argument can have
     unpredictable effects, including crashing the calling program.  As
     a result, calls that are considered unsafe are diagnosed when the
     '-Wframe-address' option is in effect.  Such calls should only be
     made in debugging situations.

 -- Built-in Function: void * __builtin_extract_return_addr (void *ADDR)
     The address as returned by '__builtin_return_address' may have to
     be fed through this function to get the actual encoded address.
     For example, on the 31-bit S/390 platform the highest bit has to be
     masked out, or on SPARC platforms an offset has to be added for the
     true next instruction to be executed.

     If no fixup is needed, this function simply passes through ADDR.

 -- Built-in Function: void * __builtin_frob_return_address (void *ADDR)
     This function does the reverse of '__builtin_extract_return_addr'.

 -- Built-in Function: void * __builtin_frame_address (unsigned int
          LEVEL)
     This function is similar to '__builtin_return_address', but it
     returns the address of the function frame rather than the return
     address of the function.  Calling '__builtin_frame_address' with a
     value of '0' yields the frame address of the current function, a
     value of '1' yields the frame address of the caller of the current
     function, and so forth.

     The frame is the area on the stack that holds local variables and
     saved registers.  The frame address is normally the address of the
     first word pushed on to the stack by the function.  However, the
     exact definition depends upon the processor and the calling
     convention.  If the processor has a dedicated frame pointer
     register, and the function has a frame, then
     '__builtin_frame_address' returns the value of the frame pointer
     register.

     On some machines it may be impossible to determine the frame
     address of any function other than the current one; in such cases,
     or when the top of the stack has been reached, this function
     returns '0' if the first frame pointer is properly initialized by
     the startup code.

     Calling this function with a nonzero argument can have
     unpredictable effects, including crashing the calling program.  As
     a result, calls that are considered unsafe are diagnosed when the
     '-Wframe-address' option is in effect.  Such calls should only be
     made in debugging situations.

==============================================================================
File: gcc.info,  Node: |Vector_Extensions|,  Next: |Offsetof|,  Prev: |Return_Address|,  Up: |C_Extensions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Vector_Extensions*

6.52 Using Vector Instructions through Built-in Functions
---------------------------------------------------------

On some targets, the instruction set contains SIMD vector instructions
which operate on multiple values contained in one large register at the
same time.  For example, on the x86 the MMX, 3DNow! and SSE extensions
can be used this way.

 The first step in using these extensions is to provide the necessary
data types.  This should be done using an appropriate 'typedef':

     typedef int v4si __attribute__ ((vector_size (16)));

The 'int' type specifies the "base type", while the attribute specifies
the vector size for the variable, measured in bytes.  For example, the
declaration above causes the compiler to set the mode for the 'v4si'
type to be 16 bytes wide and divided into 'int' sized units.  For a
32-bit 'int' this means a vector of 4 units of 4 bytes, and the
corresponding mode of 'foo' is V4SI.

 The 'vector_size' attribute is only applicable to integral and floating
scalars, although arrays, pointers, and function return values are
allowed in conjunction with this construct.  Only sizes that are
positive power-of-two multiples of the base type size are currently
allowed.

 All the basic integer types can be used as base types, both as signed
and as unsigned: 'char', 'short', 'int', 'long', 'long long'.  In
addition, 'float' and 'double' can be used to build floating-point
vector types.

 Specifying a combination that is not valid for the current architecture
causes GCC to synthesize the instructions using a narrower mode.  For
example, if you specify a variable of type 'V4SI' and your architecture
does not allow for this specific SIMD type, GCC produces code that uses
4 'SIs'.

 The types defined in this manner can be used with a subset of normal C
operations.  Currently, GCC allows using the following operators on
these types: '+, -, *, /, unary minus, ^, |, &, ~, %'.

 The operations behave like C++ 'valarrays'.  Addition is defined as the
addition of the corresponding elements of the operands.  For example, in
the code below, each of the 4 elements in A is added to the
corresponding 4 elements in B and the resulting vector is stored in C.

     typedef int v4si __attribute__ ((vector_size (16)));

     v4si a, b, c;

     c = a + b;

 Subtraction, multiplication, division, and the logical operations
operate in a similar manner.  Likewise, the result of using the unary
minus or complement operators on a vector type is a vector whose
elements are the negative or complemented values of the corresponding
elements in the operand.

 It is possible to use shifting operators '<<', '>>' on integer-type
vectors.  The operation is defined as following: '{a0, a1, ..., an} >>
{b0, b1, ..., bn} == {a0 >> b0, a1 >> b1, ..., an >> bn}'.  Vector
operands must have the same number of elements.

 For convenience, it is allowed to use a binary vector operation where
one operand is a scalar.  In that case the compiler transforms the
scalar operand into a vector where each element is the scalar from the
operation.  The transformation happens only if the scalar could be
safely converted to the vector-element type.  Consider the following
code.

     typedef int v4si __attribute__ ((vector_size (16)));

     v4si a, b, c;
     long l;

     a = b + 1;    /* a = b + {1,1,1,1}; */
     a = 2 * b;    /* a = {2,2,2,2} * b; */

     a = l + a;    /* Error, cannot convert long to int. */

 Vectors can be subscripted as if the vector were an array with the same
number of elements and base type.  Out of bound accesses invoke
undefined behavior at run time.  Warnings for out of bound accesses for
vector subscription can be enabled with '-Warray-bounds'.

 Vector comparison is supported with standard comparison operators: '==,
!=, <, <=, >, >='.  Comparison operands can be vector expressions of
integer-type or real-type.  Comparison between integer-type vectors and
real-type vectors are not supported.  The result of the comparison is a
vector of the same width and number of elements as the comparison
operands with a signed integral element type.

 Vectors are compared element-wise producing 0 when comparison is false
and -1 (constant of the appropriate type where all bits are set)
otherwise.  Consider the following example.

     typedef int v4si __attribute__ ((vector_size (16)));

     v4si a = {1,2,3,4};
     v4si b = {3,2,1,4};
     v4si c;

     c = a >  b;     /* The result would be {0, 0,-1, 0}  */
     c = a == b;     /* The result would be {0,-1, 0,-1}  */

 In C++, the ternary operator '?:' is available.  'a?b:c', where 'b' and
'c' are vectors of the same type and 'a' is an integer vector with the
same number of elements of the same size as 'b' and 'c', computes all
three arguments and creates a vector '{a[0]?b[0]:c[0], a[1]?b[1]:c[1],
...}'.  Note that unlike in OpenCL, 'a' is thus interpreted as 'a != 0'
and not 'a < 0'.  As in the case of binary operations, this syntax is
also accepted when one of 'b' or 'c' is a scalar that is then
transformed into a vector.  If both 'b' and 'c' are scalars and the type
of 'true?b:c' has the same size as the element type of 'a', then 'b' and
'c' are converted to a vector type whose elements have this type and
with the same number of elements as 'a'.

 In C++, the logic operators '!, &&, ||' are available for vectors.
'!v' is equivalent to 'v == 0', 'a && b' is equivalent to 'a!=0 & b!=0'
and 'a || b' is equivalent to 'a!=0 | b!=0'.  For mixed operations
between a scalar 's' and a vector 'v', 's && v' is equivalent to
's?v!=0:0' (the evaluation is short-circuit) and 'v && s' is equivalent
to 'v!=0 & (s?-1:0)'.

 Vector shuffling is available using functions '__builtin_shuffle (vec,
mask)' and '__builtin_shuffle (vec0, vec1, mask)'.  Both functions
construct a permutation of elements from one or two vectors and return a
vector of the same type as the input vector(s).  The MASK is an integral
vector with the same width (W) and element count (N) as the output
vector.

 The elements of the input vectors are numbered in memory ordering of
VEC0 beginning at 0 and VEC1 beginning at N.  The elements of MASK are
considered modulo N in the single-operand case and modulo 2*N in the
two-operand case.

 Consider the following example,

     typedef int v4si __attribute__ ((vector_size (16)));

     v4si a = {1,2,3,4};
     v4si b = {5,6,7,8};
     v4si mask1 = {0,1,1,3};
     v4si mask2 = {0,4,2,5};
     v4si res;

     res = __builtin_shuffle (a, mask1);       /* res is {1,2,2,4}  */
     res = __builtin_shuffle (a, b, mask2);    /* res is {1,5,3,6}  */

 Note that '__builtin_shuffle' is intentionally semantically compatible
with the OpenCL 'shuffle' and 'shuffle2' functions.

 You can declare variables and use them in function calls and returns,
as well as in assignments and some casts.  You can specify a vector type
as a return type for a function.  Vector types can also be used as
function arguments.  It is possible to cast from one vector type to
another, provided they are of the same size (in fact, you can also cast
vectors to and from other datatypes of the same size).

 You cannot operate between vectors of different lengths or different
signedness without a cast.

 Vector conversion is available using the '__builtin_convertvector (vec,
vectype)' function.  VEC must be an expression with integral or floating
vector type and VECTYPE an integral or floating vector type with the
same number of elements.  The result has VECTYPE type and value of a C
cast of every element of VEC to the element type of VECTYPE.

 Consider the following example,
     typedef int v4si __attribute__ ((vector_size (16)));
     typedef float v4sf __attribute__ ((vector_size (16)));
     typedef double v4df __attribute__ ((vector_size (32)));
     typedef unsigned long long v4di __attribute__ ((vector_size (32)));

     v4si a = {1,-2,3,-4};
     v4sf b = {1.5f,-2.5f,3.f,7.f};
     v4di c = {1ULL,5ULL,0ULL,10ULL};
     v4sf d = __builtin_convertvector (a, v4sf); /* d is {1.f,-2.f,3.f,-4.f} */
     /* Equivalent of:
        v4sf d = { (float)a[0], (float)a[1], (float)a[2], (float)a[3] }; */
     v4df e = __builtin_convertvector (a, v4df); /* e is {1.,-2.,3.,-4.} */
     v4df f = __builtin_convertvector (b, v4df); /* f is {1.5,-2.5,3.,7.} */
     v4si g = __builtin_convertvector (f, v4si); /* g is {1,-2,3,7} */
     v4si h = __builtin_convertvector (c, v4si); /* h is {1,5,0,10} */

 Sometimes it is desirable to write code using a mix of generic vector
operations (for clarity) and machine-specific vector intrinsics (to
access vector instructions that are not exposed via generic built-ins).
On x86, intrinsic functions for integer vectors typically use the same
vector type '__m128i' irrespective of how they interpret the vector,
making it necessary to cast their arguments and return values from/to
other vector types.  In C, you can make use of a 'union' type:
     #include <immintrin.h>

     typedef unsigned char u8x16 __attribute__ ((vector_size (16)));
     typedef unsigned int  u32x4 __attribute__ ((vector_size (16)));

     typedef union {
             __m128i mm;
             u8x16   u8;
             u32x4   u32;
     } v128;

for variables that can be used with both built-in operators and x86
intrinsics:

     v128 x, y = { 0 };
     memcpy (&x, ptr, sizeof x);
     y.u8  += 0x80;
     x.mm  = _mm_adds_epu8 (x.mm, y.mm);
     x.u32 &= 0xffffff;

     /* Instead of a variable, a compound literal may be used to pass the
        return value of an intrinsic call to a function expecting the union: */
     v128 foo (v128);
     x = foo ((v128) {_mm_adds_epu8 (x.mm, y.mm)});

==============================================================================
File: gcc.info,  Node: |Offsetof|,  Next: |__sync_Builtins|,  Prev: |Vector_Extensions|,  Up: |C_Extensions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *Offsetof*

6.53 Support for 'offsetof'
---------------------------

GCC implements for both C and C++ a syntactic extension to implement the
'offsetof' macro.

     primary:
             "__builtin_offsetof" "(" typename "," offsetof_member_designator ")"

     offsetof_member_designator:
               identifier
             | offsetof_member_designator "." identifier
             | offsetof_member_designator "[" expr "]"

 This extension is sufficient such that

     #define offsetof(TYPE, MEMBER)  __builtin_offsetof (TYPE, MEMBER)

is a suitable definition of the 'offsetof' macro.  In C++, TYPE may be
dependent.  In either case, MEMBER may consist of a single identifier,
or a sequence of member accesses and array references.

==============================================================================
File: gcc.info,  Node: |__sync_Builtins|,  Next: |__atomic_Builtins|,  Prev: |Offsetof|,  Up: |C_Extensions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *__sync_Builtins*

6.54 Legacy '__sync' Built-in Functions for Atomic Memory Access
----------------------------------------------------------------

The following built-in functions are intended to be compatible with
those described in the 'Intel Itanium Processor-specific Application
Binary Interface', section 7.4.  As such, they depart from normal GCC
practice by not using the '__builtin_' prefix and also by being
overloaded so that they work on multiple types.

 The definition given in the Intel documentation allows only for the use
of the types 'int', 'long', 'long long' or their unsigned counterparts.
GCC allows any scalar type that is 1, 2, 4 or 8 bytes in size other than
the C type '_Bool' or the C++ type 'bool'.  Operations on pointer
arguments are performed as if the operands were of the 'uintptr_t' type.
That is, they are not scaled by the size of the type to which the
pointer points.

 These functions are implemented in terms of the '__atomic' builtins
(*note __atomic Builtins::).  They should not be used for new code which
should use the '__atomic' builtins instead.

 Not all operations are supported by all target processors.  If a
particular operation cannot be implemented on the target processor, a
warning is generated and a call to an external function is generated.
The external function carries the same name as the built-in version,
with an additional suffix '_N' where N is the size of the data type.

 In most cases, these built-in functions are considered a "full
barrier".  That is, no memory operand is moved across the operation,
either forward or backward.  Further, instructions are issued as
necessary to prevent the processor from speculating loads across the
operation and from queuing stores after the operation.

 All of the routines are described in the Intel documentation to take
"an optional list of variables protected by the memory barrier".  It's
not clear what is meant by that; it could mean that _only_ the listed
variables are protected, or it could mean a list of additional variables
to be protected.  The list is ignored by GCC which treats it as empty.
GCC interprets an empty list as meaning that all globally accessible
variables should be protected.

'TYPE __sync_fetch_and_add (TYPE *ptr, TYPE value, ...)'
'TYPE __sync_fetch_and_sub (TYPE *ptr, TYPE value, ...)'
'TYPE __sync_fetch_and_or (TYPE *ptr, TYPE value, ...)'
'TYPE __sync_fetch_and_and (TYPE *ptr, TYPE value, ...)'
'TYPE __sync_fetch_and_xor (TYPE *ptr, TYPE value, ...)'
'TYPE __sync_fetch_and_nand (TYPE *ptr, TYPE value, ...)'
     These built-in functions perform the operation suggested by the
     name, and returns the value that had previously been in memory.
     That is, operations on integer operands have the following
     semantics.  Operations on pointer arguments are performed as if the
     operands were of the 'uintptr_t' type.  That is, they are not
     scaled by the size of the type to which the pointer points.

          { tmp = *ptr; *ptr OP= value; return tmp; }
          { tmp = *ptr; *ptr = ~(tmp & value); return tmp; }   // nand

     The object pointed to by the first argument must be of integer or
     pointer type.  It must not be a boolean type.

     _Note:_ GCC 4.4 and later implement '__sync_fetch_and_nand' as
     '*ptr = ~(tmp & value)' instead of '*ptr = ~tmp & value'.

'TYPE __sync_add_and_fetch (TYPE *ptr, TYPE value, ...)'
'TYPE __sync_sub_and_fetch (TYPE *ptr, TYPE value, ...)'
'TYPE __sync_or_and_fetch (TYPE *ptr, TYPE value, ...)'
'TYPE __sync_and_and_fetch (TYPE *ptr, TYPE value, ...)'
'TYPE __sync_xor_and_fetch (TYPE *ptr, TYPE value, ...)'
'TYPE __sync_nand_and_fetch (TYPE *ptr, TYPE value, ...)'
     These built-in functions perform the operation suggested by the
     name, and return the new value.  That is, operations on integer
     operands have the following semantics.  Operations on pointer
     operands are performed as if the operand's type were 'uintptr_t'.

          { *ptr OP= value; return *ptr; }
          { *ptr = ~(*ptr & value); return *ptr; }   // nand

     The same constraints on arguments apply as for the corresponding
     '__sync_op_and_fetch' built-in functions.

     _Note:_ GCC 4.4 and later implement '__sync_nand_and_fetch' as
     '*ptr = ~(*ptr & value)' instead of '*ptr = ~*ptr & value'.

'bool __sync_bool_compare_and_swap (TYPE *ptr, TYPE oldval, TYPE newval, ...)'
'TYPE __sync_val_compare_and_swap (TYPE *ptr, TYPE oldval, TYPE newval, ...)'
     These built-in functions perform an atomic compare and swap.  That
     is, if the current value of '*PTR' is OLDVAL, then write NEWVAL
     into '*PTR'.

     The "bool" version returns 'true' if the comparison is successful
     and NEWVAL is written.  The "val" version returns the contents of
     '*PTR' before the operation.

'__sync_synchronize (...)'
     This built-in function issues a full memory barrier.

'TYPE __sync_lock_test_and_set (TYPE *ptr, TYPE value, ...)'
     This built-in function, as described by Intel, is not a traditional
     test-and-set operation, but rather an atomic exchange operation.
     It writes VALUE into '*PTR', and returns the previous contents of
     '*PTR'.

     Many targets have only minimal support for such locks, and do not
     support a full exchange operation.  In this case, a target may
     support reduced functionality here by which the _only_ valid value
     to store is the immediate constant 1.  The exact value actually
     stored in '*PTR' is implementation defined.

     This built-in function is not a full barrier, but rather an
     "acquire barrier".  This means that references after the operation
     cannot move to (or be speculated to) before the operation, but
     previous memory stores may not be globally visible yet, and
     previous memory loads may not yet be satisfied.

'void __sync_lock_release (TYPE *ptr, ...)'
     This built-in function releases the lock acquired by
     '__sync_lock_test_and_set'.  Normally this means writing the
     constant 0 to '*PTR'.

     This built-in function is not a full barrier, but rather a "release
     barrier".  This means that all previous memory stores are globally
     visible, and all previous memory loads have been satisfied, but
     following memory reads are not prevented from being speculated to
     before the barrier.

==============================================================================
File: gcc.info,  Node: |__atomic_Builtins|,  Next: |Integer_Overflow_Builtins|,  Prev: |__sync_Builtins|,  Up: |C_Extensions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *__atomic_Builtins*

6.55 Built-in Functions for Memory Model Aware Atomic Operations
----------------------------------------------------------------

The following built-in functions approximately match the requirements
for the C++11 memory model.  They are all identified by being prefixed
with '__atomic' and most are overloaded so that they work with multiple
types.

 These functions are intended to replace the legacy '__sync' builtins.
The main difference is that the memory order that is requested is a
parameter to the functions.  New code should always use the '__atomic'
builtins rather than the '__sync' builtins.

 Note that the '__atomic' builtins assume that programs will conform to
the C++11 memory model.  In particular, they assume that programs are
free of data races.  See the C++11 standard for detailed requirements.

 The '__atomic' builtins can be used with any integral scalar or pointer
type that is 1, 2, 4, or 8 bytes in length.  16-byte integral types are
also allowed if '__int128' (*note __int128::) is supported by the
architecture.

 The four non-arithmetic functions (load, store, exchange, and
compare_exchange) all have a generic version as well.  This generic
version works on any data type.  It uses the lock-free built-in function
if the specific data type size makes that possible; otherwise, an
external call is left to be resolved at run time.  This external call is
the same format with the addition of a 'size_t' parameter inserted as
the first parameter indicating the size of the object being pointed to.
All objects must be the same size.

 There are 6 different memory orders that can be specified.  These map
to the C++11 memory orders with the same names, see the C++11 standard
or the GCC wiki on atomic synchronization
(http://gcc.gnu.org/wiki/Atomic/GCCMM/AtomicSync) for detailed
definitions.  Individual targets may also support additional memory
orders for use on specific architectures.  Refer to the target
documentation for details of these.

 An atomic operation can both constrain code motion and be mapped to
hardware instructions for synchronization between threads (e.g., a
fence).  To which extent this happens is controlled by the memory
orders, which are listed here in approximately ascending order of
strength.  The description of each memory order is only meant to roughly
illustrate the effects and is not a specification; see the C++11 memory
model for precise semantics.

'__ATOMIC_RELAXED'
     Implies no inter-thread ordering constraints.
'__ATOMIC_CONSUME'
     This is currently implemented using the stronger '__ATOMIC_ACQUIRE'
     memory order because of a deficiency in C++11's semantics for
     'memory_order_consume'.
'__ATOMIC_ACQUIRE'
     Creates an inter-thread happens-before constraint from the release
     (or stronger) semantic store to this acquire load.  Can prevent
     hoisting of code to before the operation.
'__ATOMIC_RELEASE'
     Creates an inter-thread happens-before constraint to acquire (or
     stronger) semantic loads that read from this release store.  Can
     prevent sinking of code to after the operation.
'__ATOMIC_ACQ_REL'
     Combines the effects of both '__ATOMIC_ACQUIRE' and
     '__ATOMIC_RELEASE'.
'__ATOMIC_SEQ_CST'
     Enforces total ordering with all other '__ATOMIC_SEQ_CST'
     operations.

 Note that in the C++11 memory model, _fences_ (e.g.,
'__atomic_thread_fence') take effect in combination with other atomic
operations on specific memory locations (e.g., atomic loads); operations
on specific memory locations do not necessarily affect other operations
in the same way.

 Target architectures are encouraged to provide their own patterns for
each of the atomic built-in functions.  If no target is provided, the
original non-memory model set of '__sync' atomic built-in functions are
used, along with any required synchronization fences surrounding it in
order to achieve the proper behavior.  Execution in this case is subject
to the same restrictions as those built-in functions.

 If there is no pattern or mechanism to provide a lock-free instruction
sequence, a call is made to an external routine with the same parameters
to be resolved at run time.

 When implementing patterns for these built-in functions, the memory
order parameter can be ignored as long as the pattern implements the
most restrictive '__ATOMIC_SEQ_CST' memory order.  Any of the other
memory orders execute correctly with this memory order but they may not
execute as efficiently as they could with a more appropriate
implementation of the relaxed requirements.

 Note that the C++11 standard allows for the memory order parameter to
be determined at run time rather than at compile time.  These built-in
functions map any run-time value to '__ATOMIC_SEQ_CST' rather than
invoke a runtime library call or inline a switch statement.  This is
standard compliant, safe, and the simplest approach for now.

 The memory order parameter is a signed int, but only the lower 16 bits
are reserved for the memory order.  The remainder of the signed int is
reserved for target use and should be 0.  Use of the predefined atomic
values ensures proper usage.

 -- Built-in Function: TYPE __atomic_load_n (TYPE *ptr, int memorder)
     This built-in function implements an atomic load operation.  It
     returns the contents of '*PTR'.

     The valid memory order variants are '__ATOMIC_RELAXED',
     '__ATOMIC_SEQ_CST', '__ATOMIC_ACQUIRE', and '__ATOMIC_CONSUME'.

 -- Built-in Function: void __atomic_load (TYPE *ptr, TYPE *ret, int
          memorder)
     This is the generic version of an atomic load.  It returns the
     contents of '*PTR' in '*RET'.

 -- Built-in Function: void __atomic_store_n (TYPE *ptr, TYPE val, int
          memorder)
     This built-in function implements an atomic store operation.  It
     writes 'VAL' into '*PTR'.

     The valid memory order variants are '__ATOMIC_RELAXED',
     '__ATOMIC_SEQ_CST', and '__ATOMIC_RELEASE'.

 -- Built-in Function: void __atomic_store (TYPE *ptr, TYPE *val, int
          memorder)
     This is the generic version of an atomic store.  It stores the
     value of '*VAL' into '*PTR'.

 -- Built-in Function: TYPE __atomic_exchange_n (TYPE *ptr, TYPE val,
          int memorder)
     This built-in function implements an atomic exchange operation.  It
     writes VAL into '*PTR', and returns the previous contents of
     '*PTR'.

     The valid memory order variants are '__ATOMIC_RELAXED',
     '__ATOMIC_SEQ_CST', '__ATOMIC_ACQUIRE', '__ATOMIC_RELEASE', and
     '__ATOMIC_ACQ_REL'.

 -- Built-in Function: void __atomic_exchange (TYPE *ptr, TYPE *val,
          TYPE *ret, int memorder)
     This is the generic version of an atomic exchange.  It stores the
     contents of '*VAL' into '*PTR'.  The original value of '*PTR' is
     copied into '*RET'.

 -- Built-in Function: bool __atomic_compare_exchange_n (TYPE *ptr, TYPE
          *expected, TYPE desired, bool weak, int success_memorder, int
          failure_memorder)
     This built-in function implements an atomic compare and exchange
     operation.  This compares the contents of '*PTR' with the contents
     of '*EXPECTED'.  If equal, the operation is a _read-modify-write_
     operation that writes DESIRED into '*PTR'.  If they are not equal,
     the operation is a _read_ and the current contents of '*PTR' are
     written into '*EXPECTED'.  WEAK is 'true' for weak
     compare_exchange, which may fail spuriously, and 'false' for the
     strong variation, which never fails spuriously.  Many targets only
     offer the strong variation and ignore the parameter.  When in
     doubt, use the strong variation.

     If DESIRED is written into '*PTR' then 'true' is returned and
     memory is affected according to the memory order specified by
     SUCCESS_MEMORDER.  There are no restrictions on what memory order
     can be used here.

     Otherwise, 'false' is returned and memory is affected according to
     FAILURE_MEMORDER.  This memory order cannot be '__ATOMIC_RELEASE'
     nor '__ATOMIC_ACQ_REL'.  It also cannot be a stronger order than
     that specified by SUCCESS_MEMORDER.

 -- Built-in Function: bool __atomic_compare_exchange (TYPE *ptr, TYPE
          *expected, TYPE *desired, bool weak, int success_memorder, int
          failure_memorder)
     This built-in function implements the generic version of
     '__atomic_compare_exchange'.  The function is virtually identical
     to '__atomic_compare_exchange_n', except the desired value is also
     a pointer.

 -- Built-in Function: TYPE __atomic_add_fetch (TYPE *ptr, TYPE val, int
          memorder)
 -- Built-in Function: TYPE __atomic_sub_fetch (TYPE *ptr, TYPE val, int
          memorder)
 -- Built-in Function: TYPE __atomic_and_fetch (TYPE *ptr, TYPE val, int
          memorder)
 -- Built-in Function: TYPE __atomic_xor_fetch (TYPE *ptr, TYPE val, int
          memorder)
 -- Built-in Function: TYPE __atomic_or_fetch (TYPE *ptr, TYPE val, int
          memorder)
 -- Built-in Function: TYPE __atomic_nand_fetch (TYPE *ptr, TYPE val,
          int memorder)
     These built-in functions perform the operation suggested by the
     name, and return the result of the operation.  Operations on
     pointer arguments are performed as if the operands were of the
     'uintptr_t' type.  That is, they are not scaled by the size of the
     type to which the pointer points.

          { *ptr OP= val; return *ptr; }
          { *ptr = ~(*ptr & val); return *ptr; } // nand

     The object pointed to by the first argument must be of integer or
     pointer type.  It must not be a boolean type.  All memory orders
     are valid.

 -- Built-in Function: TYPE __atomic_fetch_add (TYPE *ptr, TYPE val, int
          memorder)
 -- Built-in Function: TYPE __atomic_fetch_sub (TYPE *ptr, TYPE val, int
          memorder)
 -- Built-in Function: TYPE __atomic_fetch_and (TYPE *ptr, TYPE val, int
          memorder)
 -- Built-in Function: TYPE __atomic_fetch_xor (TYPE *ptr, TYPE val, int
          memorder)
 -- Built-in Function: TYPE __atomic_fetch_or (TYPE *ptr, TYPE val, int
          memorder)
 -- Built-in Function: TYPE __atomic_fetch_nand (TYPE *ptr, TYPE val,
          int memorder)
     These built-in functions perform the operation suggested by the
     name, and return the value that had previously been in '*PTR'.
     Operations on pointer arguments are performed as if the operands
     were of the 'uintptr_t' type.  That is, they are not scaled by the
     size of the type to which the pointer points.

          { tmp = *ptr; *ptr OP= val; return tmp; }
          { tmp = *ptr; *ptr = ~(*ptr & val); return tmp; } // nand

     The same constraints on arguments apply as for the corresponding
     '__atomic_op_fetch' built-in functions.  All memory orders are
     valid.

 -- Built-in Function: bool __atomic_test_and_set (void *ptr, int
          memorder)

     This built-in function performs an atomic test-and-set operation on
     the byte at '*PTR'.  The byte is set to some implementation defined
     nonzero "set" value and the return value is 'true' if and only if
     the previous contents were "set".  It should be only used for
     operands of type 'bool' or 'char'.  For other types only part of
     the value may be set.

     All memory orders are valid.

 -- Built-in Function: void __atomic_clear (bool *ptr, int memorder)

     This built-in function performs an atomic clear operation on
     '*PTR'.  After the operation, '*PTR' contains 0.  It should be only
     used for operands of type 'bool' or 'char' and in conjunction with
     '__atomic_test_and_set'.  For other types it may only clear
     partially.  If the type is not 'bool' prefer using
     '__atomic_store'.

     The valid memory order variants are '__ATOMIC_RELAXED',
     '__ATOMIC_SEQ_CST', and '__ATOMIC_RELEASE'.

 -- Built-in Function: void __atomic_thread_fence (int memorder)

     This built-in function acts as a synchronization fence between
     threads based on the specified memory order.

     All memory orders are valid.

 -- Built-in Function: void __atomic_signal_fence (int memorder)

     This built-in function acts as a synchronization fence between a
     thread and signal handlers based in the same thread.

     All memory orders are valid.

 -- Built-in Function: bool __atomic_always_lock_free (size_t size, void
          *ptr)

     This built-in function returns 'true' if objects of SIZE bytes
     always generate lock-free atomic instructions for the target
     architecture.  SIZE must resolve to a compile-time constant and the
     result also resolves to a compile-time constant.

     PTR is an optional pointer to the object that may be used to
     determine alignment.  A value of 0 indicates typical alignment
     should be used.  The compiler may also ignore this parameter.

          if (__atomic_always_lock_free (sizeof (long long), 0))

 -- Built-in Function: bool __atomic_is_lock_free (size_t size, void
          *ptr)

     This built-in function returns 'true' if objects of SIZE bytes
     always generate lock-free atomic instructions for the target
     architecture.  If the built-in function is not known to be
     lock-free, a call is made to a runtime routine named
     '__atomic_is_lock_free'.

     PTR is an optional pointer to the object that may be used to
     determine alignment.  A value of 0 indicates typical alignment
     should be used.  The compiler may also ignore this parameter.

==============================================================================
File: gcc.info,  Node: |Integer_Overflow_Builtins|,  Next: |x86_specific_memory_model_extensions_for_transactional_memory|,  Prev: |__atomic_Builtins|,  Up: |C_Extensions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *Integer_Overflow_Builtins*

6.56 Built-in Functions to Perform Arithmetic with Overflow Checking
--------------------------------------------------------------------

The following built-in functions allow performing simple arithmetic
operations together with checking whether the operations overflowed.

 -- Built-in Function: bool __builtin_add_overflow (TYPE1 a, TYPE2 b,
          TYPE3 *res)
 -- Built-in Function: bool __builtin_sadd_overflow (int a, int b, int
          *res)
 -- Built-in Function: bool __builtin_saddl_overflow (long int a, long
          int b, long int *res)
 -- Built-in Function: bool __builtin_saddll_overflow (long long int a,
          long long int b, long long int *res)
 -- Built-in Function: bool __builtin_uadd_overflow (unsigned int a,
          unsigned int b, unsigned int *res)
 -- Built-in Function: bool __builtin_uaddl_overflow (unsigned long int
          a, unsigned long int b, unsigned long int *res)
 -- Built-in Function: bool __builtin_uaddll_overflow (unsigned long
          long int a, unsigned long long int b, unsigned long long int
          *res)

     These built-in functions promote the first two operands into
     infinite precision signed type and perform addition on those
     promoted operands.  The result is then cast to the type the third
     pointer argument points to and stored there.  If the stored result
     is equal to the infinite precision result, the built-in functions
     return 'false', otherwise they return 'true'.  As the addition is
     performed in infinite signed precision, these built-in functions
     have fully defined behavior for all argument values.

     The first built-in function allows arbitrary integral types for
     operands and the result type must be pointer to some integral type
     other than enumerated or boolean type, the rest of the built-in
     functions have explicit integer types.

     The compiler will attempt to use hardware instructions to implement
     these built-in functions where possible, like conditional jump on
     overflow after addition, conditional jump on carry etc.

 -- Built-in Function: bool __builtin_sub_overflow (TYPE1 a, TYPE2 b,
          TYPE3 *res)
 -- Built-in Function: bool __builtin_ssub_overflow (int a, int b, int
          *res)
 -- Built-in Function: bool __builtin_ssubl_overflow (long int a, long
          int b, long int *res)
 -- Built-in Function: bool __builtin_ssubll_overflow (long long int a,
          long long int b, long long int *res)
 -- Built-in Function: bool __builtin_usub_overflow (unsigned int a,
          unsigned int b, unsigned int *res)
 -- Built-in Function: bool __builtin_usubl_overflow (unsigned long int
          a, unsigned long int b, unsigned long int *res)
 -- Built-in Function: bool __builtin_usubll_overflow (unsigned long
          long int a, unsigned long long int b, unsigned long long int
          *res)

     These built-in functions are similar to the add overflow checking
     built-in functions above, except they perform subtraction, subtract
     the second argument from the first one, instead of addition.

 -- Built-in Function: bool __builtin_mul_overflow (TYPE1 a, TYPE2 b,
          TYPE3 *res)
 -- Built-in Function: bool __builtin_smul_overflow (int a, int b, int
          *res)
 -- Built-in Function: bool __builtin_smull_overflow (long int a, long
          int b, long int *res)
 -- Built-in Function: bool __builtin_smulll_overflow (long long int a,
          long long int b, long long int *res)
 -- Built-in Function: bool __builtin_umul_overflow (unsigned int a,
          unsigned int b, unsigned int *res)
 -- Built-in Function: bool __builtin_umull_overflow (unsigned long int
          a, unsigned long int b, unsigned long int *res)
 -- Built-in Function: bool __builtin_umulll_overflow (unsigned long
          long int a, unsigned long long int b, unsigned long long int
          *res)

     These built-in functions are similar to the add overflow checking
     built-in functions above, except they perform multiplication,
     instead of addition.

 The following built-in functions allow checking if simple arithmetic
operation would overflow.

 -- Built-in Function: bool __builtin_add_overflow_p (TYPE1 a, TYPE2 b,
          TYPE3 c)
 -- Built-in Function: bool __builtin_sub_overflow_p (TYPE1 a, TYPE2 b,
          TYPE3 c)
 -- Built-in Function: bool __builtin_mul_overflow_p (TYPE1 a, TYPE2 b,
          TYPE3 c)

     These built-in functions are similar to '__builtin_add_overflow',
     '__builtin_sub_overflow', or '__builtin_mul_overflow', except that
     they don't store the result of the arithmetic operation anywhere
     and the last argument is not a pointer, but some expression with
     integral type other than enumerated or boolean type.

     The built-in functions promote the first two operands into infinite
     precision signed type and perform addition on those promoted
     operands.  The result is then cast to the type of the third
     argument.  If the cast result is equal to the infinite precision
     result, the built-in functions return 'false', otherwise they
     return 'true'.  The value of the third argument is ignored, just
     the side effects in the third argument are evaluated, and no
     integral argument promotions are performed on the last argument.
     If the third argument is a bit-field, the type used for the result
     cast has the precision and signedness of the given bit-field,
     rather than precision and signedness of the underlying type.

     For example, the following macro can be used to portably check, at
     compile-time, whether or not adding two constant integers will
     overflow, and perform the addition only when it is known to be safe
     and not to trigger a '-Woverflow' warning.

          #define INT_ADD_OVERFLOW_P(a, b) \
             __builtin_add_overflow_p (a, b, (__typeof__ ((a) + (b))) 0)

          enum {
              A = INT_MAX, B = 3,
              C = INT_ADD_OVERFLOW_P (A, B) ? 0 : A + B,
              D = __builtin_add_overflow_p (1, SCHAR_MAX, (signed char) 0)
          };

     The compiler will attempt to use hardware instructions to implement
     these built-in functions where possible, like conditional jump on
     overflow after addition, conditional jump on carry etc.

==============================================================================
File: gcc.info,  Node: |x86_specific_memory_model_extensions_for_transactional_memory|,  Next: |Object_Size_Checking|,  Prev: |Integer_Overflow_Builtins|,  Up: |C_Extensions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                     *x86_specific_memory_model_extensions_for_transactional_memory*

6.57 x86-Specific Memory Model Extensions for Transactional Memory
------------------------------------------------------------------

The x86 architecture supports additional memory ordering flags to mark
critical sections for hardware lock elision.  These must be specified in
addition to an existing memory order to atomic intrinsics.

'__ATOMIC_HLE_ACQUIRE'
     Start lock elision on a lock variable.  Memory order must be
     '__ATOMIC_ACQUIRE' or stronger.
'__ATOMIC_HLE_RELEASE'
     End lock elision on a lock variable.  Memory order must be
     '__ATOMIC_RELEASE' or stronger.

 When a lock acquire fails, it is required for good performance to abort
the transaction quickly.  This can be done with a '_mm_pause'.

     #include <immintrin.h> // For _mm_pause

     int lockvar;

     /* Acquire lock with lock elision */
     while (__atomic_exchange_n(&lockvar, 1, __ATOMIC_ACQUIRE|__ATOMIC_HLE_ACQUIRE))
         _mm_pause(); /* Abort failed transaction */
     ...
     /* Free lock with lock elision */
     __atomic_store_n(&lockvar, 0, __ATOMIC_RELEASE|__ATOMIC_HLE_RELEASE);

==============================================================================
File: gcc.info,  Node: |Object_Size_Checking|,  Next: |Other_Builtins|,  Prev: |x86_specific_memory_model_extensions_for_transactional_memory|,  Up: |C_Extensions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *Object_Size_Checking*

6.58 Object Size Checking Built-in Functions
--------------------------------------------

GCC implements a limited buffer overflow protection mechanism that can
prevent some buffer overflow attacks by determining the sizes of objects
into which data is about to be written and preventing the writes when
the size isn't sufficient.  The built-in functions described below yield
the best results when used together and when optimization is enabled.
For example, to detect object sizes across function boundaries or to
follow pointer assignments through non-trivial control flow they rely on
various optimization passes enabled with '-O2'.  However, to a limited
extent, they can be used without optimization as well.

 -- Built-in Function: size_t __builtin_object_size (const void * PTR,
          int TYPE)
     is a built-in construct that returns a constant number of bytes
     from PTR to the end of the object PTR pointer points to (if known
     at compile time).  To determine the sizes of dynamically allocated
     objects the function relies on the allocation functions called to
     obtain the storage to be declared with the 'alloc_size' attribute
     (*note Common Function Attributes::).  '__builtin_object_size'
     never evaluates its arguments for side effects.  If there are any
     side effects in them, it returns '(size_t) -1' for TYPE 0 or 1 and
     '(size_t) 0' for TYPE 2 or 3.  If there are multiple objects PTR
     can point to and all of them are known at compile time, the
     returned number is the maximum of remaining byte counts in those
     objects if TYPE & 2 is 0 and minimum if nonzero.  If it is not
     possible to determine which objects PTR points to at compile time,
     '__builtin_object_size' should return '(size_t) -1' for TYPE 0 or 1
     and '(size_t) 0' for TYPE 2 or 3.

     TYPE is an integer constant from 0 to 3.  If the least significant
     bit is clear, objects are whole variables, if it is set, a closest
     surrounding subobject is considered the object a pointer points to.
     The second bit determines if maximum or minimum of remaining bytes
     is computed.

          struct V { char buf1[10]; int b; char buf2[10]; } var;
          char *p = &var.buf1[1], *q = &var.b;

          /* Here the object p points to is var.  */
          assert (__builtin_object_size (p, 0) == sizeof (var) - 1);
          /* The subobject p points to is var.buf1.  */
          assert (__builtin_object_size (p, 1) == sizeof (var.buf1) - 1);
          /* The object q points to is var.  */
          assert (__builtin_object_size (q, 0)
                  == (char *) (&var + 1) - (char *) &var.b);
          /* The subobject q points to is var.b.  */
          assert (__builtin_object_size (q, 1) == sizeof (var.b));

 There are built-in functions added for many common string operation
functions, e.g., for 'memcpy' '__builtin___memcpy_chk' built-in is
provided.  This built-in has an additional last argument, which is the
number of bytes remaining in the object the DEST argument points to or
'(size_t) -1' if the size is not known.

 The built-in functions are optimized into the normal string functions
like 'memcpy' if the last argument is '(size_t) -1' or if it is known at
compile time that the destination object will not be overflowed.  If the
compiler can determine at compile time that the object will always be
overflowed, it issues a warning.

 The intended use can be e.g.

     #undef memcpy
     #define bos0(dest) __builtin_object_size (dest, 0)
     #define memcpy(dest, src, n) \
       __builtin___memcpy_chk (dest, src, n, bos0 (dest))

     char *volatile p;
     char buf[10];
     /* It is unknown what object p points to, so this is optimized
        into plain memcpy - no checking is possible.  */
     memcpy (p, "abcde", n);
     /* Destination is known and length too.  It is known at compile
        time there will be no overflow.  */
     memcpy (&buf[5], "abcde", 5);
     /* Destination is known, but the length is not known at compile time.
        This will result in __memcpy_chk call that can check for overflow
        at run time.  */
     memcpy (&buf[5], "abcde", n);
     /* Destination is known and it is known at compile time there will
        be overflow.  There will be a warning and __memcpy_chk call that
        will abort the program at run time.  */
     memcpy (&buf[6], "abcde", 5);

 Such built-in functions are provided for 'memcpy', 'mempcpy',
'memmove', 'memset', 'strcpy', 'stpcpy', 'strncpy', 'strcat' and
'strncat'.

 There are also checking built-in functions for formatted output
functions.
     int __builtin___sprintf_chk (char *s, int flag, size_t os, const char *fmt, ...);
     int __builtin___snprintf_chk (char *s, size_t maxlen, int flag, size_t os,
                                   const char *fmt, ...);
     int __builtin___vsprintf_chk (char *s, int flag, size_t os, const char *fmt,
                                   va_list ap);
     int __builtin___vsnprintf_chk (char *s, size_t maxlen, int flag, size_t os,
                                    const char *fmt, va_list ap);

 The added FLAG argument is passed unchanged to '__sprintf_chk' etc.
functions and can contain implementation specific flags on what
additional security measures the checking function might take, such as
handling '%n' differently.

 The OS argument is the object size S points to, like in the other
built-in functions.  There is a small difference in the behavior though,
if OS is '(size_t) -1', the built-in functions are optimized into the
non-checking functions only if FLAG is 0, otherwise the checking
function is called with OS argument set to '(size_t) -1'.

 In addition to this, there are checking built-in functions
'__builtin___printf_chk', '__builtin___vprintf_chk',
'__builtin___fprintf_chk' and '__builtin___vfprintf_chk'.  These have
just one additional argument, FLAG, right before format string FMT.  If
the compiler is able to optimize them to 'fputc' etc. functions, it
does, otherwise the checking function is called and the FLAG argument
passed to it.

==============================================================================
File: gcc.info,  Node: |Other_Builtins|,  Next: |Target_Builtins|,  Prev: |Object_Size_Checking|,  Up: |C_Extensions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Other_Builtins*

6.59 Other Built-in Functions Provided by GCC
---------------------------------------------

GCC provides a large number of built-in functions other than the ones
mentioned above.  Some of these are for internal use in the processing
of exceptions or variable-length argument lists and are not documented
here because they may change from time to time; we do not recommend
general use of these functions.

 The remaining functions are provided for optimization purposes.

 With the exception of built-ins that have library equivalents such as
the standard C library functions discussed below, or that expand to
library calls, GCC built-in functions are always expanded inline and
thus do not have corresponding entry points and their address cannot be
obtained.  Attempting to use them in an expression other than a function
call results in a compile-time error.

 GCC includes built-in versions of many of the functions in the standard
C library.  These functions come in two forms: one whose names start
with the '__builtin_' prefix, and the other without.  Both forms have
the same type (including prototype), the same address (when their
address is taken), and the same meaning as the C library functions even
if you specify the '-fno-builtin' option *note C Dialect Options::).
Many of these functions are only optimized in certain cases; if they are
not optimized in a particular case, a call to the library function is
emitted.

 Outside strict ISO C mode ('-ansi', '-std=c90', '-std=c99' or
'-std=c11'), the functions '_exit', 'alloca', 'bcmp', 'bzero',
'dcgettext', 'dgettext', 'dremf', 'dreml', 'drem', 'exp10f', 'exp10l',
'exp10', 'ffsll', 'ffsl', 'ffs', 'fprintf_unlocked', 'fputs_unlocked',
'gammaf', 'gammal', 'gamma', 'gammaf_r', 'gammal_r', 'gamma_r',
'gettext', 'index', 'isascii', 'j0f', 'j0l', 'j0', 'j1f', 'j1l', 'j1',
'jnf', 'jnl', 'jn', 'lgammaf_r', 'lgammal_r', 'lgamma_r', 'mempcpy',
'pow10f', 'pow10l', 'pow10', 'printf_unlocked', 'rindex', 'scalbf',
'scalbl', 'scalb', 'signbit', 'signbitf', 'signbitl', 'signbitd32',
'signbitd64', 'signbitd128', 'significandf', 'significandl',
'significand', 'sincosf', 'sincosl', 'sincos', 'stpcpy', 'stpncpy',
'strcasecmp', 'strdup', 'strfmon', 'strncasecmp', 'strndup', 'strnlen',
'toascii', 'y0f', 'y0l', 'y0', 'y1f', 'y1l', 'y1', 'ynf', 'ynl' and 'yn'
may be handled as built-in functions.  All these functions have
corresponding versions prefixed with '__builtin_', which may be used
even in strict C90 mode.

 The ISO C99 functions '_Exit', 'acoshf', 'acoshl', 'acosh', 'asinhf',
'asinhl', 'asinh', 'atanhf', 'atanhl', 'atanh', 'cabsf', 'cabsl',
'cabs', 'cacosf', 'cacoshf', 'cacoshl', 'cacosh', 'cacosl', 'cacos',
'cargf', 'cargl', 'carg', 'casinf', 'casinhf', 'casinhl', 'casinh',
'casinl', 'casin', 'catanf', 'catanhf', 'catanhl', 'catanh', 'catanl',
'catan', 'cbrtf', 'cbrtl', 'cbrt', 'ccosf', 'ccoshf', 'ccoshl', 'ccosh',
'ccosl', 'ccos', 'cexpf', 'cexpl', 'cexp', 'cimagf', 'cimagl', 'cimag',
'clogf', 'clogl', 'clog', 'conjf', 'conjl', 'conj', 'copysignf',
'copysignl', 'copysign', 'cpowf', 'cpowl', 'cpow', 'cprojf', 'cprojl',
'cproj', 'crealf', 'creall', 'creal', 'csinf', 'csinhf', 'csinhl',
'csinh', 'csinl', 'csin', 'csqrtf', 'csqrtl', 'csqrt', 'ctanf',
'ctanhf', 'ctanhl', 'ctanh', 'ctanl', 'ctan', 'erfcf', 'erfcl', 'erfc',
'erff', 'erfl', 'erf', 'exp2f', 'exp2l', 'exp2', 'expm1f', 'expm1l',
'expm1', 'fdimf', 'fdiml', 'fdim', 'fmaf', 'fmal', 'fmaxf', 'fmaxl',
'fmax', 'fma', 'fminf', 'fminl', 'fmin', 'hypotf', 'hypotl', 'hypot',
'ilogbf', 'ilogbl', 'ilogb', 'imaxabs', 'isblank', 'iswblank',
'lgammaf', 'lgammal', 'lgamma', 'llabs', 'llrintf', 'llrintl', 'llrint',
'llroundf', 'llroundl', 'llround', 'log1pf', 'log1pl', 'log1p', 'log2f',
'log2l', 'log2', 'logbf', 'logbl', 'logb', 'lrintf', 'lrintl', 'lrint',
'lroundf', 'lroundl', 'lround', 'nearbyintf', 'nearbyintl', 'nearbyint',
'nextafterf', 'nextafterl', 'nextafter', 'nexttowardf', 'nexttowardl',
'nexttoward', 'remainderf', 'remainderl', 'remainder', 'remquof',
'remquol', 'remquo', 'rintf', 'rintl', 'rint', 'roundf', 'roundl',
'round', 'scalblnf', 'scalblnl', 'scalbln', 'scalbnf', 'scalbnl',
'scalbn', 'snprintf', 'tgammaf', 'tgammal', 'tgamma', 'truncf',
'truncl', 'trunc', 'vfscanf', 'vscanf', 'vsnprintf' and 'vsscanf' are
handled as built-in functions except in strict ISO C90 mode ('-ansi' or
'-std=c90').

 There are also built-in versions of the ISO C99 functions 'acosf',
'acosl', 'asinf', 'asinl', 'atan2f', 'atan2l', 'atanf', 'atanl',
'ceilf', 'ceill', 'cosf', 'coshf', 'coshl', 'cosl', 'expf', 'expl',
'fabsf', 'fabsl', 'floorf', 'floorl', 'fmodf', 'fmodl', 'frexpf',
'frexpl', 'ldexpf', 'ldexpl', 'log10f', 'log10l', 'logf', 'logl',
'modfl', 'modf', 'powf', 'powl', 'sinf', 'sinhf', 'sinhl', 'sinl',
'sqrtf', 'sqrtl', 'tanf', 'tanhf', 'tanhl' and 'tanl' that are
recognized in any mode since ISO C90 reserves these names for the
purpose to which ISO C99 puts them.  All these functions have
corresponding versions prefixed with '__builtin_'.

 There are also built-in functions '__builtin_fabsfN',
'__builtin_fabsfNx', '__builtin_copysignfN' and '__builtin_copysignfNx',
corresponding to the TS 18661-3 functions 'fabsfN', 'fabsfNx',
'copysignfN' and 'copysignfNx', for supported types '_FloatN' and
'_FloatNx'.

 There are also GNU extension functions 'clog10', 'clog10f' and
'clog10l' which names are reserved by ISO C99 for future use.  All these
functions have versions prefixed with '__builtin_'.

 The ISO C94 functions 'iswalnum', 'iswalpha', 'iswcntrl', 'iswdigit',
'iswgraph', 'iswlower', 'iswprint', 'iswpunct', 'iswspace', 'iswupper',
'iswxdigit', 'towlower' and 'towupper' are handled as built-in functions
except in strict ISO C90 mode ('-ansi' or '-std=c90').

 The ISO C90 functions 'abort', 'abs', 'acos', 'asin', 'atan2', 'atan',
'calloc', 'ceil', 'cosh', 'cos', 'exit', 'exp', 'fabs', 'floor', 'fmod',
'fprintf', 'fputs', 'frexp', 'fscanf', 'isalnum', 'isalpha', 'iscntrl',
'isdigit', 'isgraph', 'islower', 'isprint', 'ispunct', 'isspace',
'isupper', 'isxdigit', 'tolower', 'toupper', 'labs', 'ldexp', 'log10',
'log', 'malloc', 'memchr', 'memcmp', 'memcpy', 'memset', 'modf', 'pow',
'printf', 'putchar', 'puts', 'scanf', 'sinh', 'sin', 'snprintf',
'sprintf', 'sqrt', 'sscanf', 'strcat', 'strchr', 'strcmp', 'strcpy',
'strcspn', 'strlen', 'strncat', 'strncmp', 'strncpy', 'strpbrk',
'strrchr', 'strspn', 'strstr', 'tanh', 'tan', 'vfprintf', 'vprintf' and
'vsprintf' are all recognized as built-in functions unless
'-fno-builtin' is specified (or '-fno-builtin-FUNCTION' is specified for
an individual function).  All of these functions have corresponding
versions prefixed with '__builtin_'.

 GCC provides built-in versions of the ISO C99 floating-point comparison
macros that avoid raising exceptions for unordered operands.  They have
the same names as the standard macros ( 'isgreater', 'isgreaterequal',
'isless', 'islessequal', 'islessgreater', and 'isunordered') , with
'__builtin_' prefixed.  We intend for a library implementor to be able
to simply '#define' each standard macro to its built-in equivalent.  In
the same fashion, GCC provides 'fpclassify', 'isfinite', 'isinf_sign',
'isnormal' and 'signbit' built-ins used with '__builtin_' prefixed.  The
'isinf' and 'isnan' built-in functions appear both with and without the
'__builtin_' prefix.

 -- Built-in Function: void *__builtin_alloca (size_t size)
     The '__builtin_alloca' function must be called at block scope.  The
     function allocates an object SIZE bytes large on the stack of the
     calling function.  The object is aligned on the default stack
     alignment boundary for the target determined by the
     '__BIGGEST_ALIGNMENT__' macro.  The '__builtin_alloca' function
     returns a pointer to the first byte of the allocated object.  The
     lifetime of the allocated object ends just before the calling
     function returns to its caller.  This is so even when
     '__builtin_alloca' is called within a nested block.

     For example, the following function allocates eight objects of 'n'
     bytes each on the stack, storing a pointer to each in consecutive
     elements of the array 'a'.  It then passes the array to function
     'g' which can safely use the storage pointed to by each of the
     array elements.

          void f (unsigned n)
          {
            void *a [8];
            for (int i = 0; i != 8; ++i)
              a [i] = __builtin_alloca (n);

            g (a, n);   // safe
          }

     Since the '__builtin_alloca' function doesn't validate its argument
     it is the responsibility of its caller to make sure the argument
     doesn't cause it to exceed the stack size limit.  The
     '__builtin_alloca' function is provided to make it possible to
     allocate on the stack arrays of bytes with an upper bound that may
     be computed at run time.  Since C99 Variable Length Arrays offer
     similar functionality under a portable, more convenient, and safer
     interface they are recommended instead, in both C99 and C++
     programs where GCC provides them as an extension.  *Note Variable
     Length::, for details.

 -- Built-in Function: void *__builtin_alloca_with_align (size_t size,
          size_t alignment)
     The '__builtin_alloca_with_align' function must be called at block
     scope.  The function allocates an object SIZE bytes large on the
     stack of the calling function.  The allocated object is aligned on
     the boundary specified by the argument ALIGNMENT whose unit is
     given in bits (not bytes).  The SIZE argument must be positive and
     not exceed the stack size limit.  The ALIGNMENT argument must be a
     constant integer expression that evaluates to a power of 2 greater
     than or equal to 'CHAR_BIT' and less than some unspecified maximum.
     Invocations with other values are rejected with an error indicating
     the valid bounds.  The function returns a pointer to the first byte
     of the allocated object.  The lifetime of the allocated object ends
     at the end of the block in which the function was called.  The
     allocated storage is released no later than just before the calling
     function returns to its caller, but may be released at the end of
     the block in which the function was called.

     For example, in the following function the call to 'g' is unsafe
     because when 'overalign' is non-zero, the space allocated by
     '__builtin_alloca_with_align' may have been released at the end of
     the 'if' statement in which it was called.

          void f (unsigned n, bool overalign)
          {
            void *p;
            if (overalign)
              p = __builtin_alloca_with_align (n, 64 /* bits */);
            else
              p = __builtin_alloc (n);

            g (p, n);   // unsafe
          }

     Since the '__builtin_alloca_with_align' function doesn't validate
     its SIZE argument it is the responsibility of its caller to make
     sure the argument doesn't cause it to exceed the stack size limit.
     The '__builtin_alloca_with_align' function is provided to make it
     possible to allocate on the stack overaligned arrays of bytes with
     an upper bound that may be computed at run time.  Since C99
     Variable Length Arrays offer the same functionality under a
     portable, more convenient, and safer interface they are recommended
     instead, in both C99 and C++ programs where GCC provides them as an
     extension.  *Note Variable Length::, for details.

 -- Built-in Function: void *__builtin_alloca_with_align_and_max (size_t
          size, size_t alignment, size_t max_size)
     Similar to '__builtin_alloca_with_align' but takes an extra
     argument specifying an upper bound for SIZE in case its value
     cannot be computed at compile time, for use by '-fstack-usage',
     '-Wstack-usage' and '-Walloca-larger-than'.  MAX_SIZE must be a
     constant integer expression, it has no effect on code generation
     and no attempt is made to check its compatibility with SIZE.

 -- Built-in Function: bool __builtin_has_attribute (TYPE-OR-EXPRESSION,
          ATTRIBUTE)
     The '__builtin_has_attribute' function evaluates to an integer
     constant expression equal to 'true' if the symbol or type
     referenced by the TYPE-OR-EXPRESSION argument has been declared
     with the ATTRIBUTE referenced by the second argument.  For an
     TYPE-OR-EXPRESSION argument that does not reference a symbol, since
     attributes do not apply to expressions the built-in consider the
     type of the argument.  Neither argument is evaluated.  The
     TYPE-OR-EXPRESSION argument is subject to the same restrictions as
     the argument to 'typeof' (*note Typeof::).  The ATTRIBUTE argument
     is an attribute name optionally followed by a comma-separated list
     of arguments enclosed in parentheses.  Both forms of attribute
     names--with and without double leading and trailing
     underscores--are recognized.  *Note Attribute Syntax::, for
     details.  When no attribute arguments are specified for an
     attribute that expects one or more arguments the function returns
     'true' if TYPE-OR-EXPRESSION has been declared with the attribute
     regardless of the attribute argument values.  Arguments provided
     for an attribute that expects some are validated and matched up to
     the provided number.  The function returns 'true' if all provided
     arguments match.  For example, the first call to the function below
     evaluates to 'true' because 'x' is declared with the 'aligned'
     attribute but the second call evaluates to 'false' because 'x' is
     declared 'aligned (8)' and not 'aligned (4)'.

          __attribute__ ((aligned (8))) int x;
          _Static_assert (__builtin_has_attribute (x, aligned), "aligned");
          _Static_assert (!__builtin_has_attribute (x, aligned (4)), "aligned (4)");

     Due to a limitation the '__builtin_has_attribute' function returns
     'false' for the 'mode' attribute even if the type or variable
     referenced by the TYPE-OR-EXPRESSION argument was declared with
     one.  The function is also not supported with labels, and in C with
     enumerators.

     Note that unlike the '__has_attribute' preprocessor operator which
     is suitable for use in '#if' preprocessing directives
     '__builtin_has_attribute' is an intrinsic function that is not
     recognized in such contexts.

 -- Built-in Function: TYPE __builtin_speculation_safe_value (TYPE val,
          TYPE failval)

     This built-in function can be used to help mitigate against unsafe
     speculative execution.  TYPE may be any integral type or any
     pointer type.

       1. If the CPU is not speculatively executing the code, then VAL
          is returned.
       2. If the CPU is executing speculatively then either:
             * The function may cause execution to pause until it is
               known that the code is no-longer being executed
               speculatively (in which case VAL can be returned, as
               above); or
             * The function may use target-dependent speculation
               tracking state to cause FAILVAL to be returned when it is
               known that speculative execution has incorrectly
               predicted a conditional branch operation.

     The second argument, FAILVAL, is optional and defaults to zero if
     omitted.

     GCC defines the preprocessor macro
     '__HAVE_BUILTIN_SPECULATION_SAFE_VALUE' for targets that have been
     updated to support this builtin.

     The built-in function can be used where a variable appears to be
     used in a safe way, but the CPU, due to speculative execution may
     temporarily ignore the bounds checks.  Consider, for example, the
     following function:

          int array[500];
          int f (unsigned untrusted_index)
          {
            if (untrusted_index < 500)
              return array[untrusted_index];
            return 0;
          }

     If the function is called repeatedly with 'untrusted_index' less
     than the limit of 500, then a branch predictor will learn that the
     block of code that returns a value stored in 'array' will be
     executed.  If the function is subsequently called with an
     out-of-range value it will still try to execute that block of code
     first until the CPU determines that the prediction was incorrect
     (the CPU will unwind any incorrect operations at that point).
     However, depending on how the result of the function is used, it
     might be possible to leave traces in the cache that can reveal what
     was stored at the out-of-bounds location.  The built-in function
     can be used to provide some protection against leaking data in this
     way by changing the code to:

          int array[500];
          int f (unsigned untrusted_index)
          {
            if (untrusted_index < 500)
              return array[__builtin_speculation_safe_value (untrusted_index)];
            return 0;
          }

     The built-in function will either cause execution to stall until
     the conditional branch has been fully resolved, or it may permit
     speculative execution to continue, but using 0 instead of
     'untrusted_value' if that exceeds the limit.

     If accessing any memory location is potentially unsafe when
     speculative execution is incorrect, then the code can be rewritten
     as

          int array[500];
          int f (unsigned untrusted_index)
          {
            if (untrusted_index < 500)
              return *__builtin_speculation_safe_value (&array[untrusted_index], NULL);
            return 0;
          }

     which will cause a 'NULL' pointer to be used for the unsafe case.

 -- Built-in Function: int __builtin_types_compatible_p (TYPE1, TYPE2)

     You can use the built-in function '__builtin_types_compatible_p' to
     determine whether two types are the same.

     This built-in function returns 1 if the unqualified versions of the
     types TYPE1 and TYPE2 (which are types, not expressions) are
     compatible, 0 otherwise.  The result of this built-in function can
     be used in integer constant expressions.

     This built-in function ignores top level qualifiers (e.g., 'const',
     'volatile').  For example, 'int' is equivalent to 'const int'.

     The type 'int[]' and 'int[5]' are compatible.  On the other hand,
     'int' and 'char *' are not compatible, even if the size of their
     types, on the particular architecture are the same.  Also, the
     amount of pointer indirection is taken into account when
     determining similarity.  Consequently, 'short *' is not similar to
     'short **'.  Furthermore, two types that are typedefed are
     considered compatible if their underlying types are compatible.

     An 'enum' type is not considered to be compatible with another
     'enum' type even if both are compatible with the same integer type;
     this is what the C standard specifies.  For example, 'enum {foo,
     bar}' is not similar to 'enum {hot, dog}'.

     You typically use this function in code whose execution varies
     depending on the arguments' types.  For example:

          #define foo(x)                                                  \
            ({                                                           \
              typeof (x) tmp = (x);                                       \
              if (__builtin_types_compatible_p (typeof (x), long double)) \
                tmp = foo_long_double (tmp);                              \
              else if (__builtin_types_compatible_p (typeof (x), double)) \
                tmp = foo_double (tmp);                                   \
              else if (__builtin_types_compatible_p (typeof (x), float))  \
                tmp = foo_float (tmp);                                    \
              else                                                        \
                abort ();                                                 \
              tmp;                                                        \
            })

     _Note:_ This construct is only available for C.

 -- Built-in Function: TYPE __builtin_call_with_static_chain (CALL_EXP,
          POINTER_EXP)

     The CALL_EXP expression must be a function call, and the
     POINTER_EXP expression must be a pointer.  The POINTER_EXP is
     passed to the function call in the target's static chain location.
     The result of builtin is the result of the function call.

     _Note:_ This builtin is only available for C.  This builtin can be
     used to call Go closures from C.

 -- Built-in Function: TYPE __builtin_choose_expr (CONST_EXP, EXP1,
          EXP2)

     You can use the built-in function '__builtin_choose_expr' to
     evaluate code depending on the value of a constant expression.
     This built-in function returns EXP1 if CONST_EXP, which is an
     integer constant expression, is nonzero.  Otherwise it returns
     EXP2.

     This built-in function is analogous to the '? :' operator in C,
     except that the expression returned has its type unaltered by
     promotion rules.  Also, the built-in function does not evaluate the
     expression that is not chosen.  For example, if CONST_EXP evaluates
     to 'true', EXP2 is not evaluated even if it has side effects.

     This built-in function can return an lvalue if the chosen argument
     is an lvalue.

     If EXP1 is returned, the return type is the same as EXP1's type.
     Similarly, if EXP2 is returned, its return type is the same as
     EXP2.

     Example:

          #define foo(x)                                                    \
            __builtin_choose_expr (                                         \
              __builtin_types_compatible_p (typeof (x), double),            \
              foo_double (x),                                               \
              __builtin_choose_expr (                                       \
                __builtin_types_compatible_p (typeof (x), float),           \
                foo_float (x),                                              \
                /* The void expression results in a compile-time error  \
                   when assigning the result to something.  */          \
                (void)0))

     _Note:_ This construct is only available for C.  Furthermore, the
     unused expression (EXP1 or EXP2 depending on the value of
     CONST_EXP) may still generate syntax errors.  This may change in
     future revisions.

 -- Built-in Function: TYPE __builtin_tgmath (FUNCTIONS, ARGUMENTS)

     The built-in function '__builtin_tgmath', available only for C and
     Objective-C, calls a function determined according to the rules of
     '<tgmath.h>' macros.  It is intended to be used in implementations
     of that header, so that expansions of macros from that header only
     expand each of their arguments once, to avoid problems when calls
     to such macros are nested inside the arguments of other calls to
     such macros; in addition, it results in better diagnostics for
     invalid calls to '<tgmath.h>' macros than implementations using
     other GNU C language features.  For example, the 'pow' type-generic
     macro might be defined as:

          #define pow(a, b) __builtin_tgmath (powf, pow, powl, \
                                              cpowf, cpow, cpowl, a, b)

     The arguments to '__builtin_tgmath' are at least two pointers to
     functions, followed by the arguments to the type-generic macro
     (which will be passed as arguments to the selected function).  All
     the pointers to functions must be pointers to prototyped functions,
     none of which may have variable arguments, and all of which must
     have the same number of parameters; the number of parameters of the
     first function determines how many arguments to '__builtin_tgmath'
     are interpreted as function pointers, and how many as the arguments
     to the called function.

     The types of the specified functions must all be different, but
     related to each other in the same way as a set of functions that
     may be selected between by a macro in '<tgmath.h>'.  This means
     that the functions are parameterized by a floating-point type T,
     different for each such function.  The function return types may
     all be the same type, or they may be T for each function, or they
     may be the real type corresponding to T for each function (if some
     of the types T are complex).  Likewise, for each parameter
     position, the type of the parameter in that position may always be
     the same type, or may be T for each function (this case must apply
     for at least one parameter position), or may be the real type
     corresponding to T for each function.

     The standard rules for '<tgmath.h>' macros are used to find a
     common type U from the types of the arguments for parameters whose
     types vary between the functions; complex integer types (a GNU
     extension) are treated like '_Complex double' for this purpose (or
     '_Complex _Float64' if all the function return types are the same
     '_FloatN' or '_FloatNx' type).  If the function return types vary,
     or are all the same integer type, the function called is the one
     for which T is U, and it is an error if there is no such function.
     If the function return types are all the same floating-point type,
     the type-generic macro is taken to be one of those from TS 18661
     that rounds the result to a narrower type; if there is a function
     for which T is U, it is called, and otherwise the first function,
     if any, for which T has at least the range and precision of U is
     called, and it is an error if there is no such function.

 -- Built-in Function: TYPE __builtin_complex (REAL, IMAG)

     The built-in function '__builtin_complex' is provided for use in
     implementing the ISO C11 macros 'CMPLXF', 'CMPLX' and 'CMPLXL'.
     REAL and IMAG must have the same type, a real binary floating-point
     type, and the result has the corresponding complex type with real
     and imaginary parts REAL and IMAG.  Unlike 'REAL + I * IMAG', this
     works even when infinities, NaNs and negative zeros are involved.

 -- Built-in Function: int __builtin_constant_p (EXP)
     You can use the built-in function '__builtin_constant_p' to
     determine if a value is known to be constant at compile time and
     hence that GCC can perform constant-folding on expressions
     involving that value.  The argument of the function is the value to
     test.  The function returns the integer 1 if the argument is known
     to be a compile-time constant and 0 if it is not known to be a
     compile-time constant.  A return of 0 does not indicate that the
     value is _not_ a constant, but merely that GCC cannot prove it is a
     constant with the specified value of the '-O' option.

     You typically use this function in an embedded application where
     memory is a critical resource.  If you have some complex
     calculation, you may want it to be folded if it involves constants,
     but need to call a function if it does not.  For example:

          #define Scale_Value(X)      \
            (__builtin_constant_p (X) \
            ? ((X) * SCALE + OFFSET) : Scale (X))

     You may use this built-in function in either a macro or an inline
     function.  However, if you use it in an inlined function and pass
     an argument of the function as the argument to the built-in, GCC
     never returns 1 when you call the inline function with a string
     constant or compound literal (*note Compound Literals::) and does
     not return 1 when you pass a constant numeric value to the inline
     function unless you specify the '-O' option.

     You may also use '__builtin_constant_p' in initializers for static
     data.  For instance, you can write

          static const int table[] = {
             __builtin_constant_p (EXPRESSION) ? (EXPRESSION) : -1,
             /* ... */
          };

     This is an acceptable initializer even if EXPRESSION is not a
     constant expression, including the case where
     '__builtin_constant_p' returns 1 because EXPRESSION can be folded
     to a constant but EXPRESSION contains operands that are not
     otherwise permitted in a static initializer (for example, '0 && foo
     ()').  GCC must be more conservative about evaluating the built-in
     in this case, because it has no opportunity to perform
     optimization.

 -- Built-in Function: bool __builtin_is_constant_evaluated (void)
     The '__builtin_is_constant_evaluated' function is available only in
     C++.  The built-in is intended to be used by implementations of the
     'std::is_constant_evaluated' C++ function.  Programs should make
     use of the latter function rather than invoking the built-in
     directly.

     The main use case of the built-in is to determine whether a
     'constexpr' function is being called in a 'constexpr' context.  A
     call to the function evaluates to a core constant expression with
     the value 'true' if and only if it occurs within the evaluation of
     an expression or conversion that is manifestly constant-evaluated
     as defined in the C++ standard.  Manifestly constant-evaluated
     contexts include constant-expressions, the conditions of 'constexpr
     if' statements, constraint-expressions, and initializers of
     variables usable in constant expressions.  For more details refer
     to the latest revision of the C++ standard.

 -- Built-in Function: long __builtin_expect (long EXP, long C)
     You may use '__builtin_expect' to provide the compiler with branch
     prediction information.  In general, you should prefer to use
     actual profile feedback for this ('-fprofile-arcs'), as programmers
     are notoriously bad at predicting how their programs actually
     perform.  However, there are applications in which this data is
     hard to collect.

     The return value is the value of EXP, which should be an integral
     expression.  The semantics of the built-in are that it is expected
     that EXP == C.  For example:

          if (__builtin_expect (x, 0))
            foo ();

     indicates that we do not expect to call 'foo', since we expect 'x'
     to be zero.  Since you are limited to integral expressions for EXP,
     you should use constructions such as

          if (__builtin_expect (ptr != NULL, 1))
            foo (*ptr);

     when testing pointer or floating-point values.

     For the purposes of branch prediction optimizations, the
     probability that a '__builtin_expect' expression is 'true' is
     controlled by GCC's 'builtin-expect-probability' parameter, which
     defaults to 90%.  You can also use
     '__builtin_expect_with_probability' to explicitly assign a
     probability value to individual expressions.

 -- Built-in Function: long __builtin_expect_with_probability
     (long EXP, long C, double PROBABILITY)

     This function has the same semantics as '__builtin_expect', but the
     caller provides the expected probability that EXP == C.  The last
     argument, PROBABILITY, is a floating-point value in the range 0.0
     to 1.0, inclusive.  The PROBABILITY argument must be constant
     floating-point expression.

 -- Built-in Function: void __builtin_trap (void)
     This function causes the program to exit abnormally.  GCC
     implements this function by using a target-dependent mechanism
     (such as intentionally executing an illegal instruction) or by
     calling 'abort'.  The mechanism used may vary from release to
     release so you should not rely on any particular implementation.

 -- Built-in Function: void __builtin_unreachable (void)
     If control flow reaches the point of the '__builtin_unreachable',
     the program is undefined.  It is useful in situations where the
     compiler cannot deduce the unreachability of the code.

     One such case is immediately following an 'asm' statement that
     either never terminates, or one that transfers control elsewhere
     and never returns.  In this example, without the
     '__builtin_unreachable', GCC issues a warning that control reaches
     the end of a non-void function.  It also generates code to return
     after the 'asm'.

          int f (int c, int v)
          {
            if (c)
              {
                return v;
              }
            else
              {
                asm("jmp error_handler");
                __builtin_unreachable ();
              }
          }

     Because the 'asm' statement unconditionally transfers control out
     of the function, control never reaches the end of the function
     body.  The '__builtin_unreachable' is in fact unreachable and
     communicates this fact to the compiler.

     Another use for '__builtin_unreachable' is following a call a
     function that never returns but that is not declared
     '__attribute__((noreturn))', as in this example:

          void function_that_never_returns (void);

          int g (int c)
          {
            if (c)
              {
                return 1;
              }
            else
              {
                function_that_never_returns ();
                __builtin_unreachable ();
              }
          }

 -- Built-in Function: void * __builtin_assume_aligned (const void *EXP,
          size_t ALIGN, ...)
     This function returns its first argument, and allows the compiler
     to assume that the returned pointer is at least ALIGN bytes
     aligned.  This built-in can have either two or three arguments, if
     it has three, the third argument should have integer type, and if
     it is nonzero means misalignment offset.  For example:

          void *x = __builtin_assume_aligned (arg, 16);

     means that the compiler can assume 'x', set to 'arg', is at least
     16-byte aligned, while:

          void *x = __builtin_assume_aligned (arg, 32, 8);

     means that the compiler can assume for 'x', set to 'arg', that
     '(char *) x - 8' is 32-byte aligned.

 -- Built-in Function: int __builtin_LINE ()
     This function is the equivalent of the preprocessor '__LINE__'
     macro and returns a constant integer expression that evaluates to
     the line number of the invocation of the built-in.  When used as a
     C++ default argument for a function F, it returns the line number
     of the call to F.

 -- Built-in Function: const char * __builtin_FUNCTION ()
     This function is the equivalent of the '__FUNCTION__' symbol and
     returns an address constant pointing to the name of the function
     from which the built-in was invoked, or the empty string if the
     invocation is not at function scope.  When used as a C++ default
     argument for a function F, it returns the name of F's caller or the
     empty string if the call was not made at function scope.

 -- Built-in Function: const char * __builtin_FILE ()
     This function is the equivalent of the preprocessor '__FILE__'
     macro and returns an address constant pointing to the file name
     containing the invocation of the built-in, or the empty string if
     the invocation is not at function scope.  When used as a C++
     default argument for a function F, it returns the file name of the
     call to F or the empty string if the call was not made at function
     scope.

     For example, in the following, each call to function 'foo' will
     print a line similar to '"file.c:123: foo: message"' with the name
     of the file and the line number of the 'printf' call, the name of
     the function 'foo', followed by the word 'message'.

          const char*
          function (const char *func = __builtin_FUNCTION ())
          {
            return func;
          }

          void foo (void)
          {
            printf ("%s:%i: %s: message\n", file (), line (), function ());
          }

 -- Built-in Function: void __builtin___clear_cache (void *BEGIN, void
          *END)
     This function is used to flush the processor's instruction cache
     for the region of memory between BEGIN inclusive and END exclusive.
     Some targets require that the instruction cache be flushed, after
     modifying memory containing code, in order to obtain deterministic
     behavior.

     If the target does not require instruction cache flushes,
     '__builtin___clear_cache' has no effect.  Otherwise either
     instructions are emitted in-line to clear the instruction cache or
     a call to the '__clear_cache' function in libgcc is made.

 -- Built-in Function: void __builtin_prefetch (const void *ADDR, ...)
     This function is used to minimize cache-miss latency by moving data
     into a cache before it is accessed.  You can insert calls to
     '__builtin_prefetch' into code for which you know addresses of data
     in memory that is likely to be accessed soon.  If the target
     supports them, data prefetch instructions are generated.  If the
     prefetch is done early enough before the access then the data will
     be in the cache by the time it is accessed.

     The value of ADDR is the address of the memory to prefetch.  There
     are two optional arguments, RW and LOCALITY.  The value of RW is a
     compile-time constant one or zero; one means that the prefetch is
     preparing for a write to the memory address and zero, the default,
     means that the prefetch is preparing for a read.  The value
     LOCALITY must be a compile-time constant integer between zero and
     three.  A value of zero means that the data has no temporal
     locality, so it need not be left in the cache after the access.  A
     value of three means that the data has a high degree of temporal
     locality and should be left in all levels of cache possible.
     Values of one and two mean, respectively, a low or moderate degree
     of temporal locality.  The default is three.

          for (i = 0; i < n; i++)
            {
              a[i] = a[i] + b[i];
              __builtin_prefetch (&a[i+j], 1, 1);
              __builtin_prefetch (&b[i+j], 0, 1);
              /* ... */
            }

     Data prefetch does not generate faults if ADDR is invalid, but the
     address expression itself must be valid.  For example, a prefetch
     of 'p->next' does not fault if 'p->next' is not a valid address,
     but evaluation faults if 'p' is not a valid address.

     If the target does not support data prefetch, the address
     expression is evaluated if it includes side effects but no other
     code is generated and GCC does not issue a warning.

 -- Built-in Function: size_t __builtin_object_size (const void * PTR,
          int TYPE)
     Returns the size of an object pointed to by PTR.  *Note Object Size
     Checking::, for a detailed description of the function.

 -- Built-in Function: double __builtin_huge_val (void)
     Returns a positive infinity, if supported by the floating-point
     format, else 'DBL_MAX'.  This function is suitable for implementing
     the ISO C macro 'HUGE_VAL'.

 -- Built-in Function: float __builtin_huge_valf (void)
     Similar to '__builtin_huge_val', except the return type is 'float'.

 -- Built-in Function: long double __builtin_huge_vall (void)
     Similar to '__builtin_huge_val', except the return type is 'long
     double'.

 -- Built-in Function: _FloatN __builtin_huge_valfN (void)
     Similar to '__builtin_huge_val', except the return type is
     '_FloatN'.

 -- Built-in Function: _FloatNx __builtin_huge_valfNx (void)
     Similar to '__builtin_huge_val', except the return type is
     '_FloatNx'.

 -- Built-in Function: int __builtin_fpclassify (int, int, int, int,
          int, ...)
     This built-in implements the C99 fpclassify functionality.  The
     first five int arguments should be the target library's notion of
     the possible FP classes and are used for return values.  They must
     be constant values and they must appear in this order: 'FP_NAN',
     'FP_INFINITE', 'FP_NORMAL', 'FP_SUBNORMAL' and 'FP_ZERO'.  The
     ellipsis is for exactly one floating-point value to classify.  GCC
     treats the last argument as type-generic, which means it does not
     do default promotion from float to double.

 -- Built-in Function: double __builtin_inf (void)
     Similar to '__builtin_huge_val', except a warning is generated if
     the target floating-point format does not support infinities.

 -- Built-in Function: _Decimal32 __builtin_infd32 (void)
     Similar to '__builtin_inf', except the return type is '_Decimal32'.

 -- Built-in Function: _Decimal64 __builtin_infd64 (void)
     Similar to '__builtin_inf', except the return type is '_Decimal64'.

 -- Built-in Function: _Decimal128 __builtin_infd128 (void)
     Similar to '__builtin_inf', except the return type is
     '_Decimal128'.

 -- Built-in Function: float __builtin_inff (void)
     Similar to '__builtin_inf', except the return type is 'float'.
     This function is suitable for implementing the ISO C99 macro
     'INFINITY'.

 -- Built-in Function: long double __builtin_infl (void)
     Similar to '__builtin_inf', except the return type is 'long
     double'.

 -- Built-in Function: _FloatN __builtin_inffN (void)
     Similar to '__builtin_inf', except the return type is '_FloatN'.

 -- Built-in Function: _FloatN __builtin_inffNx (void)
     Similar to '__builtin_inf', except the return type is '_FloatNx'.

 -- Built-in Function: int __builtin_isinf_sign (...)
     Similar to 'isinf', except the return value is -1 for an argument
     of '-Inf' and 1 for an argument of '+Inf'.  Note while the
     parameter list is an ellipsis, this function only accepts exactly
     one floating-point argument.  GCC treats this parameter as
     type-generic, which means it does not do default promotion from
     float to double.

 -- Built-in Function: double __builtin_nan (const char *str)
     This is an implementation of the ISO C99 function 'nan'.

     Since ISO C99 defines this function in terms of 'strtod', which we
     do not implement, a description of the parsing is in order.  The
     string is parsed as by 'strtol'; that is, the base is recognized by
     leading '0' or '0x' prefixes.  The number parsed is placed in the
     significand such that the least significant bit of the number is at
     the least significant bit of the significand.  The number is
     truncated to fit the significand field provided.  The significand
     is forced to be a quiet NaN.

     This function, if given a string literal all of which would have
     been consumed by 'strtol', is evaluated early enough that it is
     considered a compile-time constant.

 -- Built-in Function: _Decimal32 __builtin_nand32 (const char *str)
     Similar to '__builtin_nan', except the return type is '_Decimal32'.

 -- Built-in Function: _Decimal64 __builtin_nand64 (const char *str)
     Similar to '__builtin_nan', except the return type is '_Decimal64'.

 -- Built-in Function: _Decimal128 __builtin_nand128 (const char *str)
     Similar to '__builtin_nan', except the return type is
     '_Decimal128'.

 -- Built-in Function: float __builtin_nanf (const char *str)
     Similar to '__builtin_nan', except the return type is 'float'.

 -- Built-in Function: long double __builtin_nanl (const char *str)
     Similar to '__builtin_nan', except the return type is 'long
     double'.

 -- Built-in Function: _FloatN __builtin_nanfN (const char *str)
     Similar to '__builtin_nan', except the return type is '_FloatN'.

 -- Built-in Function: _FloatNx __builtin_nanfNx (const char *str)
     Similar to '__builtin_nan', except the return type is '_FloatNx'.

 -- Built-in Function: double __builtin_nans (const char *str)
     Similar to '__builtin_nan', except the significand is forced to be
     a signaling NaN.  The 'nans' function is proposed by WG14 N965.

 -- Built-in Function: float __builtin_nansf (const char *str)
     Similar to '__builtin_nans', except the return type is 'float'.

 -- Built-in Function: long double __builtin_nansl (const char *str)
     Similar to '__builtin_nans', except the return type is 'long
     double'.

 -- Built-in Function: _FloatN __builtin_nansfN (const char *str)
     Similar to '__builtin_nans', except the return type is '_FloatN'.

 -- Built-in Function: _FloatNx __builtin_nansfNx (const char *str)
     Similar to '__builtin_nans', except the return type is '_FloatNx'.

 -- Built-in Function: int __builtin_ffs (int x)
     Returns one plus the index of the least significant 1-bit of X, or
     if X is zero, returns zero.

 -- Built-in Function: int __builtin_clz (unsigned int x)
     Returns the number of leading 0-bits in X, starting at the most
     significant bit position.  If X is 0, the result is undefined.

 -- Built-in Function: int __builtin_ctz (unsigned int x)
     Returns the number of trailing 0-bits in X, starting at the least
     significant bit position.  If X is 0, the result is undefined.

 -- Built-in Function: int __builtin_clrsb (int x)
     Returns the number of leading redundant sign bits in X, i.e. the
     number of bits following the most significant bit that are
     identical to it.  There are no special cases for 0 or other values.

 -- Built-in Function: int __builtin_popcount (unsigned int x)
     Returns the number of 1-bits in X.

 -- Built-in Function: int __builtin_parity (unsigned int x)
     Returns the parity of X, i.e. the number of 1-bits in X modulo 2.

 -- Built-in Function: int __builtin_ffsl (long)
     Similar to '__builtin_ffs', except the argument type is 'long'.

 -- Built-in Function: int __builtin_clzl (unsigned long)
     Similar to '__builtin_clz', except the argument type is 'unsigned
     long'.

 -- Built-in Function: int __builtin_ctzl (unsigned long)
     Similar to '__builtin_ctz', except the argument type is 'unsigned
     long'.

 -- Built-in Function: int __builtin_clrsbl (long)
     Similar to '__builtin_clrsb', except the argument type is 'long'.

 -- Built-in Function: int __builtin_popcountl (unsigned long)
     Similar to '__builtin_popcount', except the argument type is
     'unsigned long'.

 -- Built-in Function: int __builtin_parityl (unsigned long)
     Similar to '__builtin_parity', except the argument type is
     'unsigned long'.

 -- Built-in Function: int __builtin_ffsll (long long)
     Similar to '__builtin_ffs', except the argument type is 'long
     long'.

 -- Built-in Function: int __builtin_clzll (unsigned long long)
     Similar to '__builtin_clz', except the argument type is 'unsigned
     long long'.

 -- Built-in Function: int __builtin_ctzll (unsigned long long)
     Similar to '__builtin_ctz', except the argument type is 'unsigned
     long long'.

 -- Built-in Function: int __builtin_clrsbll (long long)
     Similar to '__builtin_clrsb', except the argument type is 'long
     long'.

 -- Built-in Function: int __builtin_popcountll (unsigned long long)
     Similar to '__builtin_popcount', except the argument type is
     'unsigned long long'.

 -- Built-in Function: int __builtin_parityll (unsigned long long)
     Similar to '__builtin_parity', except the argument type is
     'unsigned long long'.

 -- Built-in Function: double __builtin_powi (double, int)
     Returns the first argument raised to the power of the second.
     Unlike the 'pow' function no guarantees about precision and
     rounding are made.

 -- Built-in Function: float __builtin_powif (float, int)
     Similar to '__builtin_powi', except the argument and return types
     are 'float'.

 -- Built-in Function: long double __builtin_powil (long double, int)
     Similar to '__builtin_powi', except the argument and return types
     are 'long double'.

 -- Built-in Function: uint16_t __builtin_bswap16 (uint16_t x)
     Returns X with the order of the bytes reversed; for example,
     '0xaabb' becomes '0xbbaa'.  Byte here always means exactly 8 bits.

 -- Built-in Function: uint32_t __builtin_bswap32 (uint32_t x)
     Similar to '__builtin_bswap16', except the argument and return
     types are 32 bit.

 -- Built-in Function: uint64_t __builtin_bswap64 (uint64_t x)
     Similar to '__builtin_bswap32', except the argument and return
     types are 64 bit.

 -- Built-in Function: Pmode __builtin_extend_pointer (void * x)
     On targets where the user visible pointer size is smaller than the
     size of an actual hardware address this function returns the
     extended user pointer.  Targets where this is true included ILP32
     mode on x86_64 or Aarch64.  This function is mainly useful when
     writing inline assembly code.

 -- Built-in Function: int __builtin_goacc_parlevel_id (int x)
     Returns the openacc gang, worker or vector id depending on whether
     X is 0, 1 or 2.

 -- Built-in Function: int __builtin_goacc_parlevel_size (int x)
     Returns the openacc gang, worker or vector size depending on
     whether X is 0, 1 or 2.

==============================================================================
File: gcc.info,  Node: |Target_Builtins|,  Next: |Target_Format_Checks|,  Prev: |Other_Builtins|,  Up: |C_Extensions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *Target_Builtins*

6.60 Built-in Functions Specific to Particular Target Machines
--------------------------------------------------------------

On some target machines, GCC supports many built-in functions specific
to those machines.  Generally these generate calls to specific machine
instructions, but allow the compiler to schedule those calls.

MENU

* |AArch64_Built_in_Functions|::
* |Alpha_Built_in_Functions|::
* |Altera_Nios_II_Built_in_Functions|::
* |ARC_Built_in_Functions|::
* |ARC_SIMD_Built_in_Functions|::
* |ARM_iWMMXt_Built_in_Functions|::
* |ARM_C_Language_Extensions_(ACLE)|::
* |ARM_Floating_Point_Status_and_Control_Intrinsics|::
* |ARM_ARMv8_M_Security_Extensions|::
* |AVR_Built_in_Functions|::
* |Blackfin_Built_in_Functions|::
* |FR_V_Built_in_Functions|::
* |MIPS_DSP_Built_in_Functions|::
* |MIPS_Paired_Single_Support|::
* |MIPS_Loongson_Built_in_Functions|::
* |MIPS_SIMD_Architecture_(MSA)_Support|::
* |Other_MIPS_Built_in_Functions|::
* |MSP430_Built_in_Functions|::
* |NDS32_Built_in_Functions|::
* |picoChip_Built_in_Functions|::
* |Basic_PowerPC_Built_in_Functions|::
* |PowerPC_AltiVec/VSX_Built_in_Functions|::
* |PowerPC_Hardware_Transactional_Memory_Built_in_Functions|::
* |PowerPC_Atomic_Memory_Operation_Functions|::
* |RX_Built_in_Functions|::
* |S/390_System_z_Built_in_Functions|::
* |SH_Built_in_Functions|::
* |SPARC_VIS_Built_in_Functions|::
* |SPU_Built_in_Functions|::
* |TI_C6X_Built_in_Functions|::
* |TILE_Gx_Built_in_Functions|::
* |TILEPro_Built_in_Functions|::
* |x86_Built_in_Functions|::
* |x86_transactional_memory_intrinsics|::
* |x86_control_flow_protection_intrinsics|::

==============================================================================
File: gcc.info,  Node: |AArch64_Built_in_Functions|,  Next: |Alpha_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *AArch64_Built_in_Functions*

6.60.1 AArch64 Built-in Functions
---------------------------------

These built-in functions are available for the AArch64 family of
processors.
     unsigned int __builtin_aarch64_get_fpcr ()
     void __builtin_aarch64_set_fpcr (unsigned int)
     unsigned int __builtin_aarch64_get_fpsr ()
     void __builtin_aarch64_set_fpsr (unsigned int)

==============================================================================
File: gcc.info,  Node: |Alpha_Built_in_Functions|,  Next: |Altera_Nios_II_Built_in_Functions|,  Prev: |AArch64_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *Alpha_Built_in_Functions*

6.60.2 Alpha Built-in Functions
-------------------------------

These built-in functions are available for the Alpha family of
processors, depending on the command-line switches used.

 The following built-in functions are always available.  They all
generate the machine instruction that is part of the name.

     long __builtin_alpha_implver (void)
     long __builtin_alpha_rpcc (void)
     long __builtin_alpha_amask (long)
     long __builtin_alpha_cmpbge (long, long)
     long __builtin_alpha_extbl (long, long)
     long __builtin_alpha_extwl (long, long)
     long __builtin_alpha_extll (long, long)
     long __builtin_alpha_extql (long, long)
     long __builtin_alpha_extwh (long, long)
     long __builtin_alpha_extlh (long, long)
     long __builtin_alpha_extqh (long, long)
     long __builtin_alpha_insbl (long, long)
     long __builtin_alpha_inswl (long, long)
     long __builtin_alpha_insll (long, long)
     long __builtin_alpha_insql (long, long)
     long __builtin_alpha_inswh (long, long)
     long __builtin_alpha_inslh (long, long)
     long __builtin_alpha_insqh (long, long)
     long __builtin_alpha_mskbl (long, long)
     long __builtin_alpha_mskwl (long, long)
     long __builtin_alpha_mskll (long, long)
     long __builtin_alpha_mskql (long, long)
     long __builtin_alpha_mskwh (long, long)
     long __builtin_alpha_msklh (long, long)
     long __builtin_alpha_mskqh (long, long)
     long __builtin_alpha_umulh (long, long)
     long __builtin_alpha_zap (long, long)
     long __builtin_alpha_zapnot (long, long)

 The following built-in functions are always with '-mmax' or '-mcpu=CPU'
where CPU is 'pca56' or later.  They all generate the machine
instruction that is part of the name.

     long __builtin_alpha_pklb (long)
     long __builtin_alpha_pkwb (long)
     long __builtin_alpha_unpkbl (long)
     long __builtin_alpha_unpkbw (long)
     long __builtin_alpha_minub8 (long, long)
     long __builtin_alpha_minsb8 (long, long)
     long __builtin_alpha_minuw4 (long, long)
     long __builtin_alpha_minsw4 (long, long)
     long __builtin_alpha_maxub8 (long, long)
     long __builtin_alpha_maxsb8 (long, long)
     long __builtin_alpha_maxuw4 (long, long)
     long __builtin_alpha_maxsw4 (long, long)
     long __builtin_alpha_perr (long, long)

 The following built-in functions are always with '-mcix' or '-mcpu=CPU'
where CPU is 'ev67' or later.  They all generate the machine instruction
that is part of the name.

     long __builtin_alpha_cttz (long)
     long __builtin_alpha_ctlz (long)
     long __builtin_alpha_ctpop (long)

 The following built-in functions are available on systems that use the
OSF/1 PALcode.  Normally they invoke the 'rduniq' and 'wruniq' PAL
calls, but when invoked with '-mtls-kernel', they invoke 'rdval' and
'wrval'.

     void *__builtin_thread_pointer (void)
     void __builtin_set_thread_pointer (void *)

==============================================================================
File: gcc.info,  Node: |Altera_Nios_II_Built_in_Functions|,  Next: |ARC_Built_in_Functions|,  Prev: |Alpha_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Altera_Nios_II_Built_in_Functions*

6.60.3 Altera Nios II Built-in Functions
----------------------------------------

These built-in functions are available for the Altera Nios II family of
processors.

 The following built-in functions are always available.  They all
generate the machine instruction that is part of the name.

     int __builtin_ldbio (volatile const void *)
     int __builtin_ldbuio (volatile const void *)
     int __builtin_ldhio (volatile const void *)
     int __builtin_ldhuio (volatile const void *)
     int __builtin_ldwio (volatile const void *)
     void __builtin_stbio (volatile void *, int)
     void __builtin_sthio (volatile void *, int)
     void __builtin_stwio (volatile void *, int)
     void __builtin_sync (void)
     int __builtin_rdctl (int)
     int __builtin_rdprs (int, int)
     void __builtin_wrctl (int, int)
     void __builtin_flushd (volatile void *)
     void __builtin_flushda (volatile void *)
     int __builtin_wrpie (int);
     void __builtin_eni (int);
     int __builtin_ldex (volatile const void *)
     int __builtin_stex (volatile void *, int)
     int __builtin_ldsex (volatile const void *)
     int __builtin_stsex (volatile void *, int)

 The following built-in functions are always available.  They all
generate a Nios II Custom Instruction.  The name of the function
represents the types that the function takes and returns.  The letter
before the 'n' is the return type or void if absent.  The 'n' represents
the first parameter to all the custom instructions, the custom
instruction number.  The two letters after the 'n' represent the up to
two parameters to the function.

 The letters represent the following data types:
'<no letter>'
     'void' for return type and no parameter for parameter types.

'i'
     'int' for return type and parameter type

'f'
     'float' for return type and parameter type

'p'
     'void *' for return type and parameter type

 And the function names are:
     void __builtin_custom_n (void)
     void __builtin_custom_ni (int)
     void __builtin_custom_nf (float)
     void __builtin_custom_np (void *)
     void __builtin_custom_nii (int, int)
     void __builtin_custom_nif (int, float)
     void __builtin_custom_nip (int, void *)
     void __builtin_custom_nfi (float, int)
     void __builtin_custom_nff (float, float)
     void __builtin_custom_nfp (float, void *)
     void __builtin_custom_npi (void *, int)
     void __builtin_custom_npf (void *, float)
     void __builtin_custom_npp (void *, void *)
     int __builtin_custom_in (void)
     int __builtin_custom_ini (int)
     int __builtin_custom_inf (float)
     int __builtin_custom_inp (void *)
     int __builtin_custom_inii (int, int)
     int __builtin_custom_inif (int, float)
     int __builtin_custom_inip (int, void *)
     int __builtin_custom_infi (float, int)
     int __builtin_custom_inff (float, float)
     int __builtin_custom_infp (float, void *)
     int __builtin_custom_inpi (void *, int)
     int __builtin_custom_inpf (void *, float)
     int __builtin_custom_inpp (void *, void *)
     float __builtin_custom_fn (void)
     float __builtin_custom_fni (int)
     float __builtin_custom_fnf (float)
     float __builtin_custom_fnp (void *)
     float __builtin_custom_fnii (int, int)
     float __builtin_custom_fnif (int, float)
     float __builtin_custom_fnip (int, void *)
     float __builtin_custom_fnfi (float, int)
     float __builtin_custom_fnff (float, float)
     float __builtin_custom_fnfp (float, void *)
     float __builtin_custom_fnpi (void *, int)
     float __builtin_custom_fnpf (void *, float)
     float __builtin_custom_fnpp (void *, void *)
     void * __builtin_custom_pn (void)
     void * __builtin_custom_pni (int)
     void * __builtin_custom_pnf (float)
     void * __builtin_custom_pnp (void *)
     void * __builtin_custom_pnii (int, int)
     void * __builtin_custom_pnif (int, float)
     void * __builtin_custom_pnip (int, void *)
     void * __builtin_custom_pnfi (float, int)
     void * __builtin_custom_pnff (float, float)
     void * __builtin_custom_pnfp (float, void *)
     void * __builtin_custom_pnpi (void *, int)
     void * __builtin_custom_pnpf (void *, float)
     void * __builtin_custom_pnpp (void *, void *)

==============================================================================
File: gcc.info,  Node: |ARC_Built_in_Functions|,  Next: |ARC_SIMD_Built_in_Functions|,  Prev: |Altera_Nios_II_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *ARC_Built_in_Functions*

6.60.4 ARC Built-in Functions
-----------------------------

The following built-in functions are provided for ARC targets.  The
built-ins generate the corresponding assembly instructions.  In the
examples given below, the generated code often requires an operand or
result to be in a register.  Where necessary further code will be
generated to ensure this is true, but for brevity this is not described
in each case.

 _Note:_ Using a built-in to generate an instruction not supported by a
target may cause problems.  At present the compiler is not guaranteed to
detect such misuse, and as a result an internal compiler error may be
generated.

 -- Built-in Function: int __builtin_arc_aligned (void *VAL, int
          ALIGNVAL)
     Return 1 if VAL is known to have the byte alignment given by
     ALIGNVAL, otherwise return 0.  Note that this is different from
          __alignof__(*(char *)VAL) >= alignval
     because __alignof__ sees only the type of the dereference, whereas
     __builtin_arc_align uses alignment information from the pointer as
     well as from the pointed-to type.  The information available will
     depend on optimization level.

 -- Built-in Function: void __builtin_arc_brk (void)
     Generates
          brk

 -- Built-in Function: unsigned int __builtin_arc_core_read (unsigned
          int REGNO)
     The operand is the number of a register to be read.  Generates:
          mov  DEST, rREGNO
     where the value in DEST will be the result returned from the
     built-in.

 -- Built-in Function: void __builtin_arc_core_write (unsigned int
          REGNO, unsigned int VAL)
     The first operand is the number of a register to be written, the
     second operand is a compile time constant to write into that
     register.  Generates:
          mov  rREGNO, VAL

 -- Built-in Function: int __builtin_arc_divaw (int A, int B)
     Only available if either '-mcpu=ARC700' or '-meA' is set.
     Generates:
          divaw  DEST, A, B
     where the value in DEST will be the result returned from the
     built-in.

 -- Built-in Function: void __builtin_arc_flag (unsigned int A)
     Generates
          flag  A

 -- Built-in Function: unsigned int __builtin_arc_lr (unsigned int AUXR)
     The operand, AUXV, is the address of an auxiliary register and must
     be a compile time constant.  Generates:
          lr  DEST, [AUXR]
     Where the value in DEST will be the result returned from the
     built-in.

 -- Built-in Function: void __builtin_arc_mul64 (int A, int B)
     Only available with '-mmul64'.  Generates:
          mul64  A, B

 -- Built-in Function: void __builtin_arc_mulu64 (unsigned int A,
          unsigned int B)
     Only available with '-mmul64'.  Generates:
          mulu64  A, B

 -- Built-in Function: void __builtin_arc_nop (void)
     Generates:
          nop

 -- Built-in Function: int __builtin_arc_norm (int SRC)
     Only valid if the 'norm' instruction is available through the
     '-mnorm' option or by default with '-mcpu=ARC700'.  Generates:
          norm  DEST, SRC
     Where the value in DEST will be the result returned from the
     built-in.

 -- Built-in Function: short int __builtin_arc_normw (short int SRC)
     Only valid if the 'normw' instruction is available through the
     '-mnorm' option or by default with '-mcpu=ARC700'.  Generates:
          normw  DEST, SRC
     Where the value in DEST will be the result returned from the
     built-in.

 -- Built-in Function: void __builtin_arc_rtie (void)
     Generates:
          rtie

 -- Built-in Function: void __builtin_arc_sleep (int A
     Generates:
          sleep  A

 -- Built-in Function: void __builtin_arc_sr (unsigned int AUXR,
          unsigned int VAL)
     The first argument, AUXV, is the address of an auxiliary register,
     the second argument, VAL, is a compile time constant to be written
     to the register.  Generates:
          sr  AUXR, [VAL]

 -- Built-in Function: int __builtin_arc_swap (int SRC)
     Only valid with '-mswap'.  Generates:
          swap  DEST, SRC
     Where the value in DEST will be the result returned from the
     built-in.

 -- Built-in Function: void __builtin_arc_swi (void)
     Generates:
          swi

 -- Built-in Function: void __builtin_arc_sync (void)
     Only available with '-mcpu=ARC700'.  Generates:
          sync

 -- Built-in Function: void __builtin_arc_trap_s (unsigned int C)
     Only available with '-mcpu=ARC700'.  Generates:
          trap_s  C

 -- Built-in Function: void __builtin_arc_unimp_s (void)
     Only available with '-mcpu=ARC700'.  Generates:
          unimp_s

 The instructions generated by the following builtins are not considered
as candidates for scheduling.  They are not moved around by the compiler
during scheduling, and thus can be expected to appear where they are put
in the C code:
     __builtin_arc_brk()
     __builtin_arc_core_read()
     __builtin_arc_core_write()
     __builtin_arc_flag()
     __builtin_arc_lr()
     __builtin_arc_sleep()
     __builtin_arc_sr()
     __builtin_arc_swi()

==============================================================================
File: gcc.info,  Node: |ARC_SIMD_Built_in_Functions|,  Next: |ARM_iWMMXt_Built_in_Functions|,  Prev: |ARC_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *ARC_SIMD_Built_in_Functions*

6.60.5 ARC SIMD Built-in Functions
----------------------------------

SIMD builtins provided by the compiler can be used to generate the
vector instructions.  This section describes the available builtins and
their usage in programs.  With the '-msimd' option, the compiler
provides 128-bit vector types, which can be specified using the
'vector_size' attribute.  The header file 'arc-simd.h' can be included
to use the following predefined types:
     typedef int __v4si   __attribute__((vector_size(16)));
     typedef short __v8hi __attribute__((vector_size(16)));

 These types can be used to define 128-bit variables.  The built-in
functions listed in the following section can be used on these variables
to generate the vector operations.

 For all builtins, '__builtin_arc_SOMEINSN', the header file
'arc-simd.h' also provides equivalent macros called '_SOMEINSN' that can
be used for programming ease and improved readability.  The following
macros for DMA control are also provided:
     #define _setup_dma_in_channel_reg _vdiwr
     #define _setup_dma_out_channel_reg _vdowr

 The following is a complete list of all the SIMD built-ins provided for
ARC, grouped by calling signature.

 The following take two '__v8hi' arguments and return a '__v8hi' result:
     __v8hi __builtin_arc_vaddaw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vaddw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vand (__v8hi, __v8hi)
     __v8hi __builtin_arc_vandaw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vavb (__v8hi, __v8hi)
     __v8hi __builtin_arc_vavrb (__v8hi, __v8hi)
     __v8hi __builtin_arc_vbic (__v8hi, __v8hi)
     __v8hi __builtin_arc_vbicaw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vdifaw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vdifw (__v8hi, __v8hi)
     __v8hi __builtin_arc_veqw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vh264f (__v8hi, __v8hi)
     __v8hi __builtin_arc_vh264ft (__v8hi, __v8hi)
     __v8hi __builtin_arc_vh264fw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vlew (__v8hi, __v8hi)
     __v8hi __builtin_arc_vltw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vmaxaw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vmaxw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vminaw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vminw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vmr1aw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vmr1w (__v8hi, __v8hi)
     __v8hi __builtin_arc_vmr2aw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vmr2w (__v8hi, __v8hi)
     __v8hi __builtin_arc_vmr3aw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vmr3w (__v8hi, __v8hi)
     __v8hi __builtin_arc_vmr4aw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vmr4w (__v8hi, __v8hi)
     __v8hi __builtin_arc_vmr5aw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vmr5w (__v8hi, __v8hi)
     __v8hi __builtin_arc_vmr6aw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vmr6w (__v8hi, __v8hi)
     __v8hi __builtin_arc_vmr7aw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vmr7w (__v8hi, __v8hi)
     __v8hi __builtin_arc_vmrb (__v8hi, __v8hi)
     __v8hi __builtin_arc_vmulaw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vmulfaw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vmulfw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vmulw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vnew (__v8hi, __v8hi)
     __v8hi __builtin_arc_vor (__v8hi, __v8hi)
     __v8hi __builtin_arc_vsubaw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vsubw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vsummw (__v8hi, __v8hi)
     __v8hi __builtin_arc_vvc1f (__v8hi, __v8hi)
     __v8hi __builtin_arc_vvc1ft (__v8hi, __v8hi)
     __v8hi __builtin_arc_vxor (__v8hi, __v8hi)
     __v8hi __builtin_arc_vxoraw (__v8hi, __v8hi)

 The following take one '__v8hi' and one 'int' argument and return a
'__v8hi' result:

     __v8hi __builtin_arc_vbaddw (__v8hi, int)
     __v8hi __builtin_arc_vbmaxw (__v8hi, int)
     __v8hi __builtin_arc_vbminw (__v8hi, int)
     __v8hi __builtin_arc_vbmulaw (__v8hi, int)
     __v8hi __builtin_arc_vbmulfw (__v8hi, int)
     __v8hi __builtin_arc_vbmulw (__v8hi, int)
     __v8hi __builtin_arc_vbrsubw (__v8hi, int)
     __v8hi __builtin_arc_vbsubw (__v8hi, int)

 The following take one '__v8hi' argument and one 'int' argument which
must be a 3-bit compile time constant indicating a register number
I0-I7.  They return a '__v8hi' result.
     __v8hi __builtin_arc_vasrw (__v8hi, const int)
     __v8hi __builtin_arc_vsr8 (__v8hi, const int)
     __v8hi __builtin_arc_vsr8aw (__v8hi, const int)

 The following take one '__v8hi' argument and one 'int' argument which
must be a 6-bit compile time constant.  They return a '__v8hi' result.
     __v8hi __builtin_arc_vasrpwbi (__v8hi, const int)
     __v8hi __builtin_arc_vasrrpwbi (__v8hi, const int)
     __v8hi __builtin_arc_vasrrwi (__v8hi, const int)
     __v8hi __builtin_arc_vasrsrwi (__v8hi, const int)
     __v8hi __builtin_arc_vasrwi (__v8hi, const int)
     __v8hi __builtin_arc_vsr8awi (__v8hi, const int)
     __v8hi __builtin_arc_vsr8i (__v8hi, const int)

 The following take one '__v8hi' argument and one 'int' argument which
must be a 8-bit compile time constant.  They return a '__v8hi' result.
     __v8hi __builtin_arc_vd6tapf (__v8hi, const int)
     __v8hi __builtin_arc_vmvaw (__v8hi, const int)
     __v8hi __builtin_arc_vmvw (__v8hi, const int)
     __v8hi __builtin_arc_vmvzw (__v8hi, const int)

 The following take two 'int' arguments, the second of which which must
be a 8-bit compile time constant.  They return a '__v8hi' result:
     __v8hi __builtin_arc_vmovaw (int, const int)
     __v8hi __builtin_arc_vmovw (int, const int)
     __v8hi __builtin_arc_vmovzw (int, const int)

 The following take a single '__v8hi' argument and return a '__v8hi'
result:
     __v8hi __builtin_arc_vabsaw (__v8hi)
     __v8hi __builtin_arc_vabsw (__v8hi)
     __v8hi __builtin_arc_vaddsuw (__v8hi)
     __v8hi __builtin_arc_vexch1 (__v8hi)
     __v8hi __builtin_arc_vexch2 (__v8hi)
     __v8hi __builtin_arc_vexch4 (__v8hi)
     __v8hi __builtin_arc_vsignw (__v8hi)
     __v8hi __builtin_arc_vupbaw (__v8hi)
     __v8hi __builtin_arc_vupbw (__v8hi)
     __v8hi __builtin_arc_vupsbaw (__v8hi)
     __v8hi __builtin_arc_vupsbw (__v8hi)

 The following take two 'int' arguments and return no result:
     void __builtin_arc_vdirun (int, int)
     void __builtin_arc_vdorun (int, int)

 The following take two 'int' arguments and return no result.  The first
argument must a 3-bit compile time constant indicating one of the
DR0-DR7 DMA setup channels:
     void __builtin_arc_vdiwr (const int, int)
     void __builtin_arc_vdowr (const int, int)

 The following take an 'int' argument and return no result:
     void __builtin_arc_vendrec (int)
     void __builtin_arc_vrec (int)
     void __builtin_arc_vrecrun (int)
     void __builtin_arc_vrun (int)

 The following take a '__v8hi' argument and two 'int' arguments and
return a '__v8hi' result.  The second argument must be a 3-bit compile
time constants, indicating one the registers I0-I7, and the third
argument must be an 8-bit compile time constant.

 _Note:_ Although the equivalent hardware instructions do not take an
SIMD register as an operand, these builtins overwrite the relevant bits
of the '__v8hi' register provided as the first argument with the value
loaded from the '[Ib, u8]' location in the SDM.

     __v8hi __builtin_arc_vld32 (__v8hi, const int, const int)
     __v8hi __builtin_arc_vld32wh (__v8hi, const int, const int)
     __v8hi __builtin_arc_vld32wl (__v8hi, const int, const int)
     __v8hi __builtin_arc_vld64 (__v8hi, const int, const int)

 The following take two 'int' arguments and return a '__v8hi' result.
The first argument must be a 3-bit compile time constants, indicating
one the registers I0-I7, and the second argument must be an 8-bit
compile time constant.

     __v8hi __builtin_arc_vld128 (const int, const int)
     __v8hi __builtin_arc_vld64w (const int, const int)

 The following take a '__v8hi' argument and two 'int' arguments and
return no result.  The second argument must be a 3-bit compile time
constants, indicating one the registers I0-I7, and the third argument
must be an 8-bit compile time constant.

     void __builtin_arc_vst128 (__v8hi, const int, const int)
     void __builtin_arc_vst64 (__v8hi, const int, const int)

 The following take a '__v8hi' argument and three 'int' arguments and
return no result.  The second argument must be a 3-bit compile-time
constant, identifying the 16-bit sub-register to be stored, the third
argument must be a 3-bit compile time constants, indicating one the
registers I0-I7, and the fourth argument must be an 8-bit compile time
constant.

     void __builtin_arc_vst16_n (__v8hi, const int, const int, const int)
     void __builtin_arc_vst32_n (__v8hi, const int, const int, const int)

==============================================================================
File: gcc.info,  Node: |ARM_iWMMXt_Built_in_Functions|,  Next: ARM C Language Extensions (ACLE),  Prev: |ARC_SIMD_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *ARM_iWMMXt_Built_in_Functions*

6.60.6 ARM iWMMXt Built-in Functions
------------------------------------

These built-in functions are available for the ARM family of processors
when the '-mcpu=iwmmxt' switch is used:

     typedef int v2si __attribute__ ((vector_size (8)));
     typedef short v4hi __attribute__ ((vector_size (8)));
     typedef char v8qi __attribute__ ((vector_size (8)));

     int __builtin_arm_getwcgr0 (void)
     void __builtin_arm_setwcgr0 (int)
     int __builtin_arm_getwcgr1 (void)
     void __builtin_arm_setwcgr1 (int)
     int __builtin_arm_getwcgr2 (void)
     void __builtin_arm_setwcgr2 (int)
     int __builtin_arm_getwcgr3 (void)
     void __builtin_arm_setwcgr3 (int)
     int __builtin_arm_textrmsb (v8qi, int)
     int __builtin_arm_textrmsh (v4hi, int)
     int __builtin_arm_textrmsw (v2si, int)
     int __builtin_arm_textrmub (v8qi, int)
     int __builtin_arm_textrmuh (v4hi, int)
     int __builtin_arm_textrmuw (v2si, int)
     v8qi __builtin_arm_tinsrb (v8qi, int, int)
     v4hi __builtin_arm_tinsrh (v4hi, int, int)
     v2si __builtin_arm_tinsrw (v2si, int, int)
     long long __builtin_arm_tmia (long long, int, int)
     long long __builtin_arm_tmiabb (long long, int, int)
     long long __builtin_arm_tmiabt (long long, int, int)
     long long __builtin_arm_tmiaph (long long, int, int)
     long long __builtin_arm_tmiatb (long long, int, int)
     long long __builtin_arm_tmiatt (long long, int, int)
     int __builtin_arm_tmovmskb (v8qi)
     int __builtin_arm_tmovmskh (v4hi)
     int __builtin_arm_tmovmskw (v2si)
     long long __builtin_arm_waccb (v8qi)
     long long __builtin_arm_wacch (v4hi)
     long long __builtin_arm_waccw (v2si)
     v8qi __builtin_arm_waddb (v8qi, v8qi)
     v8qi __builtin_arm_waddbss (v8qi, v8qi)
     v8qi __builtin_arm_waddbus (v8qi, v8qi)
     v4hi __builtin_arm_waddh (v4hi, v4hi)
     v4hi __builtin_arm_waddhss (v4hi, v4hi)
     v4hi __builtin_arm_waddhus (v4hi, v4hi)
     v2si __builtin_arm_waddw (v2si, v2si)
     v2si __builtin_arm_waddwss (v2si, v2si)
     v2si __builtin_arm_waddwus (v2si, v2si)
     v8qi __builtin_arm_walign (v8qi, v8qi, int)
     long long __builtin_arm_wand(long long, long long)
     long long __builtin_arm_wandn (long long, long long)
     v8qi __builtin_arm_wavg2b (v8qi, v8qi)
     v8qi __builtin_arm_wavg2br (v8qi, v8qi)
     v4hi __builtin_arm_wavg2h (v4hi, v4hi)
     v4hi __builtin_arm_wavg2hr (v4hi, v4hi)
     v8qi __builtin_arm_wcmpeqb (v8qi, v8qi)
     v4hi __builtin_arm_wcmpeqh (v4hi, v4hi)
     v2si __builtin_arm_wcmpeqw (v2si, v2si)
     v8qi __builtin_arm_wcmpgtsb (v8qi, v8qi)
     v4hi __builtin_arm_wcmpgtsh (v4hi, v4hi)
     v2si __builtin_arm_wcmpgtsw (v2si, v2si)
     v8qi __builtin_arm_wcmpgtub (v8qi, v8qi)
     v4hi __builtin_arm_wcmpgtuh (v4hi, v4hi)
     v2si __builtin_arm_wcmpgtuw (v2si, v2si)
     long long __builtin_arm_wmacs (long long, v4hi, v4hi)
     long long __builtin_arm_wmacsz (v4hi, v4hi)
     long long __builtin_arm_wmacu (long long, v4hi, v4hi)
     long long __builtin_arm_wmacuz (v4hi, v4hi)
     v4hi __builtin_arm_wmadds (v4hi, v4hi)
     v4hi __builtin_arm_wmaddu (v4hi, v4hi)
     v8qi __builtin_arm_wmaxsb (v8qi, v8qi)
     v4hi __builtin_arm_wmaxsh (v4hi, v4hi)
     v2si __builtin_arm_wmaxsw (v2si, v2si)
     v8qi __builtin_arm_wmaxub (v8qi, v8qi)
     v4hi __builtin_arm_wmaxuh (v4hi, v4hi)
     v2si __builtin_arm_wmaxuw (v2si, v2si)
     v8qi __builtin_arm_wminsb (v8qi, v8qi)
     v4hi __builtin_arm_wminsh (v4hi, v4hi)
     v2si __builtin_arm_wminsw (v2si, v2si)
     v8qi __builtin_arm_wminub (v8qi, v8qi)
     v4hi __builtin_arm_wminuh (v4hi, v4hi)
     v2si __builtin_arm_wminuw (v2si, v2si)
     v4hi __builtin_arm_wmulsm (v4hi, v4hi)
     v4hi __builtin_arm_wmulul (v4hi, v4hi)
     v4hi __builtin_arm_wmulum (v4hi, v4hi)
     long long __builtin_arm_wor (long long, long long)
     v2si __builtin_arm_wpackdss (long long, long long)
     v2si __builtin_arm_wpackdus (long long, long long)
     v8qi __builtin_arm_wpackhss (v4hi, v4hi)
     v8qi __builtin_arm_wpackhus (v4hi, v4hi)
     v4hi __builtin_arm_wpackwss (v2si, v2si)
     v4hi __builtin_arm_wpackwus (v2si, v2si)
     long long __builtin_arm_wrord (long long, long long)
     long long __builtin_arm_wrordi (long long, int)
     v4hi __builtin_arm_wrorh (v4hi, long long)
     v4hi __builtin_arm_wrorhi (v4hi, int)
     v2si __builtin_arm_wrorw (v2si, long long)
     v2si __builtin_arm_wrorwi (v2si, int)
     v2si __builtin_arm_wsadb (v2si, v8qi, v8qi)
     v2si __builtin_arm_wsadbz (v8qi, v8qi)
     v2si __builtin_arm_wsadh (v2si, v4hi, v4hi)
     v2si __builtin_arm_wsadhz (v4hi, v4hi)
     v4hi __builtin_arm_wshufh (v4hi, int)
     long long __builtin_arm_wslld (long long, long long)
     long long __builtin_arm_wslldi (long long, int)
     v4hi __builtin_arm_wsllh (v4hi, long long)
     v4hi __builtin_arm_wsllhi (v4hi, int)
     v2si __builtin_arm_wsllw (v2si, long long)
     v2si __builtin_arm_wsllwi (v2si, int)
     long long __builtin_arm_wsrad (long long, long long)
     long long __builtin_arm_wsradi (long long, int)
     v4hi __builtin_arm_wsrah (v4hi, long long)
     v4hi __builtin_arm_wsrahi (v4hi, int)
     v2si __builtin_arm_wsraw (v2si, long long)
     v2si __builtin_arm_wsrawi (v2si, int)
     long long __builtin_arm_wsrld (long long, long long)
     long long __builtin_arm_wsrldi (long long, int)
     v4hi __builtin_arm_wsrlh (v4hi, long long)
     v4hi __builtin_arm_wsrlhi (v4hi, int)
     v2si __builtin_arm_wsrlw (v2si, long long)
     v2si __builtin_arm_wsrlwi (v2si, int)
     v8qi __builtin_arm_wsubb (v8qi, v8qi)
     v8qi __builtin_arm_wsubbss (v8qi, v8qi)
     v8qi __builtin_arm_wsubbus (v8qi, v8qi)
     v4hi __builtin_arm_wsubh (v4hi, v4hi)
     v4hi __builtin_arm_wsubhss (v4hi, v4hi)
     v4hi __builtin_arm_wsubhus (v4hi, v4hi)
     v2si __builtin_arm_wsubw (v2si, v2si)
     v2si __builtin_arm_wsubwss (v2si, v2si)
     v2si __builtin_arm_wsubwus (v2si, v2si)
     v4hi __builtin_arm_wunpckehsb (v8qi)
     v2si __builtin_arm_wunpckehsh (v4hi)
     long long __builtin_arm_wunpckehsw (v2si)
     v4hi __builtin_arm_wunpckehub (v8qi)
     v2si __builtin_arm_wunpckehuh (v4hi)
     long long __builtin_arm_wunpckehuw (v2si)
     v4hi __builtin_arm_wunpckelsb (v8qi)
     v2si __builtin_arm_wunpckelsh (v4hi)
     long long __builtin_arm_wunpckelsw (v2si)
     v4hi __builtin_arm_wunpckelub (v8qi)
     v2si __builtin_arm_wunpckeluh (v4hi)
     long long __builtin_arm_wunpckeluw (v2si)
     v8qi __builtin_arm_wunpckihb (v8qi, v8qi)
     v4hi __builtin_arm_wunpckihh (v4hi, v4hi)
     v2si __builtin_arm_wunpckihw (v2si, v2si)
     v8qi __builtin_arm_wunpckilb (v8qi, v8qi)
     v4hi __builtin_arm_wunpckilh (v4hi, v4hi)
     v2si __builtin_arm_wunpckilw (v2si, v2si)
     long long __builtin_arm_wxor (long long, long long)
     long long __builtin_arm_wzero ()

==============================================================================
File: gcc.info,  Node: ARM C Language Extensions (ACLE),  Next: |ARM_Floating_Point_Status_and_Control_Intrinsics|,  Prev: |ARM_iWMMXt_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *ARM_C_Language_Extensions_(ACLE)*

6.60.7 ARM C Language Extensions (ACLE)
---------------------------------------

GCC implements extensions for C as described in the ARM C Language
Extensions (ACLE) specification, which can be found at
<http://infocenter.arm.com/help/topic/com.arm.doc.ihi0053c/IHI0053C_acle_2_0.pdf>.

 As a part of ACLE, GCC implements extensions for Advanced SIMD as
described in the ARM C Language Extensions Specification.  The complete
list of Advanced SIMD intrinsics can be found at
<http://infocenter.arm.com/help/topic/com.arm.doc.ihi0073a/IHI0073A_arm_neon_intrinsics_ref.pdf>.
The built-in intrinsics for the Advanced SIMD extension are available
when NEON is enabled.

 Currently, ARM and AArch64 back ends do not support ACLE 2.0 fully.
Both back ends support CRC32 intrinsics and the ARM back end supports
the Coprocessor intrinsics, all from 'arm_acle.h'.  The ARM back end's
16-bit floating-point Advanced SIMD intrinsics currently comply to ACLE
v1.1.  AArch64's back end does not have support for 16-bit floating
point Advanced SIMD intrinsics yet.

 See *note ARM Options:: and *note AArch64 Options:: for more
information on the availability of extensions.

==============================================================================
File: gcc.info,  Node: |ARM_Floating_Point_Status_and_Control_Intrinsics|,  Next: |ARM_ARMv8_M_Security_Extensions|,  Prev: ARM C Language Extensions (ACLE),  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *ARM_Floating_Point_Status_and_Control_Intrinsics*

6.60.8 ARM Floating Point Status and Control Intrinsics
-------------------------------------------------------

These built-in functions are available for the ARM family of processors
with floating-point unit.

     unsigned int __builtin_arm_get_fpscr ()
     void __builtin_arm_set_fpscr (unsigned int)

==============================================================================
File: gcc.info,  Node: |ARM_ARMv8_M_Security_Extensions|,  Next: |AVR_Built_in_Functions|,  Prev: |ARM_Floating_Point_Status_and_Control_Intrinsics|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *ARM_ARMv8_M_Security_Extensions*

6.60.9 ARM ARMv8-M Security Extensions
--------------------------------------

GCC implements the ARMv8-M Security Extensions as described in the
ARMv8-M Security Extensions: Requirements on Development Tools
Engineering Specification, which can be found at
<http://infocenter.arm.com/help/topic/com.arm.doc.ecm0359818/ECM0359818_armv8m_security_extensions_reqs_on_dev_tools_1_0.pdf>.

 As part of the Security Extensions GCC implements two new function
attributes: 'cmse_nonsecure_entry' and 'cmse_nonsecure_call'.

 As part of the Security Extensions GCC implements the intrinsics below.
FPTR is used here to mean any function pointer type.

     cmse_address_info_t cmse_TT (void *)
     cmse_address_info_t cmse_TT_fptr (FPTR)
     cmse_address_info_t cmse_TTT (void *)
     cmse_address_info_t cmse_TTT_fptr (FPTR)
     cmse_address_info_t cmse_TTA (void *)
     cmse_address_info_t cmse_TTA_fptr (FPTR)
     cmse_address_info_t cmse_TTAT (void *)
     cmse_address_info_t cmse_TTAT_fptr (FPTR)
     void * cmse_check_address_range (void *, size_t, int)
     typeof(p) cmse_nsfptr_create (FPTR p)
     intptr_t cmse_is_nsfptr (FPTR)
     int cmse_nonsecure_caller (void)

==============================================================================
File: gcc.info,  Node: |AVR_Built_in_Functions|,  Next: |Blackfin_Built_in_Functions|,  Prev: |ARM_ARMv8_M_Security_Extensions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *AVR_Built_in_Functions*

6.60.10 AVR Built-in Functions
------------------------------

For each built-in function for AVR, there is an equally named, uppercase
built-in macro defined.  That way users can easily query if or if not a
specific built-in is implemented or not.  For example, if
'__builtin_avr_nop' is available the macro '__BUILTIN_AVR_NOP' is
defined to '1' and undefined otherwise.

'void __builtin_avr_nop (void)'
'void __builtin_avr_sei (void)'
'void __builtin_avr_cli (void)'
'void __builtin_avr_sleep (void)'
'void __builtin_avr_wdr (void)'
'unsigned char __builtin_avr_swap (unsigned char)'
'unsigned int __builtin_avr_fmul (unsigned char, unsigned char)'
'int __builtin_avr_fmuls (char, char)'
'int __builtin_avr_fmulsu (char, unsigned char)'
     These built-in functions map to the respective machine instruction,
     i.e. 'nop', 'sei', 'cli', 'sleep', 'wdr', 'swap', 'fmul', 'fmuls'
     resp.  'fmulsu'.  The three 'fmul*' built-ins are implemented as
     library call if no hardware multiplier is available.

'void __builtin_avr_delay_cycles (unsigned long ticks)'
     Delay execution for TICKS cycles.  Note that this built-in does not
     take into account the effect of interrupts that might increase
     delay time.  TICKS must be a compile-time integer constant; delays
     with a variable number of cycles are not supported.

'char __builtin_avr_flash_segment (const __memx void*)'
     This built-in takes a byte address to the 24-bit *note address
     space: AVR Named Address Spaces. '__memx' and returns the number of
     the flash segment (the 64 KiB chunk) where the address points to.
     Counting starts at '0'.  If the address does not point to flash
     memory, return '-1'.

'uint8_t __builtin_avr_insert_bits (uint32_t map, uint8_t bits, uint8_t val)'
     Insert bits from BITS into VAL and return the resulting value.  The
     nibbles of MAP determine how the insertion is performed: Let X be
     the N-th nibble of MAP
       1. If X is '0xf', then the N-th bit of VAL is returned unaltered.

       2. If X is in the range 0...7, then the N-th result bit is set to
          the X-th bit of BITS

       3. If X is in the range 8...'0xe', then the N-th result bit is
          undefined.

     One typical use case for this built-in is adjusting input and
     output values to non-contiguous port layouts.  Some examples:

          // same as val, bits is unused
          __builtin_avr_insert_bits (0xffffffff, bits, val)

          // same as bits, val is unused
          __builtin_avr_insert_bits (0x76543210, bits, val)

          // same as rotating bits by 4
          __builtin_avr_insert_bits (0x32107654, bits, 0)

          // high nibble of result is the high nibble of val
          // low nibble of result is the low nibble of bits
          __builtin_avr_insert_bits (0xffff3210, bits, val)

          // reverse the bit order of bits
          __builtin_avr_insert_bits (0x01234567, bits, 0)

'void __builtin_avr_nops (unsigned count)'
     Insert COUNT 'NOP' instructions.  The number of instructions must
     be a compile-time integer constant.

There are many more AVR-specific built-in functions that are used to
implement the ISO/IEC TR 18037 "Embedded C" fixed-point functions of
section 7.18a.6.  You don't need to use these built-ins directly.
Instead, use the declarations as supplied by the 'stdfix.h' header with
GNU-C99:

     #include <stdfix.h>

     // Re-interpret the bit representation of unsigned 16-bit
     // integer UVAL as Q-format 0.16 value.
     unsigned fract get_bits (uint_ur_t uval)
     {
         return urbits (uval);
     }

==============================================================================
File: gcc.info,  Node: |Blackfin_Built_in_Functions|,  Next: |FR_V_Built_in_Functions|,  Prev: |AVR_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *Blackfin_Built_in_Functions*

6.60.11 Blackfin Built-in Functions
-----------------------------------

Currently, there are two Blackfin-specific built-in functions.  These
are used for generating 'CSYNC' and 'SSYNC' machine insns without using
inline assembly; by using these built-in functions the compiler can
automatically add workarounds for hardware errata involving these
instructions.  These functions are named as follows:

     void __builtin_bfin_csync (void)
     void __builtin_bfin_ssync (void)

==============================================================================
File: gcc.info,  Node: |FR_V_Built_in_Functions|,  Next: |MIPS_DSP_Built_in_Functions|,  Prev: |Blackfin_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           *FR_V_Built_in_Functions*

6.60.12 FR-V Built-in Functions
-------------------------------

GCC provides many FR-V-specific built-in functions.  In general, these
functions are intended to be compatible with those described by 'FR-V
Family, Softune C/C++ Compiler Manual (V6), Fujitsu Semiconductor'.  The
two exceptions are '__MDUNPACKH' and '__MBTOHE', the GCC forms of which
pass 128-bit values by pointer rather than by value.

 Most of the functions are named after specific FR-V instructions.  Such
functions are said to be "directly mapped" and are summarized here in
tabular form.

MENU

* |Argument_Types|::
* |Directly_mapped_Integer_Functions|::
* |Directly_mapped_Media_Functions|::
* |Raw_read/write_Functions|::
* |Other_Built_in_Functions|::

==============================================================================
File: gcc.info,  Node: |Argument_Types|,  Next: |Directly_mapped_Integer_Functions|,  Up: |FR_V_Built_in_Functions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *Argument_Types*

6.60.12.1 Argument Types
------------------------

The arguments to the built-in functions can be divided into three
groups: register numbers, compile-time constants and run-time values.
In order to make this classification clear at a glance, the arguments
and return values are given the following pseudo types:

Pseudo type    Real C type            Constant?   Description
'uh'           'unsigned short'       No          an unsigned halfword
'uw1'          'unsigned int'         No          an unsigned word
'sw1'          'int'                  No          a signed word
'uw2'          'unsigned long long'   No          an unsigned doubleword
'sw2'          'long long'            No          a signed doubleword
'const'        'int'                  Yes         an integer constant
'acc'          'int'                  Yes         an ACC register number
'iacc'         'int'                  Yes         an IACC register number

 These pseudo types are not defined by GCC, they are simply a notational
convenience used in this manual.

 Arguments of type 'uh', 'uw1', 'sw1', 'uw2' and 'sw2' are evaluated at
run time.  They correspond to register operands in the underlying FR-V
instructions.

 'const' arguments represent immediate operands in the underlying FR-V
instructions.  They must be compile-time constants.

 'acc' arguments are evaluated at compile time and specify the number of
an accumulator register.  For example, an 'acc' argument of 2 selects
the ACC2 register.

 'iacc' arguments are similar to 'acc' arguments but specify the number
of an IACC register.  See *note Other Built-in Functions:: for more
details.

==============================================================================
File: gcc.info,  Node: |Directly_mapped_Integer_Functions|,  Next: |Directly_mapped_Media_Functions|,  Prev: |Argument_Types|,  Up: |FR_V_Built_in_Functions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *Directly_mapped_Integer_Functions*

6.60.12.2 Directly-Mapped Integer Functions
-------------------------------------------

The functions listed below map directly to FR-V I-type instructions.

Function prototype               Example usage           Assembly output
'sw1 __ADDSS (sw1, sw1)'         'C = __ADDSS (A, B)'    'ADDSS A,B,C'
'sw1 __SCAN (sw1, sw1)'          'C = __SCAN (A, B)'     'SCAN A,B,C'
'sw1 __SCUTSS (sw1)'             'B = __SCUTSS (A)'      'SCUTSS A,B'
'sw1 __SLASS (sw1, sw1)'         'C = __SLASS (A, B)'    'SLASS A,B,C'
'void __SMASS (sw1, sw1)'        '__SMASS (A, B)'        'SMASS A,B'
'void __SMSSS (sw1, sw1)'        '__SMSSS (A, B)'        'SMSSS A,B'
'void __SMU (sw1, sw1)'          '__SMU (A, B)'          'SMU A,B'
'sw2 __SMUL (sw1, sw1)'          'C = __SMUL (A, B)'     'SMUL A,B,C'
'sw1 __SUBSS (sw1, sw1)'         'C = __SUBSS (A, B)'    'SUBSS A,B,C'
'uw2 __UMUL (uw1, uw1)'          'C = __UMUL (A, B)'     'UMUL A,B,C'

==============================================================================
File: gcc.info,  Node: |Directly_mapped_Media_Functions|,  Next: |Raw_read/write_Functions|,  Prev: |Directly_mapped_Integer_Functions|,  Up: |FR_V_Built_in_Functions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *Directly_mapped_Media_Functions*

6.60.12.3 Directly-Mapped Media Functions
-----------------------------------------

The functions listed below map directly to FR-V M-type instructions.

Function prototype               Example usage           Assembly output
'uw1 __MABSHS (sw1)'             'B = __MABSHS (A)'      'MABSHS A,B'
'void __MADDACCS (acc, acc)'     '__MADDACCS (B, A)'     'MADDACCS A,B'
'sw1 __MADDHSS (sw1, sw1)'       'C = __MADDHSS (A,      'MADDHSS A,B,C'
                                 B)'
'uw1 __MADDHUS (uw1, uw1)'       'C = __MADDHUS (A,      'MADDHUS A,B,C'
                                 B)'
'uw1 __MAND (uw1, uw1)'          'C = __MAND (A, B)'     'MAND A,B,C'
'void __MASACCS (acc, acc)'      '__MASACCS (B, A)'      'MASACCS A,B'
'uw1 __MAVEH (uw1, uw1)'         'C = __MAVEH (A, B)'    'MAVEH A,B,C'
'uw2 __MBTOH (uw1)'              'B = __MBTOH (A)'       'MBTOH A,B'
'void __MBTOHE (uw1 *, uw1)'     '__MBTOHE (&B, A)'      'MBTOHE A,B'
'void __MCLRACC (acc)'           '__MCLRACC (A)'         'MCLRACC A'
'void __MCLRACCA (void)'         '__MCLRACCA ()'         'MCLRACCA'
'uw1 __Mcop1 (uw1, uw1)'         'C = __Mcop1 (A, B)'    'Mcop1 A,B,C'
'uw1 __Mcop2 (uw1, uw1)'         'C = __Mcop2 (A, B)'    'Mcop2 A,B,C'
'uw1 __MCPLHI (uw2, const)'      'C = __MCPLHI (A, B)'   'MCPLHI A,#B,C'
'uw1 __MCPLI (uw2, const)'       'C = __MCPLI (A, B)'    'MCPLI A,#B,C'
'void __MCPXIS (acc, sw1,        '__MCPXIS (C, A, B)'    'MCPXIS A,B,C'
sw1)'
'void __MCPXIU (acc, uw1,        '__MCPXIU (C, A, B)'    'MCPXIU A,B,C'
uw1)'
'void __MCPXRS (acc, sw1,        '__MCPXRS (C, A, B)'    'MCPXRS A,B,C'
sw1)'
'void __MCPXRU (acc, uw1,        '__MCPXRU (C, A, B)'    'MCPXRU A,B,C'
uw1)'
'uw1 __MCUT (acc, uw1)'          'C = __MCUT (A, B)'     'MCUT A,B,C'
'uw1 __MCUTSS (acc, sw1)'        'C = __MCUTSS (A, B)'   'MCUTSS A,B,C'
'void __MDADDACCS (acc, acc)'    '__MDADDACCS (B, A)'    'MDADDACCS A,B'
'void __MDASACCS (acc, acc)'     '__MDASACCS (B, A)'     'MDASACCS A,B'
'uw2 __MDCUTSSI (acc, const)'    'C = __MDCUTSSI (A,     'MDCUTSSI
                                 B)'                     A,#B,C'
'uw2 __MDPACKH (uw2, uw2)'       'C = __MDPACKH (A,      'MDPACKH A,B,C'
                                 B)'
'uw2 __MDROTLI (uw2, const)'     'C = __MDROTLI (A,      'MDROTLI
                                 B)'                     A,#B,C'
'void __MDSUBACCS (acc, acc)'    '__MDSUBACCS (B, A)'    'MDSUBACCS A,B'
'void __MDUNPACKH (uw1 *,        '__MDUNPACKH (&B, A)'   'MDUNPACKH A,B'
uw2)'
'uw2 __MEXPDHD (uw1, const)'     'C = __MEXPDHD (A,      'MEXPDHD
                                 B)'                     A,#B,C'
'uw1 __MEXPDHW (uw1, const)'     'C = __MEXPDHW (A,      'MEXPDHW
                                 B)'                     A,#B,C'
'uw1 __MHDSETH (uw1, const)'     'C = __MHDSETH (A,      'MHDSETH
                                 B)'                     A,#B,C'
'sw1 __MHDSETS (const)'          'B = __MHDSETS (A)'     'MHDSETS #A,B'
'uw1 __MHSETHIH (uw1, const)'    'B = __MHSETHIH (B,     'MHSETHIH #A,B'
                                 A)'
'sw1 __MHSETHIS (sw1, const)'    'B = __MHSETHIS (B,     'MHSETHIS #A,B'
                                 A)'
'uw1 __MHSETLOH (uw1, const)'    'B = __MHSETLOH (B,     'MHSETLOH #A,B'
                                 A)'
'sw1 __MHSETLOS (sw1, const)'    'B = __MHSETLOS (B,     'MHSETLOS #A,B'
                                 A)'
'uw1 __MHTOB (uw2)'              'B = __MHTOB (A)'       'MHTOB A,B'
'void __MMACHS (acc, sw1,        '__MMACHS (C, A, B)'    'MMACHS A,B,C'
sw1)'
'void __MMACHU (acc, uw1,        '__MMACHU (C, A, B)'    'MMACHU A,B,C'
uw1)'
'void __MMRDHS (acc, sw1,        '__MMRDHS (C, A, B)'    'MMRDHS A,B,C'
sw1)'
'void __MMRDHU (acc, uw1,        '__MMRDHU (C, A, B)'    'MMRDHU A,B,C'
uw1)'
'void __MMULHS (acc, sw1,        '__MMULHS (C, A, B)'    'MMULHS A,B,C'
sw1)'
'void __MMULHU (acc, uw1,        '__MMULHU (C, A, B)'    'MMULHU A,B,C'
uw1)'
'void __MMULXHS (acc, sw1,       '__MMULXHS (C, A, B)'   'MMULXHS A,B,C'
sw1)'
'void __MMULXHU (acc, uw1,       '__MMULXHU (C, A, B)'   'MMULXHU A,B,C'
uw1)'
'uw1 __MNOT (uw1)'               'B = __MNOT (A)'        'MNOT A,B'
'uw1 __MOR (uw1, uw1)'           'C = __MOR (A, B)'      'MOR A,B,C'
'uw1 __MPACKH (uh, uh)'          'C = __MPACKH (A, B)'   'MPACKH A,B,C'
'sw2 __MQADDHSS (sw2, sw2)'      'C = __MQADDHSS (A,     'MQADDHSS
                                 B)'                     A,B,C'
'uw2 __MQADDHUS (uw2, uw2)'      'C = __MQADDHUS (A,     'MQADDHUS
                                 B)'                     A,B,C'
'void __MQCPXIS (acc, sw2,       '__MQCPXIS (C, A, B)'   'MQCPXIS A,B,C'
sw2)'
'void __MQCPXIU (acc, uw2,       '__MQCPXIU (C, A, B)'   'MQCPXIU A,B,C'
uw2)'
'void __MQCPXRS (acc, sw2,       '__MQCPXRS (C, A, B)'   'MQCPXRS A,B,C'
sw2)'
'void __MQCPXRU (acc, uw2,       '__MQCPXRU (C, A, B)'   'MQCPXRU A,B,C'
uw2)'
'sw2 __MQLCLRHS (sw2, sw2)'      'C = __MQLCLRHS (A,     'MQLCLRHS
                                 B)'                     A,B,C'
'sw2 __MQLMTHS (sw2, sw2)'       'C = __MQLMTHS (A,      'MQLMTHS A,B,C'
                                 B)'
'void __MQMACHS (acc, sw2,       '__MQMACHS (C, A, B)'   'MQMACHS A,B,C'
sw2)'
'void __MQMACHU (acc, uw2,       '__MQMACHU (C, A, B)'   'MQMACHU A,B,C'
uw2)'
'void __MQMACXHS (acc, sw2,      '__MQMACXHS (C, A,      'MQMACXHS
sw2)'                            B)'                     A,B,C'
'void __MQMULHS (acc, sw2,       '__MQMULHS (C, A, B)'   'MQMULHS A,B,C'
sw2)'
'void __MQMULHU (acc, uw2,       '__MQMULHU (C, A, B)'   'MQMULHU A,B,C'
uw2)'
'void __MQMULXHS (acc, sw2,      '__MQMULXHS (C, A,      'MQMULXHS
sw2)'                            B)'                     A,B,C'
'void __MQMULXHU (acc, uw2,      '__MQMULXHU (C, A,      'MQMULXHU
uw2)'                            B)'                     A,B,C'
'sw2 __MQSATHS (sw2, sw2)'       'C = __MQSATHS (A,      'MQSATHS A,B,C'
                                 B)'
'uw2 __MQSLLHI (uw2, int)'       'C = __MQSLLHI (A,      'MQSLLHI A,B,C'
                                 B)'
'sw2 __MQSRAHI (sw2, int)'       'C = __MQSRAHI (A,      'MQSRAHI A,B,C'
                                 B)'
'sw2 __MQSUBHSS (sw2, sw2)'      'C = __MQSUBHSS (A,     'MQSUBHSS
                                 B)'                     A,B,C'
'uw2 __MQSUBHUS (uw2, uw2)'      'C = __MQSUBHUS (A,     'MQSUBHUS
                                 B)'                     A,B,C'
'void __MQXMACHS (acc, sw2,      '__MQXMACHS (C, A,      'MQXMACHS
sw2)'                            B)'                     A,B,C'
'void __MQXMACXHS (acc, sw2,     '__MQXMACXHS (C, A,     'MQXMACXHS
sw2)'                            B)'                     A,B,C'
'uw1 __MRDACC (acc)'             'B = __MRDACC (A)'      'MRDACC A,B'
'uw1 __MRDACCG (acc)'            'B = __MRDACCG (A)'     'MRDACCG A,B'
'uw1 __MROTLI (uw1, const)'      'C = __MROTLI (A, B)'   'MROTLI A,#B,C'
'uw1 __MROTRI (uw1, const)'      'C = __MROTRI (A, B)'   'MROTRI A,#B,C'
'sw1 __MSATHS (sw1, sw1)'        'C = __MSATHS (A, B)'   'MSATHS A,B,C'
'uw1 __MSATHU (uw1, uw1)'        'C = __MSATHU (A, B)'   'MSATHU A,B,C'
'uw1 __MSLLHI (uw1, const)'      'C = __MSLLHI (A, B)'   'MSLLHI A,#B,C'
'sw1 __MSRAHI (sw1, const)'      'C = __MSRAHI (A, B)'   'MSRAHI A,#B,C'
'uw1 __MSRLHI (uw1, const)'      'C = __MSRLHI (A, B)'   'MSRLHI A,#B,C'
'void __MSUBACCS (acc, acc)'     '__MSUBACCS (B, A)'     'MSUBACCS A,B'
'sw1 __MSUBHSS (sw1, sw1)'       'C = __MSUBHSS (A,      'MSUBHSS A,B,C'
                                 B)'
'uw1 __MSUBHUS (uw1, uw1)'       'C = __MSUBHUS (A,      'MSUBHUS A,B,C'
                                 B)'
'void __MTRAP (void)'            '__MTRAP ()'            'MTRAP'
'uw2 __MUNPACKH (uw1)'           'B = __MUNPACKH (A)'    'MUNPACKH A,B'
'uw1 __MWCUT (uw2, uw1)'         'C = __MWCUT (A, B)'    'MWCUT A,B,C'
'void __MWTACC (acc, uw1)'       '__MWTACC (B, A)'       'MWTACC A,B'
'void __MWTACCG (acc, uw1)'      '__MWTACCG (B, A)'      'MWTACCG A,B'
'uw1 __MXOR (uw1, uw1)'          'C = __MXOR (A, B)'     'MXOR A,B,C'

==============================================================================
File: gcc.info,  Node: |Raw_read/write_Functions|,  Next: |Other_Built_in_Functions|,  Prev: |Directly_mapped_Media_Functions|,  Up: |FR_V_Built_in_Functions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *Raw_read/write_Functions*

6.60.12.4 Raw Read/Write Functions
----------------------------------

This sections describes built-in functions related to read and write
instructions to access memory.  These functions generate 'membar'
instructions to flush the I/O load and stores where appropriate, as
described in Fujitsu's manual described above.

'unsigned char __builtin_read8 (void *DATA)'
'unsigned short __builtin_read16 (void *DATA)'
'unsigned long __builtin_read32 (void *DATA)'
'unsigned long long __builtin_read64 (void *DATA)'

'void __builtin_write8 (void *DATA, unsigned char DATUM)'
'void __builtin_write16 (void *DATA, unsigned short DATUM)'
'void __builtin_write32 (void *DATA, unsigned long DATUM)'
'void __builtin_write64 (void *DATA, unsigned long long DATUM)'

==============================================================================
File: gcc.info,  Node: |Other_Built_in_Functions|,  Prev: |Raw_read/write_Functions|,  Up: |FR_V_Built_in_Functions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *Other_Built_in_Functions*

6.60.12.5 Other Built-in Functions
----------------------------------

This section describes built-in functions that are not named after a
specific FR-V instruction.

'sw2 __IACCreadll (iacc REG)'
     Return the full 64-bit value of IACC0.  The REG argument is
     reserved for future expansion and must be 0.

'sw1 __IACCreadl (iacc REG)'
     Return the value of IACC0H if REG is 0 and IACC0L if REG is 1.
     Other values of REG are rejected as invalid.

'void __IACCsetll (iacc REG, sw2 X)'
     Set the full 64-bit value of IACC0 to X.  The REG argument is
     reserved for future expansion and must be 0.

'void __IACCsetl (iacc REG, sw1 X)'
     Set IACC0H to X if REG is 0 and IACC0L to X if REG is 1.  Other
     values of REG are rejected as invalid.

'void __data_prefetch0 (const void *X)'
     Use the 'dcpl' instruction to load the contents of address X into
     the data cache.

'void __data_prefetch (const void *X)'
     Use the 'nldub' instruction to load the contents of address X into
     the data cache.  The instruction is issued in slot I1.

==============================================================================
File: gcc.info,  Node: |MIPS_DSP_Built_in_Functions|,  Next: |MIPS_Paired_Single_Support|,  Prev: |FR_V_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *MIPS_DSP_Built_in_Functions*

6.60.13 MIPS DSP Built-in Functions
-----------------------------------

The MIPS DSP Application-Specific Extension (ASE) includes new
instructions that are designed to improve the performance of DSP and
media applications.  It provides instructions that operate on packed
8-bit/16-bit integer data, Q7, Q15 and Q31 fractional data.

 GCC supports MIPS DSP operations using both the generic vector
extensions (*note Vector Extensions::) and a collection of MIPS-specific
built-in functions.  Both kinds of support are enabled by the '-mdsp'
command-line option.

 Revision 2 of the ASE was introduced in the second half of 2006.  This
revision adds extra instructions to the original ASE, but is otherwise
backwards-compatible with it.  You can select revision 2 using the
command-line option '-mdspr2'; this option implies '-mdsp'.

 The SCOUNT and POS bits of the DSP control register are global.  The
WRDSP, EXTPDP, EXTPDPV and MTHLIP instructions modify the SCOUNT and POS
bits.  During optimization, the compiler does not delete these
instructions and it does not delete calls to functions containing these
instructions.

 At present, GCC only provides support for operations on 32-bit vectors.
The vector type associated with 8-bit integer data is usually called
'v4i8', the vector type associated with Q7 is usually called 'v4q7', the
vector type associated with 16-bit integer data is usually called
'v2i16', and the vector type associated with Q15 is usually called
'v2q15'.  They can be defined in C as follows:

     typedef signed char v4i8 __attribute__ ((vector_size(4)));
     typedef signed char v4q7 __attribute__ ((vector_size(4)));
     typedef short v2i16 __attribute__ ((vector_size(4)));
     typedef short v2q15 __attribute__ ((vector_size(4)));

 'v4i8', 'v4q7', 'v2i16' and 'v2q15' values are initialized in the same
way as aggregates.  For example:

     v4i8 a = {1, 2, 3, 4};
     v4i8 b;
     b = (v4i8) {5, 6, 7, 8};

     v2q15 c = {0x0fcb, 0x3a75};
     v2q15 d;
     d = (v2q15) {0.1234 * 0x1.0p15, 0.4567 * 0x1.0p15};

 _Note:_ The CPU's endianness determines the order in which values are
packed.  On little-endian targets, the first value is the least
significant and the last value is the most significant.  The opposite
order applies to big-endian targets.  For example, the code above sets
the lowest byte of 'a' to '1' on little-endian targets and '4' on
big-endian targets.

 _Note:_ Q7, Q15 and Q31 values must be initialized with their integer
representation.  As shown in this example, the integer representation of
a Q7 value can be obtained by multiplying the fractional value by
'0x1.0p7'.  The equivalent for Q15 values is to multiply by '0x1.0p15'.
The equivalent for Q31 values is to multiply by '0x1.0p31'.

 The table below lists the 'v4i8' and 'v2q15' operations for which
hardware support exists.  'a' and 'b' are 'v4i8' values, and 'c' and 'd'
are 'v2q15' values.

C code                               MIPS instruction
'a + b'                              'addu.qb'
'c + d'                              'addq.ph'
'a - b'                              'subu.qb'
'c - d'                              'subq.ph'

 The table below lists the 'v2i16' operation for which hardware support
exists for the DSP ASE REV 2.  'e' and 'f' are 'v2i16' values.

C code                               MIPS instruction
'e * f'                              'mul.ph'

 It is easier to describe the DSP built-in functions if we first define
the following types:

     typedef int q31;
     typedef int i32;
     typedef unsigned int ui32;
     typedef long long a64;

 'q31' and 'i32' are actually the same as 'int', but we use 'q31' to
indicate a Q31 fractional value and 'i32' to indicate a 32-bit integer
value.  Similarly, 'a64' is the same as 'long long', but we use 'a64' to
indicate values that are placed in one of the four DSP accumulators
('$ac0', '$ac1', '$ac2' or '$ac3').

 Also, some built-in functions prefer or require immediate numbers as
parameters, because the corresponding DSP instructions accept both
immediate numbers and register operands, or accept immediate numbers
only.  The immediate parameters are listed as follows.

     imm0_3: 0 to 3.
     imm0_7: 0 to 7.
     imm0_15: 0 to 15.
     imm0_31: 0 to 31.
     imm0_63: 0 to 63.
     imm0_255: 0 to 255.
     imm_n32_31: -32 to 31.
     imm_n512_511: -512 to 511.

 The following built-in functions map directly to a particular MIPS DSP
instruction.  Please refer to the architecture specification for details
on what each instruction does.

     v2q15 __builtin_mips_addq_ph (v2q15, v2q15)
     v2q15 __builtin_mips_addq_s_ph (v2q15, v2q15)
     q31 __builtin_mips_addq_s_w (q31, q31)
     v4i8 __builtin_mips_addu_qb (v4i8, v4i8)
     v4i8 __builtin_mips_addu_s_qb (v4i8, v4i8)
     v2q15 __builtin_mips_subq_ph (v2q15, v2q15)
     v2q15 __builtin_mips_subq_s_ph (v2q15, v2q15)
     q31 __builtin_mips_subq_s_w (q31, q31)
     v4i8 __builtin_mips_subu_qb (v4i8, v4i8)
     v4i8 __builtin_mips_subu_s_qb (v4i8, v4i8)
     i32 __builtin_mips_addsc (i32, i32)
     i32 __builtin_mips_addwc (i32, i32)
     i32 __builtin_mips_modsub (i32, i32)
     i32 __builtin_mips_raddu_w_qb (v4i8)
     v2q15 __builtin_mips_absq_s_ph (v2q15)
     q31 __builtin_mips_absq_s_w (q31)
     v4i8 __builtin_mips_precrq_qb_ph (v2q15, v2q15)
     v2q15 __builtin_mips_precrq_ph_w (q31, q31)
     v2q15 __builtin_mips_precrq_rs_ph_w (q31, q31)
     v4i8 __builtin_mips_precrqu_s_qb_ph (v2q15, v2q15)
     q31 __builtin_mips_preceq_w_phl (v2q15)
     q31 __builtin_mips_preceq_w_phr (v2q15)
     v2q15 __builtin_mips_precequ_ph_qbl (v4i8)
     v2q15 __builtin_mips_precequ_ph_qbr (v4i8)
     v2q15 __builtin_mips_precequ_ph_qbla (v4i8)
     v2q15 __builtin_mips_precequ_ph_qbra (v4i8)
     v2q15 __builtin_mips_preceu_ph_qbl (v4i8)
     v2q15 __builtin_mips_preceu_ph_qbr (v4i8)
     v2q15 __builtin_mips_preceu_ph_qbla (v4i8)
     v2q15 __builtin_mips_preceu_ph_qbra (v4i8)
     v4i8 __builtin_mips_shll_qb (v4i8, imm0_7)
     v4i8 __builtin_mips_shll_qb (v4i8, i32)
     v2q15 __builtin_mips_shll_ph (v2q15, imm0_15)
     v2q15 __builtin_mips_shll_ph (v2q15, i32)
     v2q15 __builtin_mips_shll_s_ph (v2q15, imm0_15)
     v2q15 __builtin_mips_shll_s_ph (v2q15, i32)
     q31 __builtin_mips_shll_s_w (q31, imm0_31)
     q31 __builtin_mips_shll_s_w (q31, i32)
     v4i8 __builtin_mips_shrl_qb (v4i8, imm0_7)
     v4i8 __builtin_mips_shrl_qb (v4i8, i32)
     v2q15 __builtin_mips_shra_ph (v2q15, imm0_15)
     v2q15 __builtin_mips_shra_ph (v2q15, i32)
     v2q15 __builtin_mips_shra_r_ph (v2q15, imm0_15)
     v2q15 __builtin_mips_shra_r_ph (v2q15, i32)
     q31 __builtin_mips_shra_r_w (q31, imm0_31)
     q31 __builtin_mips_shra_r_w (q31, i32)
     v2q15 __builtin_mips_muleu_s_ph_qbl (v4i8, v2q15)
     v2q15 __builtin_mips_muleu_s_ph_qbr (v4i8, v2q15)
     v2q15 __builtin_mips_mulq_rs_ph (v2q15, v2q15)
     q31 __builtin_mips_muleq_s_w_phl (v2q15, v2q15)
     q31 __builtin_mips_muleq_s_w_phr (v2q15, v2q15)
     a64 __builtin_mips_dpau_h_qbl (a64, v4i8, v4i8)
     a64 __builtin_mips_dpau_h_qbr (a64, v4i8, v4i8)
     a64 __builtin_mips_dpsu_h_qbl (a64, v4i8, v4i8)
     a64 __builtin_mips_dpsu_h_qbr (a64, v4i8, v4i8)
     a64 __builtin_mips_dpaq_s_w_ph (a64, v2q15, v2q15)
     a64 __builtin_mips_dpaq_sa_l_w (a64, q31, q31)
     a64 __builtin_mips_dpsq_s_w_ph (a64, v2q15, v2q15)
     a64 __builtin_mips_dpsq_sa_l_w (a64, q31, q31)
     a64 __builtin_mips_mulsaq_s_w_ph (a64, v2q15, v2q15)
     a64 __builtin_mips_maq_s_w_phl (a64, v2q15, v2q15)
     a64 __builtin_mips_maq_s_w_phr (a64, v2q15, v2q15)
     a64 __builtin_mips_maq_sa_w_phl (a64, v2q15, v2q15)
     a64 __builtin_mips_maq_sa_w_phr (a64, v2q15, v2q15)
     i32 __builtin_mips_bitrev (i32)
     i32 __builtin_mips_insv (i32, i32)
     v4i8 __builtin_mips_repl_qb (imm0_255)
     v4i8 __builtin_mips_repl_qb (i32)
     v2q15 __builtin_mips_repl_ph (imm_n512_511)
     v2q15 __builtin_mips_repl_ph (i32)
     void __builtin_mips_cmpu_eq_qb (v4i8, v4i8)
     void __builtin_mips_cmpu_lt_qb (v4i8, v4i8)
     void __builtin_mips_cmpu_le_qb (v4i8, v4i8)
     i32 __builtin_mips_cmpgu_eq_qb (v4i8, v4i8)
     i32 __builtin_mips_cmpgu_lt_qb (v4i8, v4i8)
     i32 __builtin_mips_cmpgu_le_qb (v4i8, v4i8)
     void __builtin_mips_cmp_eq_ph (v2q15, v2q15)
     void __builtin_mips_cmp_lt_ph (v2q15, v2q15)
     void __builtin_mips_cmp_le_ph (v2q15, v2q15)
     v4i8 __builtin_mips_pick_qb (v4i8, v4i8)
     v2q15 __builtin_mips_pick_ph (v2q15, v2q15)
     v2q15 __builtin_mips_packrl_ph (v2q15, v2q15)
     i32 __builtin_mips_extr_w (a64, imm0_31)
     i32 __builtin_mips_extr_w (a64, i32)
     i32 __builtin_mips_extr_r_w (a64, imm0_31)
     i32 __builtin_mips_extr_s_h (a64, i32)
     i32 __builtin_mips_extr_rs_w (a64, imm0_31)
     i32 __builtin_mips_extr_rs_w (a64, i32)
     i32 __builtin_mips_extr_s_h (a64, imm0_31)
     i32 __builtin_mips_extr_r_w (a64, i32)
     i32 __builtin_mips_extp (a64, imm0_31)
     i32 __builtin_mips_extp (a64, i32)
     i32 __builtin_mips_extpdp (a64, imm0_31)
     i32 __builtin_mips_extpdp (a64, i32)
     a64 __builtin_mips_shilo (a64, imm_n32_31)
     a64 __builtin_mips_shilo (a64, i32)
     a64 __builtin_mips_mthlip (a64, i32)
     void __builtin_mips_wrdsp (i32, imm0_63)
     i32 __builtin_mips_rddsp (imm0_63)
     i32 __builtin_mips_lbux (void *, i32)
     i32 __builtin_mips_lhx (void *, i32)
     i32 __builtin_mips_lwx (void *, i32)
     a64 __builtin_mips_ldx (void *, i32) [MIPS64 only]
     i32 __builtin_mips_bposge32 (void)
     a64 __builtin_mips_madd (a64, i32, i32);
     a64 __builtin_mips_maddu (a64, ui32, ui32);
     a64 __builtin_mips_msub (a64, i32, i32);
     a64 __builtin_mips_msubu (a64, ui32, ui32);
     a64 __builtin_mips_mult (i32, i32);
     a64 __builtin_mips_multu (ui32, ui32);

 The following built-in functions map directly to a particular MIPS DSP
REV 2 instruction.  Please refer to the architecture specification for
details on what each instruction does.

     v4q7 __builtin_mips_absq_s_qb (v4q7);
     v2i16 __builtin_mips_addu_ph (v2i16, v2i16);
     v2i16 __builtin_mips_addu_s_ph (v2i16, v2i16);
     v4i8 __builtin_mips_adduh_qb (v4i8, v4i8);
     v4i8 __builtin_mips_adduh_r_qb (v4i8, v4i8);
     i32 __builtin_mips_append (i32, i32, imm0_31);
     i32 __builtin_mips_balign (i32, i32, imm0_3);
     i32 __builtin_mips_cmpgdu_eq_qb (v4i8, v4i8);
     i32 __builtin_mips_cmpgdu_lt_qb (v4i8, v4i8);
     i32 __builtin_mips_cmpgdu_le_qb (v4i8, v4i8);
     a64 __builtin_mips_dpa_w_ph (a64, v2i16, v2i16);
     a64 __builtin_mips_dps_w_ph (a64, v2i16, v2i16);
     v2i16 __builtin_mips_mul_ph (v2i16, v2i16);
     v2i16 __builtin_mips_mul_s_ph (v2i16, v2i16);
     q31 __builtin_mips_mulq_rs_w (q31, q31);
     v2q15 __builtin_mips_mulq_s_ph (v2q15, v2q15);
     q31 __builtin_mips_mulq_s_w (q31, q31);
     a64 __builtin_mips_mulsa_w_ph (a64, v2i16, v2i16);
     v4i8 __builtin_mips_precr_qb_ph (v2i16, v2i16);
     v2i16 __builtin_mips_precr_sra_ph_w (i32, i32, imm0_31);
     v2i16 __builtin_mips_precr_sra_r_ph_w (i32, i32, imm0_31);
     i32 __builtin_mips_prepend (i32, i32, imm0_31);
     v4i8 __builtin_mips_shra_qb (v4i8, imm0_7);
     v4i8 __builtin_mips_shra_r_qb (v4i8, imm0_7);
     v4i8 __builtin_mips_shra_qb (v4i8, i32);
     v4i8 __builtin_mips_shra_r_qb (v4i8, i32);
     v2i16 __builtin_mips_shrl_ph (v2i16, imm0_15);
     v2i16 __builtin_mips_shrl_ph (v2i16, i32);
     v2i16 __builtin_mips_subu_ph (v2i16, v2i16);
     v2i16 __builtin_mips_subu_s_ph (v2i16, v2i16);
     v4i8 __builtin_mips_subuh_qb (v4i8, v4i8);
     v4i8 __builtin_mips_subuh_r_qb (v4i8, v4i8);
     v2q15 __builtin_mips_addqh_ph (v2q15, v2q15);
     v2q15 __builtin_mips_addqh_r_ph (v2q15, v2q15);
     q31 __builtin_mips_addqh_w (q31, q31);
     q31 __builtin_mips_addqh_r_w (q31, q31);
     v2q15 __builtin_mips_subqh_ph (v2q15, v2q15);
     v2q15 __builtin_mips_subqh_r_ph (v2q15, v2q15);
     q31 __builtin_mips_subqh_w (q31, q31);
     q31 __builtin_mips_subqh_r_w (q31, q31);
     a64 __builtin_mips_dpax_w_ph (a64, v2i16, v2i16);
     a64 __builtin_mips_dpsx_w_ph (a64, v2i16, v2i16);
     a64 __builtin_mips_dpaqx_s_w_ph (a64, v2q15, v2q15);
     a64 __builtin_mips_dpaqx_sa_w_ph (a64, v2q15, v2q15);
     a64 __builtin_mips_dpsqx_s_w_ph (a64, v2q15, v2q15);
     a64 __builtin_mips_dpsqx_sa_w_ph (a64, v2q15, v2q15);

==============================================================================
File: gcc.info,  Node: |MIPS_Paired_Single_Support|,  Next: |MIPS_Loongson_Built_in_Functions|,  Prev: |MIPS_DSP_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *MIPS_Paired_Single_Support*

6.60.14 MIPS Paired-Single Support
----------------------------------

The MIPS64 architecture includes a number of instructions that operate
on pairs of single-precision floating-point values.  Each pair is packed
into a 64-bit floating-point register, with one element being designated
the "upper half" and the other being designated the "lower half".

 GCC supports paired-single operations using both the generic vector
extensions (*note Vector Extensions::) and a collection of MIPS-specific
built-in functions.  Both kinds of support are enabled by the
'-mpaired-single' command-line option.

 The vector type associated with paired-single values is usually called
'v2sf'.  It can be defined in C as follows:

     typedef float v2sf __attribute__ ((vector_size (8)));

 'v2sf' values are initialized in the same way as aggregates.  For
example:

     v2sf a = {1.5, 9.1};
     v2sf b;
     float e, f;
     b = (v2sf) {e, f};

 _Note:_ The CPU's endianness determines which value is stored in the
upper half of a register and which value is stored in the lower half.
On little-endian targets, the first value is the lower one and the
second value is the upper one.  The opposite order applies to big-endian
targets.  For example, the code above sets the lower half of 'a' to
'1.5' on little-endian targets and '9.1' on big-endian targets.

==============================================================================
File: gcc.info,  Node: |MIPS_Loongson_Built_in_Functions|,  Next: MIPS SIMD Architecture (MSA) Support,  Prev: |MIPS_Paired_Single_Support|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *MIPS_Loongson_Built_in_Functions*

6.60.15 MIPS Loongson Built-in Functions
----------------------------------------

GCC provides intrinsics to access the SIMD instructions provided by the
ST Microelectronics Loongson-2E and -2F processors.  These intrinsics,
available after inclusion of the 'loongson.h' header file, operate on
the following 64-bit vector types:

   * 'uint8x8_t', a vector of eight unsigned 8-bit integers;
   * 'uint16x4_t', a vector of four unsigned 16-bit integers;
   * 'uint32x2_t', a vector of two unsigned 32-bit integers;
   * 'int8x8_t', a vector of eight signed 8-bit integers;
   * 'int16x4_t', a vector of four signed 16-bit integers;
   * 'int32x2_t', a vector of two signed 32-bit integers.

 The intrinsics provided are listed below; each is named after the
machine instruction to which it corresponds, with suffixes added as
appropriate to distinguish intrinsics that expand to the same machine
instruction yet have different argument types.  Refer to the
architecture documentation for a description of the functionality of
each instruction.

     int16x4_t packsswh (int32x2_t s, int32x2_t t);
     int8x8_t packsshb (int16x4_t s, int16x4_t t);
     uint8x8_t packushb (uint16x4_t s, uint16x4_t t);
     uint32x2_t paddw_u (uint32x2_t s, uint32x2_t t);
     uint16x4_t paddh_u (uint16x4_t s, uint16x4_t t);
     uint8x8_t paddb_u (uint8x8_t s, uint8x8_t t);
     int32x2_t paddw_s (int32x2_t s, int32x2_t t);
     int16x4_t paddh_s (int16x4_t s, int16x4_t t);
     int8x8_t paddb_s (int8x8_t s, int8x8_t t);
     uint64_t paddd_u (uint64_t s, uint64_t t);
     int64_t paddd_s (int64_t s, int64_t t);
     int16x4_t paddsh (int16x4_t s, int16x4_t t);
     int8x8_t paddsb (int8x8_t s, int8x8_t t);
     uint16x4_t paddush (uint16x4_t s, uint16x4_t t);
     uint8x8_t paddusb (uint8x8_t s, uint8x8_t t);
     uint64_t pandn_ud (uint64_t s, uint64_t t);
     uint32x2_t pandn_uw (uint32x2_t s, uint32x2_t t);
     uint16x4_t pandn_uh (uint16x4_t s, uint16x4_t t);
     uint8x8_t pandn_ub (uint8x8_t s, uint8x8_t t);
     int64_t pandn_sd (int64_t s, int64_t t);
     int32x2_t pandn_sw (int32x2_t s, int32x2_t t);
     int16x4_t pandn_sh (int16x4_t s, int16x4_t t);
     int8x8_t pandn_sb (int8x8_t s, int8x8_t t);
     uint16x4_t pavgh (uint16x4_t s, uint16x4_t t);
     uint8x8_t pavgb (uint8x8_t s, uint8x8_t t);
     uint32x2_t pcmpeqw_u (uint32x2_t s, uint32x2_t t);
     uint16x4_t pcmpeqh_u (uint16x4_t s, uint16x4_t t);
     uint8x8_t pcmpeqb_u (uint8x8_t s, uint8x8_t t);
     int32x2_t pcmpeqw_s (int32x2_t s, int32x2_t t);
     int16x4_t pcmpeqh_s (int16x4_t s, int16x4_t t);
     int8x8_t pcmpeqb_s (int8x8_t s, int8x8_t t);
     uint32x2_t pcmpgtw_u (uint32x2_t s, uint32x2_t t);
     uint16x4_t pcmpgth_u (uint16x4_t s, uint16x4_t t);
     uint8x8_t pcmpgtb_u (uint8x8_t s, uint8x8_t t);
     int32x2_t pcmpgtw_s (int32x2_t s, int32x2_t t);
     int16x4_t pcmpgth_s (int16x4_t s, int16x4_t t);
     int8x8_t pcmpgtb_s (int8x8_t s, int8x8_t t);
     uint16x4_t pextrh_u (uint16x4_t s, int field);
     int16x4_t pextrh_s (int16x4_t s, int field);
     uint16x4_t pinsrh_0_u (uint16x4_t s, uint16x4_t t);
     uint16x4_t pinsrh_1_u (uint16x4_t s, uint16x4_t t);
     uint16x4_t pinsrh_2_u (uint16x4_t s, uint16x4_t t);
     uint16x4_t pinsrh_3_u (uint16x4_t s, uint16x4_t t);
     int16x4_t pinsrh_0_s (int16x4_t s, int16x4_t t);
     int16x4_t pinsrh_1_s (int16x4_t s, int16x4_t t);
     int16x4_t pinsrh_2_s (int16x4_t s, int16x4_t t);
     int16x4_t pinsrh_3_s (int16x4_t s, int16x4_t t);
     int32x2_t pmaddhw (int16x4_t s, int16x4_t t);
     int16x4_t pmaxsh (int16x4_t s, int16x4_t t);
     uint8x8_t pmaxub (uint8x8_t s, uint8x8_t t);
     int16x4_t pminsh (int16x4_t s, int16x4_t t);
     uint8x8_t pminub (uint8x8_t s, uint8x8_t t);
     uint8x8_t pmovmskb_u (uint8x8_t s);
     int8x8_t pmovmskb_s (int8x8_t s);
     uint16x4_t pmulhuh (uint16x4_t s, uint16x4_t t);
     int16x4_t pmulhh (int16x4_t s, int16x4_t t);
     int16x4_t pmullh (int16x4_t s, int16x4_t t);
     int64_t pmuluw (uint32x2_t s, uint32x2_t t);
     uint8x8_t pasubub (uint8x8_t s, uint8x8_t t);
     uint16x4_t biadd (uint8x8_t s);
     uint16x4_t psadbh (uint8x8_t s, uint8x8_t t);
     uint16x4_t pshufh_u (uint16x4_t dest, uint16x4_t s, uint8_t order);
     int16x4_t pshufh_s (int16x4_t dest, int16x4_t s, uint8_t order);
     uint16x4_t psllh_u (uint16x4_t s, uint8_t amount);
     int16x4_t psllh_s (int16x4_t s, uint8_t amount);
     uint32x2_t psllw_u (uint32x2_t s, uint8_t amount);
     int32x2_t psllw_s (int32x2_t s, uint8_t amount);
     uint16x4_t psrlh_u (uint16x4_t s, uint8_t amount);
     int16x4_t psrlh_s (int16x4_t s, uint8_t amount);
     uint32x2_t psrlw_u (uint32x2_t s, uint8_t amount);
     int32x2_t psrlw_s (int32x2_t s, uint8_t amount);
     uint16x4_t psrah_u (uint16x4_t s, uint8_t amount);
     int16x4_t psrah_s (int16x4_t s, uint8_t amount);
     uint32x2_t psraw_u (uint32x2_t s, uint8_t amount);
     int32x2_t psraw_s (int32x2_t s, uint8_t amount);
     uint32x2_t psubw_u (uint32x2_t s, uint32x2_t t);
     uint16x4_t psubh_u (uint16x4_t s, uint16x4_t t);
     uint8x8_t psubb_u (uint8x8_t s, uint8x8_t t);
     int32x2_t psubw_s (int32x2_t s, int32x2_t t);
     int16x4_t psubh_s (int16x4_t s, int16x4_t t);
     int8x8_t psubb_s (int8x8_t s, int8x8_t t);
     uint64_t psubd_u (uint64_t s, uint64_t t);
     int64_t psubd_s (int64_t s, int64_t t);
     int16x4_t psubsh (int16x4_t s, int16x4_t t);
     int8x8_t psubsb (int8x8_t s, int8x8_t t);
     uint16x4_t psubush (uint16x4_t s, uint16x4_t t);
     uint8x8_t psubusb (uint8x8_t s, uint8x8_t t);
     uint32x2_t punpckhwd_u (uint32x2_t s, uint32x2_t t);
     uint16x4_t punpckhhw_u (uint16x4_t s, uint16x4_t t);
     uint8x8_t punpckhbh_u (uint8x8_t s, uint8x8_t t);
     int32x2_t punpckhwd_s (int32x2_t s, int32x2_t t);
     int16x4_t punpckhhw_s (int16x4_t s, int16x4_t t);
     int8x8_t punpckhbh_s (int8x8_t s, int8x8_t t);
     uint32x2_t punpcklwd_u (uint32x2_t s, uint32x2_t t);
     uint16x4_t punpcklhw_u (uint16x4_t s, uint16x4_t t);
     uint8x8_t punpcklbh_u (uint8x8_t s, uint8x8_t t);
     int32x2_t punpcklwd_s (int32x2_t s, int32x2_t t);
     int16x4_t punpcklhw_s (int16x4_t s, int16x4_t t);
     int8x8_t punpcklbh_s (int8x8_t s, int8x8_t t);

MENU

* |Paired_Single_Arithmetic|::
* |Paired_Single_Built_in_Functions|::
* |MIPS_3D_Built_in_Functions|::

==============================================================================
File: gcc.info,  Node: |Paired_Single_Arithmetic|,  Next: |Paired_Single_Built_in_Functions|,  Up: |MIPS_Loongson_Built_in_Functions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *Paired_Single_Arithmetic*

6.60.15.1 Paired-Single Arithmetic
----------------------------------

The table below lists the 'v2sf' operations for which hardware support
exists.  'a', 'b' and 'c' are 'v2sf' values and 'x' is an integral
value.

C code                               MIPS instruction
'a + b'                              'add.ps'
'a - b'                              'sub.ps'
'-a'                                 'neg.ps'
'a * b'                              'mul.ps'
'a * b + c'                          'madd.ps'
'a * b - c'                          'msub.ps'
'-(a * b + c)'                       'nmadd.ps'
'-(a * b - c)'                       'nmsub.ps'
'x ? a : b'                          'movn.ps'/'movz.ps'

 Note that the multiply-accumulate instructions can be disabled using
the command-line option '-mno-fused-madd'.

==============================================================================
File: gcc.info,  Node: |Paired_Single_Built_in_Functions|,  Next: |MIPS_3D_Built_in_Functions|,  Prev: |Paired_Single_Arithmetic|,  Up: |MIPS_Loongson_Built_in_Functions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Paired_Single_Built_in_Functions*

6.60.15.2 Paired-Single Built-in Functions
------------------------------------------

The following paired-single functions map directly to a particular MIPS
instruction.  Please refer to the architecture specification for details
on what each instruction does.

'v2sf __builtin_mips_pll_ps (v2sf, v2sf)'
     Pair lower lower ('pll.ps').

'v2sf __builtin_mips_pul_ps (v2sf, v2sf)'
     Pair upper lower ('pul.ps').

'v2sf __builtin_mips_plu_ps (v2sf, v2sf)'
     Pair lower upper ('plu.ps').

'v2sf __builtin_mips_puu_ps (v2sf, v2sf)'
     Pair upper upper ('puu.ps').

'v2sf __builtin_mips_cvt_ps_s (float, float)'
     Convert pair to paired single ('cvt.ps.s').

'float __builtin_mips_cvt_s_pl (v2sf)'
     Convert pair lower to single ('cvt.s.pl').

'float __builtin_mips_cvt_s_pu (v2sf)'
     Convert pair upper to single ('cvt.s.pu').

'v2sf __builtin_mips_abs_ps (v2sf)'
     Absolute value ('abs.ps').

'v2sf __builtin_mips_alnv_ps (v2sf, v2sf, int)'
     Align variable ('alnv.ps').

     _Note:_ The value of the third parameter must be 0 or 4 modulo 8,
     otherwise the result is unpredictable.  Please read the instruction
     description for details.

 The following multi-instruction functions are also available.  In each
case, COND can be any of the 16 floating-point conditions: 'f', 'un',
'eq', 'ueq', 'olt', 'ult', 'ole', 'ule', 'sf', 'ngle', 'seq', 'ngl',
'lt', 'nge', 'le' or 'ngt'.

'v2sf __builtin_mips_movt_c_COND_ps (v2sf A, v2sf B, v2sf C, v2sf D)'
'v2sf __builtin_mips_movf_c_COND_ps (v2sf A, v2sf B, v2sf C, v2sf D)'
     Conditional move based on floating-point comparison ('c.COND.ps',
     'movt.ps'/'movf.ps').

     The 'movt' functions return the value X computed by:

          c.COND.ps CC,A,B
          mov.ps X,C
          movt.ps X,D,CC

     The 'movf' functions are similar but use 'movf.ps' instead of
     'movt.ps'.

'int __builtin_mips_upper_c_COND_ps (v2sf A, v2sf B)'
'int __builtin_mips_lower_c_COND_ps (v2sf A, v2sf B)'
     Comparison of two paired-single values ('c.COND.ps',
     'bc1t'/'bc1f').

     These functions compare A and B using 'c.COND.ps' and return either
     the upper or lower half of the result.  For example:

          v2sf a, b;
          if (__builtin_mips_upper_c_eq_ps (a, b))
            upper_halves_are_equal ();
          else
            upper_halves_are_unequal ();

          if (__builtin_mips_lower_c_eq_ps (a, b))
            lower_halves_are_equal ();
          else
            lower_halves_are_unequal ();

==============================================================================
File: gcc.info,  Node: |MIPS_3D_Built_in_Functions|,  Prev: |Paired_Single_Built_in_Functions|,  Up: |MIPS_Loongson_Built_in_Functions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *MIPS_3D_Built_in_Functions*

6.60.15.3 MIPS-3D Built-in Functions
------------------------------------

The MIPS-3D Application-Specific Extension (ASE) includes additional
paired-single instructions that are designed to improve the performance
of 3D graphics operations.  Support for these instructions is controlled
by the '-mips3d' command-line option.

 The functions listed below map directly to a particular MIPS-3D
instruction.  Please refer to the architecture specification for more
details on what each instruction does.

'v2sf __builtin_mips_addr_ps (v2sf, v2sf)'
     Reduction add ('addr.ps').

'v2sf __builtin_mips_mulr_ps (v2sf, v2sf)'
     Reduction multiply ('mulr.ps').

'v2sf __builtin_mips_cvt_pw_ps (v2sf)'
     Convert paired single to paired word ('cvt.pw.ps').

'v2sf __builtin_mips_cvt_ps_pw (v2sf)'
     Convert paired word to paired single ('cvt.ps.pw').

'float __builtin_mips_recip1_s (float)'
'double __builtin_mips_recip1_d (double)'
'v2sf __builtin_mips_recip1_ps (v2sf)'
     Reduced-precision reciprocal (sequence step 1) ('recip1.FMT').

'float __builtin_mips_recip2_s (float, float)'
'double __builtin_mips_recip2_d (double, double)'
'v2sf __builtin_mips_recip2_ps (v2sf, v2sf)'
     Reduced-precision reciprocal (sequence step 2) ('recip2.FMT').

'float __builtin_mips_rsqrt1_s (float)'
'double __builtin_mips_rsqrt1_d (double)'
'v2sf __builtin_mips_rsqrt1_ps (v2sf)'
     Reduced-precision reciprocal square root (sequence step 1)
     ('rsqrt1.FMT').

'float __builtin_mips_rsqrt2_s (float, float)'
'double __builtin_mips_rsqrt2_d (double, double)'
'v2sf __builtin_mips_rsqrt2_ps (v2sf, v2sf)'
     Reduced-precision reciprocal square root (sequence step 2)
     ('rsqrt2.FMT').

 The following multi-instruction functions are also available.  In each
case, COND can be any of the 16 floating-point conditions: 'f', 'un',
'eq', 'ueq', 'olt', 'ult', 'ole', 'ule', 'sf', 'ngle', 'seq', 'ngl',
'lt', 'nge', 'le' or 'ngt'.

'int __builtin_mips_cabs_COND_s (float A, float B)'
'int __builtin_mips_cabs_COND_d (double A, double B)'
     Absolute comparison of two scalar values ('cabs.COND.FMT',
     'bc1t'/'bc1f').

     These functions compare A and B using 'cabs.COND.s' or
     'cabs.COND.d' and return the result as a boolean value.  For
     example:

          float a, b;
          if (__builtin_mips_cabs_eq_s (a, b))
            true ();
          else
            false ();

'int __builtin_mips_upper_cabs_COND_ps (v2sf A, v2sf B)'
'int __builtin_mips_lower_cabs_COND_ps (v2sf A, v2sf B)'
     Absolute comparison of two paired-single values ('cabs.COND.ps',
     'bc1t'/'bc1f').

     These functions compare A and B using 'cabs.COND.ps' and return
     either the upper or lower half of the result.  For example:

          v2sf a, b;
          if (__builtin_mips_upper_cabs_eq_ps (a, b))
            upper_halves_are_equal ();
          else
            upper_halves_are_unequal ();

          if (__builtin_mips_lower_cabs_eq_ps (a, b))
            lower_halves_are_equal ();
          else
            lower_halves_are_unequal ();

'v2sf __builtin_mips_movt_cabs_COND_ps (v2sf A, v2sf B, v2sf C, v2sf D)'
'v2sf __builtin_mips_movf_cabs_COND_ps (v2sf A, v2sf B, v2sf C, v2sf D)'
     Conditional move based on absolute comparison ('cabs.COND.ps',
     'movt.ps'/'movf.ps').

     The 'movt' functions return the value X computed by:

          cabs.COND.ps CC,A,B
          mov.ps X,C
          movt.ps X,D,CC

     The 'movf' functions are similar but use 'movf.ps' instead of
     'movt.ps'.

'int __builtin_mips_any_c_COND_ps (v2sf A, v2sf B)'
'int __builtin_mips_all_c_COND_ps (v2sf A, v2sf B)'
'int __builtin_mips_any_cabs_COND_ps (v2sf A, v2sf B)'
'int __builtin_mips_all_cabs_COND_ps (v2sf A, v2sf B)'
     Comparison of two paired-single values ('c.COND.ps'/'cabs.COND.ps',
     'bc1any2t'/'bc1any2f').

     These functions compare A and B using 'c.COND.ps' or
     'cabs.COND.ps'.  The 'any' forms return 'true' if either result is
     'true' and the 'all' forms return 'true' if both results are
     'true'.  For example:

          v2sf a, b;
          if (__builtin_mips_any_c_eq_ps (a, b))
            one_is_true ();
          else
            both_are_false ();

          if (__builtin_mips_all_c_eq_ps (a, b))
            both_are_true ();
          else
            one_is_false ();

'int __builtin_mips_any_c_COND_4s (v2sf A, v2sf B, v2sf C, v2sf D)'
'int __builtin_mips_all_c_COND_4s (v2sf A, v2sf B, v2sf C, v2sf D)'
'int __builtin_mips_any_cabs_COND_4s (v2sf A, v2sf B, v2sf C, v2sf D)'
'int __builtin_mips_all_cabs_COND_4s (v2sf A, v2sf B, v2sf C, v2sf D)'
     Comparison of four paired-single values
     ('c.COND.ps'/'cabs.COND.ps', 'bc1any4t'/'bc1any4f').

     These functions use 'c.COND.ps' or 'cabs.COND.ps' to compare A with
     B and to compare C with D.  The 'any' forms return 'true' if any of
     the four results are 'true' and the 'all' forms return 'true' if
     all four results are 'true'.  For example:

          v2sf a, b, c, d;
          if (__builtin_mips_any_c_eq_4s (a, b, c, d))
            some_are_true ();
          else
            all_are_false ();

          if (__builtin_mips_all_c_eq_4s (a, b, c, d))
            all_are_true ();
          else
            some_are_false ();

==============================================================================
File: gcc.info,  Node: MIPS SIMD Architecture (MSA) Support,  Next: |Other_MIPS_Built_in_Functions|,  Prev: |MIPS_Loongson_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                              *MIPS_SIMD_Architecture_(MSA)_Support*

6.60.16 MIPS SIMD Architecture (MSA) Support
--------------------------------------------

MENU

* |MIPS_SIMD_Architecture_Built_in_Functions|::

GCC provides intrinsics to access the SIMD instructions provided by the
MSA MIPS SIMD Architecture.  The interface is made available by
including '<msa.h>' and using '-mmsa -mhard-float -mfp64 -mnan=2008'.
For each '__builtin_msa_*', there is a shortened name of the intrinsic,
'__msa_*'.

 MSA implements 128-bit wide vector registers, operating on 8-, 16-, 32-
and 64-bit integer, 16- and 32-bit fixed-point, or 32- and 64-bit
floating point data elements.  The following vectors typedefs are
included in 'msa.h':
   * 'v16i8', a vector of sixteen signed 8-bit integers;
   * 'v16u8', a vector of sixteen unsigned 8-bit integers;
   * 'v8i16', a vector of eight signed 16-bit integers;
   * 'v8u16', a vector of eight unsigned 16-bit integers;
   * 'v4i32', a vector of four signed 32-bit integers;
   * 'v4u32', a vector of four unsigned 32-bit integers;
   * 'v2i64', a vector of two signed 64-bit integers;
   * 'v2u64', a vector of two unsigned 64-bit integers;
   * 'v4f32', a vector of four 32-bit floats;
   * 'v2f64', a vector of two 64-bit doubles.

 Instructions and corresponding built-ins may have additional
restrictions and/or input/output values manipulated:
   * 'imm0_1', an integer literal in range 0 to 1;
   * 'imm0_3', an integer literal in range 0 to 3;
   * 'imm0_7', an integer literal in range 0 to 7;
   * 'imm0_15', an integer literal in range 0 to 15;
   * 'imm0_31', an integer literal in range 0 to 31;
   * 'imm0_63', an integer literal in range 0 to 63;
   * 'imm0_255', an integer literal in range 0 to 255;
   * 'imm_n16_15', an integer literal in range -16 to 15;
   * 'imm_n512_511', an integer literal in range -512 to 511;
   * 'imm_n1024_1022', an integer literal in range -512 to 511 left
     shifted by 1 bit, i.e., -1024, -1022, ..., 1020, 1022;
   * 'imm_n2048_2044', an integer literal in range -512 to 511 left
     shifted by 2 bits, i.e., -2048, -2044, ..., 2040, 2044;
   * 'imm_n4096_4088', an integer literal in range -512 to 511 left
     shifted by 3 bits, i.e., -4096, -4088, ..., 4080, 4088;
   * 'imm1_4', an integer literal in range 1 to 4;
   * 'i32, i64, u32, u64, f32, f64', defined as follows:

     {
     typedef int i32;
     #if __LONG_MAX__ == __LONG_LONG_MAX__
     typedef long i64;
     #else
     typedef long long i64;
     #endif

     typedef unsigned int u32;
     #if __LONG_MAX__ == __LONG_LONG_MAX__
     typedef unsigned long u64;
     #else
     typedef unsigned long long u64;
     #endif

     typedef double f64;
     typedef float f32;
     }

==============================================================================
File: gcc.info,  Node: |MIPS_SIMD_Architecture_Built_in_Functions|,  Up: MIPS SIMD Architecture (MSA) Support
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *MIPS_SIMD_Architecture_Built_in_Functions*

6.60.16.1 MIPS SIMD Architecture Built-in Functions
---------------------------------------------------

The intrinsics provided are listed below; each is named after the
machine instruction.

     v16i8 __builtin_msa_add_a_b (v16i8, v16i8);
     v8i16 __builtin_msa_add_a_h (v8i16, v8i16);
     v4i32 __builtin_msa_add_a_w (v4i32, v4i32);
     v2i64 __builtin_msa_add_a_d (v2i64, v2i64);

     v16i8 __builtin_msa_adds_a_b (v16i8, v16i8);
     v8i16 __builtin_msa_adds_a_h (v8i16, v8i16);
     v4i32 __builtin_msa_adds_a_w (v4i32, v4i32);
     v2i64 __builtin_msa_adds_a_d (v2i64, v2i64);

     v16i8 __builtin_msa_adds_s_b (v16i8, v16i8);
     v8i16 __builtin_msa_adds_s_h (v8i16, v8i16);
     v4i32 __builtin_msa_adds_s_w (v4i32, v4i32);
     v2i64 __builtin_msa_adds_s_d (v2i64, v2i64);

     v16u8 __builtin_msa_adds_u_b (v16u8, v16u8);
     v8u16 __builtin_msa_adds_u_h (v8u16, v8u16);
     v4u32 __builtin_msa_adds_u_w (v4u32, v4u32);
     v2u64 __builtin_msa_adds_u_d (v2u64, v2u64);

     v16i8 __builtin_msa_addv_b (v16i8, v16i8);
     v8i16 __builtin_msa_addv_h (v8i16, v8i16);
     v4i32 __builtin_msa_addv_w (v4i32, v4i32);
     v2i64 __builtin_msa_addv_d (v2i64, v2i64);

     v16i8 __builtin_msa_addvi_b (v16i8, imm0_31);
     v8i16 __builtin_msa_addvi_h (v8i16, imm0_31);
     v4i32 __builtin_msa_addvi_w (v4i32, imm0_31);
     v2i64 __builtin_msa_addvi_d (v2i64, imm0_31);

     v16u8 __builtin_msa_and_v (v16u8, v16u8);

     v16u8 __builtin_msa_andi_b (v16u8, imm0_255);

     v16i8 __builtin_msa_asub_s_b (v16i8, v16i8);
     v8i16 __builtin_msa_asub_s_h (v8i16, v8i16);
     v4i32 __builtin_msa_asub_s_w (v4i32, v4i32);
     v2i64 __builtin_msa_asub_s_d (v2i64, v2i64);

     v16u8 __builtin_msa_asub_u_b (v16u8, v16u8);
     v8u16 __builtin_msa_asub_u_h (v8u16, v8u16);
     v4u32 __builtin_msa_asub_u_w (v4u32, v4u32);
     v2u64 __builtin_msa_asub_u_d (v2u64, v2u64);

     v16i8 __builtin_msa_ave_s_b (v16i8, v16i8);
     v8i16 __builtin_msa_ave_s_h (v8i16, v8i16);
     v4i32 __builtin_msa_ave_s_w (v4i32, v4i32);
     v2i64 __builtin_msa_ave_s_d (v2i64, v2i64);

     v16u8 __builtin_msa_ave_u_b (v16u8, v16u8);
     v8u16 __builtin_msa_ave_u_h (v8u16, v8u16);
     v4u32 __builtin_msa_ave_u_w (v4u32, v4u32);
     v2u64 __builtin_msa_ave_u_d (v2u64, v2u64);

     v16i8 __builtin_msa_aver_s_b (v16i8, v16i8);
     v8i16 __builtin_msa_aver_s_h (v8i16, v8i16);
     v4i32 __builtin_msa_aver_s_w (v4i32, v4i32);
     v2i64 __builtin_msa_aver_s_d (v2i64, v2i64);

     v16u8 __builtin_msa_aver_u_b (v16u8, v16u8);
     v8u16 __builtin_msa_aver_u_h (v8u16, v8u16);
     v4u32 __builtin_msa_aver_u_w (v4u32, v4u32);
     v2u64 __builtin_msa_aver_u_d (v2u64, v2u64);

     v16u8 __builtin_msa_bclr_b (v16u8, v16u8);
     v8u16 __builtin_msa_bclr_h (v8u16, v8u16);
     v4u32 __builtin_msa_bclr_w (v4u32, v4u32);
     v2u64 __builtin_msa_bclr_d (v2u64, v2u64);

     v16u8 __builtin_msa_bclri_b (v16u8, imm0_7);
     v8u16 __builtin_msa_bclri_h (v8u16, imm0_15);
     v4u32 __builtin_msa_bclri_w (v4u32, imm0_31);
     v2u64 __builtin_msa_bclri_d (v2u64, imm0_63);

     v16u8 __builtin_msa_binsl_b (v16u8, v16u8, v16u8);
     v8u16 __builtin_msa_binsl_h (v8u16, v8u16, v8u16);
     v4u32 __builtin_msa_binsl_w (v4u32, v4u32, v4u32);
     v2u64 __builtin_msa_binsl_d (v2u64, v2u64, v2u64);

     v16u8 __builtin_msa_binsli_b (v16u8, v16u8, imm0_7);
     v8u16 __builtin_msa_binsli_h (v8u16, v8u16, imm0_15);
     v4u32 __builtin_msa_binsli_w (v4u32, v4u32, imm0_31);
     v2u64 __builtin_msa_binsli_d (v2u64, v2u64, imm0_63);

     v16u8 __builtin_msa_binsr_b (v16u8, v16u8, v16u8);
     v8u16 __builtin_msa_binsr_h (v8u16, v8u16, v8u16);
     v4u32 __builtin_msa_binsr_w (v4u32, v4u32, v4u32);
     v2u64 __builtin_msa_binsr_d (v2u64, v2u64, v2u64);

     v16u8 __builtin_msa_binsri_b (v16u8, v16u8, imm0_7);
     v8u16 __builtin_msa_binsri_h (v8u16, v8u16, imm0_15);
     v4u32 __builtin_msa_binsri_w (v4u32, v4u32, imm0_31);
     v2u64 __builtin_msa_binsri_d (v2u64, v2u64, imm0_63);

     v16u8 __builtin_msa_bmnz_v (v16u8, v16u8, v16u8);

     v16u8 __builtin_msa_bmnzi_b (v16u8, v16u8, imm0_255);

     v16u8 __builtin_msa_bmz_v (v16u8, v16u8, v16u8);

     v16u8 __builtin_msa_bmzi_b (v16u8, v16u8, imm0_255);

     v16u8 __builtin_msa_bneg_b (v16u8, v16u8);
     v8u16 __builtin_msa_bneg_h (v8u16, v8u16);
     v4u32 __builtin_msa_bneg_w (v4u32, v4u32);
     v2u64 __builtin_msa_bneg_d (v2u64, v2u64);

     v16u8 __builtin_msa_bnegi_b (v16u8, imm0_7);
     v8u16 __builtin_msa_bnegi_h (v8u16, imm0_15);
     v4u32 __builtin_msa_bnegi_w (v4u32, imm0_31);
     v2u64 __builtin_msa_bnegi_d (v2u64, imm0_63);

     i32 __builtin_msa_bnz_b (v16u8);
     i32 __builtin_msa_bnz_h (v8u16);
     i32 __builtin_msa_bnz_w (v4u32);
     i32 __builtin_msa_bnz_d (v2u64);

     i32 __builtin_msa_bnz_v (v16u8);

     v16u8 __builtin_msa_bsel_v (v16u8, v16u8, v16u8);

     v16u8 __builtin_msa_bseli_b (v16u8, v16u8, imm0_255);

     v16u8 __builtin_msa_bset_b (v16u8, v16u8);
     v8u16 __builtin_msa_bset_h (v8u16, v8u16);
     v4u32 __builtin_msa_bset_w (v4u32, v4u32);
     v2u64 __builtin_msa_bset_d (v2u64, v2u64);

     v16u8 __builtin_msa_bseti_b (v16u8, imm0_7);
     v8u16 __builtin_msa_bseti_h (v8u16, imm0_15);
     v4u32 __builtin_msa_bseti_w (v4u32, imm0_31);
     v2u64 __builtin_msa_bseti_d (v2u64, imm0_63);

     i32 __builtin_msa_bz_b (v16u8);
     i32 __builtin_msa_bz_h (v8u16);
     i32 __builtin_msa_bz_w (v4u32);
     i32 __builtin_msa_bz_d (v2u64);

     i32 __builtin_msa_bz_v (v16u8);

     v16i8 __builtin_msa_ceq_b (v16i8, v16i8);
     v8i16 __builtin_msa_ceq_h (v8i16, v8i16);
     v4i32 __builtin_msa_ceq_w (v4i32, v4i32);
     v2i64 __builtin_msa_ceq_d (v2i64, v2i64);

     v16i8 __builtin_msa_ceqi_b (v16i8, imm_n16_15);
     v8i16 __builtin_msa_ceqi_h (v8i16, imm_n16_15);
     v4i32 __builtin_msa_ceqi_w (v4i32, imm_n16_15);
     v2i64 __builtin_msa_ceqi_d (v2i64, imm_n16_15);

     i32 __builtin_msa_cfcmsa (imm0_31);

     v16i8 __builtin_msa_cle_s_b (v16i8, v16i8);
     v8i16 __builtin_msa_cle_s_h (v8i16, v8i16);
     v4i32 __builtin_msa_cle_s_w (v4i32, v4i32);
     v2i64 __builtin_msa_cle_s_d (v2i64, v2i64);

     v16i8 __builtin_msa_cle_u_b (v16u8, v16u8);
     v8i16 __builtin_msa_cle_u_h (v8u16, v8u16);
     v4i32 __builtin_msa_cle_u_w (v4u32, v4u32);
     v2i64 __builtin_msa_cle_u_d (v2u64, v2u64);

     v16i8 __builtin_msa_clei_s_b (v16i8, imm_n16_15);
     v8i16 __builtin_msa_clei_s_h (v8i16, imm_n16_15);
     v4i32 __builtin_msa_clei_s_w (v4i32, imm_n16_15);
     v2i64 __builtin_msa_clei_s_d (v2i64, imm_n16_15);

     v16i8 __builtin_msa_clei_u_b (v16u8, imm0_31);
     v8i16 __builtin_msa_clei_u_h (v8u16, imm0_31);
     v4i32 __builtin_msa_clei_u_w (v4u32, imm0_31);
     v2i64 __builtin_msa_clei_u_d (v2u64, imm0_31);

     v16i8 __builtin_msa_clt_s_b (v16i8, v16i8);
     v8i16 __builtin_msa_clt_s_h (v8i16, v8i16);
     v4i32 __builtin_msa_clt_s_w (v4i32, v4i32);
     v2i64 __builtin_msa_clt_s_d (v2i64, v2i64);

     v16i8 __builtin_msa_clt_u_b (v16u8, v16u8);
     v8i16 __builtin_msa_clt_u_h (v8u16, v8u16);
     v4i32 __builtin_msa_clt_u_w (v4u32, v4u32);
     v2i64 __builtin_msa_clt_u_d (v2u64, v2u64);

     v16i8 __builtin_msa_clti_s_b (v16i8, imm_n16_15);
     v8i16 __builtin_msa_clti_s_h (v8i16, imm_n16_15);
     v4i32 __builtin_msa_clti_s_w (v4i32, imm_n16_15);
     v2i64 __builtin_msa_clti_s_d (v2i64, imm_n16_15);

     v16i8 __builtin_msa_clti_u_b (v16u8, imm0_31);
     v8i16 __builtin_msa_clti_u_h (v8u16, imm0_31);
     v4i32 __builtin_msa_clti_u_w (v4u32, imm0_31);
     v2i64 __builtin_msa_clti_u_d (v2u64, imm0_31);

     i32 __builtin_msa_copy_s_b (v16i8, imm0_15);
     i32 __builtin_msa_copy_s_h (v8i16, imm0_7);
     i32 __builtin_msa_copy_s_w (v4i32, imm0_3);
     i64 __builtin_msa_copy_s_d (v2i64, imm0_1);

     u32 __builtin_msa_copy_u_b (v16i8, imm0_15);
     u32 __builtin_msa_copy_u_h (v8i16, imm0_7);
     u32 __builtin_msa_copy_u_w (v4i32, imm0_3);
     u64 __builtin_msa_copy_u_d (v2i64, imm0_1);

     void __builtin_msa_ctcmsa (imm0_31, i32);

     v16i8 __builtin_msa_div_s_b (v16i8, v16i8);
     v8i16 __builtin_msa_div_s_h (v8i16, v8i16);
     v4i32 __builtin_msa_div_s_w (v4i32, v4i32);
     v2i64 __builtin_msa_div_s_d (v2i64, v2i64);

     v16u8 __builtin_msa_div_u_b (v16u8, v16u8);
     v8u16 __builtin_msa_div_u_h (v8u16, v8u16);
     v4u32 __builtin_msa_div_u_w (v4u32, v4u32);
     v2u64 __builtin_msa_div_u_d (v2u64, v2u64);

     v8i16 __builtin_msa_dotp_s_h (v16i8, v16i8);
     v4i32 __builtin_msa_dotp_s_w (v8i16, v8i16);
     v2i64 __builtin_msa_dotp_s_d (v4i32, v4i32);

     v8u16 __builtin_msa_dotp_u_h (v16u8, v16u8);
     v4u32 __builtin_msa_dotp_u_w (v8u16, v8u16);
     v2u64 __builtin_msa_dotp_u_d (v4u32, v4u32);

     v8i16 __builtin_msa_dpadd_s_h (v8i16, v16i8, v16i8);
     v4i32 __builtin_msa_dpadd_s_w (v4i32, v8i16, v8i16);
     v2i64 __builtin_msa_dpadd_s_d (v2i64, v4i32, v4i32);

     v8u16 __builtin_msa_dpadd_u_h (v8u16, v16u8, v16u8);
     v4u32 __builtin_msa_dpadd_u_w (v4u32, v8u16, v8u16);
     v2u64 __builtin_msa_dpadd_u_d (v2u64, v4u32, v4u32);

     v8i16 __builtin_msa_dpsub_s_h (v8i16, v16i8, v16i8);
     v4i32 __builtin_msa_dpsub_s_w (v4i32, v8i16, v8i16);
     v2i64 __builtin_msa_dpsub_s_d (v2i64, v4i32, v4i32);

     v8i16 __builtin_msa_dpsub_u_h (v8i16, v16u8, v16u8);
     v4i32 __builtin_msa_dpsub_u_w (v4i32, v8u16, v8u16);
     v2i64 __builtin_msa_dpsub_u_d (v2i64, v4u32, v4u32);

     v4f32 __builtin_msa_fadd_w (v4f32, v4f32);
     v2f64 __builtin_msa_fadd_d (v2f64, v2f64);

     v4i32 __builtin_msa_fcaf_w (v4f32, v4f32);
     v2i64 __builtin_msa_fcaf_d (v2f64, v2f64);

     v4i32 __builtin_msa_fceq_w (v4f32, v4f32);
     v2i64 __builtin_msa_fceq_d (v2f64, v2f64);

     v4i32 __builtin_msa_fclass_w (v4f32);
     v2i64 __builtin_msa_fclass_d (v2f64);

     v4i32 __builtin_msa_fcle_w (v4f32, v4f32);
     v2i64 __builtin_msa_fcle_d (v2f64, v2f64);

     v4i32 __builtin_msa_fclt_w (v4f32, v4f32);
     v2i64 __builtin_msa_fclt_d (v2f64, v2f64);

     v4i32 __builtin_msa_fcne_w (v4f32, v4f32);
     v2i64 __builtin_msa_fcne_d (v2f64, v2f64);

     v4i32 __builtin_msa_fcor_w (v4f32, v4f32);
     v2i64 __builtin_msa_fcor_d (v2f64, v2f64);

     v4i32 __builtin_msa_fcueq_w (v4f32, v4f32);
     v2i64 __builtin_msa_fcueq_d (v2f64, v2f64);

     v4i32 __builtin_msa_fcule_w (v4f32, v4f32);
     v2i64 __builtin_msa_fcule_d (v2f64, v2f64);

     v4i32 __builtin_msa_fcult_w (v4f32, v4f32);
     v2i64 __builtin_msa_fcult_d (v2f64, v2f64);

     v4i32 __builtin_msa_fcun_w (v4f32, v4f32);
     v2i64 __builtin_msa_fcun_d (v2f64, v2f64);

     v4i32 __builtin_msa_fcune_w (v4f32, v4f32);
     v2i64 __builtin_msa_fcune_d (v2f64, v2f64);

     v4f32 __builtin_msa_fdiv_w (v4f32, v4f32);
     v2f64 __builtin_msa_fdiv_d (v2f64, v2f64);

     v8i16 __builtin_msa_fexdo_h (v4f32, v4f32);
     v4f32 __builtin_msa_fexdo_w (v2f64, v2f64);

     v4f32 __builtin_msa_fexp2_w (v4f32, v4i32);
     v2f64 __builtin_msa_fexp2_d (v2f64, v2i64);

     v4f32 __builtin_msa_fexupl_w (v8i16);
     v2f64 __builtin_msa_fexupl_d (v4f32);

     v4f32 __builtin_msa_fexupr_w (v8i16);
     v2f64 __builtin_msa_fexupr_d (v4f32);

     v4f32 __builtin_msa_ffint_s_w (v4i32);
     v2f64 __builtin_msa_ffint_s_d (v2i64);

     v4f32 __builtin_msa_ffint_u_w (v4u32);
     v2f64 __builtin_msa_ffint_u_d (v2u64);

     v4f32 __builtin_msa_ffql_w (v8i16);
     v2f64 __builtin_msa_ffql_d (v4i32);

     v4f32 __builtin_msa_ffqr_w (v8i16);
     v2f64 __builtin_msa_ffqr_d (v4i32);

     v16i8 __builtin_msa_fill_b (i32);
     v8i16 __builtin_msa_fill_h (i32);
     v4i32 __builtin_msa_fill_w (i32);
     v2i64 __builtin_msa_fill_d (i64);

     v4f32 __builtin_msa_flog2_w (v4f32);
     v2f64 __builtin_msa_flog2_d (v2f64);

     v4f32 __builtin_msa_fmadd_w (v4f32, v4f32, v4f32);
     v2f64 __builtin_msa_fmadd_d (v2f64, v2f64, v2f64);

     v4f32 __builtin_msa_fmax_w (v4f32, v4f32);
     v2f64 __builtin_msa_fmax_d (v2f64, v2f64);

     v4f32 __builtin_msa_fmax_a_w (v4f32, v4f32);
     v2f64 __builtin_msa_fmax_a_d (v2f64, v2f64);

     v4f32 __builtin_msa_fmin_w (v4f32, v4f32);
     v2f64 __builtin_msa_fmin_d (v2f64, v2f64);

     v4f32 __builtin_msa_fmin_a_w (v4f32, v4f32);
     v2f64 __builtin_msa_fmin_a_d (v2f64, v2f64);

     v4f32 __builtin_msa_fmsub_w (v4f32, v4f32, v4f32);
     v2f64 __builtin_msa_fmsub_d (v2f64, v2f64, v2f64);

     v4f32 __builtin_msa_fmul_w (v4f32, v4f32);
     v2f64 __builtin_msa_fmul_d (v2f64, v2f64);

     v4f32 __builtin_msa_frint_w (v4f32);
     v2f64 __builtin_msa_frint_d (v2f64);

     v4f32 __builtin_msa_frcp_w (v4f32);
     v2f64 __builtin_msa_frcp_d (v2f64);

     v4f32 __builtin_msa_frsqrt_w (v4f32);
     v2f64 __builtin_msa_frsqrt_d (v2f64);

     v4i32 __builtin_msa_fsaf_w (v4f32, v4f32);
     v2i64 __builtin_msa_fsaf_d (v2f64, v2f64);

     v4i32 __builtin_msa_fseq_w (v4f32, v4f32);
     v2i64 __builtin_msa_fseq_d (v2f64, v2f64);

     v4i32 __builtin_msa_fsle_w (v4f32, v4f32);
     v2i64 __builtin_msa_fsle_d (v2f64, v2f64);

     v4i32 __builtin_msa_fslt_w (v4f32, v4f32);
     v2i64 __builtin_msa_fslt_d (v2f64, v2f64);

     v4i32 __builtin_msa_fsne_w (v4f32, v4f32);
     v2i64 __builtin_msa_fsne_d (v2f64, v2f64);

     v4i32 __builtin_msa_fsor_w (v4f32, v4f32);
     v2i64 __builtin_msa_fsor_d (v2f64, v2f64);

     v4f32 __builtin_msa_fsqrt_w (v4f32);
     v2f64 __builtin_msa_fsqrt_d (v2f64);

     v4f32 __builtin_msa_fsub_w (v4f32, v4f32);
     v2f64 __builtin_msa_fsub_d (v2f64, v2f64);

     v4i32 __builtin_msa_fsueq_w (v4f32, v4f32);
     v2i64 __builtin_msa_fsueq_d (v2f64, v2f64);

     v4i32 __builtin_msa_fsule_w (v4f32, v4f32);
     v2i64 __builtin_msa_fsule_d (v2f64, v2f64);

     v4i32 __builtin_msa_fsult_w (v4f32, v4f32);
     v2i64 __builtin_msa_fsult_d (v2f64, v2f64);

     v4i32 __builtin_msa_fsun_w (v4f32, v4f32);
     v2i64 __builtin_msa_fsun_d (v2f64, v2f64);

     v4i32 __builtin_msa_fsune_w (v4f32, v4f32);
     v2i64 __builtin_msa_fsune_d (v2f64, v2f64);

     v4i32 __builtin_msa_ftint_s_w (v4f32);
     v2i64 __builtin_msa_ftint_s_d (v2f64);

     v4u32 __builtin_msa_ftint_u_w (v4f32);
     v2u64 __builtin_msa_ftint_u_d (v2f64);

     v8i16 __builtin_msa_ftq_h (v4f32, v4f32);
     v4i32 __builtin_msa_ftq_w (v2f64, v2f64);

     v4i32 __builtin_msa_ftrunc_s_w (v4f32);
     v2i64 __builtin_msa_ftrunc_s_d (v2f64);

     v4u32 __builtin_msa_ftrunc_u_w (v4f32);
     v2u64 __builtin_msa_ftrunc_u_d (v2f64);

     v8i16 __builtin_msa_hadd_s_h (v16i8, v16i8);
     v4i32 __builtin_msa_hadd_s_w (v8i16, v8i16);
     v2i64 __builtin_msa_hadd_s_d (v4i32, v4i32);

     v8u16 __builtin_msa_hadd_u_h (v16u8, v16u8);
     v4u32 __builtin_msa_hadd_u_w (v8u16, v8u16);
     v2u64 __builtin_msa_hadd_u_d (v4u32, v4u32);

     v8i16 __builtin_msa_hsub_s_h (v16i8, v16i8);
     v4i32 __builtin_msa_hsub_s_w (v8i16, v8i16);
     v2i64 __builtin_msa_hsub_s_d (v4i32, v4i32);

     v8i16 __builtin_msa_hsub_u_h (v16u8, v16u8);
     v4i32 __builtin_msa_hsub_u_w (v8u16, v8u16);
     v2i64 __builtin_msa_hsub_u_d (v4u32, v4u32);

     v16i8 __builtin_msa_ilvev_b (v16i8, v16i8);
     v8i16 __builtin_msa_ilvev_h (v8i16, v8i16);
     v4i32 __builtin_msa_ilvev_w (v4i32, v4i32);
     v2i64 __builtin_msa_ilvev_d (v2i64, v2i64);

     v16i8 __builtin_msa_ilvl_b (v16i8, v16i8);
     v8i16 __builtin_msa_ilvl_h (v8i16, v8i16);
     v4i32 __builtin_msa_ilvl_w (v4i32, v4i32);
     v2i64 __builtin_msa_ilvl_d (v2i64, v2i64);

     v16i8 __builtin_msa_ilvod_b (v16i8, v16i8);
     v8i16 __builtin_msa_ilvod_h (v8i16, v8i16);
     v4i32 __builtin_msa_ilvod_w (v4i32, v4i32);
     v2i64 __builtin_msa_ilvod_d (v2i64, v2i64);

     v16i8 __builtin_msa_ilvr_b (v16i8, v16i8);
     v8i16 __builtin_msa_ilvr_h (v8i16, v8i16);
     v4i32 __builtin_msa_ilvr_w (v4i32, v4i32);
     v2i64 __builtin_msa_ilvr_d (v2i64, v2i64);

     v16i8 __builtin_msa_insert_b (v16i8, imm0_15, i32);
     v8i16 __builtin_msa_insert_h (v8i16, imm0_7, i32);
     v4i32 __builtin_msa_insert_w (v4i32, imm0_3, i32);
     v2i64 __builtin_msa_insert_d (v2i64, imm0_1, i64);

     v16i8 __builtin_msa_insve_b (v16i8, imm0_15, v16i8);
     v8i16 __builtin_msa_insve_h (v8i16, imm0_7, v8i16);
     v4i32 __builtin_msa_insve_w (v4i32, imm0_3, v4i32);
     v2i64 __builtin_msa_insve_d (v2i64, imm0_1, v2i64);

     v16i8 __builtin_msa_ld_b (void *, imm_n512_511);
     v8i16 __builtin_msa_ld_h (void *, imm_n1024_1022);
     v4i32 __builtin_msa_ld_w (void *, imm_n2048_2044);
     v2i64 __builtin_msa_ld_d (void *, imm_n4096_4088);

     v16i8 __builtin_msa_ldi_b (imm_n512_511);
     v8i16 __builtin_msa_ldi_h (imm_n512_511);
     v4i32 __builtin_msa_ldi_w (imm_n512_511);
     v2i64 __builtin_msa_ldi_d (imm_n512_511);

     v8i16 __builtin_msa_madd_q_h (v8i16, v8i16, v8i16);
     v4i32 __builtin_msa_madd_q_w (v4i32, v4i32, v4i32);

     v8i16 __builtin_msa_maddr_q_h (v8i16, v8i16, v8i16);
     v4i32 __builtin_msa_maddr_q_w (v4i32, v4i32, v4i32);

     v16i8 __builtin_msa_maddv_b (v16i8, v16i8, v16i8);
     v8i16 __builtin_msa_maddv_h (v8i16, v8i16, v8i16);
     v4i32 __builtin_msa_maddv_w (v4i32, v4i32, v4i32);
     v2i64 __builtin_msa_maddv_d (v2i64, v2i64, v2i64);

     v16i8 __builtin_msa_max_a_b (v16i8, v16i8);
     v8i16 __builtin_msa_max_a_h (v8i16, v8i16);
     v4i32 __builtin_msa_max_a_w (v4i32, v4i32);
     v2i64 __builtin_msa_max_a_d (v2i64, v2i64);

     v16i8 __builtin_msa_max_s_b (v16i8, v16i8);
     v8i16 __builtin_msa_max_s_h (v8i16, v8i16);
     v4i32 __builtin_msa_max_s_w (v4i32, v4i32);
     v2i64 __builtin_msa_max_s_d (v2i64, v2i64);

     v16u8 __builtin_msa_max_u_b (v16u8, v16u8);
     v8u16 __builtin_msa_max_u_h (v8u16, v8u16);
     v4u32 __builtin_msa_max_u_w (v4u32, v4u32);
     v2u64 __builtin_msa_max_u_d (v2u64, v2u64);

     v16i8 __builtin_msa_maxi_s_b (v16i8, imm_n16_15);
     v8i16 __builtin_msa_maxi_s_h (v8i16, imm_n16_15);
     v4i32 __builtin_msa_maxi_s_w (v4i32, imm_n16_15);
     v2i64 __builtin_msa_maxi_s_d (v2i64, imm_n16_15);

     v16u8 __builtin_msa_maxi_u_b (v16u8, imm0_31);
     v8u16 __builtin_msa_maxi_u_h (v8u16, imm0_31);
     v4u32 __builtin_msa_maxi_u_w (v4u32, imm0_31);
     v2u64 __builtin_msa_maxi_u_d (v2u64, imm0_31);

     v16i8 __builtin_msa_min_a_b (v16i8, v16i8);
     v8i16 __builtin_msa_min_a_h (v8i16, v8i16);
     v4i32 __builtin_msa_min_a_w (v4i32, v4i32);
     v2i64 __builtin_msa_min_a_d (v2i64, v2i64);

     v16i8 __builtin_msa_min_s_b (v16i8, v16i8);
     v8i16 __builtin_msa_min_s_h (v8i16, v8i16);
     v4i32 __builtin_msa_min_s_w (v4i32, v4i32);
     v2i64 __builtin_msa_min_s_d (v2i64, v2i64);

     v16u8 __builtin_msa_min_u_b (v16u8, v16u8);
     v8u16 __builtin_msa_min_u_h (v8u16, v8u16);
     v4u32 __builtin_msa_min_u_w (v4u32, v4u32);
     v2u64 __builtin_msa_min_u_d (v2u64, v2u64);

     v16i8 __builtin_msa_mini_s_b (v16i8, imm_n16_15);
     v8i16 __builtin_msa_mini_s_h (v8i16, imm_n16_15);
     v4i32 __builtin_msa_mini_s_w (v4i32, imm_n16_15);
     v2i64 __builtin_msa_mini_s_d (v2i64, imm_n16_15);

     v16u8 __builtin_msa_mini_u_b (v16u8, imm0_31);
     v8u16 __builtin_msa_mini_u_h (v8u16, imm0_31);
     v4u32 __builtin_msa_mini_u_w (v4u32, imm0_31);
     v2u64 __builtin_msa_mini_u_d (v2u64, imm0_31);

     v16i8 __builtin_msa_mod_s_b (v16i8, v16i8);
     v8i16 __builtin_msa_mod_s_h (v8i16, v8i16);
     v4i32 __builtin_msa_mod_s_w (v4i32, v4i32);
     v2i64 __builtin_msa_mod_s_d (v2i64, v2i64);

     v16u8 __builtin_msa_mod_u_b (v16u8, v16u8);
     v8u16 __builtin_msa_mod_u_h (v8u16, v8u16);
     v4u32 __builtin_msa_mod_u_w (v4u32, v4u32);
     v2u64 __builtin_msa_mod_u_d (v2u64, v2u64);

     v16i8 __builtin_msa_move_v (v16i8);

     v8i16 __builtin_msa_msub_q_h (v8i16, v8i16, v8i16);
     v4i32 __builtin_msa_msub_q_w (v4i32, v4i32, v4i32);

     v8i16 __builtin_msa_msubr_q_h (v8i16, v8i16, v8i16);
     v4i32 __builtin_msa_msubr_q_w (v4i32, v4i32, v4i32);

     v16i8 __builtin_msa_msubv_b (v16i8, v16i8, v16i8);
     v8i16 __builtin_msa_msubv_h (v8i16, v8i16, v8i16);
     v4i32 __builtin_msa_msubv_w (v4i32, v4i32, v4i32);
     v2i64 __builtin_msa_msubv_d (v2i64, v2i64, v2i64);

     v8i16 __builtin_msa_mul_q_h (v8i16, v8i16);
     v4i32 __builtin_msa_mul_q_w (v4i32, v4i32);

     v8i16 __builtin_msa_mulr_q_h (v8i16, v8i16);
     v4i32 __builtin_msa_mulr_q_w (v4i32, v4i32);

     v16i8 __builtin_msa_mulv_b (v16i8, v16i8);
     v8i16 __builtin_msa_mulv_h (v8i16, v8i16);
     v4i32 __builtin_msa_mulv_w (v4i32, v4i32);
     v2i64 __builtin_msa_mulv_d (v2i64, v2i64);

     v16i8 __builtin_msa_nloc_b (v16i8);
     v8i16 __builtin_msa_nloc_h (v8i16);
     v4i32 __builtin_msa_nloc_w (v4i32);
     v2i64 __builtin_msa_nloc_d (v2i64);

     v16i8 __builtin_msa_nlzc_b (v16i8);
     v8i16 __builtin_msa_nlzc_h (v8i16);
     v4i32 __builtin_msa_nlzc_w (v4i32);
     v2i64 __builtin_msa_nlzc_d (v2i64);

     v16u8 __builtin_msa_nor_v (v16u8, v16u8);

     v16u8 __builtin_msa_nori_b (v16u8, imm0_255);

     v16u8 __builtin_msa_or_v (v16u8, v16u8);

     v16u8 __builtin_msa_ori_b (v16u8, imm0_255);

     v16i8 __builtin_msa_pckev_b (v16i8, v16i8);
     v8i16 __builtin_msa_pckev_h (v8i16, v8i16);
     v4i32 __builtin_msa_pckev_w (v4i32, v4i32);
     v2i64 __builtin_msa_pckev_d (v2i64, v2i64);

     v16i8 __builtin_msa_pckod_b (v16i8, v16i8);
     v8i16 __builtin_msa_pckod_h (v8i16, v8i16);
     v4i32 __builtin_msa_pckod_w (v4i32, v4i32);
     v2i64 __builtin_msa_pckod_d (v2i64, v2i64);

     v16i8 __builtin_msa_pcnt_b (v16i8);
     v8i16 __builtin_msa_pcnt_h (v8i16);
     v4i32 __builtin_msa_pcnt_w (v4i32);
     v2i64 __builtin_msa_pcnt_d (v2i64);

     v16i8 __builtin_msa_sat_s_b (v16i8, imm0_7);
     v8i16 __builtin_msa_sat_s_h (v8i16, imm0_15);
     v4i32 __builtin_msa_sat_s_w (v4i32, imm0_31);
     v2i64 __builtin_msa_sat_s_d (v2i64, imm0_63);

     v16u8 __builtin_msa_sat_u_b (v16u8, imm0_7);
     v8u16 __builtin_msa_sat_u_h (v8u16, imm0_15);
     v4u32 __builtin_msa_sat_u_w (v4u32, imm0_31);
     v2u64 __builtin_msa_sat_u_d (v2u64, imm0_63);

     v16i8 __builtin_msa_shf_b (v16i8, imm0_255);
     v8i16 __builtin_msa_shf_h (v8i16, imm0_255);
     v4i32 __builtin_msa_shf_w (v4i32, imm0_255);

     v16i8 __builtin_msa_sld_b (v16i8, v16i8, i32);
     v8i16 __builtin_msa_sld_h (v8i16, v8i16, i32);
     v4i32 __builtin_msa_sld_w (v4i32, v4i32, i32);
     v2i64 __builtin_msa_sld_d (v2i64, v2i64, i32);

     v16i8 __builtin_msa_sldi_b (v16i8, v16i8, imm0_15);
     v8i16 __builtin_msa_sldi_h (v8i16, v8i16, imm0_7);
     v4i32 __builtin_msa_sldi_w (v4i32, v4i32, imm0_3);
     v2i64 __builtin_msa_sldi_d (v2i64, v2i64, imm0_1);

     v16i8 __builtin_msa_sll_b (v16i8, v16i8);
     v8i16 __builtin_msa_sll_h (v8i16, v8i16);
     v4i32 __builtin_msa_sll_w (v4i32, v4i32);
     v2i64 __builtin_msa_sll_d (v2i64, v2i64);

     v16i8 __builtin_msa_slli_b (v16i8, imm0_7);
     v8i16 __builtin_msa_slli_h (v8i16, imm0_15);
     v4i32 __builtin_msa_slli_w (v4i32, imm0_31);
     v2i64 __builtin_msa_slli_d (v2i64, imm0_63);

     v16i8 __builtin_msa_splat_b (v16i8, i32);
     v8i16 __builtin_msa_splat_h (v8i16, i32);
     v4i32 __builtin_msa_splat_w (v4i32, i32);
     v2i64 __builtin_msa_splat_d (v2i64, i32);

     v16i8 __builtin_msa_splati_b (v16i8, imm0_15);
     v8i16 __builtin_msa_splati_h (v8i16, imm0_7);
     v4i32 __builtin_msa_splati_w (v4i32, imm0_3);
     v2i64 __builtin_msa_splati_d (v2i64, imm0_1);

     v16i8 __builtin_msa_sra_b (v16i8, v16i8);
     v8i16 __builtin_msa_sra_h (v8i16, v8i16);
     v4i32 __builtin_msa_sra_w (v4i32, v4i32);
     v2i64 __builtin_msa_sra_d (v2i64, v2i64);

     v16i8 __builtin_msa_srai_b (v16i8, imm0_7);
     v8i16 __builtin_msa_srai_h (v8i16, imm0_15);
     v4i32 __builtin_msa_srai_w (v4i32, imm0_31);
     v2i64 __builtin_msa_srai_d (v2i64, imm0_63);

     v16i8 __builtin_msa_srar_b (v16i8, v16i8);
     v8i16 __builtin_msa_srar_h (v8i16, v8i16);
     v4i32 __builtin_msa_srar_w (v4i32, v4i32);
     v2i64 __builtin_msa_srar_d (v2i64, v2i64);

     v16i8 __builtin_msa_srari_b (v16i8, imm0_7);
     v8i16 __builtin_msa_srari_h (v8i16, imm0_15);
     v4i32 __builtin_msa_srari_w (v4i32, imm0_31);
     v2i64 __builtin_msa_srari_d (v2i64, imm0_63);

     v16i8 __builtin_msa_srl_b (v16i8, v16i8);
     v8i16 __builtin_msa_srl_h (v8i16, v8i16);
     v4i32 __builtin_msa_srl_w (v4i32, v4i32);
     v2i64 __builtin_msa_srl_d (v2i64, v2i64);

     v16i8 __builtin_msa_srli_b (v16i8, imm0_7);
     v8i16 __builtin_msa_srli_h (v8i16, imm0_15);
     v4i32 __builtin_msa_srli_w (v4i32, imm0_31);
     v2i64 __builtin_msa_srli_d (v2i64, imm0_63);

     v16i8 __builtin_msa_srlr_b (v16i8, v16i8);
     v8i16 __builtin_msa_srlr_h (v8i16, v8i16);
     v4i32 __builtin_msa_srlr_w (v4i32, v4i32);
     v2i64 __builtin_msa_srlr_d (v2i64, v2i64);

     v16i8 __builtin_msa_srlri_b (v16i8, imm0_7);
     v8i16 __builtin_msa_srlri_h (v8i16, imm0_15);
     v4i32 __builtin_msa_srlri_w (v4i32, imm0_31);
     v2i64 __builtin_msa_srlri_d (v2i64, imm0_63);

     void __builtin_msa_st_b (v16i8, void *, imm_n512_511);
     void __builtin_msa_st_h (v8i16, void *, imm_n1024_1022);
     void __builtin_msa_st_w (v4i32, void *, imm_n2048_2044);
     void __builtin_msa_st_d (v2i64, void *, imm_n4096_4088);

     v16i8 __builtin_msa_subs_s_b (v16i8, v16i8);
     v8i16 __builtin_msa_subs_s_h (v8i16, v8i16);
     v4i32 __builtin_msa_subs_s_w (v4i32, v4i32);
     v2i64 __builtin_msa_subs_s_d (v2i64, v2i64);

     v16u8 __builtin_msa_subs_u_b (v16u8, v16u8);
     v8u16 __builtin_msa_subs_u_h (v8u16, v8u16);
     v4u32 __builtin_msa_subs_u_w (v4u32, v4u32);
     v2u64 __builtin_msa_subs_u_d (v2u64, v2u64);

     v16u8 __builtin_msa_subsus_u_b (v16u8, v16i8);
     v8u16 __builtin_msa_subsus_u_h (v8u16, v8i16);
     v4u32 __builtin_msa_subsus_u_w (v4u32, v4i32);
     v2u64 __builtin_msa_subsus_u_d (v2u64, v2i64);

     v16i8 __builtin_msa_subsuu_s_b (v16u8, v16u8);
     v8i16 __builtin_msa_subsuu_s_h (v8u16, v8u16);
     v4i32 __builtin_msa_subsuu_s_w (v4u32, v4u32);
     v2i64 __builtin_msa_subsuu_s_d (v2u64, v2u64);

     v16i8 __builtin_msa_subv_b (v16i8, v16i8);
     v8i16 __builtin_msa_subv_h (v8i16, v8i16);
     v4i32 __builtin_msa_subv_w (v4i32, v4i32);
     v2i64 __builtin_msa_subv_d (v2i64, v2i64);

     v16i8 __builtin_msa_subvi_b (v16i8, imm0_31);
     v8i16 __builtin_msa_subvi_h (v8i16, imm0_31);
     v4i32 __builtin_msa_subvi_w (v4i32, imm0_31);
     v2i64 __builtin_msa_subvi_d (v2i64, imm0_31);

     v16i8 __builtin_msa_vshf_b (v16i8, v16i8, v16i8);
     v8i16 __builtin_msa_vshf_h (v8i16, v8i16, v8i16);
     v4i32 __builtin_msa_vshf_w (v4i32, v4i32, v4i32);
     v2i64 __builtin_msa_vshf_d (v2i64, v2i64, v2i64);

     v16u8 __builtin_msa_xor_v (v16u8, v16u8);

     v16u8 __builtin_msa_xori_b (v16u8, imm0_255);

==============================================================================
File: gcc.info,  Node: |Other_MIPS_Built_in_Functions|,  Next: |MSP430_Built_in_Functions|,  Prev: MIPS SIMD Architecture (MSA) Support,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *Other_MIPS_Built_in_Functions*

6.60.17 Other MIPS Built-in Functions
-------------------------------------

GCC provides other MIPS-specific built-in functions:

'void __builtin_mips_cache (int OP, const volatile void *ADDR)'
     Insert a 'cache' instruction with operands OP and ADDR.  GCC
     defines the preprocessor macro '___GCC_HAVE_BUILTIN_MIPS_CACHE'
     when this function is available.

'unsigned int __builtin_mips_get_fcsr (void)'
'void __builtin_mips_set_fcsr (unsigned int VALUE)'
     Get and set the contents of the floating-point control and status
     register (FPU control register 31).  These functions are only
     available in hard-float code but can be called in both MIPS16 and
     non-MIPS16 contexts.

     '__builtin_mips_set_fcsr' can be used to change any bit of the
     register except the condition codes, which GCC assumes are
     preserved.

==============================================================================
File: gcc.info,  Node: |MSP430_Built_in_Functions|,  Next: |NDS32_Built_in_Functions|,  Prev: |Other_MIPS_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *MSP430_Built_in_Functions*

6.60.18 MSP430 Built-in Functions
---------------------------------

GCC provides a couple of special builtin functions to aid in the writing
of interrupt handlers in C.

'__bic_SR_register_on_exit (int MASK)'
     This clears the indicated bits in the saved copy of the status
     register currently residing on the stack.  This only works inside
     interrupt handlers and the changes to the status register will only
     take affect once the handler returns.

'__bis_SR_register_on_exit (int MASK)'
     This sets the indicated bits in the saved copy of the status
     register currently residing on the stack.  This only works inside
     interrupt handlers and the changes to the status register will only
     take affect once the handler returns.

'__delay_cycles (long long CYCLES)'
     This inserts an instruction sequence that takes exactly CYCLES
     cycles (between 0 and about 17E9) to complete.  The inserted
     sequence may use jumps, loops, or no-ops, and does not interfere
     with any other instructions.  Note that CYCLES must be a
     compile-time constant integer - that is, you must pass a number,
     not a variable that may be optimized to a constant later.  The
     number of cycles delayed by this builtin is exact.

==============================================================================
File: gcc.info,  Node: |NDS32_Built_in_Functions|,  Next: |picoChip_Built_in_Functions|,  Prev: |MSP430_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          *NDS32_Built_in_Functions*

6.60.19 NDS32 Built-in Functions
--------------------------------

These built-in functions are available for the NDS32 target:

 -- Built-in Function: void __builtin_nds32_isync (int *ADDR)
     Insert an ISYNC instruction into the instruction stream where ADDR
     is an instruction address for serialization.

 -- Built-in Function: void __builtin_nds32_isb (void)
     Insert an ISB instruction into the instruction stream.

 -- Built-in Function: int __builtin_nds32_mfsr (int SR)
     Return the content of a system register which is mapped by SR.

 -- Built-in Function: int __builtin_nds32_mfusr (int USR)
     Return the content of a user space register which is mapped by USR.

 -- Built-in Function: void __builtin_nds32_mtsr (int VALUE, int SR)
     Move the VALUE to a system register which is mapped by SR.

 -- Built-in Function: void __builtin_nds32_mtusr (int VALUE, int USR)
     Move the VALUE to a user space register which is mapped by USR.

 -- Built-in Function: void __builtin_nds32_setgie_en (void)
     Enable global interrupt.

 -- Built-in Function: void __builtin_nds32_setgie_dis (void)
     Disable global interrupt.

==============================================================================
File: gcc.info,  Node: |picoChip_Built_in_Functions|,  Next: |Basic_PowerPC_Built_in_Functions|,  Prev: |NDS32_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       *picoChip_Built_in_Functions*

6.60.20 picoChip Built-in Functions
-----------------------------------

GCC provides an interface to selected machine instructions from the
picoChip instruction set.

'int __builtin_sbc (int VALUE)'
     Sign bit count.  Return the number of consecutive bits in VALUE
     that have the same value as the sign bit.  The result is the number
     of leading sign bits minus one, giving the number of redundant sign
     bits in VALUE.

'int __builtin_byteswap (int VALUE)'
     Byte swap.  Return the result of swapping the upper and lower bytes
     of VALUE.

'int __builtin_brev (int VALUE)'
     Bit reversal.  Return the result of reversing the bits in VALUE.
     Bit 15 is swapped with bit 0, bit 14 is swapped with bit 1, and so
     on.

'int __builtin_adds (int X, int Y)'
     Saturating addition.  Return the result of adding X and Y, storing
     the value 32767 if the result overflows.

'int __builtin_subs (int X, int Y)'
     Saturating subtraction.  Return the result of subtracting Y from X,
     storing the value -32768 if the result overflows.

'void __builtin_halt (void)'
     Halt.  The processor stops execution.  This built-in is useful for
     implementing assertions.

==============================================================================
File: gcc.info,  Node: |Basic_PowerPC_Built_in_Functions|,  Next: |PowerPC_AltiVec/VSX_Built_in_Functions|,  Prev: |picoChip_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Basic_PowerPC_Built_in_Functions*

6.60.21 Basic PowerPC Built-in Functions
----------------------------------------

MENU

* |Basic_PowerPC_Built_in_Functions_Available_on_all_Configurations|::
* |Basic_PowerPC_Built_in_Functions_Available_on_ISA_2.05|::
* |Basic_PowerPC_Built_in_Functions_Available_on_ISA_2.06|::
* |Basic_PowerPC_Built_in_Functions_Available_on_ISA_2.07|::
* |Basic_PowerPC_Built_in_Functions_Available_on_ISA_3.0|::

This section describes PowerPC built-in functions that do not require
the inclusion of any special header files to declare prototypes or
provide macro definitions.  The sections that follow describe additional
PowerPC built-in functions.

==============================================================================
File: gcc.info,  Node: |Basic_PowerPC_Built_in_Functions_Available_on_all_Configurations|,  Next: |Basic_PowerPC_Built_in_Functions_Available_on_ISA_2.05|,  Up: Basic PowerPC Built-in Functions
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                  *Basic_PowerPC_Built_in_Functions_Available_on_all_Configurations*

6.60.21.1 Basic PowerPC Built-in Functions Available on all Configurations
--------------------------------------------------------------------------

 -- Built-in Function: void __builtin_cpu_init (void)
     This function is a 'nop' on the PowerPC platform and is included
     solely to maintain API compatibility with the x86 builtins.

 -- Built-in Function: int __builtin_cpu_is (const char *CPUNAME)
     This function returns a value of '1' if the run-time CPU is of type
     CPUNAME and returns '0' otherwise

     The '__builtin_cpu_is' function requires GLIBC 2.23 or newer which
     exports the hardware capability bits.  GCC defines the macro
     '__BUILTIN_CPU_SUPPORTS__' if the '__builtin_cpu_supports' built-in
     function is fully supported.

     If GCC was configured to use a GLIBC before 2.23, the built-in
     function '__builtin_cpu_is' always returns a 0 and the compiler
     issues a warning.

     The following CPU names can be detected:

     'power9'
          IBM POWER9 Server CPU.
     'power8'
          IBM POWER8 Server CPU.
     'power7'
          IBM POWER7 Server CPU.
     'power6x'
          IBM POWER6 Server CPU (RAW mode).
     'power6'
          IBM POWER6 Server CPU (Architected mode).
     'power5+'
          IBM POWER5+ Server CPU.
     'power5'
          IBM POWER5 Server CPU.
     'ppc970'
          IBM 970 Server CPU (ie, Apple G5).
     'power4'
          IBM POWER4 Server CPU.
     'ppca2'
          IBM A2 64-bit Embedded CPU
     'ppc476'
          IBM PowerPC 476FP 32-bit Embedded CPU.
     'ppc464'
          IBM PowerPC 464 32-bit Embedded CPU.
     'ppc440'
          PowerPC 440 32-bit Embedded CPU.
     'ppc405'
          PowerPC 405 32-bit Embedded CPU.
     'ppc-cell-be'
          IBM PowerPC Cell Broadband Engine Architecture CPU.

     Here is an example:
          #ifdef __BUILTIN_CPU_SUPPORTS__
            if (__builtin_cpu_is ("power8"))
              {
                 do_power8 (); // POWER8 specific implementation.
              }
            else
          #endif
              {
                 do_generic (); // Generic implementation.
              }

 -- Built-in Function: int __builtin_cpu_supports (const char *FEATURE)
     This function returns a value of '1' if the run-time CPU supports
     the HWCAP feature FEATURE and returns '0' otherwise.

     The '__builtin_cpu_supports' function requires GLIBC 2.23 or newer
     which exports the hardware capability bits.  GCC defines the macro
     '__BUILTIN_CPU_SUPPORTS__' if the '__builtin_cpu_supports' built-in
     function is fully supported.

     If GCC was configured to use a GLIBC before 2.23, the built-in
     function '__builtin_cpu_suports' always returns a 0 and the
     compiler issues a warning.

     The following features can be detected:

     '4xxmac'
          4xx CPU has a Multiply Accumulator.
     'altivec'
          CPU has a SIMD/Vector Unit.
     'arch_2_05'
          CPU supports ISA 2.05 (eg, POWER6)
     'arch_2_06'
          CPU supports ISA 2.06 (eg, POWER7)
     'arch_2_07'
          CPU supports ISA 2.07 (eg, POWER8)
     'arch_3_00'
          CPU supports ISA 3.0 (eg, POWER9)
     'archpmu'
          CPU supports the set of compatible performance monitoring
          events.
     'booke'
          CPU supports the Embedded ISA category.
     'cellbe'
          CPU has a CELL broadband engine.
     'darn'
          CPU supports the 'darn' (deliver a random number) instruction.
     'dfp'
          CPU has a decimal floating point unit.
     'dscr'
          CPU supports the data stream control register.
     'ebb'
          CPU supports event base branching.
     'efpdouble'
          CPU has a SPE double precision floating point unit.
     'efpsingle'
          CPU has a SPE single precision floating point unit.
     'fpu'
          CPU has a floating point unit.
     'htm'
          CPU has hardware transaction memory instructions.
     'htm-nosc'
          Kernel aborts hardware transactions when a syscall is made.
     'htm-no-suspend'
          CPU supports hardware transaction memory but does not support
          the 'tsuspend.' instruction.
     'ic_snoop'
          CPU supports icache snooping capabilities.
     'ieee128'
          CPU supports 128-bit IEEE binary floating point instructions.
     'isel'
          CPU supports the integer select instruction.
     'mmu'
          CPU has a memory management unit.
     'notb'
          CPU does not have a timebase (eg, 601 and 403gx).
     'pa6t'
          CPU supports the PA Semi 6T CORE ISA.
     'power4'
          CPU supports ISA 2.00 (eg, POWER4)
     'power5'
          CPU supports ISA 2.02 (eg, POWER5)
     'power5+'
          CPU supports ISA 2.03 (eg, POWER5+)
     'power6x'
          CPU supports ISA 2.05 (eg, POWER6) extended opcodes mffgpr and
          mftgpr.
     'ppc32'
          CPU supports 32-bit mode execution.
     'ppc601'
          CPU supports the old POWER ISA (eg, 601)
          vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
