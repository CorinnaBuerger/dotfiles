     'ppc64'
          CPU supports 64-bit mode execution.
     'ppcle'
          CPU supports a little-endian mode that uses address swizzling.
     'scv'
          Kernel supports system call vectored.
     'smt'
          CPU support simultaneous multi-threading.
     'spe'
          CPU has a signal processing extension unit.
     'tar'
          CPU supports the target address register.
     'true_le'
          CPU supports true little-endian mode.
     'ucache'
          CPU has unified I/D cache.
     'vcrypto'
          CPU supports the vector cryptography instructions.
     'vsx'
          CPU supports the vector-scalar extension.

     Here is an example:
          #ifdef __BUILTIN_CPU_SUPPORTS__
            if (__builtin_cpu_supports ("fpu"))
              {
                 asm("fadd %0,%1,%2" : "=d"(dst) : "d"(src1), "d"(src2));
              }
            else
          #endif
              {
                 dst = __fadd (src1, src2); // Software FP addition function.
              }

 The following built-in functions are also available on all PowerPC
processors:
     uint64_t __builtin_ppc_get_timebase ();
     unsigned long __builtin_ppc_mftb ();
     double __builtin_unpack_ibm128 (__ibm128, int);
     __ibm128 __builtin_pack_ibm128 (double, double);
     double __builtin_mffs (void);
     void __builtin_mtfsb0 (const int);
     void __builtin_mtfsb1 (const int);
     void __builtin_set_fpscr_rn (int);

 The '__builtin_ppc_get_timebase' and '__builtin_ppc_mftb' functions
generate instructions to read the Time Base Register.  The
'__builtin_ppc_get_timebase' function may generate multiple instructions
and always returns the 64 bits of the Time Base Register.  The
'__builtin_ppc_mftb' function always generates one instruction and
returns the Time Base Register value as an unsigned long, throwing away
the most significant word on 32-bit environments.  The '__builtin_mffs'
return the value of the FPSCR register.  Note, ISA 3.0 supports the
'__builtin_mffsl()' which permits software to read the control and
non-sticky status bits in the FSPCR without the higher latency
associated with accessing the sticky status bits.  The
'__builtin_mtfsb0' and '__builtin_mtfsb1' take the bit to change as an
argument.  The valid bit range is between 0 and 31.  The builtins map to
the 'mtfsb0' and 'mtfsb1' instructions which take the argument and add
32.  Hence these instructions only modify the FPSCR[32:63] bits by
changing the specified bit to a zero or one respectively.  The
'__builtin_set_fpscr_rn' builtin allows changing both of the floating
point rounding mode bits.  The argument is a 2-bit value.  The argument
can either be a 'const int' or stored in a variable.  The builtin uses
the ISA 3.0 instruction 'mffscrn' if available, otherwise it reads the
FPSCR, masks the current rounding mode bits out and OR's in the new
value.

==============================================================================
File: gcc.info,  Node: |Basic_PowerPC_Built_in_Functions_Available_on_ISA_2.05|,  Next: |Basic_PowerPC_Built_in_Functions_Available_on_ISA_2.06|,  Prev: |Basic_PowerPC_Built_in_Functions_Available_on_all_Configurations|,  Up: |Basic_PowerPC_Built_in_Functions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                            *Basic_PowerPC_Built_in_Functions_Available_on_ISA_2.05*

6.60.21.2 Basic PowerPC Built-in Functions Available on ISA 2.05
.....-----------------------------------------------------------

The basic built-in functions described in this section are available on
the PowerPC family of processors starting with ISA 2.05 or later.
Unless specific options are explicitly disabled on the command line,
specifying option '-mcpu=power6' has the effect of enabling the
'-mpowerpc64', '-mpowerpc-gpopt', '-mpowerpc-gfxopt', '-mmfcrf',
'-mpopcntb', '-mfprnd', '-mcmpb', '-mhard-dfp', and '-mrecip-precision'
options.  Specify the '-maltivec' and '-mfpgpr' options explicitly in
combination with the above options if they are desired.

 The following functions require option '-mcmpb'.
     unsigned long long __builtin_cmpb (unsigned long long int, unsigned long long int);
     unsigned int __builtin_cmpb (unsigned int, unsigned int);

 The '__builtin_cmpb' function performs a byte-wise compare on the
contents of its two arguments, returning the result of the byte-wise
comparison as the returned value.  For each byte comparison, the
corresponding byte of the return value holds 0xff if the input bytes are
equal and 0 if the input bytes are not equal.  If either of the
arguments to this built-in function is wider than 32 bits, the function
call expands into the form that expects 'unsigned long long int'
arguments which is only available on 64-bit targets.

 The following built-in functions are available when hardware decimal
floating point ('-mhard-dfp') is available:
     void __builtin_set_fpscr_drn(int);
     _Decimal64 __builtin_ddedpd (int, _Decimal64);
     _Decimal128 __builtin_ddedpdq (int, _Decimal128);
     _Decimal64 __builtin_denbcd (int, _Decimal64);
     _Decimal128 __builtin_denbcdq (int, _Decimal128);
     _Decimal64 __builtin_diex (long long, _Decimal64);
     _Decimal128 _builtin_diexq (long long, _Decimal128);
     _Decimal64 __builtin_dscli (_Decimal64, int);
     _Decimal128 __builtin_dscliq (_Decimal128, int);
     _Decimal64 __builtin_dscri (_Decimal64, int);
     _Decimal128 __builtin_dscriq (_Decimal128, int);
     long long __builtin_dxex (_Decimal64);
     long long __builtin_dxexq (_Decimal128);
     _Decimal128 __builtin_pack_dec128 (unsigned long long, unsigned long long);
     unsigned long long __builtin_unpack_dec128 (_Decimal128, int);

     The __builtin_set_fpscr_drn builtin allows changing the three decimal
     floating point rounding mode bits.  The argument is a 3-bit value.  The
     argument can either be a const int or the value can be stored in
     a variable.
     The builtin uses the ISA 3.0 instruction mffscdrn if available.
     Otherwise the builtin reads the FPSCR, masks the current decimal rounding
     mode bits out and OR's in the new value.


 The following functions require '-mhard-float', '-mpowerpc-gfxopt', and
'-mpopcntb' options.

     double __builtin_recipdiv (double, double);
     float __builtin_recipdivf (float, float);
     double __builtin_rsqrt (double);
     float __builtin_rsqrtf (float);

 The 'vec_rsqrt', '__builtin_rsqrt', and '__builtin_rsqrtf' functions
generate multiple instructions to implement the reciprocal sqrt
functionality using reciprocal sqrt estimate instructions.

 The '__builtin_recipdiv', and '__builtin_recipdivf' functions generate
multiple instructions to implement division using the reciprocal
estimate instructions.

 The following functions require '-mhard-float' and '-mmultiple'
options.

 The '__builtin_unpack_longdouble' function takes a 'long double'
argument and a compile time constant of 0 or 1.  If the constant is 0,
the first 'double' within the 'long double' is returned, otherwise the
second 'double' is returned.  The '__builtin_unpack_longdouble' function
is only available if 'long double' uses the IBM extended double
representation.

 The '__builtin_pack_longdouble' function takes two 'double' arguments
and returns a 'long double' value that combines the two arguments.  The
'__builtin_pack_longdouble' function is only available if 'long double'
uses the IBM extended double representation.

 The '__builtin_unpack_ibm128' function takes a '__ibm128' argument and
a compile time constant of 0 or 1.  If the constant is 0, the first
'double' within the '__ibm128' is returned, otherwise the second
'double' is returned.

 The '__builtin_pack_ibm128' function takes two 'double' arguments and
returns a '__ibm128' value that combines the two arguments.

 Additional built-in functions are available for the 64-bit PowerPC
family of processors, for efficient use of 128-bit floating point
('__float128') values.

==============================================================================
File: gcc.info,  Node: |Basic_PowerPC_Built_in_Functions_Available_on_ISA_2.06|,  Next: |Basic_PowerPC_Built_in_Functions_Available_on_ISA_2.07|,  Prev: |Basic_PowerPC_Built_in_Functions_Available_on_ISA_2.05|,  Up: |Basic_PowerPC_Built_in_Functions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                            *Basic_PowerPC_Built_in_Functions_Available_on_ISA_2.06*

6.60.21.3 Basic PowerPC Built-in Functions Available on ISA 2.06
.....-----------------------------------------------------------

The basic built-in functions described in this section are available on
the PowerPC family of processors starting with ISA 2.05 or later.
Unless specific options are explicitly disabled on the command line,
specifying option '-mcpu=power7' has the effect of enabling all the same
options as for '-mcpu=power6' in addition to the '-maltivec',
'-mpopcntd', and '-mvsx' options.

 The following basic built-in functions require '-mpopcntd':
     unsigned int __builtin_addg6s (unsigned int, unsigned int);
     long long __builtin_bpermd (long long, long long);
     unsigned int __builtin_cbcdtd (unsigned int);
     unsigned int __builtin_cdtbcd (unsigned int);
     long long __builtin_divde (long long, long long);
     unsigned long long __builtin_divdeu (unsigned long long, unsigned long long);
     int __builtin_divwe (int, int);
     unsigned int __builtin_divweu (unsigned int, unsigned int);
     vector __int128 __builtin_pack_vector_int128 (long long, long long);
     void __builtin_rs6000_speculation_barrier (void);
     long long __builtin_unpack_vector_int128 (vector __int128, signed char);

 Of these, the '__builtin_divde' and '__builtin_divdeu' functions
require a 64-bit environment.

 The following basic built-in functions, which are also supported on x86
targets, require '-mfloat128'.
     __float128 __builtin_fabsq (__float128);
     __float128 __builtin_copysignq (__float128, __float128);
     __float128 __builtin_infq (void);
     __float128 __builtin_huge_valq (void);
     __float128 __builtin_nanq (void);
     __float128 __builtin_nansq (void);

     __float128 __builtin_sqrtf128 (__float128);
     __float128 __builtin_fmaf128 (__float128, __float128, __float128);

==============================================================================
File: gcc.info,  Node: |Basic_PowerPC_Built_in_Functions_Available_on_ISA_2.07|,  Next: |Basic_PowerPC_Built_in_Functions_Available_on_ISA_3.0|,  Prev: |Basic_PowerPC_Built_in_Functions_Available_on_ISA_2.06|,  Up: |Basic_PowerPC_Built_in_Functions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                            *Basic_PowerPC_Built_in_Functions_Available_on_ISA_2.07*

6.60.21.4 Basic PowerPC Built-in Functions Available on ISA 2.07
.....-----------------------------------------------------------

The basic built-in functions described in this section are available on
the PowerPC family of processors starting with ISA 2.07 or later.
Unless specific options are explicitly disabled on the command line,
specifying option '-mcpu=power8' has the effect of enabling all the same
options as for '-mcpu=power7' in addition to the '-mpower8-fusion',
'-mpower8-vector', '-mcrypto', '-mhtm', '-mquad-memory', and
'-mquad-memory-atomic' options.

 This section intentionally empty.

==============================================================================
File: gcc.info,  Node: |Basic_PowerPC_Built_in_Functions_Available_on_ISA_3.0|,  Prev: |Basic_PowerPC_Built_in_Functions_Available_on_ISA_2.07|,  Up: |Basic_PowerPC_Built_in_Functions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                             *Basic_PowerPC_Built_in_Functions_Available_on_ISA_3.0*

6.60.21.5 Basic PowerPC Built-in Functions Available on ISA 3.0
.....----------------------------------------------------------

The basic built-in functions described in this section are available on
the PowerPC family of processors starting with ISA 3.0 or later.  Unless
specific options are explicitly disabled on the command line, specifying
option '-mcpu=power9' has the effect of enabling all the same options as
for '-mcpu=power8' in addition to the '-misel' option.

 The following built-in functions are available on Linux 64-bit systems
that use the ISA 3.0 instruction set ('-mcpu=power9'):

'__float128 __builtin_addf128_round_to_odd (__float128, __float128)'
     Perform a 128-bit IEEE floating point add using round to odd as the
     rounding mode.

'__float128 __builtin_subf128_round_to_odd (__float128, __float128)'
     Perform a 128-bit IEEE floating point subtract using round to odd
     as the rounding mode.

'__float128 __builtin_mulf128_round_to_odd (__float128, __float128)'
     Perform a 128-bit IEEE floating point multiply using round to odd
     as the rounding mode.

'__float128 __builtin_divf128_round_to_odd (__float128, __float128)'
     Perform a 128-bit IEEE floating point divide using round to odd as
     the rounding mode.

'__float128 __builtin_sqrtf128_round_to_odd (__float128)'
     Perform a 128-bit IEEE floating point square root using round to
     odd as the rounding mode.

'__float128 __builtin_fmaf128_round_to_odd (__float128, __float128, __float128)'
     Perform a 128-bit IEEE floating point fused multiply and add
     operation using round to odd as the rounding mode.

'double __builtin_truncf128_round_to_odd (__float128)'
     Convert a 128-bit IEEE floating point value to 'double' using round
     to odd as the rounding mode.

 The following additional built-in functions are also available for the
PowerPC family of processors, starting with ISA 3.0 or later:
     long long __builtin_darn (void);
     long long __builtin_darn_raw (void);
     int __builtin_darn_32 (void);

 The '__builtin_darn' and '__builtin_darn_raw' functions require a
64-bit environment supporting ISA 3.0 or later.  The '__builtin_darn'
function provides a 64-bit conditioned random number.  The
'__builtin_darn_raw' function provides a 64-bit raw random number.  The
'__builtin_darn_32' function provides a 32-bit conditioned random
number.

 The following additional built-in functions are also available for the
PowerPC family of processors, starting with ISA 3.0 or later:

     int __builtin_byte_in_set (unsigned char u, unsigned long long set);
     int __builtin_byte_in_range (unsigned char u, unsigned int range);
     int __builtin_byte_in_either_range (unsigned char u, unsigned int ranges);

     int __builtin_dfp_dtstsfi_lt (unsigned int comparison, _Decimal64 value);
     int __builtin_dfp_dtstsfi_lt (unsigned int comparison, _Decimal128 value);
     int __builtin_dfp_dtstsfi_lt_dd (unsigned int comparison, _Decimal64 value);
     int __builtin_dfp_dtstsfi_lt_td (unsigned int comparison, _Decimal128 value);

     int __builtin_dfp_dtstsfi_gt (unsigned int comparison, _Decimal64 value);
     int __builtin_dfp_dtstsfi_gt (unsigned int comparison, _Decimal128 value);
     int __builtin_dfp_dtstsfi_gt_dd (unsigned int comparison, _Decimal64 value);
     int __builtin_dfp_dtstsfi_gt_td (unsigned int comparison, _Decimal128 value);

     int __builtin_dfp_dtstsfi_eq (unsigned int comparison, _Decimal64 value);
     int __builtin_dfp_dtstsfi_eq (unsigned int comparison, _Decimal128 value);
     int __builtin_dfp_dtstsfi_eq_dd (unsigned int comparison, _Decimal64 value);
     int __builtin_dfp_dtstsfi_eq_td (unsigned int comparison, _Decimal128 value);

     int __builtin_dfp_dtstsfi_ov (unsigned int comparison, _Decimal64 value);
     int __builtin_dfp_dtstsfi_ov (unsigned int comparison, _Decimal128 value);
     int __builtin_dfp_dtstsfi_ov_dd (unsigned int comparison, _Decimal64 value);
     int __builtin_dfp_dtstsfi_ov_td (unsigned int comparison, _Decimal128 value);

     double __builtin_mffsl(void);

 The '__builtin_byte_in_set' function requires a 64-bit environment
supporting ISA 3.0 or later.  This function returns a non-zero value if
and only if its 'u' argument exactly equals one of the eight bytes
contained within its 64-bit 'set' argument.

 The '__builtin_byte_in_range' and '__builtin_byte_in_either_range'
require an environment supporting ISA 3.0 or later.  For these two
functions, the 'range' argument is encoded as 4 bytes, organized as
'hi_1:lo_1:hi_2:lo_2'.  The '__builtin_byte_in_range' function returns a
non-zero value if and only if its 'u' argument is within the range
bounded between 'lo_2' and 'hi_2' inclusive.  The
'__builtin_byte_in_either_range' function returns non-zero if and only
if its 'u' argument is within either the range bounded between 'lo_1'
and 'hi_1' inclusive or the range bounded between 'lo_2' and 'hi_2'
inclusive.

 The '__builtin_dfp_dtstsfi_lt' function returns a non-zero value if and
only if the number of signficant digits of its 'value' argument is less
than its 'comparison' argument.  The '__builtin_dfp_dtstsfi_lt_dd' and
'__builtin_dfp_dtstsfi_lt_td' functions behave similarly, but require
that the type of the 'value' argument be '__Decimal64' and
'__Decimal128' respectively.

 The '__builtin_dfp_dtstsfi_gt' function returns a non-zero value if and
only if the number of signficant digits of its 'value' argument is
greater than its 'comparison' argument.  The
'__builtin_dfp_dtstsfi_gt_dd' and '__builtin_dfp_dtstsfi_gt_td'
functions behave similarly, but require that the type of the 'value'
argument be '__Decimal64' and '__Decimal128' respectively.

 The '__builtin_dfp_dtstsfi_eq' function returns a non-zero value if and
only if the number of signficant digits of its 'value' argument equals
its 'comparison' argument.  The '__builtin_dfp_dtstsfi_eq_dd' and
'__builtin_dfp_dtstsfi_eq_td' functions behave similarly, but require
that the type of the 'value' argument be '__Decimal64' and
'__Decimal128' respectively.

 The '__builtin_dfp_dtstsfi_ov' function returns a non-zero value if and
only if its 'value' argument has an undefined number of significant
digits, such as when 'value' is an encoding of 'NaN'.  The
'__builtin_dfp_dtstsfi_ov_dd' and '__builtin_dfp_dtstsfi_ov_td'
functions behave similarly, but require that the type of the 'value'
argument be '__Decimal64' and '__Decimal128' respectively.

 The '__builtin_mffsl' uses the ISA 3.0 'mffsl' instruction to read the
FPSCR. The instruction is a lower latency version of the 'mffs'
instruction.  If the 'mffsl' instruction is not available, then the
builtin uses the older 'mffs' instruction to read the FPSCR.

==============================================================================
File: gcc.info,  Node: |PowerPC_AltiVec/VSX_Built_in_Functions|,  Next: |PowerPC_Hardware_Transactional_Memory_Built_in_Functions|,  Prev: |Basic_PowerPC_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *PowerPC_AltiVec/VSX_Built_in_Functions*

6.60.22 PowerPC AltiVec/VSX Built-in Functions
----------------------------------------------

GCC provides an interface for the PowerPC family of processors to access
the AltiVec operations described in Motorola's AltiVec Programming
Interface Manual.  The interface is made available by including
'<altivec.h>' and using '-maltivec' and '-mabi=altivec'.  The interface
supports the following vector types.

     vector unsigned char
     vector signed char
     vector bool char

     vector unsigned short
     vector signed short
     vector bool short
     vector pixel

     vector unsigned int
     vector signed int
     vector bool int
     vector float

 GCC's implementation of the high-level language interface available
from C and C++ code differs from Motorola's documentation in several
ways.

   * A vector constant is a list of constant expressions within curly
     braces.

   * A vector initializer requires no cast if the vector constant is of
     the same type as the variable it is initializing.

   * If 'signed' or 'unsigned' is omitted, the signedness of the vector
     type is the default signedness of the base type.  The default
     varies depending on the operating system, so a portable program
     should always specify the signedness.

   * Compiling with '-maltivec' adds keywords '__vector', 'vector',
     '__pixel', 'pixel', '__bool' and 'bool'.  When compiling ISO C, the
     context-sensitive substitution of the keywords 'vector', 'pixel'
     and 'bool' is disabled.  To use them, you must include
     '<altivec.h>' instead.

   * GCC allows using a 'typedef' name as the type specifier for a
     vector type, but only under the following circumstances:

        * When using '__vector' instead of 'vector'; for example,

               typedef signed short int16;
               __vector int16 data;

        * When using 'vector' in keyword-and-predefine mode; for
          example,

               typedef signed short int16;
               vector int16 data;

          Note that keyword-and-predefine mode is enabled by disabling
          GNU extensions (e.g., by using '-std=c11') and including
          '<altivec.h>'.

   * For C, overloaded functions are implemented with macros so the
     following does not work:

            vec_add ((vector signed int){1, 2, 3, 4}, foo);

     Since 'vec_add' is a macro, the vector constant in the example is
     treated as four separate arguments.  Wrap the entire argument in
     parentheses for this to work.

 _Note:_ Only the '<altivec.h>' interface is supported.  Internally, GCC
uses built-in functions to achieve the functionality in the
aforementioned header file, but they are not supported and are subject
to change without notice.

 GCC complies with the OpenPOWER 64-Bit ELF V2 ABI Specification, which
may be found at
<http://openpowerfoundation.org/wp-content/uploads/resources/leabi-prd/content/index.html>.
Appendix A of this document lists the vector API interfaces that must be
provided by compliant compilers.  Programmers should preferentially use
the interfaces described therein.  However, historically GCC has
provided additional interfaces for access to vector instructions.  These
are briefly described below.

MENU

* |PowerPC_AltiVec_Built_in_Functions_on_ISA_2.05|::
* |PowerPC_AltiVec_Built_in_Functions_Available_on_ISA_2.06|::
* |PowerPC_AltiVec_Built_in_Functions_Available_on_ISA_2.07|::
* |PowerPC_AltiVec_Built_in_Functions_Available_on_ISA_3.0|::

==============================================================================
File: gcc.info,  Node: |PowerPC_AltiVec_Built_in_Functions_on_ISA_2.05|,  Next: |PowerPC_AltiVec_Built_in_Functions_Available_on_ISA_2.06|,  Up: |PowerPC_AltiVec/VSX_Built_in_Functions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                    *PowerPC_AltiVec_Built_in_Functions_on_ISA_2.05*

6.60.22.1 PowerPC AltiVec Built-in Functions on ISA 2.05
.....---------------------------------------------------

The following interfaces are supported for the generic and specific
AltiVec operations and the AltiVec predicates.  In cases where there is
a direct mapping between generic and specific operations, only the
generic names are shown here, although the specific operations can also
be used.

 Arguments that are documented as 'const int' require literal integral
values within the range required for that operation.

     vector signed char vec_abs (vector signed char);
     vector signed short vec_abs (vector signed short);
     vector signed int vec_abs (vector signed int);
     vector float vec_abs (vector float);

     vector signed char vec_abss (vector signed char);
     vector signed short vec_abss (vector signed short);
     vector signed int vec_abss (vector signed int);

     vector signed char vec_add (vector bool char, vector signed char);
     vector signed char vec_add (vector signed char, vector bool char);
     vector signed char vec_add (vector signed char, vector signed char);
     vector unsigned char vec_add (vector bool char, vector unsigned char);
     vector unsigned char vec_add (vector unsigned char, vector bool char);
     vector unsigned char vec_add (vector unsigned char, vector unsigned char);
     vector signed short vec_add (vector bool short, vector signed short);
     vector signed short vec_add (vector signed short, vector bool short);
     vector signed short vec_add (vector signed short, vector signed short);
     vector unsigned short vec_add (vector bool short, vector unsigned short);
     vector unsigned short vec_add (vector unsigned short, vector bool short);
     vector unsigned short vec_add (vector unsigned short, vector unsigned short);
     vector signed int vec_add (vector bool int, vector signed int);
     vector signed int vec_add (vector signed int, vector bool int);
     vector signed int vec_add (vector signed int, vector signed int);
     vector unsigned int vec_add (vector bool int, vector unsigned int);
     vector unsigned int vec_add (vector unsigned int, vector bool int);
     vector unsigned int vec_add (vector unsigned int, vector unsigned int);
     vector float vec_add (vector float, vector float);

     vector unsigned int vec_addc (vector unsigned int, vector unsigned int);

     vector unsigned char vec_adds (vector bool char, vector unsigned char);
     vector unsigned char vec_adds (vector unsigned char, vector bool char);
     vector unsigned char vec_adds (vector unsigned char, vector unsigned char);
     vector signed char vec_adds (vector bool char, vector signed char);
     vector signed char vec_adds (vector signed char, vector bool char);
     vector signed char vec_adds (vector signed char, vector signed char);
     vector unsigned short vec_adds (vector bool short, vector unsigned short);
     vector unsigned short vec_adds (vector unsigned short, vector bool short);
     vector unsigned short vec_adds (vector unsigned short, vector unsigned short);
     vector signed short vec_adds (vector bool short, vector signed short);
     vector signed short vec_adds (vector signed short, vector bool short);
     vector signed short vec_adds (vector signed short, vector signed short);
     vector unsigned int vec_adds (vector bool int, vector unsigned int);
     vector unsigned int vec_adds (vector unsigned int, vector bool int);
     vector unsigned int vec_adds (vector unsigned int, vector unsigned int);
     vector signed int vec_adds (vector bool int, vector signed int);
     vector signed int vec_adds (vector signed int, vector bool int);
     vector signed int vec_adds (vector signed int, vector signed int);

     int vec_all_eq (vector signed char, vector bool char);
     int vec_all_eq (vector signed char, vector signed char);
     int vec_all_eq (vector unsigned char, vector bool char);
     int vec_all_eq (vector unsigned char, vector unsigned char);
     int vec_all_eq (vector bool char, vector bool char);
     int vec_all_eq (vector bool char, vector unsigned char);
     int vec_all_eq (vector bool char, vector signed char);
     int vec_all_eq (vector signed short, vector bool short);
     int vec_all_eq (vector signed short, vector signed short);
     int vec_all_eq (vector unsigned short, vector bool short);
     int vec_all_eq (vector unsigned short, vector unsigned short);
     int vec_all_eq (vector bool short, vector bool short);
     int vec_all_eq (vector bool short, vector unsigned short);
     int vec_all_eq (vector bool short, vector signed short);
     int vec_all_eq (vector pixel, vector pixel);
     int vec_all_eq (vector signed int, vector bool int);
     int vec_all_eq (vector signed int, vector signed int);
     int vec_all_eq (vector unsigned int, vector bool int);
     int vec_all_eq (vector unsigned int, vector unsigned int);
     int vec_all_eq (vector bool int, vector bool int);
     int vec_all_eq (vector bool int, vector unsigned int);
     int vec_all_eq (vector bool int, vector signed int);
     int vec_all_eq (vector float, vector float);

     int vec_all_ge (vector bool char, vector unsigned char);
     int vec_all_ge (vector unsigned char, vector bool char);
     int vec_all_ge (vector unsigned char, vector unsigned char);
     int vec_all_ge (vector bool char, vector signed char);
     int vec_all_ge (vector signed char, vector bool char);
     int vec_all_ge (vector signed char, vector signed char);
     int vec_all_ge (vector bool short, vector unsigned short);
     int vec_all_ge (vector unsigned short, vector bool short);
     int vec_all_ge (vector unsigned short, vector unsigned short);
     int vec_all_ge (vector signed short, vector signed short);
     int vec_all_ge (vector bool short, vector signed short);
     int vec_all_ge (vector signed short, vector bool short);
     int vec_all_ge (vector bool int, vector unsigned int);
     int vec_all_ge (vector unsigned int, vector bool int);
     int vec_all_ge (vector unsigned int, vector unsigned int);
     int vec_all_ge (vector bool int, vector signed int);
     int vec_all_ge (vector signed int, vector bool int);
     int vec_all_ge (vector signed int, vector signed int);
     int vec_all_ge (vector float, vector float);

     int vec_all_gt (vector bool char, vector unsigned char);
     int vec_all_gt (vector unsigned char, vector bool char);
     int vec_all_gt (vector unsigned char, vector unsigned char);
     int vec_all_gt (vector bool char, vector signed char);
     int vec_all_gt (vector signed char, vector bool char);
     int vec_all_gt (vector signed char, vector signed char);
     int vec_all_gt (vector bool short, vector unsigned short);
     int vec_all_gt (vector unsigned short, vector bool short);
     int vec_all_gt (vector unsigned short, vector unsigned short);
     int vec_all_gt (vector bool short, vector signed short);
     int vec_all_gt (vector signed short, vector bool short);
     int vec_all_gt (vector signed short, vector signed short);
     int vec_all_gt (vector bool int, vector unsigned int);
     int vec_all_gt (vector unsigned int, vector bool int);
     int vec_all_gt (vector unsigned int, vector unsigned int);
     int vec_all_gt (vector bool int, vector signed int);
     int vec_all_gt (vector signed int, vector bool int);
     int vec_all_gt (vector signed int, vector signed int);
     int vec_all_gt (vector float, vector float);

     int vec_all_in (vector float, vector float);

     int vec_all_le (vector bool char, vector unsigned char);
     int vec_all_le (vector unsigned char, vector bool char);
     int vec_all_le (vector unsigned char, vector unsigned char);
     int vec_all_le (vector bool char, vector signed char);
     int vec_all_le (vector signed char, vector bool char);
     int vec_all_le (vector signed char, vector signed char);
     int vec_all_le (vector bool short, vector unsigned short);
     int vec_all_le (vector unsigned short, vector bool short);
     int vec_all_le (vector unsigned short, vector unsigned short);
     int vec_all_le (vector bool short, vector signed short);
     int vec_all_le (vector signed short, vector bool short);
     int vec_all_le (vector signed short, vector signed short);
     int vec_all_le (vector bool int, vector unsigned int);
     int vec_all_le (vector unsigned int, vector bool int);
     int vec_all_le (vector unsigned int, vector unsigned int);
     int vec_all_le (vector bool int, vector signed int);
     int vec_all_le (vector signed int, vector bool int);
     int vec_all_le (vector signed int, vector signed int);
     int vec_all_le (vector float, vector float);

     int vec_all_lt (vector bool char, vector unsigned char);
     int vec_all_lt (vector unsigned char, vector bool char);
     int vec_all_lt (vector unsigned char, vector unsigned char);
     int vec_all_lt (vector bool char, vector signed char);
     int vec_all_lt (vector signed char, vector bool char);
     int vec_all_lt (vector signed char, vector signed char);
     int vec_all_lt (vector bool short, vector unsigned short);
     int vec_all_lt (vector unsigned short, vector bool short);
     int vec_all_lt (vector unsigned short, vector unsigned short);
     int vec_all_lt (vector bool short, vector signed short);
     int vec_all_lt (vector signed short, vector bool short);
     int vec_all_lt (vector signed short, vector signed short);
     int vec_all_lt (vector bool int, vector unsigned int);
     int vec_all_lt (vector unsigned int, vector bool int);
     int vec_all_lt (vector unsigned int, vector unsigned int);
     int vec_all_lt (vector bool int, vector signed int);
     int vec_all_lt (vector signed int, vector bool int);
     int vec_all_lt (vector signed int, vector signed int);
     int vec_all_lt (vector float, vector float);

     int vec_all_nan (vector float);

     int vec_all_ne (vector signed char, vector bool char);
     int vec_all_ne (vector signed char, vector signed char);
     int vec_all_ne (vector unsigned char, vector bool char);
     int vec_all_ne (vector unsigned char, vector unsigned char);
     int vec_all_ne (vector bool char, vector bool char);
     int vec_all_ne (vector bool char, vector unsigned char);
     int vec_all_ne (vector bool char, vector signed char);
     int vec_all_ne (vector signed short, vector bool short);
     int vec_all_ne (vector signed short, vector signed short);
     int vec_all_ne (vector unsigned short, vector bool short);
     int vec_all_ne (vector unsigned short, vector unsigned short);
     int vec_all_ne (vector bool short, vector bool short);
     int vec_all_ne (vector bool short, vector unsigned short);
     int vec_all_ne (vector bool short, vector signed short);
     int vec_all_ne (vector pixel, vector pixel);
     int vec_all_ne (vector signed int, vector bool int);
     int vec_all_ne (vector signed int, vector signed int);
     int vec_all_ne (vector unsigned int, vector bool int);
     int vec_all_ne (vector unsigned int, vector unsigned int);
     int vec_all_ne (vector bool int, vector bool int);
     int vec_all_ne (vector bool int, vector unsigned int);
     int vec_all_ne (vector bool int, vector signed int);
     int vec_all_ne (vector float, vector float);

     int vec_all_nge (vector float, vector float);

     int vec_all_ngt (vector float, vector float);

     int vec_all_nle (vector float, vector float);

     int vec_all_nlt (vector float, vector float);

     int vec_all_numeric (vector float);

     vector float vec_and (vector float, vector float);
     vector float vec_and (vector float, vector bool int);
     vector float vec_and (vector bool int, vector float);
     vector bool int vec_and (vector bool int, vector bool int);
     vector signed int vec_and (vector bool int, vector signed int);
     vector signed int vec_and (vector signed int, vector bool int);
     vector signed int vec_and (vector signed int, vector signed int);
     vector unsigned int vec_and (vector bool int, vector unsigned int);
     vector unsigned int vec_and (vector unsigned int, vector bool int);
     vector unsigned int vec_and (vector unsigned int, vector unsigned int);
     vector bool short vec_and (vector bool short, vector bool short);
     vector signed short vec_and (vector bool short, vector signed short);
     vector signed short vec_and (vector signed short, vector bool short);
     vector signed short vec_and (vector signed short, vector signed short);
     vector unsigned short vec_and (vector bool short, vector unsigned short);
     vector unsigned short vec_and (vector unsigned short, vector bool short);
     vector unsigned short vec_and (vector unsigned short, vector unsigned short);
     vector signed char vec_and (vector bool char, vector signed char);
     vector bool char vec_and (vector bool char, vector bool char);
     vector signed char vec_and (vector signed char, vector bool char);
     vector signed char vec_and (vector signed char, vector signed char);
     vector unsigned char vec_and (vector bool char, vector unsigned char);
     vector unsigned char vec_and (vector unsigned char, vector bool char);
     vector unsigned char vec_and (vector unsigned char, vector unsigned char);

     vector float vec_andc (vector float, vector float);
     vector float vec_andc (vector float, vector bool int);
     vector float vec_andc (vector bool int, vector float);
     vector bool int vec_andc (vector bool int, vector bool int);
     vector signed int vec_andc (vector bool int, vector signed int);
     vector signed int vec_andc (vector signed int, vector bool int);
     vector signed int vec_andc (vector signed int, vector signed int);
     vector unsigned int vec_andc (vector bool int, vector unsigned int);
     vector unsigned int vec_andc (vector unsigned int, vector bool int);
     vector unsigned int vec_andc (vector unsigned int, vector unsigned int);
     vector bool short vec_andc (vector bool short, vector bool short);
     vector signed short vec_andc (vector bool short, vector signed short);
     vector signed short vec_andc (vector signed short, vector bool short);
     vector signed short vec_andc (vector signed short, vector signed short);
     vector unsigned short vec_andc (vector bool short, vector unsigned short);
     vector unsigned short vec_andc (vector unsigned short, vector bool short);
     vector unsigned short vec_andc (vector unsigned short, vector unsigned short);
     vector signed char vec_andc (vector bool char, vector signed char);
     vector bool char vec_andc (vector bool char, vector bool char);
     vector signed char vec_andc (vector signed char, vector bool char);
     vector signed char vec_andc (vector signed char, vector signed char);
     vector unsigned char vec_andc (vector bool char, vector unsigned char);
     vector unsigned char vec_andc (vector unsigned char, vector bool char);
     vector unsigned char vec_andc (vector unsigned char, vector unsigned char);

     int vec_any_eq (vector signed char, vector bool char);
     int vec_any_eq (vector signed char, vector signed char);
     int vec_any_eq (vector unsigned char, vector bool char);
     int vec_any_eq (vector unsigned char, vector unsigned char);
     int vec_any_eq (vector bool char, vector bool char);
     int vec_any_eq (vector bool char, vector unsigned char);
     int vec_any_eq (vector bool char, vector signed char);
     int vec_any_eq (vector signed short, vector bool short);
     int vec_any_eq (vector signed short, vector signed short);
     int vec_any_eq (vector unsigned short, vector bool short);
     int vec_any_eq (vector unsigned short, vector unsigned short);
     int vec_any_eq (vector bool short, vector bool short);
     int vec_any_eq (vector bool short, vector unsigned short);
     int vec_any_eq (vector bool short, vector signed short);
     int vec_any_eq (vector pixel, vector pixel);
     int vec_any_eq (vector signed int, vector bool int);
     int vec_any_eq (vector signed int, vector signed int);
     int vec_any_eq (vector unsigned int, vector bool int);
     int vec_any_eq (vector unsigned int, vector unsigned int);
     int vec_any_eq (vector bool int, vector bool int);
     int vec_any_eq (vector bool int, vector unsigned int);
     int vec_any_eq (vector bool int, vector signed int);
     int vec_any_eq (vector float, vector float);

     int vec_any_ge (vector signed char, vector bool char);
     int vec_any_ge (vector unsigned char, vector bool char);
     int vec_any_ge (vector unsigned char, vector unsigned char);
     int vec_any_ge (vector signed char, vector signed char);
     int vec_any_ge (vector bool char, vector unsigned char);
     int vec_any_ge (vector bool char, vector signed char);
     int vec_any_ge (vector unsigned short, vector bool short);
     int vec_any_ge (vector unsigned short, vector unsigned short);
     int vec_any_ge (vector signed short, vector signed short);
     int vec_any_ge (vector signed short, vector bool short);
     int vec_any_ge (vector bool short, vector unsigned short);
     int vec_any_ge (vector bool short, vector signed short);
     int vec_any_ge (vector signed int, vector bool int);
     int vec_any_ge (vector unsigned int, vector bool int);
     int vec_any_ge (vector unsigned int, vector unsigned int);
     int vec_any_ge (vector signed int, vector signed int);
     int vec_any_ge (vector bool int, vector unsigned int);
     int vec_any_ge (vector bool int, vector signed int);
     int vec_any_ge (vector float, vector float);

     int vec_any_gt (vector bool char, vector unsigned char);
     int vec_any_gt (vector unsigned char, vector bool char);
     int vec_any_gt (vector unsigned char, vector unsigned char);
     int vec_any_gt (vector bool char, vector signed char);
     int vec_any_gt (vector signed char, vector bool char);
     int vec_any_gt (vector signed char, vector signed char);
     int vec_any_gt (vector bool short, vector unsigned short);
     int vec_any_gt (vector unsigned short, vector bool short);
     int vec_any_gt (vector unsigned short, vector unsigned short);
     int vec_any_gt (vector bool short, vector signed short);
     int vec_any_gt (vector signed short, vector bool short);
     int vec_any_gt (vector signed short, vector signed short);
     int vec_any_gt (vector bool int, vector unsigned int);
     int vec_any_gt (vector unsigned int, vector bool int);
     int vec_any_gt (vector unsigned int, vector unsigned int);
     int vec_any_gt (vector bool int, vector signed int);
     int vec_any_gt (vector signed int, vector bool int);
     int vec_any_gt (vector signed int, vector signed int);
     int vec_any_gt (vector float, vector float);

     int vec_any_le (vector bool char, vector unsigned char);
     int vec_any_le (vector unsigned char, vector bool char);
     int vec_any_le (vector unsigned char, vector unsigned char);
     int vec_any_le (vector bool char, vector signed char);
     int vec_any_le (vector signed char, vector bool char);
     int vec_any_le (vector signed char, vector signed char);
     int vec_any_le (vector bool short, vector unsigned short);
     int vec_any_le (vector unsigned short, vector bool short);
     int vec_any_le (vector unsigned short, vector unsigned short);
     int vec_any_le (vector bool short, vector signed short);
     int vec_any_le (vector signed short, vector bool short);
     int vec_any_le (vector signed short, vector signed short);
     int vec_any_le (vector bool int, vector unsigned int);
     int vec_any_le (vector unsigned int, vector bool int);
     int vec_any_le (vector unsigned int, vector unsigned int);
     int vec_any_le (vector bool int, vector signed int);
     int vec_any_le (vector signed int, vector bool int);
     int vec_any_le (vector signed int, vector signed int);
     int vec_any_le (vector float, vector float);

     int vec_any_lt (vector bool char, vector unsigned char);
     int vec_any_lt (vector unsigned char, vector bool char);
     int vec_any_lt (vector unsigned char, vector unsigned char);
     int vec_any_lt (vector bool char, vector signed char);
     int vec_any_lt (vector signed char, vector bool char);
     int vec_any_lt (vector signed char, vector signed char);
     int vec_any_lt (vector bool short, vector unsigned short);
     int vec_any_lt (vector unsigned short, vector bool short);
     int vec_any_lt (vector unsigned short, vector unsigned short);
     int vec_any_lt (vector bool short, vector signed short);
     int vec_any_lt (vector signed short, vector bool short);
     int vec_any_lt (vector signed short, vector signed short);
     int vec_any_lt (vector bool int, vector unsigned int);
     int vec_any_lt (vector unsigned int, vector bool int);
     int vec_any_lt (vector unsigned int, vector unsigned int);
     int vec_any_lt (vector bool int, vector signed int);
     int vec_any_lt (vector signed int, vector bool int);
     int vec_any_lt (vector signed int, vector signed int);
     int vec_any_lt (vector float, vector float);

     int vec_any_nan (vector float);

     int vec_any_ne (vector signed char, vector bool char);
     int vec_any_ne (vector signed char, vector signed char);
     int vec_any_ne (vector unsigned char, vector bool char);
     int vec_any_ne (vector unsigned char, vector unsigned char);
     int vec_any_ne (vector bool char, vector bool char);
     int vec_any_ne (vector bool char, vector unsigned char);
     int vec_any_ne (vector bool char, vector signed char);
     int vec_any_ne (vector signed short, vector bool short);
     int vec_any_ne (vector signed short, vector signed short);
     int vec_any_ne (vector unsigned short, vector bool short);
     int vec_any_ne (vector unsigned short, vector unsigned short);
     int vec_any_ne (vector bool short, vector bool short);
     int vec_any_ne (vector bool short, vector unsigned short);
     int vec_any_ne (vector bool short, vector signed short);
     int vec_any_ne (vector pixel, vector pixel);
     int vec_any_ne (vector signed int, vector bool int);
     int vec_any_ne (vector signed int, vector signed int);
     int vec_any_ne (vector unsigned int, vector bool int);
     int vec_any_ne (vector unsigned int, vector unsigned int);
     int vec_any_ne (vector bool int, vector bool int);
     int vec_any_ne (vector bool int, vector unsigned int);
     int vec_any_ne (vector bool int, vector signed int);
     int vec_any_ne (vector float, vector float);

     int vec_any_nge (vector float, vector float);

     int vec_any_ngt (vector float, vector float);

     int vec_any_nle (vector float, vector float);

     int vec_any_nlt (vector float, vector float);

     int vec_any_numeric (vector float);

     int vec_any_out (vector float, vector float);

     vector unsigned char vec_avg (vector unsigned char, vector unsigned char);
     vector signed char vec_avg (vector signed char, vector signed char);
     vector unsigned short vec_avg (vector unsigned short, vector unsigned short);
     vector signed short vec_avg (vector signed short, vector signed short);
     vector unsigned int vec_avg (vector unsigned int, vector unsigned int);
     vector signed int vec_avg (vector signed int, vector signed int);

     vector float vec_ceil (vector float);

     vector signed int vec_cmpb (vector float, vector float);

     vector bool char vec_cmpeq (vector bool char, vector bool char);
     vector bool short vec_cmpeq (vector bool short, vector bool short);
     vector bool int vec_cmpeq (vector bool int, vector bool int);
     vector bool char vec_cmpeq (vector signed char, vector signed char);
     vector bool char vec_cmpeq (vector unsigned char, vector unsigned char);
     vector bool short vec_cmpeq (vector signed short, vector signed short);
     vector bool short vec_cmpeq (vector unsigned short, vector unsigned short);
     vector bool int vec_cmpeq (vector signed int, vector signed int);
     vector bool int vec_cmpeq (vector unsigned int, vector unsigned int);
     vector bool int vec_cmpeq (vector float, vector float);

     vector bool int vec_cmpge (vector float, vector float);

     vector bool char vec_cmpgt (vector unsigned char, vector unsigned char);
     vector bool char vec_cmpgt (vector signed char, vector signed char);
     vector bool short vec_cmpgt (vector unsigned short, vector unsigned short);
     vector bool short vec_cmpgt (vector signed short, vector signed short);
     vector bool int vec_cmpgt (vector unsigned int, vector unsigned int);
     vector bool int vec_cmpgt (vector signed int, vector signed int);
     vector bool int vec_cmpgt (vector float, vector float);

     vector bool int vec_cmple (vector float, vector float);

     vector bool char vec_cmplt (vector unsigned char, vector unsigned char);
     vector bool char vec_cmplt (vector signed char, vector signed char);
     vector bool short vec_cmplt (vector unsigned short, vector unsigned short);
     vector bool short vec_cmplt (vector signed short, vector signed short);
     vector bool int vec_cmplt (vector unsigned int, vector unsigned int);
     vector bool int vec_cmplt (vector signed int, vector signed int);
     vector bool int vec_cmplt (vector float, vector float);

     vector float vec_cpsgn (vector float, vector float);

     vector float vec_ctf (vector unsigned int, const int);
     vector float vec_ctf (vector signed int, const int);

     vector signed int vec_cts (vector float, const int);

     vector unsigned int vec_ctu (vector float, const int);

     void vec_dss (const int);

     void vec_dssall (void);

     void vec_dst (const vector unsigned char *, int, const int);
     void vec_dst (const vector signed char *, int, const int);
     void vec_dst (const vector bool char *, int, const int);
     void vec_dst (const vector unsigned short *, int, const int);
     void vec_dst (const vector signed short *, int, const int);
     void vec_dst (const vector bool short *, int, const int);
     void vec_dst (const vector pixel *, int, const int);
     void vec_dst (const vector unsigned int *, int, const int);
     void vec_dst (const vector signed int *, int, const int);
     void vec_dst (const vector bool int *, int, const int);
     void vec_dst (const vector float *, int, const int);
     void vec_dst (const unsigned char *, int, const int);
     void vec_dst (const signed char *, int, const int);
     void vec_dst (const unsigned short *, int, const int);
     void vec_dst (const short *, int, const int);
     void vec_dst (const unsigned int *, int, const int);
     void vec_dst (const int *, int, const int);
     void vec_dst (const float *, int, const int);

     void vec_dstst (const vector unsigned char *, int, const int);
     void vec_dstst (const vector signed char *, int, const int);
     void vec_dstst (const vector bool char *, int, const int);
     void vec_dstst (const vector unsigned short *, int, const int);
     void vec_dstst (const vector signed short *, int, const int);
     void vec_dstst (const vector bool short *, int, const int);
     void vec_dstst (const vector pixel *, int, const int);
     void vec_dstst (const vector unsigned int *, int, const int);
     void vec_dstst (const vector signed int *, int, const int);
     void vec_dstst (const vector bool int *, int, const int);
     void vec_dstst (const vector float *, int, const int);
     void vec_dstst (const unsigned char *, int, const int);
     void vec_dstst (const signed char *, int, const int);
     void vec_dstst (const unsigned short *, int, const int);
     void vec_dstst (const short *, int, const int);
     void vec_dstst (const unsigned int *, int, const int);
     void vec_dstst (const int *, int, const int);
     void vec_dstst (const unsigned long *, int, const int);
     void vec_dstst (const long *, int, const int);
     void vec_dstst (const float *, int, const int);

     void vec_dststt (const vector unsigned char *, int, const int);
     void vec_dststt (const vector signed char *, int, const int);
     void vec_dststt (const vector bool char *, int, const int);
     void vec_dststt (const vector unsigned short *, int, const int);
     void vec_dststt (const vector signed short *, int, const int);
     void vec_dststt (const vector bool short *, int, const int);
     void vec_dststt (const vector pixel *, int, const int);
     void vec_dststt (const vector unsigned int *, int, const int);
     void vec_dststt (const vector signed int *, int, const int);
     void vec_dststt (const vector bool int *, int, const int);
     void vec_dststt (const vector float *, int, const int);
     void vec_dststt (const unsigned char *, int, const int);
     void vec_dststt (const signed char *, int, const int);
     void vec_dststt (const unsigned short *, int, const int);
     void vec_dststt (const short *, int, const int);
     void vec_dststt (const unsigned int *, int, const int);
     void vec_dststt (const int *, int, const int);
     void vec_dststt (const float *, int, const int);

     void vec_dstt (const vector unsigned char *, int, const int);
     void vec_dstt (const vector signed char *, int, const int);
     void vec_dstt (const vector bool char *, int, const int);
     void vec_dstt (const vector unsigned short *, int, const int);
     void vec_dstt (const vector signed short *, int, const int);
     void vec_dstt (const vector bool short *, int, const int);
     void vec_dstt (const vector pixel *, int, const int);
     void vec_dstt (const vector unsigned int *, int, const int);
     void vec_dstt (const vector signed int *, int, const int);
     void vec_dstt (const vector bool int *, int, const int);
     void vec_dstt (const vector float *, int, const int);
     void vec_dstt (const unsigned char *, int, const int);
     void vec_dstt (const signed char *, int, const int);
     void vec_dstt (const unsigned short *, int, const int);
     void vec_dstt (const short *, int, const int);
     void vec_dstt (const unsigned int *, int, const int);
     void vec_dstt (const int *, int, const int);
     void vec_dstt (const float *, int, const int);

     vector float vec_expte (vector float);

     vector float vec_floor (vector float);

     vector float vec_ld (int, const vector float *);
     vector float vec_ld (int, const float *);
     vector bool int vec_ld (int, const vector bool int *);
     vector signed int vec_ld (int, const vector signed int *);
     vector signed int vec_ld (int, const int *);
     vector unsigned int vec_ld (int, const vector unsigned int *);
     vector unsigned int vec_ld (int, const unsigned int *);
     vector bool short vec_ld (int, const vector bool short *);
     vector pixel vec_ld (int, const vector pixel *);
     vector signed short vec_ld (int, const vector signed short *);
     vector signed short vec_ld (int, const short *);
     vector unsigned short vec_ld (int, const vector unsigned short *);
     vector unsigned short vec_ld (int, const unsigned short *);
     vector bool char vec_ld (int, const vector bool char *);
     vector signed char vec_ld (int, const vector signed char *);
     vector signed char vec_ld (int, const signed char *);
     vector unsigned char vec_ld (int, const vector unsigned char *);
     vector unsigned char vec_ld (int, const unsigned char *);

     vector signed char vec_lde (int, const signed char *);
     vector unsigned char vec_lde (int, const unsigned char *);
     vector signed short vec_lde (int, const short *);
     vector unsigned short vec_lde (int, const unsigned short *);
     vector float vec_lde (int, const float *);
     vector signed int vec_lde (int, const int *);
     vector unsigned int vec_lde (int, const unsigned int *);

     vector float vec_ldl (int, const vector float *);
     vector float vec_ldl (int, const float *);
     vector bool int vec_ldl (int, const vector bool int *);
     vector signed int vec_ldl (int, const vector signed int *);
     vector signed int vec_ldl (int, const int *);
     vector unsigned int vec_ldl (int, const vector unsigned int *);
     vector unsigned int vec_ldl (int, const unsigned int *);
     vector bool short vec_ldl (int, const vector bool short *);
     vector pixel vec_ldl (int, const vector pixel *);
     vector signed short vec_ldl (int, const vector signed short *);
     vector signed short vec_ldl (int, const short *);
     vector unsigned short vec_ldl (int, const vector unsigned short *);
     vector unsigned short vec_ldl (int, const unsigned short *);
     vector bool char vec_ldl (int, const vector bool char *);
     vector signed char vec_ldl (int, const vector signed char *);
     vector signed char vec_ldl (int, const signed char *);
     vector unsigned char vec_ldl (int, const vector unsigned char *);
     vector unsigned char vec_ldl (int, const unsigned char *);

     vector float vec_loge (vector float);

     vector signed char vec_lvebx (int, char *);
     vector unsigned char vec_lvebx (int, unsigned char *);

     vector signed short vec_lvehx (int, short *);
     vector unsigned short vec_lvehx (int, unsigned short *);

     vector float vec_lvewx (int, float *);
     vector signed int vec_lvewx (int, int *);
     vector unsigned int vec_lvewx (int, unsigned int *);

     vector unsigned char vec_lvsl (int, const unsigned char *);
     vector unsigned char vec_lvsl (int, const signed char *);
     vector unsigned char vec_lvsl (int, const unsigned short *);
     vector unsigned char vec_lvsl (int, const short *);
     vector unsigned char vec_lvsl (int, const unsigned int *);
     vector unsigned char vec_lvsl (int, const int *);
     vector unsigned char vec_lvsl (int, const float *);

     vector unsigned char vec_lvsr (int, const unsigned char *);
     vector unsigned char vec_lvsr (int, const signed char *);
     vector unsigned char vec_lvsr (int, const unsigned short *);
     vector unsigned char vec_lvsr (int, const short *);
     vector unsigned char vec_lvsr (int, const unsigned int *);
     vector unsigned char vec_lvsr (int, const int *);
     vector unsigned char vec_lvsr (int, const float *);

     vector float vec_madd (vector float, vector float, vector float);

     vector signed short vec_madds (vector signed short, vector signed short,
                                    vector signed short);

     vector unsigned char vec_max (vector bool char, vector unsigned char);
     vector unsigned char vec_max (vector unsigned char, vector bool char);
     vector unsigned char vec_max (vector unsigned char, vector unsigned char);
     vector signed char vec_max (vector bool char, vector signed char);
     vector signed char vec_max (vector signed char, vector bool char);
     vector signed char vec_max (vector signed char, vector signed char);
     vector unsigned short vec_max (vector bool short, vector unsigned short);
     vector unsigned short vec_max (vector unsigned short, vector bool short);
     vector unsigned short vec_max (vector unsigned short, vector unsigned short);
     vector signed short vec_max (vector bool short, vector signed short);
     vector signed short vec_max (vector signed short, vector bool short);
     vector signed short vec_max (vector signed short, vector signed short);
     vector unsigned int vec_max (vector bool int, vector unsigned int);
     vector unsigned int vec_max (vector unsigned int, vector bool int);
     vector unsigned int vec_max (vector unsigned int, vector unsigned int);
     vector signed int vec_max (vector bool int, vector signed int);
     vector signed int vec_max (vector signed int, vector bool int);
     vector signed int vec_max (vector signed int, vector signed int);
     vector float vec_max (vector float, vector float);

     vector bool char vec_mergeh (vector bool char, vector bool char);
     vector signed char vec_mergeh (vector signed char, vector signed char);
     vector unsigned char vec_mergeh (vector unsigned char, vector unsigned char);
     vector bool short vec_mergeh (vector bool short, vector bool short);
     vector pixel vec_mergeh (vector pixel, vector pixel);
     vector signed short vec_mergeh (vector signed short, vector signed short);
     vector unsigned short vec_mergeh (vector unsigned short, vector unsigned short);
     vector float vec_mergeh (vector float, vector float);
     vector bool int vec_mergeh (vector bool int, vector bool int);
     vector signed int vec_mergeh (vector signed int, vector signed int);
     vector unsigned int vec_mergeh (vector unsigned int, vector unsigned int);

     vector bool char vec_mergel (vector bool char, vector bool char);
     vector signed char vec_mergel (vector signed char, vector signed char);
     vector unsigned char vec_mergel (vector unsigned char, vector unsigned char);
     vector bool short vec_mergel (vector bool short, vector bool short);
     vector pixel vec_mergel (vector pixel, vector pixel);
     vector signed short vec_mergel (vector signed short, vector signed short);
     vector unsigned short vec_mergel (vector unsigned short, vector unsigned short);
     vector float vec_mergel (vector float, vector float);
     vector bool int vec_mergel (vector bool int, vector bool int);
     vector signed int vec_mergel (vector signed int, vector signed int);
     vector unsigned int vec_mergel (vector unsigned int, vector unsigned int);

     vector unsigned short vec_mfvscr (void);

     vector unsigned char vec_min (vector bool char, vector unsigned char);
     vector unsigned char vec_min (vector unsigned char, vector bool char);
     vector unsigned char vec_min (vector unsigned char, vector unsigned char);
     vector signed char vec_min (vector bool char, vector signed char);
     vector signed char vec_min (vector signed char, vector bool char);
     vector signed char vec_min (vector signed char, vector signed char);
     vector unsigned short vec_min (vector bool short, vector unsigned short);
     vector unsigned short vec_min (vector unsigned short, vector bool short);
     vector unsigned short vec_min (vector unsigned short, vector unsigned short);
     vector signed short vec_min (vector bool short, vector signed short);
     vector signed short vec_min (vector signed short, vector bool short);
     vector signed short vec_min (vector signed short, vector signed short);
     vector unsigned int vec_min (vector bool int, vector unsigned int);
     vector unsigned int vec_min (vector unsigned int, vector bool int);
     vector unsigned int vec_min (vector unsigned int, vector unsigned int);
     vector signed int vec_min (vector bool int, vector signed int);
     vector signed int vec_min (vector signed int, vector bool int);
     vector signed int vec_min (vector signed int, vector signed int);
     vector float vec_min (vector float, vector float);

     vector signed short vec_mladd (vector signed short, vector signed short,
                                    vector signed short);
     vector signed short vec_mladd (vector signed short, vector unsigned short,
                                    vector unsigned short);
     vector signed short vec_mladd (vector unsigned short, vector signed short,
                                    vector signed short);
     vector unsigned short vec_mladd (vector unsigned short, vector unsigned short,
                                      vector unsigned short);

     vector signed short vec_mradds (vector signed short, vector signed short,
                                     vector signed short);

     vector unsigned int vec_msum (vector unsigned char, vector unsigned char,
                                   vector unsigned int);
     vector signed int vec_msum (vector signed char, vector unsigned char,
                                 vector signed int);
     vector unsigned int vec_msum (vector unsigned short, vector unsigned short,
                                   vector unsigned int);
     vector signed int vec_msum (vector signed short, vector signed short,
                                 vector signed int);

     vector unsigned int vec_msums (vector unsigned short, vector unsigned short,
                                    vector unsigned int);
     vector signed int vec_msums (vector signed short, vector signed short,
                                  vector signed int);

     void vec_mtvscr (vector signed int);
     void vec_mtvscr (vector unsigned int);
     void vec_mtvscr (vector bool int);
     void vec_mtvscr (vector signed short);
     void vec_mtvscr (vector unsigned short);
     void vec_mtvscr (vector bool short);
     void vec_mtvscr (vector pixel);
     void vec_mtvscr (vector signed char);
     void vec_mtvscr (vector unsigned char);
     void vec_mtvscr (vector bool char);

     vector float vec_mul (vector float, vector float);

     vector unsigned short vec_mule (vector unsigned char, vector unsigned char);
     vector signed short vec_mule (vector signed char, vector signed char);
     vector unsigned int vec_mule (vector unsigned short, vector unsigned short);
     vector signed int vec_mule (vector signed short, vector signed short);

     vector unsigned short vec_mulo (vector unsigned char, vector unsigned char);
     vector signed short vec_mulo (vector signed char, vector signed char);
     vector unsigned int vec_mulo (vector unsigned short, vector unsigned short);
     vector signed int vec_mulo (vector signed short, vector signed short);

     vector signed char vec_nabs (vector signed char);
     vector signed short vec_nabs (vector signed short);
     vector signed int vec_nabs (vector signed int);
     vector float vec_nabs (vector float);

     vector float vec_nmsub (vector float, vector float, vector float);

     vector float vec_nor (vector float, vector float);
     vector signed int vec_nor (vector signed int, vector signed int);
     vector unsigned int vec_nor (vector unsigned int, vector unsigned int);
     vector bool int vec_nor (vector bool int, vector bool int);
     vector signed short vec_nor (vector signed short, vector signed short);
     vector unsigned short vec_nor (vector unsigned short, vector unsigned short);
     vector bool short vec_nor (vector bool short, vector bool short);
     vector signed char vec_nor (vector signed char, vector signed char);
     vector unsigned char vec_nor (vector unsigned char, vector unsigned char);
     vector bool char vec_nor (vector bool char, vector bool char);

     vector float vec_or (vector float, vector float);
     vector float vec_or (vector float, vector bool int);
     vector float vec_or (vector bool int, vector float);
     vector bool int vec_or (vector bool int, vector bool int);
     vector signed int vec_or (vector bool int, vector signed int);
     vector signed int vec_or (vector signed int, vector bool int);
     vector signed int vec_or (vector signed int, vector signed int);
     vector unsigned int vec_or (vector bool int, vector unsigned int);
     vector unsigned int vec_or (vector unsigned int, vector bool int);
     vector unsigned int vec_or (vector unsigned int, vector unsigned int);
     vector bool short vec_or (vector bool short, vector bool short);
     vector signed short vec_or (vector bool short, vector signed short);
     vector signed short vec_or (vector signed short, vector bool short);
     vector signed short vec_or (vector signed short, vector signed short);
     vector unsigned short vec_or (vector bool short, vector unsigned short);
     vector unsigned short vec_or (vector unsigned short, vector bool short);
     vector unsigned short vec_or (vector unsigned short, vector unsigned short);
     vector signed char vec_or (vector bool char, vector signed char);
     vector bool char vec_or (vector bool char, vector bool char);
     vector signed char vec_or (vector signed char, vector bool char);
     vector signed char vec_or (vector signed char, vector signed char);
     vector unsigned char vec_or (vector bool char, vector unsigned char);
     vector unsigned char vec_or (vector unsigned char, vector bool char);
     vector unsigned char vec_or (vector unsigned char, vector unsigned char);

     vector signed char vec_pack (vector signed short, vector signed short);
     vector unsigned char vec_pack (vector unsigned short, vector unsigned short);
     vector bool char vec_pack (vector bool short, vector bool short);
     vector signed short vec_pack (vector signed int, vector signed int);
     vector unsigned short vec_pack (vector unsigned int, vector unsigned int);
     vector bool short vec_pack (vector bool int, vector bool int);

     vector pixel vec_packpx (vector unsigned int, vector unsigned int);

     vector unsigned char vec_packs (vector unsigned short, vector unsigned short);
     vector signed char vec_packs (vector signed short, vector signed short);
     vector unsigned short vec_packs (vector unsigned int, vector unsigned int);
     vector signed short vec_packs (vector signed int, vector signed int);

     vector unsigned char vec_packsu (vector unsigned short, vector unsigned short);
     vector unsigned char vec_packsu (vector signed short, vector signed short);
     vector unsigned short vec_packsu (vector unsigned int, vector unsigned int);
     vector unsigned short vec_packsu (vector signed int, vector signed int);

     vector float vec_perm (vector float, vector float, vector unsigned char);
     vector signed int vec_perm (vector signed int, vector signed int, vector unsigned char);
     vector unsigned int vec_perm (vector unsigned int, vector unsigned int,
                                   vector unsigned char);
     vector bool int vec_perm (vector bool int, vector bool int, vector unsigned char);
     vector signed short vec_perm (vector signed short, vector signed short,
                                   vector unsigned char);
     vector unsigned short vec_perm (vector unsigned short, vector unsigned short,
                                     vector unsigned char);
     vector bool short vec_perm (vector bool short, vector bool short, vector unsigned char);
     vector pixel vec_perm (vector pixel, vector pixel, vector unsigned char);
     vector signed char vec_perm (vector signed char, vector signed char,
                                  vector unsigned char);
     vector unsigned char vec_perm (vector unsigned char, vector unsigned char,
                                    vector unsigned char);
     vector bool char vec_perm (vector bool char, vector bool char, vector unsigned char);

     vector float vec_re (vector float);

     vector bool char vec_reve (vector bool char);
     vector signed char vec_reve (vector signed char);
     vector unsigned char vec_reve (vector unsigned char);
     vector bool int vec_reve (vector bool int);
     vector signed int vec_reve (vector signed int);
     vector unsigned int vec_reve (vector unsigned int);
     vector bool short vec_reve (vector bool short);
     vector signed short vec_reve (vector signed short);
     vector unsigned short vec_reve (vector unsigned short);

     vector signed char vec_rl (vector signed char, vector unsigned char);
     vector unsigned char vec_rl (vector unsigned char, vector unsigned char);
     vector signed short vec_rl (vector signed short, vector unsigned short);
     vector unsigned short vec_rl (vector unsigned short, vector unsigned short);
     vector signed int vec_rl (vector signed int, vector unsigned int);
     vector unsigned int vec_rl (vector unsigned int, vector unsigned int);

     vector float vec_round (vector float);

     vector float vec_rsqrt (vector float);

     vector float vec_rsqrte (vector float);

     vector float vec_sel (vector float, vector float, vector bool int);
     vector float vec_sel (vector float, vector float, vector unsigned int);
     vector signed int vec_sel (vector signed int, vector signed int, vector bool int);
     vector signed int vec_sel (vector signed int, vector signed int, vector unsigned int);
     vector unsigned int vec_sel (vector unsigned int, vector unsigned int, vector bool int);
     vector unsigned int vec_sel (vector unsigned int, vector unsigned int,
                                  vector unsigned int);
     vector bool int vec_sel (vector bool int, vector bool int, vector bool int);
     vector bool int vec_sel (vector bool int, vector bool int, vector unsigned int);
     vector signed short vec_sel (vector signed short, vector signed short,
                                  vector bool short);
     vector signed short vec_sel (vector signed short, vector signed short,
                                  vector unsigned short);
     vector unsigned short vec_sel (vector unsigned short, vector unsigned short,
                                    vector bool short);
     vector unsigned short vec_sel (vector unsigned short, vector unsigned short,
                                    vector unsigned short);
     vector bool short vec_sel (vector bool short, vector bool short, vector bool short);
     vector bool short vec_sel (vector bool short, vector bool short, vector unsigned short);
     vector signed char vec_sel (vector signed char, vector signed char, vector bool char);
     vector signed char vec_sel (vector signed char, vector signed char,
                                 vector unsigned char);
     vector unsigned char vec_sel (vector unsigned char, vector unsigned char,
                                   vector bool char);
     vector unsigned char vec_sel (vector unsigned char, vector unsigned char,
                                   vector unsigned char);
     vector bool char vec_sel (vector bool char, vector bool char, vector bool char);
     vector bool char vec_sel (vector bool char, vector bool char, vector unsigned char);

     vector signed char vec_sl (vector signed char, vector unsigned char);
     vector unsigned char vec_sl (vector unsigned char, vector unsigned char);
     vector signed short vec_sl (vector signed short, vector unsigned short);
     vector unsigned short vec_sl (vector unsigned short, vector unsigned short);
     vector signed int vec_sl (vector signed int, vector unsigned int);
     vector unsigned int vec_sl (vector unsigned int, vector unsigned int);

     vector float vec_sld (vector float, vector float, const int);
     vector signed int vec_sld (vector signed int, vector signed int, const int);
     vector unsigned int vec_sld (vector unsigned int, vector unsigned int, const int);
     vector bool int vec_sld (vector bool int, vector bool int, const int);
     vector signed short vec_sld (vector signed short, vector signed short, const int);
     vector unsigned short vec_sld (vector unsigned short, vector unsigned short, const int);
     vector bool short vec_sld (vector bool short, vector bool short, const int);
     vector pixel vec_sld (vector pixel, vector pixel, const int);
     vector signed char vec_sld (vector signed char, vector signed char, const int);
     vector unsigned char vec_sld (vector unsigned char, vector unsigned char, const int);
     vector bool char vec_sld (vector bool char, vector bool char, const int);

     vector signed int vec_sll (vector signed int, vector unsigned int);
     vector signed int vec_sll (vector signed int, vector unsigned short);
     vector signed int vec_sll (vector signed int, vector unsigned char);
     vector unsigned int vec_sll (vector unsigned int, vector unsigned int);
     vector unsigned int vec_sll (vector unsigned int, vector unsigned short);
     vector unsigned int vec_sll (vector unsigned int, vector unsigned char);
     vector bool int vec_sll (vector bool int, vector unsigned int);
     vector bool int vec_sll (vector bool int, vector unsigned short);
     vector bool int vec_sll (vector bool int, vector unsigned char);
     vector signed short vec_sll (vector signed short, vector unsigned int);
     vector signed short vec_sll (vector signed short, vector unsigned short);
     vector signed short vec_sll (vector signed short, vector unsigned char);
     vector unsigned short vec_sll (vector unsigned short, vector unsigned int);
     vector unsigned short vec_sll (vector unsigned short, vector unsigned short);
     vector unsigned short vec_sll (vector unsigned short, vector unsigned char);
     vector bool short vec_sll (vector bool short, vector unsigned int);
     vector bool short vec_sll (vector bool short, vector unsigned short);
     vector bool short vec_sll (vector bool short, vector unsigned char);
     vector pixel vec_sll (vector pixel, vector unsigned int);
     vector pixel vec_sll (vector pixel, vector unsigned short);
     vector pixel vec_sll (vector pixel, vector unsigned char);
     vector signed char vec_sll (vector signed char, vector unsigned int);
     vector signed char vec_sll (vector signed char, vector unsigned short);
     vector signed char vec_sll (vector signed char, vector unsigned char);
     vector unsigned char vec_sll (vector unsigned char, vector unsigned int);
     vector unsigned char vec_sll (vector unsigned char, vector unsigned short);
     vector unsigned char vec_sll (vector unsigned char, vector unsigned char);
     vector bool char vec_sll (vector bool char, vector unsigned int);
     vector bool char vec_sll (vector bool char, vector unsigned short);
     vector bool char vec_sll (vector bool char, vector unsigned char);

     vector float vec_slo (vector float, vector signed char);
     vector float vec_slo (vector float, vector unsigned char);
     vector signed int vec_slo (vector signed int, vector signed char);
     vector signed int vec_slo (vector signed int, vector unsigned char);
     vector unsigned int vec_slo (vector unsigned int, vector signed char);
     vector unsigned int vec_slo (vector unsigned int, vector unsigned char);
     vector signed short vec_slo (vector signed short, vector signed char);
     vector signed short vec_slo (vector signed short, vector unsigned char);
     vector unsigned short vec_slo (vector unsigned short, vector signed char);
     vector unsigned short vec_slo (vector unsigned short, vector unsigned char);
     vector pixel vec_slo (vector pixel, vector signed char);
     vector pixel vec_slo (vector pixel, vector unsigned char);
     vector signed char vec_slo (vector signed char, vector signed char);
     vector signed char vec_slo (vector signed char, vector unsigned char);
     vector unsigned char vec_slo (vector unsigned char, vector signed char);
     vector unsigned char vec_slo (vector unsigned char, vector unsigned char);

     vector signed char vec_splat (vector signed char, const int);
     vector unsigned char vec_splat (vector unsigned char, const int);
     vector bool char vec_splat (vector bool char, const int);
     vector signed short vec_splat (vector signed short, const int);
     vector unsigned short vec_splat (vector unsigned short, const int);
     vector bool short vec_splat (vector bool short, const int);
     vector pixel vec_splat (vector pixel, const int);
     vector float vec_splat (vector float, const int);
     vector signed int vec_splat (vector signed int, const int);
     vector unsigned int vec_splat (vector unsigned int, const int);
     vector bool int vec_splat (vector bool int, const int);

     vector signed short vec_splat_s16 (const int);

     vector signed int vec_splat_s32 (const int);

     vector signed char vec_splat_s8 (const int);

     vector unsigned short vec_splat_u16 (const int);

     vector unsigned int vec_splat_u32 (const int);

     vector unsigned char vec_splat_u8 (const int);

     vector signed char vec_splats (signed char);
     vector unsigned char vec_splats (unsigned char);
     vector signed short vec_splats (signed short);
     vector unsigned short vec_splats (unsigned short);
     vector signed int vec_splats (signed int);
     vector unsigned int vec_splats (unsigned int);
     vector float vec_splats (float);

     vector signed char vec_sr (vector signed char, vector unsigned char);
     vector unsigned char vec_sr (vector unsigned char, vector unsigned char);
     vector signed short vec_sr (vector signed short, vector unsigned short);
     vector unsigned short vec_sr (vector unsigned short, vector unsigned short);
     vector signed int vec_sr (vector signed int, vector unsigned int);
     vector unsigned int vec_sr (vector unsigned int, vector unsigned int);

     vector signed char vec_sra (vector signed char, vector unsigned char);
     vector unsigned char vec_sra (vector unsigned char, vector unsigned char);
     vector signed short vec_sra (vector signed short, vector unsigned short);
     vector unsigned short vec_sra (vector unsigned short, vector unsigned short);
     vector signed int vec_sra (vector signed int, vector unsigned int);
     vector unsigned int vec_sra (vector unsigned int, vector unsigned int);

     vector signed int vec_srl (vector signed int, vector unsigned int);
     vector signed int vec_srl (vector signed int, vector unsigned short);
     vector signed int vec_srl (vector signed int, vector unsigned char);
     vector unsigned int vec_srl (vector unsigned int, vector unsigned int);
     vector unsigned int vec_srl (vector unsigned int, vector unsigned short);
     vector unsigned int vec_srl (vector unsigned int, vector unsigned char);
     vector bool int vec_srl (vector bool int, vector unsigned int);
     vector bool int vec_srl (vector bool int, vector unsigned short);
     vector bool int vec_srl (vector bool int, vector unsigned char);
     vector signed short vec_srl (vector signed short, vector unsigned int);
     vector signed short vec_srl (vector signed short, vector unsigned short);
     vector signed short vec_srl (vector signed short, vector unsigned char);
     vector unsigned short vec_srl (vector unsigned short, vector unsigned int);
     vector unsigned short vec_srl (vector unsigned short, vector unsigned short);
     vector unsigned short vec_srl (vector unsigned short, vector unsigned char);
     vector bool short vec_srl (vector bool short, vector unsigned int);
     vector bool short vec_srl (vector bool short, vector unsigned short);
     vector bool short vec_srl (vector bool short, vector unsigned char);
     vector pixel vec_srl (vector pixel, vector unsigned int);
     vector pixel vec_srl (vector pixel, vector unsigned short);
     vector pixel vec_srl (vector pixel, vector unsigned char);
     vector signed char vec_srl (vector signed char, vector unsigned int);
     vector signed char vec_srl (vector signed char, vector unsigned short);
     vector signed char vec_srl (vector signed char, vector unsigned char);
     vector unsigned char vec_srl (vector unsigned char, vector unsigned int);
     vector unsigned char vec_srl (vector unsigned char, vector unsigned short);
     vector unsigned char vec_srl (vector unsigned char, vector unsigned char);
     vector bool char vec_srl (vector bool char, vector unsigned int);
     vector bool char vec_srl (vector bool char, vector unsigned short);
     vector bool char vec_srl (vector bool char, vector unsigned char);

     vector float vec_sro (vector float, vector signed char);
     vector float vec_sro (vector float, vector unsigned char);
     vector signed int vec_sro (vector signed int, vector signed char);
     vector signed int vec_sro (vector signed int, vector unsigned char);
     vector unsigned int vec_sro (vector unsigned int, vector signed char);
     vector unsigned int vec_sro (vector unsigned int, vector unsigned char);
     vector signed short vec_sro (vector signed short, vector signed char);
     vector signed short vec_sro (vector signed short, vector unsigned char);
     vector unsigned short vec_sro (vector unsigned short, vector signed char);
     vector unsigned short vec_sro (vector unsigned short, vector unsigned char);
     vector pixel vec_sro (vector pixel, vector signed char);
     vector pixel vec_sro (vector pixel, vector unsigned char);
     vector signed char vec_sro (vector signed char, vector signed char);
     vector signed char vec_sro (vector signed char, vector unsigned char);
     vector unsigned char vec_sro (vector unsigned char, vector signed char);
     vector unsigned char vec_sro (vector unsigned char, vector unsigned char);

     void vec_st (vector float, int, vector float *);
     void vec_st (vector float, int, float *);
     void vec_st (vector signed int, int, vector signed int *);
     void vec_st (vector signed int, int, int *);
     void vec_st (vector unsigned int, int, vector unsigned int *);
     void vec_st (vector unsigned int, int, unsigned int *);
     void vec_st (vector bool int, int, vector bool int *);
     void vec_st (vector bool int, int, unsigned int *);
     void vec_st (vector bool int, int, int *);
     void vec_st (vector signed short, int, vector signed short *);
     void vec_st (vector signed short, int, short *);
     void vec_st (vector unsigned short, int, vector unsigned short *);
     void vec_st (vector unsigned short, int, unsigned short *);
     void vec_st (vector bool short, int, vector bool short *);
     void vec_st (vector bool short, int, unsigned short *);
     void vec_st (vector pixel, int, vector pixel *);
     void vec_st (vector bool short, int, short *);
     void vec_st (vector signed char, int, vector signed char *);
     void vec_st (vector signed char, int, signed char *);
     void vec_st (vector unsigned char, int, vector unsigned char *);
     void vec_st (vector unsigned char, int, unsigned char *);
     void vec_st (vector bool char, int, vector bool char *);
     void vec_st (vector bool char, int, unsigned char *);
     void vec_st (vector bool char, int, signed char *);

     void vec_ste (vector signed char, int, signed char *);
     void vec_ste (vector unsigned char, int, unsigned char *);
     void vec_ste (vector bool char, int, signed char *);
     void vec_ste (vector bool char, int, unsigned char *);
     void vec_ste (vector signed short, int, short *);
     void vec_ste (vector unsigned short, int, unsigned short *);
     void vec_ste (vector bool short, int, short *);
     void vec_ste (vector bool short, int, unsigned short *);
     void vec_ste (vector pixel, int, short *);
     void vec_ste (vector pixel, int, unsigned short *);
     void vec_ste (vector float, int, float *);
     void vec_ste (vector signed int, int, int *);
     void vec_ste (vector unsigned int, int, unsigned int *);
     void vec_ste (vector bool int, int, int *);
     void vec_ste (vector bool int, int, unsigned int *);

     void vec_stl (vector float, int, vector float *);
     void vec_stl (vector float, int, float *);
     void vec_stl (vector signed int, int, vector signed int *);
     void vec_stl (vector signed int, int, int *);
     void vec_stl (vector unsigned int, int, vector unsigned int *);
     void vec_stl (vector unsigned int, int, unsigned int *);
     void vec_stl (vector bool int, int, vector bool int *);
     void vec_stl (vector bool int, int, unsigned int *);
     void vec_stl (vector bool int, int, int *);
     void vec_stl (vector signed short, int, vector signed short *);
     void vec_stl (vector signed short, int, short *);
     void vec_stl (vector unsigned short, int, vector unsigned short *);
     void vec_stl (vector unsigned short, int, unsigned short *);
     void vec_stl (vector bool short, int, vector bool short *);
     void vec_stl (vector bool short, int, unsigned short *);
     void vec_stl (vector bool short, int, short *);
     void vec_stl (vector pixel, int, vector pixel *);
     void vec_stl (vector signed char, int, vector signed char *);
     void vec_stl (vector signed char, int, signed char *);
     void vec_stl (vector unsigned char, int, vector unsigned char *);
     void vec_stl (vector unsigned char, int, unsigned char *);
     void vec_stl (vector bool char, int, vector bool char *);
     void vec_stl (vector bool char, int, unsigned char *);
     void vec_stl (vector bool char, int, signed char *);

     void vec_stvebx (vector signed char, int, signed char *);
     void vec_stvebx (vector unsigned char, int, unsigned char *);
     void vec_stvebx (vector bool char, int, signed char *);
     void vec_stvebx (vector bool char, int, unsigned char *);

     void vec_stvehx (vector signed short, int, short *);
     void vec_stvehx (vector unsigned short, int, unsigned short *);
     void vec_stvehx (vector bool short, int, short *);
     void vec_stvehx (vector bool short, int, unsigned short *);

     void vec_stvewx (vector float, int, float *);
     void vec_stvewx (vector signed int, int, int *);
     void vec_stvewx (vector unsigned int, int, unsigned int *);
     void vec_stvewx (vector bool int, int, int *);
     void vec_stvewx (vector bool int, int, unsigned int *);

     vector signed char vec_sub (vector bool char, vector signed char);
     vector signed char vec_sub (vector signed char, vector bool char);
     vector signed char vec_sub (vector signed char, vector signed char);
     vector unsigned char vec_sub (vector bool char, vector unsigned char);
     vector unsigned char vec_sub (vector unsigned char, vector bool char);
     vector unsigned char vec_sub (vector unsigned char, vector unsigned char);
     vector signed short vec_sub (vector bool short, vector signed short);
     vector signed short vec_sub (vector signed short, vector bool short);
     vector signed short vec_sub (vector signed short, vector signed short);
     vector unsigned short vec_sub (vector bool short, vector unsigned short);
     vector unsigned short vec_sub (vector unsigned short, vector bool short);
     vector unsigned short vec_sub (vector unsigned short, vector unsigned short);
     vector signed int vec_sub (vector bool int, vector signed int);
     vector signed int vec_sub (vector signed int, vector bool int);
     vector signed int vec_sub (vector signed int, vector signed int);
     vector unsigned int vec_sub (vector bool int, vector unsigned int);
     vector unsigned int vec_sub (vector unsigned int, vector bool int);
     vector unsigned int vec_sub (vector unsigned int, vector unsigned int);
     vector float vec_sub (vector float, vector float);

     vector signed int vec_subc (vector signed int, vector signed int);
     vector unsigned int vec_subc (vector unsigned int, vector unsigned int);

     vector signed int vec_sube (vector signed int, vector signed int,
                                 vector signed int);
     vector unsigned int vec_sube (vector unsigned int, vector unsigned int,
                                   vector unsigned int);

     vector signed int vec_subec (vector signed int, vector signed int,
                                  vector signed int);
     vector unsigned int vec_subec (vector unsigned int, vector unsigned int,
                                    vector unsigned int);

     vector unsigned char vec_subs (vector bool char, vector unsigned char);
     vector unsigned char vec_subs (vector unsigned char, vector bool char);
     vector unsigned char vec_subs (vector unsigned char, vector unsigned char);
     vector signed char vec_subs (vector bool char, vector signed char);
     vector signed char vec_subs (vector signed char, vector bool char);
     vector signed char vec_subs (vector signed char, vector signed char);
     vector unsigned short vec_subs (vector bool short, vector unsigned short);
     vector unsigned short vec_subs (vector unsigned short, vector bool short);
     vector unsigned short vec_subs (vector unsigned short, vector unsigned short);
     vector signed short vec_subs (vector bool short, vector signed short);
     vector signed short vec_subs (vector signed short, vector bool short);
     vector signed short vec_subs (vector signed short, vector signed short);
     vector unsigned int vec_subs (vector bool int, vector unsigned int);
     vector unsigned int vec_subs (vector unsigned int, vector bool int);
     vector unsigned int vec_subs (vector unsigned int, vector unsigned int);
     vector signed int vec_subs (vector bool int, vector signed int);
     vector signed int vec_subs (vector signed int, vector bool int);
     vector signed int vec_subs (vector signed int, vector signed int);

     vector signed int vec_sum2s (vector signed int, vector signed int);

     vector unsigned int vec_sum4s (vector unsigned char, vector unsigned int);
     vector signed int vec_sum4s (vector signed char, vector signed int);
     vector signed int vec_sum4s (vector signed short, vector signed int);

     vector signed int vec_sums (vector signed int, vector signed int);

     vector float vec_trunc (vector float);

     vector signed short vec_unpackh (vector signed char);
     vector bool short vec_unpackh (vector bool char);
     vector signed int vec_unpackh (vector signed short);
     vector bool int vec_unpackh (vector bool short);
     vector unsigned int vec_unpackh (vector pixel);

     vector signed short vec_unpackl (vector signed char);
     vector bool short vec_unpackl (vector bool char);
     vector unsigned int vec_unpackl (vector pixel);
     vector signed int vec_unpackl (vector signed short);
     vector bool int vec_unpackl (vector bool short);

     vector float vec_vaddfp (vector float, vector float);

     vector signed char vec_vaddsbs (vector bool char, vector signed char);
     vector signed char vec_vaddsbs (vector signed char, vector bool char);
     vector signed char vec_vaddsbs (vector signed char, vector signed char);

     vector signed short vec_vaddshs (vector bool short, vector signed short);
     vector signed short vec_vaddshs (vector signed short, vector bool short);
     vector signed short vec_vaddshs (vector signed short, vector signed short);

     vector signed int vec_vaddsws (vector bool int, vector signed int);
     vector signed int vec_vaddsws (vector signed int, vector bool int);
     vector signed int vec_vaddsws (vector signed int, vector signed int);

     vector signed char vec_vaddubm (vector bool char, vector signed char);
     vector signed char vec_vaddubm (vector signed char, vector bool char);
     vector signed char vec_vaddubm (vector signed char, vector signed char);
     vector unsigned char vec_vaddubm (vector bool char, vector unsigned char);
     vector unsigned char vec_vaddubm (vector unsigned char, vector bool char);
     vector unsigned char vec_vaddubm (vector unsigned char, vector unsigned char);

     vector unsigned char vec_vaddubs (vector bool char, vector unsigned char);
     vector unsigned char vec_vaddubs (vector unsigned char, vector bool char);
     vector unsigned char vec_vaddubs (vector unsigned char, vector unsigned char);

     vector signed short vec_vadduhm (vector bool short, vector signed short);
     vector signed short vec_vadduhm (vector signed short, vector bool short);
     vector signed short vec_vadduhm (vector signed short, vector signed short);
     vector unsigned short vec_vadduhm (vector bool short, vector unsigned short);
     vector unsigned short vec_vadduhm (vector unsigned short, vector bool short);
     vector unsigned short vec_vadduhm (vector unsigned short, vector unsigned short);

     vector unsigned short vec_vadduhs (vector bool short, vector unsigned short);
     vector unsigned short vec_vadduhs (vector unsigned short, vector bool short);
     vector unsigned short vec_vadduhs (vector unsigned short, vector unsigned short);

     vector signed int vec_vadduwm (vector bool int, vector signed int);
     vector signed int vec_vadduwm (vector signed int, vector bool int);
     vector signed int vec_vadduwm (vector signed int, vector signed int);
     vector unsigned int vec_vadduwm (vector bool int, vector unsigned int);
     vector unsigned int vec_vadduwm (vector unsigned int, vector bool int);
     vector unsigned int vec_vadduwm (vector unsigned int, vector unsigned int);

     vector unsigned int vec_vadduws (vector bool int, vector unsigned int);
     vector unsigned int vec_vadduws (vector unsigned int, vector bool int);
     vector unsigned int vec_vadduws (vector unsigned int, vector unsigned int);

     vector signed char vec_vavgsb (vector signed char, vector signed char);

     vector signed short vec_vavgsh (vector signed short, vector signed short);

     vector signed int vec_vavgsw (vector signed int, vector signed int);

     vector unsigned char vec_vavgub (vector unsigned char, vector unsigned char);

     vector unsigned short vec_vavguh (vector unsigned short, vector unsigned short);

     vector unsigned int vec_vavguw (vector unsigned int, vector unsigned int);

     vector float vec_vcfsx (vector signed int, const int);

     vector float vec_vcfux (vector unsigned int, const int);

     vector bool int vec_vcmpeqfp (vector float, vector float);

     vector bool char vec_vcmpequb (vector signed char, vector signed char);
     vector bool char vec_vcmpequb (vector unsigned char, vector unsigned char);

     vector bool short vec_vcmpequh (vector signed short, vector signed short);
     vector bool short vec_vcmpequh (vector unsigned short, vector unsigned short);

     vector bool int vec_vcmpequw (vector signed int, vector signed int);
     vector bool int vec_vcmpequw (vector unsigned int, vector unsigned int);

     vector bool int vec_vcmpgtfp (vector float, vector float);

     vector bool char vec_vcmpgtsb (vector signed char, vector signed char);

     vector bool short vec_vcmpgtsh (vector signed short, vector signed short);

     vector bool int vec_vcmpgtsw (vector signed int, vector signed int);

     vector bool char vec_vcmpgtub (vector unsigned char, vector unsigned char);

     vector bool short vec_vcmpgtuh (vector unsigned short, vector unsigned short);

     vector bool int vec_vcmpgtuw (vector unsigned int, vector unsigned int);

     vector float vec_vmaxfp (vector float, vector float);

     vector signed char vec_vmaxsb (vector bool char, vector signed char);
     vector signed char vec_vmaxsb (vector signed char, vector bool char);
     vector signed char vec_vmaxsb (vector signed char, vector signed char);

     vector signed short vec_vmaxsh (vector bool short, vector signed short);
     vector signed short vec_vmaxsh (vector signed short, vector bool short);
     vector signed short vec_vmaxsh (vector signed short, vector signed short);

     vector signed int vec_vmaxsw (vector bool int, vector signed int);
     vector signed int vec_vmaxsw (vector signed int, vector bool int);
     vector signed int vec_vmaxsw (vector signed int, vector signed int);

     vector unsigned char vec_vmaxub (vector bool char, vector unsigned char);
     vector unsigned char vec_vmaxub (vector unsigned char, vector bool char);
     vector unsigned char vec_vmaxub (vector unsigned char, vector unsigned char);

     vector unsigned short vec_vmaxuh (vector bool short, vector unsigned short);
     vector unsigned short vec_vmaxuh (vector unsigned short, vector bool short);
     vector unsigned short vec_vmaxuh (vector unsigned short, vector unsigned short);

     vector unsigned int vec_vmaxuw (vector bool int, vector unsigned int);
     vector unsigned int vec_vmaxuw (vector unsigned int, vector bool int);
     vector unsigned int vec_vmaxuw (vector unsigned int, vector unsigned int);

     vector float vec_vminfp (vector float, vector float);

     vector signed char vec_vminsb (vector bool char, vector signed char);
     vector signed char vec_vminsb (vector signed char, vector bool char);
     vector signed char vec_vminsb (vector signed char, vector signed char);

     vector signed short vec_vminsh (vector bool short, vector signed short);
     vector signed short vec_vminsh (vector signed short, vector bool short);
     vector signed short vec_vminsh (vector signed short, vector signed short);

     vector signed int vec_vminsw (vector bool int, vector signed int);
     vector signed int vec_vminsw (vector signed int, vector bool int);
     vector signed int vec_vminsw (vector signed int, vector signed int);

     vector unsigned char vec_vminub (vector bool char, vector unsigned char);
     vector unsigned char vec_vminub (vector unsigned char, vector bool char);
     vector unsigned char vec_vminub (vector unsigned char, vector unsigned char);

     vector unsigned short vec_vminuh (vector bool short, vector unsigned short);
     vector unsigned short vec_vminuh (vector unsigned short, vector bool short);
     vector unsigned short vec_vminuh (vector unsigned short, vector unsigned short);

     vector unsigned int vec_vminuw (vector bool int, vector unsigned int);
     vector unsigned int vec_vminuw (vector unsigned int, vector bool int);
     vector unsigned int vec_vminuw (vector unsigned int, vector unsigned int);

     vector bool char vec_vmrghb (vector bool char, vector bool char);
     vector signed char vec_vmrghb (vector signed char, vector signed char);
     vector unsigned char vec_vmrghb (vector unsigned char, vector unsigned char);

     vector bool short vec_vmrghh (vector bool short, vector bool short);
     vector signed short vec_vmrghh (vector signed short, vector signed short);
     vector unsigned short vec_vmrghh (vector unsigned short, vector unsigned short);
     vector pixel vec_vmrghh (vector pixel, vector pixel);

     vector float vec_vmrghw (vector float, vector float);
     vector bool int vec_vmrghw (vector bool int, vector bool int);
     vector signed int vec_vmrghw (vector signed int, vector signed int);
     vector unsigned int vec_vmrghw (vector unsigned int, vector unsigned int);

     vector bool char vec_vmrglb (vector bool char, vector bool char);
     vector signed char vec_vmrglb (vector signed char, vector signed char);
     vector unsigned char vec_vmrglb (vector unsigned char, vector unsigned char);

     vector bool short vec_vmrglh (vector bool short, vector bool short);
     vector signed short vec_vmrglh (vector signed short, vector signed short);
     vector unsigned short vec_vmrglh (vector unsigned short, vector unsigned short);
     vector pixel vec_vmrglh (vector pixel, vector pixel);

     vector float vec_vmrglw (vector float, vector float);
     vector signed int vec_vmrglw (vector signed int, vector signed int);
     vector unsigned int vec_vmrglw (vector unsigned int, vector unsigned int);
     vector bool int vec_vmrglw (vector bool int, vector bool int);

     vector signed int vec_vmsummbm (vector signed char, vector unsigned char,
                                     vector signed int);

     vector signed int vec_vmsumshm (vector signed short, vector signed short,
                                     vector signed int);

     vector signed int vec_vmsumshs (vector signed short, vector signed short,
                                     vector signed int);

     vector unsigned int vec_vmsumubm (vector unsigned char, vector unsigned char,
                                       vector unsigned int);

     vector unsigned int vec_vmsumuhm (vector unsigned short, vector unsigned short,
                                       vector unsigned int);

     vector unsigned int vec_vmsumuhs (vector unsigned short, vector unsigned short,
                                       vector unsigned int);

     vector signed short vec_vmulesb (vector signed char, vector signed char);

     vector signed int vec_vmulesh (vector signed short, vector signed short);

     vector unsigned short vec_vmuleub (vector unsigned char, vector unsigned char);

     vector unsigned int vec_vmuleuh (vector unsigned short, vector unsigned short);

     vector signed short vec_vmulosb (vector signed char, vector signed char);

     vector signed int vec_vmulosh (vector signed short, vector signed short);

     vector unsigned short vec_vmuloub (vector unsigned char, vector unsigned char);

     vector unsigned int vec_vmulouh (vector unsigned short, vector unsigned short);

     vector signed char vec_vpkshss (vector signed short, vector signed short);

     vector unsigned char vec_vpkshus (vector signed short, vector signed short);

     vector signed short vec_vpkswss (vector signed int, vector signed int);

     vector unsigned short vec_vpkswus (vector signed int, vector signed int);

     vector bool char vec_vpkuhum (vector bool short, vector bool short);
     vector signed char vec_vpkuhum (vector signed short, vector signed short);
     vector unsigned char vec_vpkuhum (vector unsigned short, vector unsigned short);

     vector unsigned char vec_vpkuhus (vector unsigned short, vector unsigned short);

     vector bool short vec_vpkuwum (vector bool int, vector bool int);
     vector signed short vec_vpkuwum (vector signed int, vector signed int);
     vector unsigned short vec_vpkuwum (vector unsigned int, vector unsigned int);

     vector unsigned short vec_vpkuwus (vector unsigned int, vector unsigned int);

     vector signed char vec_vrlb (vector signed char, vector unsigned char);
     vector unsigned char vec_vrlb (vector unsigned char, vector unsigned char);

     vector signed short vec_vrlh (vector signed short, vector unsigned short);
     vector unsigned short vec_vrlh (vector unsigned short, vector unsigned short);

     vector signed int vec_vrlw (vector signed int, vector unsigned int);
     vector unsigned int vec_vrlw (vector unsigned int, vector unsigned int);

     vector signed char vec_vslb (vector signed char, vector unsigned char);
     vector unsigned char vec_vslb (vector unsigned char, vector unsigned char);

     vector signed short vec_vslh (vector signed short, vector unsigned short);
     vector unsigned short vec_vslh (vector unsigned short, vector unsigned short);

     vector signed int vec_vslw (vector signed int, vector unsigned int);
     vector unsigned int vec_vslw (vector unsigned int, vector unsigned int);

     vector signed char vec_vspltb (vector signed char, const int);
     vector unsigned char vec_vspltb (vector unsigned char, const int);
     vector bool char vec_vspltb (vector bool char, const int);

     vector bool short vec_vsplth (vector bool short, const int);
     vector signed short vec_vsplth (vector signed short, const int);
     vector unsigned short vec_vsplth (vector unsigned short, const int);
     vector pixel vec_vsplth (vector pixel, const int);

     vector float vec_vspltw (vector float, const int);
     vector signed int vec_vspltw (vector signed int, const int);
     vector unsigned int vec_vspltw (vector unsigned int, const int);
     vector bool int vec_vspltw (vector bool int, const int);

     vector signed char vec_vsrab (vector signed char, vector unsigned char);
     vector unsigned char vec_vsrab (vector unsigned char, vector unsigned char);

     vector signed short vec_vsrah (vector signed short, vector unsigned short);
     vector unsigned short vec_vsrah (vector unsigned short, vector unsigned short);

     vector signed int vec_vsraw (vector signed int, vector unsigned int);
     vector unsigned int vec_vsraw (vector unsigned int, vector unsigned int);

     vector signed char vec_vsrb (vector signed char, vector unsigned char);
     vector unsigned char vec_vsrb (vector unsigned char, vector unsigned char);

     vector signed short vec_vsrh (vector signed short, vector unsigned short);
     vector unsigned short vec_vsrh (vector unsigned short, vector unsigned short);

     vector signed int vec_vsrw (vector signed int, vector unsigned int);
     vector unsigned int vec_vsrw (vector unsigned int, vector unsigned int);

     vector float vec_vsubfp (vector float, vector float);

     vector signed char vec_vsubsbs (vector bool char, vector signed char);
     vector signed char vec_vsubsbs (vector signed char, vector bool char);
     vector signed char vec_vsubsbs (vector signed char, vector signed char);

     vector signed short vec_vsubshs (vector bool short, vector signed short);
     vector signed short vec_vsubshs (vector signed short, vector bool short);
     vector signed short vec_vsubshs (vector signed short, vector signed short);

     vector signed int vec_vsubsws (vector bool int, vector signed int);
     vector signed int vec_vsubsws (vector signed int, vector bool int);
     vector signed int vec_vsubsws (vector signed int, vector signed int);

     vector signed char vec_vsububm (vector bool char, vector signed char);
     vector signed char vec_vsububm (vector signed char, vector bool char);
     vector signed char vec_vsububm (vector signed char, vector signed char);
     vector unsigned char vec_vsububm (vector bool char, vector unsigned char);
     vector unsigned char vec_vsububm (vector unsigned char, vector bool char);
     vector unsigned char vec_vsububm (vector unsigned char, vector unsigned char);

     vector unsigned char vec_vsububs (vector bool char, vector unsigned char);
     vector unsigned char vec_vsububs (vector unsigned char, vector bool char);
     vector unsigned char vec_vsububs (vector unsigned char, vector unsigned char);

     vector signed short vec_vsubuhm (vector bool short, vector signed short);
     vector signed short vec_vsubuhm (vector signed short, vector bool short);
     vector signed short vec_vsubuhm (vector signed short, vector signed short);
     vector unsigned short vec_vsubuhm (vector bool short, vector unsigned short);
     vector unsigned short vec_vsubuhm (vector unsigned short, vector bool short);
     vector unsigned short vec_vsubuhm (vector unsigned short, vector unsigned short);

     vector unsigned short vec_vsubuhs (vector bool short, vector unsigned short);
     vector unsigned short vec_vsubuhs (vector unsigned short, vector bool short);
     vector unsigned short vec_vsubuhs (vector unsigned short, vector unsigned short);

     vector signed int vec_vsubuwm (vector bool int, vector signed int);
     vector signed int vec_vsubuwm (vector signed int, vector bool int);
     vector signed int vec_vsubuwm (vector signed int, vector signed int);
     vector unsigned int vec_vsubuwm (vector bool int, vector unsigned int);
     vector unsigned int vec_vsubuwm (vector unsigned int, vector bool int);
     vector unsigned int vec_vsubuwm (vector unsigned int, vector unsigned int);

     vector unsigned int vec_vsubuws (vector bool int, vector unsigned int);
     vector unsigned int vec_vsubuws (vector unsigned int, vector bool int);
     vector unsigned int vec_vsubuws (vector unsigned int, vector unsigned int);

     vector signed int vec_vsum4sbs (vector signed char, vector signed int);

     vector signed int vec_vsum4shs (vector signed short, vector signed int);

     vector unsigned int vec_vsum4ubs (vector unsigned char, vector unsigned int);

     vector unsigned int vec_vupkhpx (vector pixel);

     vector bool short vec_vupkhsb (vector bool char);
     vector signed short vec_vupkhsb (vector signed char);

     vector bool int vec_vupkhsh (vector bool short);
     vector signed int vec_vupkhsh (vector signed short);

     vector unsigned int vec_vupklpx (vector pixel);

     vector bool short vec_vupklsb (vector bool char);
     vector signed short vec_vupklsb (vector signed char);

     vector bool int vec_vupklsh (vector bool short);
     vector signed int vec_vupklsh (vector signed short);

     vector float vec_xor (vector float, vector float);
     vector float vec_xor (vector float, vector bool int);
     vector float vec_xor (vector bool int, vector float);
     vector bool int vec_xor (vector bool int, vector bool int);
     vector signed int vec_xor (vector bool int, vector signed int);
     vector signed int vec_xor (vector signed int, vector bool int);
     vector signed int vec_xor (vector signed int, vector signed int);
     vector unsigned int vec_xor (vector bool int, vector unsigned int);
     vector unsigned int vec_xor (vector unsigned int, vector bool int);
     vector unsigned int vec_xor (vector unsigned int, vector unsigned int);
     vector bool short vec_xor (vector bool short, vector bool short);
     vector signed short vec_xor (vector bool short, vector signed short);
     vector signed short vec_xor (vector signed short, vector bool short);
     vector signed short vec_xor (vector signed short, vector signed short);
     vector unsigned short vec_xor (vector bool short, vector unsigned short);
     vector unsigned short vec_xor (vector unsigned short, vector bool short);
     vector unsigned short vec_xor (vector unsigned short, vector unsigned short);
     vector signed char vec_xor (vector bool char, vector signed char);
     vector bool char vec_xor (vector bool char, vector bool char);
     vector signed char vec_xor (vector signed char, vector bool char);
     vector signed char vec_xor (vector signed char, vector signed char);
     vector unsigned char vec_xor (vector bool char, vector unsigned char);
     vector unsigned char vec_xor (vector unsigned char, vector bool char);
     vector unsigned char vec_xor (vector unsigned char, vector unsigned char);

==============================================================================
File: gcc.info,  Node: |PowerPC_AltiVec_Built_in_Functions_Available_on_ISA_2.06|,  Next: |PowerPC_AltiVec_Built_in_Functions_Available_on_ISA_2.07|,  Prev: |PowerPC_AltiVec_Built_in_Functions_on_ISA_2.05|,  Up: |PowerPC_AltiVec/VSX_Built_in_Functions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                          *PowerPC_AltiVec_Built_in_Functions_Available_on_ISA_2.06*

6.60.22.2 PowerPC AltiVec Built-in Functions Available on ISA 2.06
.....-------------------------------------------------------------

The AltiVec built-in functions described in this section are available
on the PowerPC family of processors starting with ISA 2.06 or later.
These are normally enabled by adding '-mvsx' to the command line.

 When '-mvsx' is used, the following additional vector types are
implemented.

     vector unsigned __int128
     vector signed __int128
     vector unsigned long long int
     vector signed long long int
     vector double

 The long long types are only implemented for 64-bit code generation.


     vector bool long long vec_and (vector bool long long int, vector bool long long);

     vector double vec_ctf (vector unsigned long, const int);
     vector double vec_ctf (vector signed long, const int);

     vector signed long vec_cts (vector double, const int);

     vector unsigned long vec_ctu (vector double, const int);

     void vec_dst (const unsigned long *, int, const int);
     void vec_dst (const long *, int, const int);

     void vec_dststt (const unsigned long *, int, const int);
     void vec_dststt (const long *, int, const int);

     void vec_dstt (const unsigned long *, int, const int);
     void vec_dstt (const long *, int, const int);

     vector unsigned char vec_lvsl (int, const unsigned long *);
     vector unsigned char vec_lvsl (int, const long *);

     vector unsigned char vec_lvsr (int, const unsigned long *);
     vector unsigned char vec_lvsr (int, const long *);

     vector double vec_mul (vector double, vector double);
     vector long vec_mul (vector long, vector long);
     vector unsigned long vec_mul (vector unsigned long, vector unsigned long);

     vector unsigned long long vec_mule (vector unsigned int, vector unsigned int);
     vector signed long long vec_mule (vector signed int, vector signed int);

     vector unsigned long long vec_mulo (vector unsigned int, vector unsigned int);
     vector signed long long vec_mulo (vector signed int, vector signed int);

     vector double vec_nabs (vector double);

     vector bool long long vec_reve (vector bool long long);
     vector signed long long vec_reve (vector signed long long);
     vector unsigned long long vec_reve (vector unsigned long long);
     vector double vec_sld (vector double, vector double, const int);

     vector bool long long int vec_sld (vector bool long long int,
                                        vector bool long long int, const int);
     vector long long int vec_sld (vector long long int, vector  long long int, const int);
     vector unsigned long long int vec_sld (vector unsigned long long int,
                                            vector unsigned long long int, const int);

     vector long long int vec_sll (vector long long int, vector unsigned char);
     vector unsigned long long int vec_sll (vector unsigned long long int,
                                            vector unsigned char);

     vector signed long long vec_slo (vector signed long long, vector signed char);
     vector signed long long vec_slo (vector signed long long, vector unsigned char);
     vector unsigned long long vec_slo (vector unsigned long long, vector signed char);
     vector unsigned long long vec_slo (vector unsigned long long, vector unsigned char);

     vector signed long vec_splat (vector signed long, const int);
     vector unsigned long vec_splat (vector unsigned long, const int);

     vector long long int vec_srl (vector long long int, vector unsigned char);
     vector unsigned long long int vec_srl (vector unsigned long long int,
                                            vector unsigned char);

     vector long long int vec_sro (vector long long int, vector char);
     vector long long int vec_sro (vector long long int, vector unsigned char);
     vector unsigned long long int vec_sro (vector unsigned long long int, vector char);
     vector unsigned long long int vec_sro (vector unsigned long long int,
                                            vector unsigned char);

     vector signed __int128 vec_subc (vector signed __int128, vector signed __int128);
     vector unsigned __int128 vec_subc (vector unsigned __int128, vector unsigned __int128);

     vector signed __int128 vec_sube (vector signed __int128, vector signed __int128,
                                      vector signed __int128);
     vector unsigned __int128 vec_sube (vector unsigned __int128, vector unsigned __int128,
                                        vector unsigned __int128);

     vector signed __int128 vec_subec (vector signed __int128, vector signed __int128,
                                       vector signed __int128);
     vector unsigned __int128 vec_subec (vector unsigned __int128, vector unsigned __int128,
                                         vector unsigned __int128);

     vector double vec_unpackh (vector float);

     vector double vec_unpackl (vector float);

     vector double vec_doublee (vector float);
     vector double vec_doublee (vector signed int);
     vector double vec_doublee (vector unsigned int);

     vector double vec_doubleo (vector float);
     vector double vec_doubleo (vector signed int);
     vector double vec_doubleo (vector unsigned int);

     vector double vec_doubleh (vector float);
     vector double vec_doubleh (vector signed int);
     vector double vec_doubleh (vector unsigned int);

     vector double vec_doublel (vector float);
     vector double vec_doublel (vector signed int);
     vector double vec_doublel (vector unsigned int);

     vector float vec_float (vector signed int);
     vector float vec_float (vector unsigned int);

     vector float vec_float2 (vector signed long long, vector signed long long);
     vector float vec_float2 (vector unsigned long long, vector signed long long);

     vector float vec_floate (vector double);
     vector float vec_floate (vector signed long long);
     vector float vec_floate (vector unsigned long long);

     vector float vec_floato (vector double);
     vector float vec_floato (vector signed long long);
     vector float vec_floato (vector unsigned long long);

     vector signed long long vec_signed (vector double);
     vector signed int vec_signed (vector float);

     vector signed int vec_signede (vector double);

     vector signed int vec_signedo (vector double);

     vector signed char vec_sldw (vector signed char, vector signed char, const int);
     vector unsigned char vec_sldw (vector unsigned char, vector unsigned char, const int);
     vector signed short vec_sldw (vector signed short, vector signed short, const int);
     vector unsigned short vec_sldw (vector unsigned short,
                                     vector unsigned short, const int);
     vector signed int vec_sldw (vector signed int, vector signed int, const int);
     vector unsigned int vec_sldw (vector unsigned int, vector unsigned int, const int);
     vector signed long long vec_sldw (vector signed long long,
                                       vector signed long long, const int);
     vector unsigned long long vec_sldw (vector unsigned long long,
                                         vector unsigned long long, const int);

     vector signed long long vec_unsigned (vector double);
     vector signed int vec_unsigned (vector float);

     vector signed int vec_unsignede (vector double);

     vector signed int vec_unsignedo (vector double);

     vector double vec_abs (vector double);
     vector double vec_add (vector double, vector double);
     vector double vec_and (vector double, vector double);
     vector double vec_and (vector double, vector bool long);
     vector double vec_and (vector bool long, vector double);
     vector long vec_and (vector long, vector long);
     vector long vec_and (vector long, vector bool long);
     vector long vec_and (vector bool long, vector long);
     vector unsigned long vec_and (vector unsigned long, vector unsigned long);
     vector unsigned long vec_and (vector unsigned long, vector bool long);
     vector unsigned long vec_and (vector bool long, vector unsigned long);
     vector double vec_andc (vector double, vector double);
     vector double vec_andc (vector double, vector bool long);
     vector double vec_andc (vector bool long, vector double);
     vector long vec_andc (vector long, vector long);
     vector long vec_andc (vector long, vector bool long);
     vector long vec_andc (vector bool long, vector long);
     vector unsigned long vec_andc (vector unsigned long, vector unsigned long);
     vector unsigned long vec_andc (vector unsigned long, vector bool long);
     vector unsigned long vec_andc (vector bool long, vector unsigned long);
     vector double vec_ceil (vector double);
     vector bool long vec_cmpeq (vector double, vector double);
     vector bool long vec_cmpge (vector double, vector double);
     vector bool long vec_cmpgt (vector double, vector double);
     vector bool long vec_cmple (vector double, vector double);
     vector bool long vec_cmplt (vector double, vector double);
     vector double vec_cpsgn (vector double, vector double);
     vector float vec_div (vector float, vector float);
     vector double vec_div (vector double, vector double);
     vector long vec_div (vector long, vector long);
     vector unsigned long vec_div (vector unsigned long, vector unsigned long);
     vector double vec_floor (vector double);
     vector signed long long vec_ld (int, const vector signed long long *);
     vector signed long long vec_ld (int, const signed long long *);
     vector unsigned long long vec_ld (int, const vector unsigned long long *);
     vector unsigned long long vec_ld (int, const unsigned long long *);
     vector __int128 vec_ld (int, const vector __int128 *);
     vector unsigned __int128 vec_ld (int, const vector unsigned __int128 *);
     vector __int128 vec_ld (int, const __int128 *);
     vector unsigned __int128 vec_ld (int, const unsigned __int128 *);
     vector double vec_ld (int, const vector double *);
     vector double vec_ld (int, const double *);
     vector double vec_ldl (int, const vector double *);
     vector double vec_ldl (int, const double *);
     vector unsigned char vec_lvsl (int, const double *);
     vector unsigned char vec_lvsr (int, const double *);
     vector double vec_madd (vector double, vector double, vector double);
     vector double vec_max (vector double, vector double);
     vector signed long vec_mergeh (vector signed long, vector signed long);
     vector signed long vec_mergeh (vector signed long, vector bool long);
     vector signed long vec_mergeh (vector bool long, vector signed long);
     vector unsigned long vec_mergeh (vector unsigned long, vector unsigned long);
     vector unsigned long vec_mergeh (vector unsigned long, vector bool long);
     vector unsigned long vec_mergeh (vector bool long, vector unsigned long);
     vector signed long vec_mergel (vector signed long, vector signed long);
     vector signed long vec_mergel (vector signed long, vector bool long);
     vector signed long vec_mergel (vector bool long, vector signed long);
     vector unsigned long vec_mergel (vector unsigned long, vector unsigned long);
     vector unsigned long vec_mergel (vector unsigned long, vector bool long);
     vector unsigned long vec_mergel (vector bool long, vector unsigned long);
     vector double vec_min (vector double, vector double);
     vector float vec_msub (vector float, vector float, vector float);
     vector double vec_msub (vector double, vector double, vector double);
     vector float vec_nearbyint (vector float);
     vector double vec_nearbyint (vector double);
     vector float vec_nmadd (vector float, vector float, vector float);
     vector double vec_nmadd (vector double, vector double, vector double);
     vector double vec_nmsub (vector double, vector double, vector double);
     vector double vec_nor (vector double, vector double);
     vector long vec_nor (vector long, vector long);
     vector long vec_nor (vector long, vector bool long);
     vector long vec_nor (vector bool long, vector long);
     vector unsigned long vec_nor (vector unsigned long, vector unsigned long);
     vector unsigned long vec_nor (vector unsigned long, vector bool long);
     vector unsigned long vec_nor (vector bool long, vector unsigned long);
     vector double vec_or (vector double, vector double);
     vector double vec_or (vector double, vector bool long);
     vector double vec_or (vector bool long, vector double);
     vector long vec_or (vector long, vector long);
     vector long vec_or (vector long, vector bool long);
     vector long vec_or (vector bool long, vector long);
     vector unsigned long vec_or (vector unsigned long, vector unsigned long);
     vector unsigned long vec_or (vector unsigned long, vector bool long);
     vector unsigned long vec_or (vector bool long, vector unsigned long);
     vector double vec_perm (vector double, vector double, vector unsigned char);
     vector long vec_perm (vector long, vector long, vector unsigned char);
     vector unsigned long vec_perm (vector unsigned long, vector unsigned long,
                                    vector unsigned char);
     vector bool char vec_permxor (vector bool char, vector bool char,
                                   vector bool char);
     vector unsigned char vec_permxor (vector signed char, vector signed char,
                                       vector signed char);
     vector unsigned char vec_permxor (vector unsigned char, vector unsigned char,
                                       vector unsigned char);
     vector double vec_rint (vector double);
     vector double vec_recip (vector double, vector double);
     vector double vec_rsqrt (vector double);
     vector double vec_rsqrte (vector double);
     vector double vec_sel (vector double, vector double, vector bool long);
     vector double vec_sel (vector double, vector double, vector unsigned long);
     vector long vec_sel (vector long, vector long, vector long);
     vector long vec_sel (vector long, vector long, vector unsigned long);
     vector long vec_sel (vector long, vector long, vector bool long);
     vector unsigned long vec_sel (vector unsigned long, vector unsigned long,
                                   vector long);
     vector unsigned long vec_sel (vector unsigned long, vector unsigned long,
                                   vector unsigned long);
     vector unsigned long vec_sel (vector unsigned long, vector unsigned long,
                                   vector bool long);
     vector double vec_splats (double);
     vector signed long vec_splats (signed long);
     vector unsigned long vec_splats (unsigned long);
     vector float vec_sqrt (vector float);
     vector double vec_sqrt (vector double);
     void vec_st (vector signed long long, int, vector signed long long *);
     void vec_st (vector signed long long, int, signed long long *);
     void vec_st (vector unsigned long long, int, vector unsigned long long *);
     void vec_st (vector unsigned long long, int, unsigned long long *);
     void vec_st (vector bool long long, int, vector bool long long *);
     void vec_st (vector bool long long, int, signed long long *);
     void vec_st (vector bool long long, int, unsigned long long *);
     void vec_st (vector double, int, vector double *);
     void vec_st (vector double, int, double *);
     vector double vec_sub (vector double, vector double);
     vector double vec_trunc (vector double);
     vector double vec_xl (int, vector double *);
     vector double vec_xl (int, double *);
     vector long long vec_xl (int, vector long long *);
     vector long long vec_xl (int, long long *);
     vector unsigned long long vec_xl (int, vector unsigned long long *);
     vector unsigned long long vec_xl (int, unsigned long long *);
     vector float vec_xl (int, vector float *);
     vector float vec_xl (int, float *);
     vector int vec_xl (int, vector int *);
     vector int vec_xl (int, int *);
     vector unsigned int vec_xl (int, vector unsigned int *);
     vector unsigned int vec_xl (int, unsigned int *);
     vector double vec_xor (vector double, vector double);
     vector double vec_xor (vector double, vector bool long);
     vector double vec_xor (vector bool long, vector double);
     vector long vec_xor (vector long, vector long);
     vector long vec_xor (vector long, vector bool long);
     vector long vec_xor (vector bool long, vector long);
     vector unsigned long vec_xor (vector unsigned long, vector unsigned long);
     vector unsigned long vec_xor (vector unsigned long, vector bool long);
     vector unsigned long vec_xor (vector bool long, vector unsigned long);
     void vec_xst (vector double, int, vector double *);
     void vec_xst (vector double, int, double *);
     void vec_xst (vector long long, int, vector long long *);
     void vec_xst (vector long long, int, long long *);
     void vec_xst (vector unsigned long long, int, vector unsigned long long *);
     void vec_xst (vector unsigned long long, int, unsigned long long *);
     void vec_xst (vector float, int, vector float *);
     void vec_xst (vector float, int, float *);
     void vec_xst (vector int, int, vector int *);
     void vec_xst (vector int, int, int *);
     void vec_xst (vector unsigned int, int, vector unsigned int *);
     void vec_xst (vector unsigned int, int, unsigned int *);
     int vec_all_eq (vector double, vector double);
     int vec_all_ge (vector double, vector double);
     int vec_all_gt (vector double, vector double);
     int vec_all_le (vector double, vector double);
     int vec_all_lt (vector double, vector double);
     int vec_all_nan (vector double);
     int vec_all_ne (vector double, vector double);
     int vec_all_nge (vector double, vector double);
     int vec_all_ngt (vector double, vector double);
     int vec_all_nle (vector double, vector double);
     int vec_all_nlt (vector double, vector double);
     int vec_all_numeric (vector double);
     int vec_any_eq (vector double, vector double);
     int vec_any_ge (vector double, vector double);
     int vec_any_gt (vector double, vector double);
     int vec_any_le (vector double, vector double);
     int vec_any_lt (vector double, vector double);
     int vec_any_nan (vector double);
     int vec_any_ne (vector double, vector double);
     int vec_any_nge (vector double, vector double);
     int vec_any_ngt (vector double, vector double);
     int vec_any_nle (vector double, vector double);
     int vec_any_nlt (vector double, vector double);
     int vec_any_numeric (vector double);

     vector double vec_vsx_ld (int, const vector double *);
     vector double vec_vsx_ld (int, const double *);
     vector float vec_vsx_ld (int, const vector float *);
     vector float vec_vsx_ld (int, const float *);
     vector bool int vec_vsx_ld (int, const vector bool int *);
     vector signed int vec_vsx_ld (int, const vector signed int *);
     vector signed int vec_vsx_ld (int, const int *);
     vector signed int vec_vsx_ld (int, const long *);
     vector unsigned int vec_vsx_ld (int, const vector unsigned int *);
     vector unsigned int vec_vsx_ld (int, const unsigned int *);
     vector unsigned int vec_vsx_ld (int, const unsigned long *);
     vector bool short vec_vsx_ld (int, const vector bool short *);
     vector pixel vec_vsx_ld (int, const vector pixel *);
     vector signed short vec_vsx_ld (int, const vector signed short *);
     vector signed short vec_vsx_ld (int, const short *);
     vector unsigned short vec_vsx_ld (int, const vector unsigned short *);
     vector unsigned short vec_vsx_ld (int, const unsigned short *);
     vector bool char vec_vsx_ld (int, const vector bool char *);
     vector signed char vec_vsx_ld (int, const vector signed char *);
     vector signed char vec_vsx_ld (int, const signed char *);
     vector unsigned char vec_vsx_ld (int, const vector unsigned char *);
     vector unsigned char vec_vsx_ld (int, const unsigned char *);

     void vec_vsx_st (vector double, int, vector double *);
     void vec_vsx_st (vector double, int, double *);
     void vec_vsx_st (vector float, int, vector float *);
     void vec_vsx_st (vector float, int, float *);
     void vec_vsx_st (vector signed int, int, vector signed int *);
     void vec_vsx_st (vector signed int, int, int *);
     void vec_vsx_st (vector unsigned int, int, vector unsigned int *);
     void vec_vsx_st (vector unsigned int, int, unsigned int *);
     void vec_vsx_st (vector bool int, int, vector bool int *);
     void vec_vsx_st (vector bool int, int, unsigned int *);
     void vec_vsx_st (vector bool int, int, int *);
     void vec_vsx_st (vector signed short, int, vector signed short *);
     void vec_vsx_st (vector signed short, int, short *);
     void vec_vsx_st (vector unsigned short, int, vector unsigned short *);
     void vec_vsx_st (vector unsigned short, int, unsigned short *);
     void vec_vsx_st (vector bool short, int, vector bool short *);
     void vec_vsx_st (vector bool short, int, unsigned short *);
     void vec_vsx_st (vector pixel, int, vector pixel *);
     void vec_vsx_st (vector pixel, int, unsigned short *);
     void vec_vsx_st (vector pixel, int, short *);
     void vec_vsx_st (vector bool short, int, short *);
     void vec_vsx_st (vector signed char, int, vector signed char *);
     void vec_vsx_st (vector signed char, int, signed char *);
     void vec_vsx_st (vector unsigned char, int, vector unsigned char *);
     void vec_vsx_st (vector unsigned char, int, unsigned char *);
     void vec_vsx_st (vector bool char, int, vector bool char *);
     void vec_vsx_st (vector bool char, int, unsigned char *);
     void vec_vsx_st (vector bool char, int, signed char *);

     vector double vec_xxpermdi (vector double, vector double, const int);
     vector float vec_xxpermdi (vector float, vector float, const int);
     vector long long vec_xxpermdi (vector long long, vector long long, const int);
     vector unsigned long long vec_xxpermdi (vector unsigned long long,
                                             vector unsigned long long, const int);
     vector int vec_xxpermdi (vector int, vector int, const int);
     vector unsigned int vec_xxpermdi (vector unsigned int,
                                       vector unsigned int, const int);
     vector short vec_xxpermdi (vector short, vector short, const int);
     vector unsigned short vec_xxpermdi (vector unsigned short,
                                         vector unsigned short, const int);
     vector signed char vec_xxpermdi (vector signed char, vector signed char,
                                      const int);
     vector unsigned char vec_xxpermdi (vector unsigned char,
                                        vector unsigned char, const int);

     vector double vec_xxsldi (vector double, vector double, int);
     vector float vec_xxsldi (vector float, vector float, int);
     vector long long vec_xxsldi (vector long long, vector long long, int);
     vector unsigned long long vec_xxsldi (vector unsigned long long,
                                           vector unsigned long long, int);
     vector int vec_xxsldi (vector int, vector int, int);
     vector unsigned int vec_xxsldi (vector unsigned int, vector unsigned int, int);
     vector short vec_xxsldi (vector short, vector short, int);
     vector unsigned short vec_xxsldi (vector unsigned short,
                                       vector unsigned short, int);
     vector signed char vec_xxsldi (vector signed char, vector signed char, int);
     vector unsigned char vec_xxsldi (vector unsigned char,
                                      vector unsigned char, int);

 Note that the 'vec_ld' and 'vec_st' built-in functions always generate
the AltiVec 'LVX' and 'STVX' instructions even if the VSX instruction
set is available.  The 'vec_vsx_ld' and 'vec_vsx_st' built-in functions
always generate the VSX 'LXVD2X', 'LXVW4X', 'STXVD2X', and 'STXVW4X'
instructions.

==============================================================================
File: gcc.info,  Node: |PowerPC_AltiVec_Built_in_Functions_Available_on_ISA_2.07|,  Next: |PowerPC_AltiVec_Built_in_Functions_Available_on_ISA_3.0|,  Prev: |PowerPC_AltiVec_Built_in_Functions_Available_on_ISA_2.06|,  Up: |PowerPC_AltiVec/VSX_Built_in_Functions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                          *PowerPC_AltiVec_Built_in_Functions_Available_on_ISA_2.07*

6.60.22.3 PowerPC AltiVec Built-in Functions Available on ISA 2.07
.....-------------------------------------------------------------

If the ISA 2.07 additions to the vector/scalar (power8-vector)
instruction set are available, the following additional functions are
available for both 32-bit and 64-bit targets.  For 64-bit targets, you
can use VECTOR LONG instead of VECTOR LONG LONG, VECTOR BOOL LONG
instead of VECTOR BOOL LONG LONG, and VECTOR UNSIGNED LONG instead of
VECTOR UNSIGNED LONG LONG.

     vector signed char vec_neg (vector signed char);
     vector signed short vec_neg (vector signed short);
     vector signed int vec_neg (vector signed int);
     vector signed long long vec_neg (vector signed long long);
     vector float  char vec_neg (vector float);
     vector double vec_neg (vector double);

     vector signed int vec_signed2 (vector double, vector double);

     vector signed int vec_unsigned2 (vector double, vector double);

     vector long long vec_abs (vector long long);

     vector long long vec_add (vector long long, vector long long);
     vector unsigned long long vec_add (vector unsigned long long,
                                        vector unsigned long long);

     int vec_all_eq (vector long long, vector long long);
     int vec_all_eq (vector unsigned long long, vector unsigned long long);
     int vec_all_ge (vector long long, vector long long);
     int vec_all_ge (vector unsigned long long, vector unsigned long long);
     int vec_all_gt (vector long long, vector long long);
     int vec_all_gt (vector unsigned long long, vector unsigned long long);
     int vec_all_le (vector long long, vector long long);
     int vec_all_le (vector unsigned long long, vector unsigned long long);
     int vec_all_lt (vector long long, vector long long);
     int vec_all_lt (vector unsigned long long, vector unsigned long long);
     int vec_all_ne (vector long long, vector long long);
     int vec_all_ne (vector unsigned long long, vector unsigned long long);

     int vec_any_eq (vector long long, vector long long);
     int vec_any_eq (vector unsigned long long, vector unsigned long long);
     int vec_any_ge (vector long long, vector long long);
     int vec_any_ge (vector unsigned long long, vector unsigned long long);
     int vec_any_gt (vector long long, vector long long);
     int vec_any_gt (vector unsigned long long, vector unsigned long long);
     int vec_any_le (vector long long, vector long long);
     int vec_any_le (vector unsigned long long, vector unsigned long long);
     int vec_any_lt (vector long long, vector long long);
     int vec_any_lt (vector unsigned long long, vector unsigned long long);
     int vec_any_ne (vector long long, vector long long);
     int vec_any_ne (vector unsigned long long, vector unsigned long long);

     vector bool long long vec_cmpeq (vector bool long long, vector bool long long);

     vector long long vec_eqv (vector long long, vector long long);
     vector long long vec_eqv (vector bool long long, vector long long);
     vector long long vec_eqv (vector long long, vector bool long long);
     vector unsigned long long vec_eqv (vector unsigned long long, vector unsigned long long);
     vector unsigned long long vec_eqv (vector bool long long, vector unsigned long long);
     vector unsigned long long vec_eqv (vector unsigned long long,
                                        vector bool long long);
     vector int vec_eqv (vector int, vector int);
     vector int vec_eqv (vector bool int, vector int);
     vector int vec_eqv (vector int, vector bool int);
     vector unsigned int vec_eqv (vector unsigned int, vector unsigned int);
     vector unsigned int vec_eqv (vector bool unsigned int, vector unsigned int);
     vector unsigned int vec_eqv (vector unsigned int, vector bool unsigned int);
     vector short vec_eqv (vector short, vector short);
     vector short vec_eqv (vector bool short, vector short);
     vector short vec_eqv (vector short, vector bool short);
     vector unsigned short vec_eqv (vector unsigned short, vector unsigned short);
     vector unsigned short vec_eqv (vector bool unsigned short, vector unsigned short);
     vector unsigned short vec_eqv (vector unsigned short, vector bool unsigned short);
     vector signed char vec_eqv (vector signed char, vector signed char);
     vector signed char vec_eqv (vector bool signed char, vector signed char);
     vector signed char vec_eqv (vector signed char, vector bool signed char);
     vector unsigned char vec_eqv (vector unsigned char, vector unsigned char);
     vector unsigned char vec_eqv (vector bool unsigned char, vector unsigned char);
     vector unsigned char vec_eqv (vector unsigned char, vector bool unsigned char);

     vector long long vec_max (vector long long, vector long long);
     vector unsigned long long vec_max (vector unsigned long long,
                                        vector unsigned long long);

     vector signed int vec_mergee (vector signed int, vector signed int);
     vector unsigned int vec_mergee (vector unsigned int, vector unsigned int);
     vector bool int vec_mergee (vector bool int, vector bool int);

     vector signed int vec_mergeo (vector signed int, vector signed int);
     vector unsigned int vec_mergeo (vector unsigned int, vector unsigned int);
     vector bool int vec_mergeo (vector bool int, vector bool int);

     vector long long vec_min (vector long long, vector long long);
     vector unsigned long long vec_min (vector unsigned long long,
                                        vector unsigned long long);

     vector signed long long vec_nabs (vector signed long long);

     vector long long vec_nand (vector long long, vector long long);
     vector long long vec_nand (vector bool long long, vector long long);
     vector long long vec_nand (vector long long, vector bool long long);
     vector unsigned long long vec_nand (vector unsigned long long,
                                         vector unsigned long long);
     vector unsigned long long vec_nand (vector bool long long, vector unsigned long long);
     vector unsigned long long vec_nand (vector unsigned long long, vector bool long long);
     vector int vec_nand (vector int, vector int);
     vector int vec_nand (vector bool int, vector int);
     vector int vec_nand (vector int, vector bool int);
     vector unsigned int vec_nand (vector unsigned int, vector unsigned int);
     vector unsigned int vec_nand (vector bool unsigned int, vector unsigned int);
     vector unsigned int vec_nand (vector unsigned int, vector bool unsigned int);
     vector short vec_nand (vector short, vector short);
     vector short vec_nand (vector bool short, vector short);
     vector short vec_nand (vector short, vector bool short);
     vector unsigned short vec_nand (vector unsigned short, vector unsigned short);
     vector unsigned short vec_nand (vector bool unsigned short, vector unsigned short);
     vector unsigned short vec_nand (vector unsigned short, vector bool unsigned short);
     vector signed char vec_nand (vector signed char, vector signed char);
     vector signed char vec_nand (vector bool signed char, vector signed char);
     vector signed char vec_nand (vector signed char, vector bool signed char);
     vector unsigned char vec_nand (vector unsigned char, vector unsigned char);
     vector unsigned char vec_nand (vector bool unsigned char, vector unsigned char);
     vector unsigned char vec_nand (vector unsigned char, vector bool unsigned char);

     vector long long vec_orc (vector long long, vector long long);
     vector long long vec_orc (vector bool long long, vector long long);
     vector long long vec_orc (vector long long, vector bool long long);
     vector unsigned long long vec_orc (vector unsigned long long,
                                        vector unsigned long long);
     vector unsigned long long vec_orc (vector bool long long, vector unsigned long long);
     vector unsigned long long vec_orc (vector unsigned long long, vector bool long long);
     vector int vec_orc (vector int, vector int);
     vector int vec_orc (vector bool int, vector int);
     vector int vec_orc (vector int, vector bool int);
     vector unsigned int vec_orc (vector unsigned int, vector unsigned int);
     vector unsigned int vec_orc (vector bool unsigned int, vector unsigned int);
     vector unsigned int vec_orc (vector unsigned int, vector bool unsigned int);
     vector short vec_orc (vector short, vector short);
     vector short vec_orc (vector bool short, vector short);
     vector short vec_orc (vector short, vector bool short);
     vector unsigned short vec_orc (vector unsigned short, vector unsigned short);
     vector unsigned short vec_orc (vector bool unsigned short, vector unsigned short);
     vector unsigned short vec_orc (vector unsigned short, vector bool unsigned short);
     vector signed char vec_orc (vector signed char, vector signed char);
     vector signed char vec_orc (vector bool signed char, vector signed char);
     vector signed char vec_orc (vector signed char, vector bool signed char);
     vector unsigned char vec_orc (vector unsigned char, vector unsigned char);
     vector unsigned char vec_orc (vector bool unsigned char, vector unsigned char);
     vector unsigned char vec_orc (vector unsigned char, vector bool unsigned char);

     vector int vec_pack (vector long long, vector long long);
     vector unsigned int vec_pack (vector unsigned long long, vector unsigned long long);
     vector bool int vec_pack (vector bool long long, vector bool long long);
     vector float vec_pack (vector double, vector double);

     vector int vec_packs (vector long long, vector long long);
     vector unsigned int vec_packs (vector unsigned long long, vector unsigned long long);

     vector unsigned char vec_packsu (vector signed short, vector signed short)
     vector unsigned char vec_packsu (vector unsigned short, vector unsigned short)
     vector unsigned short int vec_packsu (vector signed int, vector signed int);
     vector unsigned short int vec_packsu (vector unsigned int, vector unsigned int);
     vector unsigned int vec_packsu (vector long long, vector long long);
     vector unsigned int vec_packsu (vector unsigned long long, vector unsigned long long);
     vector unsigned int vec_packsu (vector signed long long, vector signed long long);

     vector unsigned char vec_popcnt (vector signed char);
     vector unsigned char vec_popcnt (vector unsigned char);
     vector unsigned short vec_popcnt (vector signed short);
     vector unsigned short vec_popcnt (vector unsigned short);
     vector unsigned int vec_popcnt (vector signed int);
     vector unsigned int vec_popcnt (vector unsigned int);
     vector unsigned long long vec_popcnt (vector signed long long);
     vector unsigned long long vec_popcnt (vector unsigned long long);

     vector long long vec_rl (vector long long, vector unsigned long long);
     vector long long vec_rl (vector unsigned long long, vector unsigned long long);

     vector long long vec_sl (vector long long, vector unsigned long long);
     vector long long vec_sl (vector unsigned long long, vector unsigned long long);

     vector long long vec_sr (vector long long, vector unsigned long long);
     vector unsigned long long char vec_sr (vector unsigned long long,
                                            vector unsigned long long);

     vector long long vec_sra (vector long long, vector unsigned long long);
     vector unsigned long long vec_sra (vector unsigned long long,
                                        vector unsigned long long);

     vector long long vec_sub (vector long long, vector long long);
     vector unsigned long long vec_sub (vector unsigned long long,
                                        vector unsigned long long);

     vector long long vec_unpackh (vector int);
     vector unsigned long long vec_unpackh (vector unsigned int);

     vector long long vec_unpackl (vector int);
     vector unsigned long long vec_unpackl (vector unsigned int);

     vector long long vec_vaddudm (vector long long, vector long long);
     vector long long vec_vaddudm (vector bool long long, vector long long);
     vector long long vec_vaddudm (vector long long, vector bool long long);
     vector unsigned long long vec_vaddudm (vector unsigned long long,
                                            vector unsigned long long);
     vector unsigned long long vec_vaddudm (vector bool unsigned long long,
                                            vector unsigned long long);
     vector unsigned long long vec_vaddudm (vector unsigned long long,
                                            vector bool unsigned long long);

     vector long long vec_vbpermq (vector signed char, vector signed char);
     vector long long vec_vbpermq (vector unsigned char, vector unsigned char);

     vector unsigned char vec_bperm (vector unsigned char, vector unsigned char);
     vector unsigned char vec_bperm (vector unsigned long long, vector unsigned char);
     vector unsigned long long vec_bperm (vector unsigned __int128, vector unsigned char);

     vector long long vec_cntlz (vector long long);
     vector unsigned long long vec_cntlz (vector unsigned long long);
     vector int vec_cntlz (vector int);
     vector unsigned int vec_cntlz (vector int);
     vector short vec_cntlz (vector short);
     vector unsigned short vec_cntlz (vector unsigned short);
     vector signed char vec_cntlz (vector signed char);
     vector unsigned char vec_cntlz (vector unsigned char);

     vector long long vec_vclz (vector long long);
     vector unsigned long long vec_vclz (vector unsigned long long);
     vector int vec_vclz (vector int);
     vector unsigned int vec_vclz (vector int);
     vector short vec_vclz (vector short);
     vector unsigned short vec_vclz (vector unsigned short);
     vector signed char vec_vclz (vector signed char);
     vector unsigned char vec_vclz (vector unsigned char);

     vector signed char vec_vclzb (vector signed char);
     vector unsigned char vec_vclzb (vector unsigned char);

     vector long long vec_vclzd (vector long long);
     vector unsigned long long vec_vclzd (vector unsigned long long);

     vector short vec_vclzh (vector short);
     vector unsigned short vec_vclzh (vector unsigned short);

     vector int vec_vclzw (vector int);
     vector unsigned int vec_vclzw (vector int);

     vector signed char vec_vgbbd (vector signed char);
     vector unsigned char vec_vgbbd (vector unsigned char);

     vector long long vec_vmaxsd (vector long long, vector long long);

     vector unsigned long long vec_vmaxud (vector unsigned long long,
                                           unsigned vector long long);

     vector long long vec_vminsd (vector long long, vector long long);

     vector unsigned long long vec_vminud (vector long long, vector long long);

     vector int vec_vpksdss (vector long long, vector long long);
     vector unsigned int vec_vpksdss (vector long long, vector long long);

     vector unsigned int vec_vpkudus (vector unsigned long long,
                                      vector unsigned long long);

     vector int vec_vpkudum (vector long long, vector long long);
     vector unsigned int vec_vpkudum (vector unsigned long long,
                                      vector unsigned long long);
     vector bool int vec_vpkudum (vector bool long long, vector bool long long);

     vector long long vec_vpopcnt (vector long long);
     vector unsigned long long vec_vpopcnt (vector unsigned long long);
     vector int vec_vpopcnt (vector int);
     vector unsigned int vec_vpopcnt (vector int);
     vector short vec_vpopcnt (vector short);
     vector unsigned short vec_vpopcnt (vector unsigned short);
     vector signed char vec_vpopcnt (vector signed char);
     vector unsigned char vec_vpopcnt (vector unsigned char);

     vector signed char vec_vpopcntb (vector signed char);
     vector unsigned char vec_vpopcntb (vector unsigned char);

     vector long long vec_vpopcntd (vector long long);
     vector unsigned long long vec_vpopcntd (vector unsigned long long);

     vector short vec_vpopcnth (vector short);
     vector unsigned short vec_vpopcnth (vector unsigned short);

     vector int vec_vpopcntw (vector int);
     vector unsigned int vec_vpopcntw (vector int);

     vector long long vec_vrld (vector long long, vector unsigned long long);
     vector unsigned long long vec_vrld (vector unsigned long long,
                                         vector unsigned long long);

     vector long long vec_vsld (vector long long, vector unsigned long long);
     vector long long vec_vsld (vector unsigned long long,
                                vector unsigned long long);

     vector long long vec_vsrad (vector long long, vector unsigned long long);
     vector unsigned long long vec_vsrad (vector unsigned long long,
                                          vector unsigned long long);

     vector long long vec_vsrd (vector long long, vector unsigned long long);
     vector unsigned long long char vec_vsrd (vector unsigned long long,
                                              vector unsigned long long);

     vector long long vec_vsubudm (vector long long, vector long long);
     vector long long vec_vsubudm (vector bool long long, vector long long);
     vector long long vec_vsubudm (vector long long, vector bool long long);
     vector unsigned long long vec_vsubudm (vector unsigned long long,
                                            vector unsigned long long);
     vector unsigned long long vec_vsubudm (vector bool long long,
                                            vector unsigned long long);
     vector unsigned long long vec_vsubudm (vector unsigned long long,
                                            vector bool long long);

     vector long long vec_vupkhsw (vector int);
     vector unsigned long long vec_vupkhsw (vector unsigned int);

     vector long long vec_vupklsw (vector int);
     vector unsigned long long vec_vupklsw (vector int);

 If the ISA 2.07 additions to the vector/scalar (power8-vector)
instruction set are available, the following additional functions are
available for 64-bit targets.  New vector types (VECTOR __INT128 and
VECTOR __UINT128) are available to hold the __INT128 and __UINT128 types
to use these builtins.

 The normal vector extract, and set operations work on VECTOR __INT128
and VECTOR __UINT128 types, but the index value must be 0.

     vector __int128 vec_vaddcuq (vector __int128, vector __int128);
     vector __uint128 vec_vaddcuq (vector __uint128, vector __uint128);

     vector __int128 vec_vadduqm (vector __int128, vector __int128);
     vector __uint128 vec_vadduqm (vector __uint128, vector __uint128);

     vector __int128 vec_vaddecuq (vector __int128, vector __int128,
                                     vector __int128);
     vector __uint128 vec_vaddecuq (vector __uint128, vector __uint128,
                                      vector __uint128);

     vector __int128 vec_vaddeuqm (vector __int128, vector __int128,
                                     vector __int128);
     vector __uint128 vec_vaddeuqm (vector __uint128, vector __uint128,
                                      vector __uint128);

     vector __int128 vec_vsubecuq (vector __int128, vector __int128,
                                     vector __int128);
     vector __uint128 vec_vsubecuq (vector __uint128, vector __uint128,
                                      vector __uint128);

     vector __int128 vec_vsubeuqm (vector __int128, vector __int128,
                                     vector __int128);
     vector __uint128 vec_vsubeuqm (vector __uint128, vector __uint128,
                                      vector __uint128);

     vector __int128 vec_vsubcuq (vector __int128, vector __int128);
     vector __uint128 vec_vsubcuq (vector __uint128, vector __uint128);

     __int128 vec_vsubuqm (__int128, __int128);
     __uint128 vec_vsubuqm (__uint128, __uint128);

     vector __int128 __builtin_bcdadd (vector __int128, vector __int128, const int);
     int __builtin_bcdadd_lt (vector __int128, vector __int128, const int);
     int __builtin_bcdadd_eq (vector __int128, vector __int128, const int);
     int __builtin_bcdadd_gt (vector __int128, vector __int128, const int);
     int __builtin_bcdadd_ov (vector __int128, vector __int128, const int);
     vector __int128 __builtin_bcdsub (vector __int128, vector __int128, const int);
     int __builtin_bcdsub_lt (vector __int128, vector __int128, const int);
     int __builtin_bcdsub_eq (vector __int128, vector __int128, const int);
     int __builtin_bcdsub_gt (vector __int128, vector __int128, const int);
     int __builtin_bcdsub_ov (vector __int128, vector __int128, const int);

==============================================================================
File: gcc.info,  Node: |PowerPC_AltiVec_Built_in_Functions_Available_on_ISA_3.0|,  Prev: |PowerPC_AltiVec_Built_in_Functions_Available_on_ISA_2.07|,  Up: |PowerPC_AltiVec/VSX_Built_in_Functions|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                           *PowerPC_AltiVec_Built_in_Functions_Available_on_ISA_3.0*

6.60.22.4 PowerPC AltiVec Built-in Functions Available on ISA 3.0
.....------------------------------------------------------------

The following additional built-in functions are also available for the
PowerPC family of processors, starting with ISA 3.0 ('-mcpu=power9') or
later:
     unsigned int scalar_extract_exp (double source);
     unsigned long long int scalar_extract_exp (__ieee128 source);

     unsigned long long int scalar_extract_sig (double source);
     unsigned __int128 scalar_extract_sig (__ieee128 source);

     double scalar_insert_exp (unsigned long long int significand,
                               unsigned long long int exponent);
     double scalar_insert_exp (double significand, unsigned long long int exponent);

     ieee_128 scalar_insert_exp (unsigned __int128 significand,
                                 unsigned long long int exponent);
     ieee_128 scalar_insert_exp (ieee_128 significand, unsigned long long int exponent);

     int scalar_cmp_exp_gt (double arg1, double arg2);
     int scalar_cmp_exp_lt (double arg1, double arg2);
     int scalar_cmp_exp_eq (double arg1, double arg2);
     int scalar_cmp_exp_unordered (double arg1, double arg2);

     bool scalar_test_data_class (float source, const int condition);
     bool scalar_test_data_class (double source, const int condition);
     bool scalar_test_data_class (__ieee128 source, const int condition);

     bool scalar_test_neg (float source);
     bool scalar_test_neg (double source);
     bool scalar_test_neg (__ieee128 source);

 The 'scalar_extract_exp' and 'scalar_extract_sig' functions require a
64-bit environment supporting ISA 3.0 or later.  The
'scalar_extract_exp' and 'scalar_extract_sig' built-in functions return
the significand and the biased exponent value respectively of their
'source' arguments.  When supplied with a 64-bit 'source' argument, the
result returned by 'scalar_extract_sig' has the '0x0010000000000000' bit
set if the function's 'source' argument is in normalized form.
Otherwise, this bit is set to 0.  When supplied with a 128-bit 'source'
argument, the '0x00010000000000000000000000000000' bit of the result is
treated similarly.  Note that the sign of the significand is not
represented in the result returned from the 'scalar_extract_sig'
function.  Use the 'scalar_test_neg' function to test the sign of its
'double' argument.

 The 'scalar_insert_exp' functions require a 64-bit environment
supporting ISA 3.0 or later.  When supplied with a 64-bit first
argument, the 'scalar_insert_exp' built-in function returns a
double-precision floating point value that is constructed by assembling
the values of its 'significand' and 'exponent' arguments.  The sign of
the result is copied from the most significant bit of the 'significand'
argument.  The significand and exponent components of the result are
composed of the least significant 11 bits of the 'exponent' argument and
the least significant 52 bits of the 'significand' argument
respectively.

 When supplied with a 128-bit first argument, the 'scalar_insert_exp'
built-in function returns a quad-precision ieee floating point value.
The sign bit of the result is copied from the most significant bit of
the 'significand' argument.  The significand and exponent components of
the result are composed of the least significant 15 bits of the
'exponent' argument and the least significant 112 bits of the
'significand' argument respectively.

 The 'scalar_cmp_exp_gt', 'scalar_cmp_exp_lt', 'scalar_cmp_exp_eq', and
'scalar_cmp_exp_unordered' built-in functions return a non-zero value if
'arg1' is greater than, less than, equal to, or not comparable to 'arg2'
respectively.  The arguments are not comparable if one or the other
equals NaN (not a number).

 The 'scalar_test_data_class' built-in function returns 1 if any of the
condition tests enabled by the value of the 'condition' variable are
true, and 0 otherwise.  The 'condition' argument must be a compile-time
constant integer with value not exceeding 127.  The 'condition' argument
is encoded as a bitmask with each bit enabling the testing of a
different condition, as characterized by the following:
     0x40    Test for NaN
     0x20    Test for +Infinity
     0x10    Test for -Infinity
     0x08    Test for +Zero
     0x04    Test for -Zero
     0x02    Test for +Denormal
     0x01    Test for -Denormal

 The 'scalar_test_neg' built-in function returns 1 if its 'source'
argument holds a negative value, 0 otherwise.

 The following built-in functions are also available for the PowerPC
family of processors, starting with ISA 3.0 or later ('-mcpu=power9').
These string functions are described separately in order to group the
descriptions closer to the function prototypes:
     int vec_all_nez (vector signed char, vector signed char);
     int vec_all_nez (vector unsigned char, vector unsigned char);
     int vec_all_nez (vector signed short, vector signed short);
     int vec_all_nez (vector unsigned short, vector unsigned short);
     int vec_all_nez (vector signed int, vector signed int);
     int vec_all_nez (vector unsigned int, vector unsigned int);

     int vec_any_eqz (vector signed char, vector signed char);
     int vec_any_eqz (vector unsigned char, vector unsigned char);
     int vec_any_eqz (vector signed short, vector signed short);
     int vec_any_eqz (vector unsigned short, vector unsigned short);
     int vec_any_eqz (vector signed int, vector signed int);
     int vec_any_eqz (vector unsigned int, vector unsigned int);

     vector bool char vec_cmpnez (vector signed char arg1, vector signed char arg2);
     vector bool char vec_cmpnez (vector unsigned char arg1, vector unsigned char arg2);
     vector bool short vec_cmpnez (vector signed short arg1, vector signed short arg2);
     vector bool short vec_cmpnez (vector unsigned short arg1, vector unsigned short arg2);
     vector bool int vec_cmpnez (vector signed int arg1, vector signed int arg2);
     vector bool int vec_cmpnez (vector unsigned int, vector unsigned int);

     vector signed char vec_cnttz (vector signed char);
     vector unsigned char vec_cnttz (vector unsigned char);
     vector signed short vec_cnttz (vector signed short);
     vector unsigned short vec_cnttz (vector unsigned short);
     vector signed int vec_cnttz (vector signed int);
     vector unsigned int vec_cnttz (vector unsigned int);
     vector signed long long vec_cnttz (vector signed long long);
     vector unsigned long long vec_cnttz (vector unsigned long long);

     signed int vec_cntlz_lsbb (vector signed char);
     signed int vec_cntlz_lsbb (vector unsigned char);

     signed int vec_cnttz_lsbb (vector signed char);
     signed int vec_cnttz_lsbb (vector unsigned char);

     unsigned int vec_first_match_index (vector signed char, vector signed char);
     unsigned int vec_first_match_index (vector unsigned char, vector unsigned char);
     unsigned int vec_first_match_index (vector signed int, vector signed int);
     unsigned int vec_first_match_index (vector unsigned int, vector unsigned int);
     unsigned int vec_first_match_index (vector signed short, vector signed short);
     unsigned int vec_first_match_index (vector unsigned short, vector unsigned short);
     unsigned int vec_first_match_or_eos_index (vector signed char, vector signed char);
     unsigned int vec_first_match_or_eos_index (vector unsigned char, vector unsigned char);
     unsigned int vec_first_match_or_eos_index (vector signed int, vector signed int);
     unsigned int vec_first_match_or_eos_index (vector unsigned int, vector unsigned int);
     unsigned int vec_first_match_or_eos_index (vector signed short, vector signed short);
     unsigned int vec_first_match_or_eos_index (vector unsigned short,
                                                vector unsigned short);
     unsigned int vec_first_mismatch_index (vector signed char, vector signed char);
     unsigned int vec_first_mismatch_index (vector unsigned char, vector unsigned char);
     unsigned int vec_first_mismatch_index (vector signed int, vector signed int);
     unsigned int vec_first_mismatch_index (vector unsigned int, vector unsigned int);
     unsigned int vec_first_mismatch_index (vector signed short, vector signed short);
     unsigned int vec_first_mismatch_index (vector unsigned short, vector unsigned short);
     unsigned int vec_first_mismatch_or_eos_index (vector signed char, vector signed char);
     unsigned int vec_first_mismatch_or_eos_index (vector unsigned char,
                                                   vector unsigned char);
     unsigned int vec_first_mismatch_or_eos_index (vector signed int, vector signed int);
     unsigned int vec_first_mismatch_or_eos_index (vector unsigned int, vector unsigned int);
     unsigned int vec_first_mismatch_or_eos_index (vector signed short, vector signed short);
     unsigned int vec_first_mismatch_or_eos_index (vector unsigned short,
                                                   vector unsigned short);

     vector unsigned short vec_pack_to_short_fp32 (vector float, vector float);

     vector signed char vec_xl_be (signed long long, signed char *);
     vector unsigned char vec_xl_be (signed long long, unsigned char *);
     vector signed int vec_xl_be (signed long long, signed int *);
     vector unsigned int vec_xl_be (signed long long, unsigned int *);
     vector signed __int128 vec_xl_be (signed long long, signed __int128 *);
     vector unsigned __int128 vec_xl_be (signed long long, unsigned __int128 *);
     vector signed long long vec_xl_be (signed long long, signed long long *);
     vector unsigned long long vec_xl_be (signed long long, unsigned long long *);
     vector signed short vec_xl_be (signed long long, signed short *);
     vector unsigned short vec_xl_be (signed long long, unsigned short *);
     vector double vec_xl_be (signed long long, double *);
     vector float vec_xl_be (signed long long, float *);

     vector signed char vec_xl_len (signed char *addr, size_t len);
     vector unsigned char vec_xl_len (unsigned char *addr, size_t len);
     vector signed int vec_xl_len (signed int *addr, size_t len);
     vector unsigned int vec_xl_len (unsigned int *addr, size_t len);
     vector signed __int128 vec_xl_len (signed __int128 *addr, size_t len);
     vector unsigned __int128 vec_xl_len (unsigned __int128 *addr, size_t len);
     vector signed long long vec_xl_len (signed long long *addr, size_t len);
     vector unsigned long long vec_xl_len (unsigned long long *addr, size_t len);
     vector signed short vec_xl_len (signed short *addr, size_t len);
     vector unsigned short vec_xl_len (unsigned short *addr, size_t len);
     vector double vec_xl_len (double *addr, size_t len);
     vector float vec_xl_len (float *addr, size_t len);

     vector unsigned char vec_xl_len_r (unsigned char *addr, size_t len);

     void vec_xst_len (vector signed char data, signed char *addr, size_t len);
     void vec_xst_len (vector unsigned char data, unsigned char *addr, size_t len);
     void vec_xst_len (vector signed int data, signed int *addr, size_t len);
     void vec_xst_len (vector unsigned int data, unsigned int *addr, size_t len);
     void vec_xst_len (vector unsigned __int128 data, unsigned __int128 *addr, size_t len);
     void vec_xst_len (vector signed long long data, signed long long *addr, size_t len);
     void vec_xst_len (vector unsigned long long data, unsigned long long *addr, size_t len);
     void vec_xst_len (vector signed short data, signed short *addr, size_t len);
     void vec_xst_len (vector unsigned short data, unsigned short *addr, size_t len);
     void vec_xst_len (vector signed __int128 data, signed __int128 *addr, size_t len);
     void vec_xst_len (vector double data, double *addr, size_t len);
     void vec_xst_len (vector float data, float *addr, size_t len);

     void vec_xst_len_r (vector unsigned char data, unsigned char *addr, size_t len);

     signed char vec_xlx (unsigned int index, vector signed char data);
     unsigned char vec_xlx (unsigned int index, vector unsigned char data);
     signed short vec_xlx (unsigned int index, vector signed short data);
     unsigned short vec_xlx (unsigned int index, vector unsigned short data);
     signed int vec_xlx (unsigned int index, vector signed int data);
     unsigned int vec_xlx (unsigned int index, vector unsigned int data);
     float vec_xlx (unsigned int index, vector float data);

     signed char vec_xrx (unsigned int index, vector signed char data);
     unsigned char vec_xrx (unsigned int index, vector unsigned char data);
     signed short vec_xrx (unsigned int index, vector signed short data);
     unsigned short vec_xrx (unsigned int index, vector unsigned short data);
     signed int vec_xrx (unsigned int index, vector signed int data);
     unsigned int vec_xrx (unsigned int index, vector unsigned int data);
     float vec_xrx (unsigned int index, vector float data);

 The 'vec_all_nez', 'vec_any_eqz', and 'vec_cmpnez' perform pairwise
comparisons between the elements at the same positions within their two
vector arguments.  The 'vec_all_nez' function returns a non-zero value
if and only if all pairwise comparisons are not equal and no element of
either vector argument contains a zero.  The 'vec_any_eqz' function
returns a non-zero value if and only if at least one pairwise comparison
is equal or if at least one element of either vector argument contains a
zero.  The 'vec_cmpnez' function returns a vector of the same type as
its two arguments, within which each element consists of all ones to
denote that either the corresponding elements of the incoming arguments
are not equal or that at least one of the corresponding elements
contains zero.  Otherwise, the element of the returned vector contains
all zeros.

 The 'vec_cntlz_lsbb' function returns the count of the number of
consecutive leading byte elements (starting from position 0 within the
supplied vector argument) for which the least-significant bit equals
zero.  The 'vec_cnttz_lsbb' function returns the count of the number of
consecutive trailing byte elements (starting from position 15 and
counting backwards within the supplied vector argument) for which the
least-significant bit equals zero.

 The 'vec_xl_len' and 'vec_xst_len' functions require a 64-bit
environment supporting ISA 3.0 or later.  The 'vec_xl_len' function
loads a variable length vector from memory.  The 'vec_xst_len' function
stores a variable length vector to memory.  With both the 'vec_xl_len'
and 'vec_xst_len' functions, the 'addr' argument represents the memory
address to or from which data will be transferred, and the 'len'
argument represents the number of bytes to be transferred, as computed
by the C expression 'min((len & 0xff), 16)'.  If this expression's value
is not a multiple of the vector element's size, the behavior of this
function is undefined.  In the case that the underlying computer is
configured to run in big-endian mode, the data transfer moves bytes 0 to
'(len - 1)' of the corresponding vector.  In little-endian mode, the
data transfer moves bytes '(16 - len)' to '15' of the corresponding
vector.  For the load function, any bytes of the result vector that are
not loaded from memory are set to zero.  The value of the 'addr'
argument need not be aligned on a multiple of the vector's element size.

 The 'vec_xlx' and 'vec_xrx' functions extract the single element
selected by the 'index' argument from the vector represented by the
'data' argument.  The 'index' argument always specifies a byte offset,
regardless of the size of the vector element.  With 'vec_xlx', 'index'
is the offset of the first byte of the element to be extracted.  With
'vec_xrx', 'index' represents the last byte of the element to be
extracted, measured from the right end of the vector.  In other words,
the last byte of the element to be extracted is found at position '(15 -
index)'.  There is no requirement that 'index' be a multiple of the
vector element size.  However, if the size of the vector element added
to 'index' is greater than 15, the content of the returned value is
undefined.

 If the ISA 3.0 instruction set additions ('-mcpu=power9') are
available:

     vector unsigned long long vec_bperm (vector unsigned long long, vector unsigned char);

     vector bool char vec_cmpne (vector bool char, vector bool char);
     vector bool char vec_cmpne (vector signed char, vector signed char);
     vector bool char vec_cmpne (vector unsigned char, vector unsigned char);
     vector bool int vec_cmpne (vector bool int, vector bool int);
     vector bool int vec_cmpne (vector signed int, vector signed int);
     vector bool int vec_cmpne (vector unsigned int, vector unsigned int);
     vector bool long long vec_cmpne (vector bool long long, vector bool long long);
     vector bool long long vec_cmpne (vector signed long long, vector signed long long);
     vector bool long long vec_cmpne (vector unsigned long long, vector unsigned long long);
     vector bool short vec_cmpne (vector bool short, vector bool short);
     vector bool short vec_cmpne (vector signed short, vector signed short);
     vector bool short vec_cmpne (vector unsigned short, vector unsigned short);
     vector bool long long vec_cmpne (vector double, vector double);
     vector bool int vec_cmpne (vector float, vector float);

     vector float vec_extract_fp32_from_shorth (vector unsigned short);
     vector float vec_extract_fp32_from_shortl (vector unsigned short);

     vector long long vec_vctz (vector long long);
     vector unsigned long long vec_vctz (vector unsigned long long);
     vector int vec_vctz (vector int);
     vector unsigned int vec_vctz (vector int);
     vector short vec_vctz (vector short);
     vector unsigned short vec_vctz (vector unsigned short);
     vector signed char vec_vctz (vector signed char);
     vector unsigned char vec_vctz (vector unsigned char);

     vector signed char vec_vctzb (vector signed char);
     vector unsigned char vec_vctzb (vector unsigned char);

     vector long long vec_vctzd (vector long long);
     vector unsigned long long vec_vctzd (vector unsigned long long);

     vector short vec_vctzh (vector short);
     vector unsigned short vec_vctzh (vector unsigned short);

     vector int vec_vctzw (vector int);
     vector unsigned int vec_vctzw (vector int);

     vector unsigned long long vec_extract4b (vector unsigned char, const int);

     vector unsigned char vec_insert4b (vector signed int, vector unsigned char,
                                        const int);
     vector unsigned char vec_insert4b (vector unsigned int, vector unsigned char,
                                        const int);

     vector unsigned int vec_parity_lsbb (vector signed int);
     vector unsigned int vec_parity_lsbb (vector unsigned int);
     vector unsigned __int128 vec_parity_lsbb (vector signed __int128);
     vector unsigned __int128 vec_parity_lsbb (vector unsigned __int128);
     vector unsigned long long vec_parity_lsbb (vector signed long long);
     vector unsigned long long vec_parity_lsbb (vector unsigned long long);

     vector int vec_vprtyb (vector int);
     vector unsigned int vec_vprtyb (vector unsigned int);
     vector long long vec_vprtyb (vector long long);
     vector unsigned long long vec_vprtyb (vector unsigned long long);

     vector int vec_vprtybw (vector int);
     vector unsigned int vec_vprtybw (vector unsigned int);

     vector long long vec_vprtybd (vector long long);
     vector unsigned long long vec_vprtybd (vector unsigned long long);

 On 64-bit targets, if the ISA 3.0 additions ('-mcpu=power9') are
available:

     vector long vec_vprtyb (vector long);
     vector unsigned long vec_vprtyb (vector unsigned long);
     vector __int128 vec_vprtyb (vector __int128);
     vector __uint128 vec_vprtyb (vector __uint128);

     vector long vec_vprtybd (vector long);
     vector unsigned long vec_vprtybd (vector unsigned long);

     vector __int128 vec_vprtybq (vector __int128);
     vector __uint128 vec_vprtybd (vector __uint128);

 The following built-in vector functions are available for the PowerPC
family of processors, starting with ISA 3.0 or later ('-mcpu=power9'):
     __vector unsigned char
     vec_slv (__vector unsigned char src, __vector unsigned char shift_distance);
     __vector unsigned char
     vec_srv (__vector unsigned char src, __vector unsigned char shift_distance);

 The 'vec_slv' and 'vec_srv' functions operate on all of the bytes of
their 'src' and 'shift_distance' arguments in parallel.  The behavior of
the 'vec_slv' is as if there existed a temporary array of 17 unsigned
characters 'slv_array' within which elements 0 through 15 are the same
as the entries in the 'src' array and element 16 equals 0.  The result
returned from the 'vec_slv' function is a '__vector' of 16 unsigned
characters within which element 'i' is computed using the C expression
'0xff & (*((unsigned short *)(slv_array + i)) << (0x07 &
shift_distance[i]))', with this resulting value coerced to the 'unsigned
char' type.  The behavior of the 'vec_srv' is as if there existed a
temporary array of 17 unsigned characters 'srv_array' within which
element 0 equals zero and elements 1 through 16 equal the elements 0
through 15 of the 'src' array.  The result returned from the 'vec_srv'
function is a '__vector' of 16 unsigned characters within which element
'i' is computed using the C expression '0xff & (*((unsigned short
*)(srv_array + i)) >> (0x07 & shift_distance[i]))', with this resulting
value coerced to the 'unsigned char' type.

 The following built-in functions are available for the PowerPC family
of processors, starting with ISA 3.0 or later ('-mcpu=power9'):
     __vector unsigned char
     vec_absd (__vector unsigned char arg1, __vector unsigned char arg2);
     __vector unsigned short
     vec_absd (__vector unsigned short arg1, __vector unsigned short arg2);
     __vector unsigned int
     vec_absd (__vector unsigned int arg1, __vector unsigned int arg2);

     __vector unsigned char
     vec_absdb (__vector unsigned char arg1, __vector unsigned char arg2);
     __vector unsigned short
     vec_absdh (__vector unsigned short arg1, __vector unsigned short arg2);
     __vector unsigned int
     vec_absdw (__vector unsigned int arg1, __vector unsigned int arg2);

 The 'vec_absd', 'vec_absdb', 'vec_absdh', and 'vec_absdw' built-in
functions each computes the absolute differences of the pairs of vector
elements supplied in its two vector arguments, placing the absolute
differences into the corresponding elements of the vector result.

 The following built-in functions are available for the PowerPC family
of processors, starting with ISA 3.0 or later ('-mcpu=power9'):
     __vector unsigned int vec_extract_exp (__vector float source);
     __vector unsigned long long int vec_extract_exp (__vector double source);

     __vector unsigned int vec_extract_sig (__vector float source);
     __vector unsigned long long int vec_extract_sig (__vector double source);

     __vector float vec_insert_exp (__vector unsigned int significands,
                                    __vector unsigned int exponents);
     __vector float vec_insert_exp (__vector unsigned float significands,
                                    __vector unsigned int exponents);
     __vector double vec_insert_exp (__vector unsigned long long int significands,
                                     __vector unsigned long long int exponents);
     __vector double vec_insert_exp (__vector unsigned double significands,
                                     __vector unsigned long long int exponents);

     __vector bool int vec_test_data_class (__vector float source, const int condition);
     __vector bool long long int vec_test_data_class (__vector double source,
                                                      const int condition);

 The 'vec_extract_sig' and 'vec_extract_exp' built-in functions return
vectors representing the significands and biased exponent values of
their 'source' arguments respectively.  Within the result vector
returned by 'vec_extract_sig', the '0x800000' bit of each vector element
returned when the function's 'source' argument is of type 'float' is set
to 1 if the corresponding floating point value is in normalized form.
Otherwise, this bit is set to 0.  When the 'source' argument is of type
'double', the '0x10000000000000' bit within each of the result vector's
elements is set according to the same rules.  Note that the sign of the
significand is not represented in the result returned from the
'vec_extract_sig' function.  To extract the sign bits, use the
'vec_cpsgn' function, which returns a new vector within which all of the
sign bits of its second argument vector are overwritten with the sign
bits copied from the coresponding elements of its first argument vector,
and all other (non-sign) bits of the second argument vector are copied
unchanged into the result vector.

 The 'vec_insert_exp' built-in functions return a vector of single- or
double-precision floating point values constructed by assembling the
values of their 'significands' and 'exponents' arguments into the
corresponding elements of the returned vector.  The sign of each element
of the result is copied from the most significant bit of the
corresponding entry within the 'significands' argument.  Note that the
relevant bits of the 'significands' argument are the same, for both
integer and floating point types.  The significand and exponent
components of each element of the result are composed of the least
significant bits of the corresponding 'significands' element and the
least significant bits of the corresponding 'exponents' element.

 The 'vec_test_data_class' built-in function returns a vector
representing the results of testing the 'source' vector for the
condition selected by the 'condition' argument.  The 'condition'
argument must be a compile-time constant integer with value not
exceeding 127.  The 'condition' argument is encoded as a bitmask with
each bit enabling the testing of a different condition, as characterized
by the following:
     0x40    Test for NaN
     0x20    Test for +Infinity
     0x10    Test for -Infinity
     0x08    Test for +Zero
     0x04    Test for -Zero
     0x02    Test for +Denormal
     0x01    Test for -Denormal

 If any of the enabled test conditions is true, the corresponding entry
in the result vector is -1.  Otherwise (all of the enabled test
conditions are false), the corresponding entry of the result vector is
0.

 The following built-in functions are available for the PowerPC family
of processors, starting with ISA 3.0 or later ('-mcpu=power9'):
     vector unsigned int vec_rlmi (vector unsigned int, vector unsigned int,
                                   vector unsigned int);
     vector unsigned long long vec_rlmi (vector unsigned long long,
                                         vector unsigned long long,
                                         vector unsigned long long);
     vector unsigned int vec_rlnm (vector unsigned int, vector unsigned int,
                                   vector unsigned int);
     vector unsigned long long vec_rlnm (vector unsigned long long,
                                         vector unsigned long long,
                                         vector unsigned long long);
     vector unsigned int vec_vrlnm (vector unsigned int, vector unsigned int);
     vector unsigned long long vec_vrlnm (vector unsigned long long,
                                          vector unsigned long long);

 The result of 'vec_rlmi' is obtained by rotating each element of the
first argument vector left and inserting it under mask into the second
argument vector.  The third argument vector contains the mask beginning
in bits 11:15, the mask end in bits 19:23, and the shift count in bits
27:31, of each element.

 The result of 'vec_rlnm' is obtained by rotating each element of the
first argument vector left and ANDing it with a mask specified by the
second and third argument vectors.  The second argument vector contains
the shift count for each element in the low-order byte.  The third
argument vector contains the mask end for each element in the low-order
byte, with the mask begin in the next higher byte.

 The result of 'vec_vrlnm' is obtained by rotating each element of the
first argument vector left and ANDing it with a mask.  The second
argument vector contains the mask beginning in bits 11:15, the mask end
in bits 19:23, and the shift count in bits 27:31, of each element.

 If the ISA 3.0 instruction set additions ('-mcpu=power9') are
available:
     vector signed bool char vec_revb (vector signed char);
     vector signed char vec_revb (vector signed char);
     vector unsigned char vec_revb (vector unsigned char);
     vector bool short vec_revb (vector bool short);
     vector short vec_revb (vector short);
     vector unsigned short vec_revb (vector unsigned short);
     vector bool int vec_revb (vector bool int);
     vector int vec_revb (vector int);
     vector unsigned int vec_revb (vector unsigned int);
     vector float vec_revb (vector float);
     vector bool long long vec_revb (vector bool long long);
     vector long long vec_revb (vector long long);
     vector unsigned long long vec_revb (vector unsigned long long);
     vector double vec_revb (vector double);

 On 64-bit targets, if the ISA 3.0 additions ('-mcpu=power9') are
available:
     vector long vec_revb (vector long);
     vector unsigned long vec_revb (vector unsigned long);
     vector __int128 vec_revb (vector __int128);
     vector __uint128 vec_revb (vector __uint128);

 The 'vec_revb' built-in function reverses the bytes on an element by
element basis.  A vector of 'vector unsigned char' or 'vector signed
char' reverses the bytes in the whole word.

 If the cryptographic instructions are enabled ('-mcrypto' or
'-mcpu=power8'), the following builtins are enabled.

     vector unsigned long long __builtin_crypto_vsbox (vector unsigned long long);

     vector unsigned char vec_sbox_be (vector unsigned char);

     vector unsigned long long __builtin_crypto_vcipher (vector unsigned long long,
                                                         vector unsigned long long);

     vector unsigned char vec_cipher_be (vector unsigned char, vector unsigned char);

     vector unsigned long long __builtin_crypto_vcipherlast
                                          (vector unsigned long long,
                                           vector unsigned long long);

     vector unsigned char vec_cipherlast_be (vector unsigned char,
                                             vector unsigned char);

     vector unsigned long long __builtin_crypto_vncipher (vector unsigned long long,
                                                          vector unsigned long long);

     vector unsigned char vec_ncipher_be (vector unsigned char,
                                          vector unsigned char);

     vector unsigned long long __builtin_crypto_vncipherlast (vector unsigned long long,
                                                              vector unsigned long long);

     vector unsigned char vec_ncipherlast_be (vector unsigned char,
                                              vector unsigned char);

     vector unsigned char __builtin_crypto_vpermxor (vector unsigned char,
                                                     vector unsigned char,
                                                     vector unsigned char);

     vector unsigned short __builtin_crypto_vpermxor (vector unsigned short,
                                                      vector unsigned short,
                                                      vector unsigned short);

     vector unsigned int __builtin_crypto_vpermxor (vector unsigned int,
                                                    vector unsigned int,
                                                    vector unsigned int);

     vector unsigned long long __builtin_crypto_vpermxor (vector unsigned long long,
                                                          vector unsigned long long,
                                                          vector unsigned long long);

     vector unsigned char __builtin_crypto_vpmsumb (vector unsigned char,
                                                    vector unsigned char);

     vector unsigned short __builtin_crypto_vpmsumb (vector unsigned short,
                                                     vector unsigned short);

     vector unsigned int __builtin_crypto_vpmsumb (vector unsigned int,
                                                   vector unsigned int);

     vector unsigned long long __builtin_crypto_vpmsumb (vector unsigned long long,
                                                         vector unsigned long long);

     vector unsigned long long __builtin_crypto_vshasigmad (vector unsigned long long,
                                                            int, int);

     vector unsigned int __builtin_crypto_vshasigmaw (vector unsigned int, int, int);

 The second argument to __BUILTIN_CRYPTO_VSHASIGMAD and
__BUILTIN_CRYPTO_VSHASIGMAW must be a constant integer that is 0 or 1.
The third argument to these built-in functions must be a constant
integer in the range of 0 to 15.

 If the ISA 3.0 instruction set additions are enabled ('-mcpu=power9'),
the following additional functions are available for both 32-bit and
64-bit targets.
     vector short vec_xl (int, vector short *);
     vector short vec_xl (int, short *);
     vector unsigned short vec_xl (int, vector unsigned short *);
     vector unsigned short vec_xl (int, unsigned short *);
     vector char vec_xl (int, vector char *);
     vector char vec_xl (int, char *);
     vector unsigned char vec_xl (int, vector unsigned char *);
     vector unsigned char vec_xl (int, unsigned char *);

     void vec_xst (vector short, int, vector short *);
     void vec_xst (vector short, int, short *);
     void vec_xst (vector unsigned short, int, vector unsigned short *);
     void vec_xst (vector unsigned short, int, unsigned short *);
     void vec_xst (vector char, int, vector char *);
     void vec_xst (vector char, int, char *);
     void vec_xst (vector unsigned char, int, vector unsigned char *);
     void vec_xst (vector unsigned char, int, unsigned char *);

==============================================================================
File: gcc.info,  Node: |PowerPC_Hardware_Transactional_Memory_Built_in_Functions|,  Next: |PowerPC_Atomic_Memory_Operation_Functions|,  Prev: |PowerPC_AltiVec/VSX_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                          *PowerPC_Hardware_Transactional_Memory_Built_in_Functions*

6.60.23 PowerPC Hardware Transactional Memory Built-in Functions
----------------------------------------------------------------

GCC provides two interfaces for accessing the Hardware Transactional
Memory (HTM) instructions available on some of the PowerPC family of
processors (eg, POWER8).  The two interfaces come in a low level
interface, consisting of built-in functions specific to PowerPC and a
higher level interface consisting of inline functions that are common
between PowerPC and S/390.

6.60.23.1 PowerPC HTM Low Level Built-in Functions
.....---------------------------------------------

The following low level built-in functions are available with '-mhtm' or
'-mcpu=CPU' where CPU is 'power8' or later.  They all generate the
machine instruction that is part of the name.

 The HTM builtins (with the exception of '__builtin_tbegin') return the
full 4-bit condition register value set by their associated hardware
instruction.  The header file 'htmintrin.h' defines some macros that can
be used to decipher the return value.  The '__builtin_tbegin' builtin
returns a simple 'true' or 'false' value depending on whether a
transaction was successfully started or not.  The arguments of the
builtins match exactly the type and order of the associated hardware
instruction's operands, except for the '__builtin_tcheck' builtin, which
does not take any input arguments.  Refer to the ISA manual for a
description of each instruction's operands.

     unsigned int __builtin_tbegin (unsigned int)
     unsigned int __builtin_tend (unsigned int)

     unsigned int __builtin_tabort (unsigned int)
     unsigned int __builtin_tabortdc (unsigned int, unsigned int, unsigned int)
     unsigned int __builtin_tabortdci (unsigned int, unsigned int, int)
     unsigned int __builtin_tabortwc (unsigned int, unsigned int, unsigned int)
     unsigned int __builtin_tabortwci (unsigned int, unsigned int, int)

     unsigned int __builtin_tcheck (void)
     unsigned int __builtin_treclaim (unsigned int)
     unsigned int __builtin_trechkpt (void)
     unsigned int __builtin_tsr (unsigned int)

 In addition to the above HTM built-ins, we have added built-ins for
some common extended mnemonics of the HTM instructions:

     unsigned int __builtin_tendall (void)
     unsigned int __builtin_tresume (void)
     unsigned int __builtin_tsuspend (void)

 Note that the semantics of the above HTM builtins are required to mimic
the locking semantics used for critical sections.  Builtins that are
used to create a new transaction or restart a suspended transaction must
have lock acquisition like semantics while those builtins that end or
suspend a transaction must have lock release like semantics.
Specifically, this must mimic lock semantics as specified by C++11, for
example: Lock acquisition is as-if an execution of
__atomic_exchange_n(&globallock,1,__ATOMIC_ACQUIRE) that returns 0, and
lock release is as-if an execution of
__atomic_store(&globallock,0,__ATOMIC_RELEASE), with globallock being an
implicit implementation-defined lock used for all transactions.  The HTM
instructions associated with with the builtins inherently provide the
correct acquisition and release hardware barriers required.  However,
the compiler must also be prohibited from moving loads and stores across
the builtins in a way that would violate their semantics.  This has been
accomplished by adding memory barriers to the associated HTM
instructions (which is a conservative approach to provide acquire and
release semantics).  Earlier versions of the compiler did not treat the
HTM instructions as memory barriers.  A '__TM_FENCE__' macro has been
added, which can be used to determine whether the current compiler
treats HTM instructions as memory barriers or not.  This allows the user
to explicitly add memory barriers to their code when using an older
version of the compiler.

 The following set of built-in functions are available to gain access to
the HTM specific special purpose registers.

     unsigned long __builtin_get_texasr (void)
     unsigned long __builtin_get_texasru (void)
     unsigned long __builtin_get_tfhar (void)
     unsigned long __builtin_get_tfiar (void)

     void __builtin_set_texasr (unsigned long);
     void __builtin_set_texasru (unsigned long);
     void __builtin_set_tfhar (unsigned long);
     void __builtin_set_tfiar (unsigned long);

 Example usage of these low level built-in functions may look like:

     #include <htmintrin.h>

     int num_retries = 10;

     while (1)
       {
         if (__builtin_tbegin (0))
           {
             /* Transaction State Initiated.  */
             if (is_locked (lock))
               __builtin_tabort (0);
             ... transaction code...
             __builtin_tend (0);
             break;
           }
         else
           {
             /* Transaction State Failed.  Use locks if the transaction
                failure is "persistent" or we've tried too many times.  */
             if (num_retries-- <= 0
                 || _TEXASRU_FAILURE_PERSISTENT (__builtin_get_texasru ()))
               {
                 acquire_lock (lock);
                 ... non transactional fallback path...
                 release_lock (lock);
                 break;
               }
           }
       }

 One final built-in function has been added that returns the value of
the 2-bit Transaction State field of the Machine Status Register (MSR)
as stored in 'CR0'.

     unsigned long __builtin_ttest (void)

 This built-in can be used to determine the current transaction state
using the following code example:

     #include <htmintrin.h>

     unsigned char tx_state = _HTM_STATE (__builtin_ttest ());

     if (tx_state == _HTM_TRANSACTIONAL)
       {
         /* Code to use in transactional state.  */
       }
     else if (tx_state == _HTM_NONTRANSACTIONAL)
       {
         /* Code to use in non-transactional state.  */
       }
     else if (tx_state == _HTM_SUSPENDED)
       {
         /* Code to use in transaction suspended state.  */
       }

6.60.23.2 PowerPC HTM High Level Inline Functions
.....--------------------------------------------

The following high level HTM interface is made available by including
'<htmxlintrin.h>' and using '-mhtm' or '-mcpu=CPU' where CPU is 'power8'
or later.  This interface is common between PowerPC and S/390, allowing
users to write one HTM source implementation that can be compiled and
executed on either system.

     long __TM_simple_begin (void)
     long __TM_begin (void* const TM_buff)
     long __TM_end (void)
     void __TM_abort (void)
     void __TM_named_abort (unsigned char const code)
     void __TM_resume (void)
     void __TM_suspend (void)

     long __TM_is_user_abort (void* const TM_buff)
     long __TM_is_named_user_abort (void* const TM_buff, unsigned char *code)
     long __TM_is_illegal (void* const TM_buff)
     long __TM_is_footprint_exceeded (void* const TM_buff)
     long __TM_nesting_depth (void* const TM_buff)
     long __TM_is_nested_too_deep(void* const TM_buff)
     long __TM_is_conflict(void* const TM_buff)
     long __TM_is_failure_persistent(void* const TM_buff)
     long __TM_failure_address(void* const TM_buff)
     long long __TM_failure_code(void* const TM_buff)

 Using these common set of HTM inline functions, we can create a more
portable version of the HTM example in the previous section that will
work on either PowerPC or S/390:

     #include <htmxlintrin.h>

     int num_retries = 10;
     TM_buff_type TM_buff;

     while (1)
       {
         if (__TM_begin (TM_buff) == _HTM_TBEGIN_STARTED)
           {
             /* Transaction State Initiated.  */
             if (is_locked (lock))
               __TM_abort ();
             ... transaction code...
             __TM_end ();
             break;
           }
         else
           {
             /* Transaction State Failed.  Use locks if the transaction
                failure is "persistent" or we've tried too many times.  */
             if (num_retries-- <= 0
                 || __TM_is_failure_persistent (TM_buff))
               {
                 acquire_lock (lock);
                 ... non transactional fallback path...
                 release_lock (lock);
                 break;
               }
           }
       }

==============================================================================
File: gcc.info,  Node: |PowerPC_Atomic_Memory_Operation_Functions|,  Next: |RX_Built_in_Functions|,  Prev: |PowerPC_Hardware_Transactional_Memory_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *PowerPC_Atomic_Memory_Operation_Functions*

6.60.24 PowerPC Atomic Memory Operation Functions
-------------------------------------------------

ISA 3.0 of the PowerPC added new atomic memory operation (amo)
instructions.  GCC provides support for these instructions in 64-bit
environments.  All of the functions are declared in the include file
'amo.h'.

 The functions supported are:

     #include <amo.h>

     uint32_t amo_lwat_add (uint32_t *, uint32_t);
     uint32_t amo_lwat_xor (uint32_t *, uint32_t);
     uint32_t amo_lwat_ior (uint32_t *, uint32_t);
     uint32_t amo_lwat_and (uint32_t *, uint32_t);
     uint32_t amo_lwat_umax (uint32_t *, uint32_t);
     uint32_t amo_lwat_umin (uint32_t *, uint32_t);
     uint32_t amo_lwat_swap (uint32_t *, uint32_t);

     int32_t amo_lwat_sadd (int32_t *, int32_t);
     int32_t amo_lwat_smax (int32_t *, int32_t);
     int32_t amo_lwat_smin (int32_t *, int32_t);
     int32_t amo_lwat_sswap (int32_t *, int32_t);

     uint64_t amo_ldat_add (uint64_t *, uint64_t);
     uint64_t amo_ldat_xor (uint64_t *, uint64_t);
     uint64_t amo_ldat_ior (uint64_t *, uint64_t);
     uint64_t amo_ldat_and (uint64_t *, uint64_t);
     uint64_t amo_ldat_umax (uint64_t *, uint64_t);
     uint64_t amo_ldat_umin (uint64_t *, uint64_t);
     uint64_t amo_ldat_swap (uint64_t *, uint64_t);

     int64_t amo_ldat_sadd (int64_t *, int64_t);
     int64_t amo_ldat_smax (int64_t *, int64_t);
     int64_t amo_ldat_smin (int64_t *, int64_t);
     int64_t amo_ldat_sswap (int64_t *, int64_t);

     void amo_stwat_add (uint32_t *, uint32_t);
     void amo_stwat_xor (uint32_t *, uint32_t);
     void amo_stwat_ior (uint32_t *, uint32_t);
     void amo_stwat_and (uint32_t *, uint32_t);
     void amo_stwat_umax (uint32_t *, uint32_t);
     void amo_stwat_umin (uint32_t *, uint32_t);

     void amo_stwat_sadd (int32_t *, int32_t);
     void amo_stwat_smax (int32_t *, int32_t);
     void amo_stwat_smin (int32_t *, int32_t);

     void amo_stdat_add (uint64_t *, uint64_t);
     void amo_stdat_xor (uint64_t *, uint64_t);
     void amo_stdat_ior (uint64_t *, uint64_t);
     void amo_stdat_and (uint64_t *, uint64_t);
     void amo_stdat_umax (uint64_t *, uint64_t);
     void amo_stdat_umin (uint64_t *, uint64_t);

     void amo_stdat_sadd (int64_t *, int64_t);
     void amo_stdat_smax (int64_t *, int64_t);
     void amo_stdat_smin (int64_t *, int64_t);

==============================================================================
File: gcc.info,  Node: |RX_Built_in_Functions|,  Next: |S/390_System_z_Built_in_Functions|,  Prev: |PowerPC_Atomic_Memory_Operation_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *RX_Built_in_Functions*

6.60.25 RX Built-in Functions
-----------------------------

GCC supports some of the RX instructions which cannot be expressed in
the C programming language via the use of built-in functions.  The
following functions are supported:

 -- Built-in Function: void __builtin_rx_brk (void)
     Generates the 'brk' machine instruction.

 -- Built-in Function: void __builtin_rx_clrpsw (int)
     Generates the 'clrpsw' machine instruction to clear the specified
     bit in the processor status word.

 -- Built-in Function: void __builtin_rx_int (int)
     Generates the 'int' machine instruction to generate an interrupt
     with the specified value.

 -- Built-in Function: void __builtin_rx_machi (int, int)
     Generates the 'machi' machine instruction to add the result of
     multiplying the top 16 bits of the two arguments into the
     accumulator.

 -- Built-in Function: void __builtin_rx_maclo (int, int)
     Generates the 'maclo' machine instruction to add the result of
     multiplying the bottom 16 bits of the two arguments into the
     accumulator.

 -- Built-in Function: void __builtin_rx_mulhi (int, int)
     Generates the 'mulhi' machine instruction to place the result of
     multiplying the top 16 bits of the two arguments into the
     accumulator.

 -- Built-in Function: void __builtin_rx_mullo (int, int)
     Generates the 'mullo' machine instruction to place the result of
     multiplying the bottom 16 bits of the two arguments into the
     accumulator.

 -- Built-in Function: int __builtin_rx_mvfachi (void)
     Generates the 'mvfachi' machine instruction to read the top 32 bits
     of the accumulator.

 -- Built-in Function: int __builtin_rx_mvfacmi (void)
     Generates the 'mvfacmi' machine instruction to read the middle 32
     bits of the accumulator.

 -- Built-in Function: int __builtin_rx_mvfc (int)
     Generates the 'mvfc' machine instruction which reads the control
     register specified in its argument and returns its value.

 -- Built-in Function: void __builtin_rx_mvtachi (int)
     Generates the 'mvtachi' machine instruction to set the top 32 bits
     of the accumulator.

 -- Built-in Function: void __builtin_rx_mvtaclo (int)
     Generates the 'mvtaclo' machine instruction to set the bottom 32
     bits of the accumulator.

 -- Built-in Function: void __builtin_rx_mvtc (int reg, int val)
     Generates the 'mvtc' machine instruction which sets control
     register number 'reg' to 'val'.

 -- Built-in Function: void __builtin_rx_mvtipl (int)
     Generates the 'mvtipl' machine instruction set the interrupt
     priority level.

 -- Built-in Function: void __builtin_rx_racw (int)
     Generates the 'racw' machine instruction to round the accumulator
     according to the specified mode.

 -- Built-in Function: int __builtin_rx_revw (int)
     Generates the 'revw' machine instruction which swaps the bytes in
     the argument so that bits 0-7 now occupy bits 8-15 and vice versa,
     and also bits 16-23 occupy bits 24-31 and vice versa.

 -- Built-in Function: void __builtin_rx_rmpa (void)
     Generates the 'rmpa' machine instruction which initiates a repeated
     multiply and accumulate sequence.

 -- Built-in Function: void __builtin_rx_round (float)
     Generates the 'round' machine instruction which returns the
     floating-point argument rounded according to the current rounding
     mode set in the floating-point status word register.

 -- Built-in Function: int __builtin_rx_sat (int)
     Generates the 'sat' machine instruction which returns the saturated
     value of the argument.

 -- Built-in Function: void __builtin_rx_setpsw (int)
     Generates the 'setpsw' machine instruction to set the specified bit
     in the processor status word.

 -- Built-in Function: void __builtin_rx_wait (void)
     Generates the 'wait' machine instruction.

==============================================================================
File: gcc.info,  Node: |S/390_System_z_Built_in_Functions|,  Next: |SH_Built_in_Functions|,  Prev: |RX_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 *S/390_System_z_Built_in_Functions*

6.60.26 S/390 System z Built-in Functions
-----------------------------------------

 -- Built-in Function: int __builtin_tbegin (void*)
     Generates the 'tbegin' machine instruction starting a
     non-constrained hardware transaction.  If the parameter is non-NULL
     the memory area is used to store the transaction diagnostic buffer
     and will be passed as first operand to 'tbegin'.  This buffer can
     be defined using the 'struct __htm_tdb' C struct defined in
     'htmintrin.h' and must reside on a double-word boundary.  The
     second tbegin operand is set to '0xff0c'.  This enables
     save/restore of all GPRs and disables aborts for FPR and AR
     manipulations inside the transaction body.  The condition code set
     by the tbegin instruction is returned as integer value.  The tbegin
     instruction by definition overwrites the content of all FPRs.  The
     compiler will generate code which saves and restores the FPRs.  For
     soft-float code it is recommended to used the '*_nofloat' variant.
     In order to prevent a TDB from being written it is required to pass
     a constant zero value as parameter.  Passing a zero value through a
     variable is not sufficient.  Although modifications of access
     registers inside the transaction will not trigger an transaction
     abort it is not supported to actually modify them.  Access
     registers do not get saved when entering a transaction.  They will
     have undefined state when reaching the abort code.

 Macros for the possible return codes of tbegin are defined in the
'htmintrin.h' header file:

'_HTM_TBEGIN_STARTED'
     'tbegin' has been executed as part of normal processing.  The
     transaction body is supposed to be executed.
'_HTM_TBEGIN_INDETERMINATE'
     The transaction was aborted due to an indeterminate condition which
     might be persistent.
'_HTM_TBEGIN_TRANSIENT'
     The transaction aborted due to a transient failure.  The
     transaction should be re-executed in that case.
'_HTM_TBEGIN_PERSISTENT'
     The transaction aborted due to a persistent failure.  Re-execution
     under same circumstances will not be productive.

 -- Macro: _HTM_FIRST_USER_ABORT_CODE
     The '_HTM_FIRST_USER_ABORT_CODE' defined in 'htmintrin.h' specifies
     the first abort code which can be used for '__builtin_tabort'.
     Values below this threshold are reserved for machine use.

 -- Data type: struct __htm_tdb
     The 'struct __htm_tdb' defined in 'htmintrin.h' describes the
     structure of the transaction diagnostic block as specified in the
     Principles of Operation manual chapter 5-91.

 -- Built-in Function: int __builtin_tbegin_nofloat (void*)
     Same as '__builtin_tbegin' but without FPR saves and restores.
     Using this variant in code making use of FPRs will leave the FPRs
     in undefined state when entering the transaction abort handler
     code.

 -- Built-in Function: int __builtin_tbegin_retry (void*, int)
     In addition to '__builtin_tbegin' a loop for transient failures is
     generated.  If tbegin returns a condition code of 2 the transaction
     will be retried as often as specified in the second argument.  The
     perform processor assist instruction is used to tell the CPU about
     the number of fails so far.

 -- Built-in Function: int __builtin_tbegin_retry_nofloat (void*, int)
     Same as '__builtin_tbegin_retry' but without FPR saves and
     restores.  Using this variant in code making use of FPRs will leave
     the FPRs in undefined state when entering the transaction abort
     handler code.

 -- Built-in Function: void __builtin_tbeginc (void)
     Generates the 'tbeginc' machine instruction starting a constrained
     hardware transaction.  The second operand is set to '0xff08'.

 -- Built-in Function: int __builtin_tend (void)
     Generates the 'tend' machine instruction finishing a transaction
     and making the changes visible to other threads.  The condition
     code generated by tend is returned as integer value.

 -- Built-in Function: void __builtin_tabort (int)
     Generates the 'tabort' machine instruction with the specified abort
     code.  Abort codes from 0 through 255 are reserved and will result
     in an error message.

 -- Built-in Function: void __builtin_tx_assist (int)
     Generates the 'ppa rX,rY,1' machine instruction.  Where the integer
     parameter is loaded into rX and a value of zero is loaded into rY.
     The integer parameter specifies the number of times the transaction
     repeatedly aborted.

 -- Built-in Function: int __builtin_tx_nesting_depth (void)
     Generates the 'etnd' machine instruction.  The current nesting
     depth is returned as integer value.  For a nesting depth of 0 the
     code is not executed as part of an transaction.

 -- Built-in Function: void __builtin_non_tx_store (uint64_t *,
          uint64_t)

     Generates the 'ntstg' machine instruction.  The second argument is
     written to the first arguments location.  The store operation will
     not be rolled-back in case of an transaction abort.

==============================================================================
File: gcc.info,  Node: |SH_Built_in_Functions|,  Next: |SPARC_VIS_Built_in_Functions|,  Prev: |S/390_System_z_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             *SH_Built_in_Functions*

6.60.27 SH Built-in Functions
-----------------------------

The following built-in functions are supported on the SH1, SH2, SH3 and
SH4 families of processors:

 -- Built-in Function: void __builtin_set_thread_pointer (void *PTR)
     Sets the 'GBR' register to the specified value PTR.  This is
     usually used by system code that manages threads and execution
     contexts.  The compiler normally does not generate code that
     modifies the contents of 'GBR' and thus the value is preserved
     across function calls.  Changing the 'GBR' value in user code must
     be done with caution, since the compiler might use 'GBR' in order
     to access thread local variables.

 -- Built-in Function: void * __builtin_thread_pointer (void)
     Returns the value that is currently set in the 'GBR' register.
     Memory loads and stores that use the thread pointer as a base
     address are turned into 'GBR' based displacement loads and stores,
     if possible.  For example:
          struct my_tcb
          {
             int a, b, c, d, e;
          };

          int get_tcb_value (void)
          {
            // Generate 'mov.l @(8,gbr),r0' instruction
            return ((my_tcb*)__builtin_thread_pointer ())->c;
          }


 -- Built-in Function: unsigned int __builtin_sh_get_fpscr (void)
     Returns the value that is currently set in the 'FPSCR' register.

 -- Built-in Function: void __builtin_sh_set_fpscr (unsigned int VAL)
     Sets the 'FPSCR' register to the specified value VAL, while
     preserving the current values of the FR, SZ and PR bits.

==============================================================================
File: gcc.info,  Node: |SPARC_VIS_Built_in_Functions|,  Next: |SPU_Built_in_Functions|,  Prev: |SH_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *SPARC_VIS_Built_in_Functions*

6.60.28 SPARC VIS Built-in Functions
------------------------------------

GCC supports SIMD operations on the SPARC using both the generic vector
extensions (*note Vector Extensions::) as well as built-in functions for
the SPARC Visual Instruction Set (VIS). When you use the '-mvis' switch,
the VIS extension is exposed as the following built-in functions:

     typedef int v1si __attribute__ ((vector_size (4)));
     typedef int v2si __attribute__ ((vector_size (8)));
     typedef short v4hi __attribute__ ((vector_size (8)));
     typedef short v2hi __attribute__ ((vector_size (4)));
     typedef unsigned char v8qi __attribute__ ((vector_size (8)));
     typedef unsigned char v4qi __attribute__ ((vector_size (4)));

     void __builtin_vis_write_gsr (int64_t);
     int64_t __builtin_vis_read_gsr (void);

     void * __builtin_vis_alignaddr (void *, long);
     void * __builtin_vis_alignaddrl (void *, long);
     int64_t __builtin_vis_faligndatadi (int64_t, int64_t);
     v2si __builtin_vis_faligndatav2si (v2si, v2si);
     v4hi __builtin_vis_faligndatav4hi (v4si, v4si);
     v8qi __builtin_vis_faligndatav8qi (v8qi, v8qi);

     v4hi __builtin_vis_fexpand (v4qi);

     v4hi __builtin_vis_fmul8x16 (v4qi, v4hi);
     v4hi __builtin_vis_fmul8x16au (v4qi, v2hi);
     v4hi __builtin_vis_fmul8x16al (v4qi, v2hi);
     v4hi __builtin_vis_fmul8sux16 (v8qi, v4hi);
     v4hi __builtin_vis_fmul8ulx16 (v8qi, v4hi);
     v2si __builtin_vis_fmuld8sux16 (v4qi, v2hi);
     v2si __builtin_vis_fmuld8ulx16 (v4qi, v2hi);

     v4qi __builtin_vis_fpack16 (v4hi);
     v8qi __builtin_vis_fpack32 (v2si, v8qi);
     v2hi __builtin_vis_fpackfix (v2si);
     v8qi __builtin_vis_fpmerge (v4qi, v4qi);

     int64_t __builtin_vis_pdist (v8qi, v8qi, int64_t);

     long __builtin_vis_edge8 (void *, void *);
     long __builtin_vis_edge8l (void *, void *);
     long __builtin_vis_edge16 (void *, void *);
     long __builtin_vis_edge16l (void *, void *);
     long __builtin_vis_edge32 (void *, void *);
     long __builtin_vis_edge32l (void *, void *);

     long __builtin_vis_fcmple16 (v4hi, v4hi);
     long __builtin_vis_fcmple32 (v2si, v2si);
     long __builtin_vis_fcmpne16 (v4hi, v4hi);
     long __builtin_vis_fcmpne32 (v2si, v2si);
     long __builtin_vis_fcmpgt16 (v4hi, v4hi);
     long __builtin_vis_fcmpgt32 (v2si, v2si);
     long __builtin_vis_fcmpeq16 (v4hi, v4hi);
     long __builtin_vis_fcmpeq32 (v2si, v2si);

     v4hi __builtin_vis_fpadd16 (v4hi, v4hi);
     v2hi __builtin_vis_fpadd16s (v2hi, v2hi);
     v2si __builtin_vis_fpadd32 (v2si, v2si);
     v1si __builtin_vis_fpadd32s (v1si, v1si);
     v4hi __builtin_vis_fpsub16 (v4hi, v4hi);
     v2hi __builtin_vis_fpsub16s (v2hi, v2hi);
     v2si __builtin_vis_fpsub32 (v2si, v2si);
     v1si __builtin_vis_fpsub32s (v1si, v1si);

     long __builtin_vis_array8 (long, long);
     long __builtin_vis_array16 (long, long);
     long __builtin_vis_array32 (long, long);

 When you use the '-mvis2' switch, the VIS version 2.0 built-in
functions also become available:

     long __builtin_vis_bmask (long, long);
     int64_t __builtin_vis_bshuffledi (int64_t, int64_t);
     v2si __builtin_vis_bshufflev2si (v2si, v2si);
     v4hi __builtin_vis_bshufflev2si (v4hi, v4hi);
     v8qi __builtin_vis_bshufflev2si (v8qi, v8qi);

     long __builtin_vis_edge8n (void *, void *);
     long __builtin_vis_edge8ln (void *, void *);
     long __builtin_vis_edge16n (void *, void *);
     long __builtin_vis_edge16ln (void *, void *);
     long __builtin_vis_edge32n (void *, void *);
     long __builtin_vis_edge32ln (void *, void *);

 When you use the '-mvis3' switch, the VIS version 3.0 built-in
functions also become available:

     void __builtin_vis_cmask8 (long);
     void __builtin_vis_cmask16 (long);
     void __builtin_vis_cmask32 (long);

     v4hi __builtin_vis_fchksm16 (v4hi, v4hi);

     v4hi __builtin_vis_fsll16 (v4hi, v4hi);
     v4hi __builtin_vis_fslas16 (v4hi, v4hi);
     v4hi __builtin_vis_fsrl16 (v4hi, v4hi);
     v4hi __builtin_vis_fsra16 (v4hi, v4hi);
     v2si __builtin_vis_fsll16 (v2si, v2si);
     v2si __builtin_vis_fslas16 (v2si, v2si);
     v2si __builtin_vis_fsrl16 (v2si, v2si);
     v2si __builtin_vis_fsra16 (v2si, v2si);

     long __builtin_vis_pdistn (v8qi, v8qi);

     v4hi __builtin_vis_fmean16 (v4hi, v4hi);

     int64_t __builtin_vis_fpadd64 (int64_t, int64_t);
     int64_t __builtin_vis_fpsub64 (int64_t, int64_t);

     v4hi __builtin_vis_fpadds16 (v4hi, v4hi);
     v2hi __builtin_vis_fpadds16s (v2hi, v2hi);
     v4hi __builtin_vis_fpsubs16 (v4hi, v4hi);
     v2hi __builtin_vis_fpsubs16s (v2hi, v2hi);
     v2si __builtin_vis_fpadds32 (v2si, v2si);
     v1si __builtin_vis_fpadds32s (v1si, v1si);
     v2si __builtin_vis_fpsubs32 (v2si, v2si);
     v1si __builtin_vis_fpsubs32s (v1si, v1si);

     long __builtin_vis_fucmple8 (v8qi, v8qi);
     long __builtin_vis_fucmpne8 (v8qi, v8qi);
     long __builtin_vis_fucmpgt8 (v8qi, v8qi);
     long __builtin_vis_fucmpeq8 (v8qi, v8qi);

     float __builtin_vis_fhadds (float, float);
     double __builtin_vis_fhaddd (double, double);
     float __builtin_vis_fhsubs (float, float);
     double __builtin_vis_fhsubd (double, double);
     float __builtin_vis_fnhadds (float, float);
     double __builtin_vis_fnhaddd (double, double);

     int64_t __builtin_vis_umulxhi (int64_t, int64_t);
     int64_t __builtin_vis_xmulx (int64_t, int64_t);
     int64_t __builtin_vis_xmulxhi (int64_t, int64_t);

 When you use the '-mvis4' switch, the VIS version 4.0 built-in
functions also become available:

     v8qi __builtin_vis_fpadd8 (v8qi, v8qi);
     v8qi __builtin_vis_fpadds8 (v8qi, v8qi);
     v8qi __builtin_vis_fpaddus8 (v8qi, v8qi);
     v4hi __builtin_vis_fpaddus16 (v4hi, v4hi);

     v8qi __builtin_vis_fpsub8 (v8qi, v8qi);
     v8qi __builtin_vis_fpsubs8 (v8qi, v8qi);
     v8qi __builtin_vis_fpsubus8 (v8qi, v8qi);
     v4hi __builtin_vis_fpsubus16 (v4hi, v4hi);

     long __builtin_vis_fpcmple8 (v8qi, v8qi);
     long __builtin_vis_fpcmpgt8 (v8qi, v8qi);
     long __builtin_vis_fpcmpule16 (v4hi, v4hi);
     long __builtin_vis_fpcmpugt16 (v4hi, v4hi);
     long __builtin_vis_fpcmpule32 (v2si, v2si);
     long __builtin_vis_fpcmpugt32 (v2si, v2si);

     v8qi __builtin_vis_fpmax8 (v8qi, v8qi);
     v4hi __builtin_vis_fpmax16 (v4hi, v4hi);
     v2si __builtin_vis_fpmax32 (v2si, v2si);

     v8qi __builtin_vis_fpmaxu8 (v8qi, v8qi);
     v4hi __builtin_vis_fpmaxu16 (v4hi, v4hi);
     v2si __builtin_vis_fpmaxu32 (v2si, v2si);


     v8qi __builtin_vis_fpmin8 (v8qi, v8qi);
     v4hi __builtin_vis_fpmin16 (v4hi, v4hi);
     v2si __builtin_vis_fpmin32 (v2si, v2si);

     v8qi __builtin_vis_fpminu8 (v8qi, v8qi);
     v4hi __builtin_vis_fpminu16 (v4hi, v4hi);
     v2si __builtin_vis_fpminu32 (v2si, v2si);

 When you use the '-mvis4b' switch, the VIS version 4.0B built-in
functions also become available:

     v8qi __builtin_vis_dictunpack8 (double, int);
     v4hi __builtin_vis_dictunpack16 (double, int);
     v2si __builtin_vis_dictunpack32 (double, int);

     long __builtin_vis_fpcmple8shl (v8qi, v8qi, int);
     long __builtin_vis_fpcmpgt8shl (v8qi, v8qi, int);
     long __builtin_vis_fpcmpeq8shl (v8qi, v8qi, int);
     long __builtin_vis_fpcmpne8shl (v8qi, v8qi, int);

     long __builtin_vis_fpcmple16shl (v4hi, v4hi, int);
     long __builtin_vis_fpcmpgt16shl (v4hi, v4hi, int);
     long __builtin_vis_fpcmpeq16shl (v4hi, v4hi, int);
     long __builtin_vis_fpcmpne16shl (v4hi, v4hi, int);

     long __builtin_vis_fpcmple32shl (v2si, v2si, int);
     long __builtin_vis_fpcmpgt32shl (v2si, v2si, int);
     long __builtin_vis_fpcmpeq32shl (v2si, v2si, int);
     long __builtin_vis_fpcmpne32shl (v2si, v2si, int);

     long __builtin_vis_fpcmpule8shl (v8qi, v8qi, int);
     long __builtin_vis_fpcmpugt8shl (v8qi, v8qi, int);
     long __builtin_vis_fpcmpule16shl (v4hi, v4hi, int);
     long __builtin_vis_fpcmpugt16shl (v4hi, v4hi, int);
     long __builtin_vis_fpcmpule32shl (v2si, v2si, int);
     long __builtin_vis_fpcmpugt32shl (v2si, v2si, int);

     long __builtin_vis_fpcmpde8shl (v8qi, v8qi, int);
     long __builtin_vis_fpcmpde16shl (v4hi, v4hi, int);
     long __builtin_vis_fpcmpde32shl (v2si, v2si, int);

     long __builtin_vis_fpcmpur8shl (v8qi, v8qi, int);
     long __builtin_vis_fpcmpur16shl (v4hi, v4hi, int);
     long __builtin_vis_fpcmpur32shl (v2si, v2si, int);

==============================================================================
File: gcc.info,  Node: |SPU_Built_in_Functions|,  Next: |TI_C6X_Built_in_Functions|,  Prev: |SPARC_VIS_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *SPU_Built_in_Functions*

6.60.29 SPU Built-in Functions
------------------------------

GCC provides extensions for the SPU processor as described in the
Sony/Toshiba/IBM SPU Language Extensions Specification.  GCC's
implementation differs in several ways.

   * The optional extension of specifying vector constants in
     parentheses is not supported.

   * A vector initializer requires no cast if the vector constant is of
     the same type as the variable it is initializing.

   * If 'signed' or 'unsigned' is omitted, the signedness of the vector
     type is the default signedness of the base type.  The default
     varies depending on the operating system, so a portable program
     should always specify the signedness.

   * By default, the keyword '__vector' is added.  The macro 'vector' is
     defined in '<spu_intrinsics.h>' and can be undefined.

   * GCC allows using a 'typedef' name as the type specifier for a
     vector type.

   * For C, overloaded functions are implemented with macros so the
     following does not work:

            spu_add ((vector signed int){1, 2, 3, 4}, foo);

     Since 'spu_add' is a macro, the vector constant in the example is
     treated as four separate arguments.  Wrap the entire argument in
     parentheses for this to work.

   * The extended version of '__builtin_expect' is not supported.

 _Note:_ Only the interface described in the aforementioned
specification is supported.  Internally, GCC uses built-in functions to
implement the required functionality, but these are not supported and
are subject to change without notice.

==============================================================================
File: gcc.info,  Node: |TI_C6X_Built_in_Functions|,  Next: |TILE_Gx_Built_in_Functions|,  Prev: |SPU_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         *TI_C6X_Built_in_Functions*

6.60.30 TI C6X Built-in Functions
---------------------------------

GCC provides intrinsics to access certain instructions of the TI C6X
processors.  These intrinsics, listed below, are available after
inclusion of the 'c6x_intrinsics.h' header file.  They map directly to
C6X instructions.


     int _sadd (int, int)
     int _ssub (int, int)
     int _sadd2 (int, int)
     int _ssub2 (int, int)
     long long _mpy2 (int, int)
     long long _smpy2 (int, int)
     int _add4 (int, int)
     int _sub4 (int, int)
     int _saddu4 (int, int)

     int _smpy (int, int)
     int _smpyh (int, int)
     int _smpyhl (int, int)
     int _smpylh (int, int)

     int _sshl (int, int)
     int _subc (int, int)

     int _avg2 (int, int)
     int _avgu4 (int, int)

     int _clrr (int, int)
     int _extr (int, int)
     int _extru (int, int)
     int _abs (int)
     int _abs2 (int)


==============================================================================
File: gcc.info,  Node: |TILE_Gx_Built_in_Functions|,  Next: |TILEPro_Built_in_Functions|,  Prev: |TI_C6X_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *TILE_Gx_Built_in_Functions*

6.60.31 TILE-Gx Built-in Functions
----------------------------------

GCC provides intrinsics to access every instruction of the TILE-Gx
processor.  The intrinsics are of the form:


     unsigned long long __insn_OP (...)


 Where OP is the name of the instruction.  Refer to the ISA manual for
the complete list of instructions.

 GCC also provides intrinsics to directly access the network registers.
The intrinsics are:


     unsigned long long __tile_idn0_receive (void)
     unsigned long long __tile_idn1_receive (void)
     unsigned long long __tile_udn0_receive (void)
     unsigned long long __tile_udn1_receive (void)
     unsigned long long __tile_udn2_receive (void)
     unsigned long long __tile_udn3_receive (void)
     void __tile_idn_send (unsigned long long)
     void __tile_udn_send (unsigned long long)


 The intrinsic 'void __tile_network_barrier (void)' is used to guarantee
that no network operations before it are reordered with those after it.

==============================================================================
File: gcc.info,  Node: |TILEPro_Built_in_Functions|,  Next: |x86_Built_in_Functions|,  Prev: |TILE_Gx_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        *TILEPro_Built_in_Functions*

6.60.32 TILEPro Built-in Functions
----------------------------------

GCC provides intrinsics to access every instruction of the TILEPro
processor.  The intrinsics are of the form:


     unsigned __insn_OP (...)


where OP is the name of the instruction.  Refer to the ISA manual for
the complete list of instructions.

 GCC also provides intrinsics to directly access the network registers.
The intrinsics are:


     unsigned __tile_idn0_receive (void)
     unsigned __tile_idn1_receive (void)
     unsigned __tile_sn_receive (void)
     unsigned __tile_udn0_receive (void)
     unsigned __tile_udn1_receive (void)
     unsigned __tile_udn2_receive (void)
     unsigned __tile_udn3_receive (void)
     void __tile_idn_send (unsigned)
     void __tile_sn_send (unsigned)
     void __tile_udn_send (unsigned)


 The intrinsic 'void __tile_network_barrier (void)' is used to guarantee
that no network operations before it are reordered with those after it.

==============================================================================
File: gcc.info,  Node: |x86_Built_in_Functions|,  Next: |x86_transactional_memory_intrinsics|,  Prev: |TILEPro_Built_in_Functions|,  Up: |Target_Builtins|
==============================================================================

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *x86_Built_in_Functions*

6.60.33 x86 Built-in Functions
------------------------------

These built-in functions are available for the x86-32 and x86-64 family
of computers, depending on the command-line switches used.

 If you specify command-line switches such as '-msse', the compiler
could use the extended instruction sets even if the built-ins are not
used explicitly in the program.  For this reason, applications that
perform run-time CPU detection must compile separate files for each
supported architecture, using the appropriate flags.  In particular, the
file containing the CPU detection code should be compiled without these
options.

 The following machine modes are available for use with MMX built-in
functions (*note Vector Extensions::): 'V2SI' for a vector of two 32-bit
integers, 'V4HI' for a vector of four 16-bit integers, and 'V8QI' for a
vector of eight 8-bit integers.  Some of the built-in functions operate
on MMX registers as a whole 64-bit entity, these use 'V1DI' as their
mode.

 If 3DNow! extensions are enabled, 'V2SF' is used as a mode for a vector
of two 32-bit floating-point values.

 If SSE extensions are enabled, 'V4SF' is used for a vector of four
32-bit floating-point values.  Some instructions use a vector of four
32-bit integers, these use 'V4SI'.  Finally, some instructions operate
on an entire vector register, interpreting it as a 128-bit integer,
these use mode 'TI'.

 The x86-32 and x86-64 family of processors use additional built-in
functions for efficient use of 'TF' ('__float128') 128-bit floating
point and 'TC' 128-bit complex floating-point values.

 The following floating-point built-in functions are always available.
All of them implement the function that is part of the name.

     __float128 __builtin_fabsq (__float128)
     __float128 __builtin_copysignq (__float128, __float128)

 The following built-in functions are always available.

'__float128 __builtin_infq (void)'
     Similar to '__builtin_inf', except the return type is '__float128'.

'__float128 __builtin_huge_valq (void)'
     Similar to '__builtin_huge_val', except the return type is
     '__float128'.

'__float128 __builtin_nanq (void)'
     Similar to '__builtin_nan', except the return type is '__float128'.

'__float128 __builtin_nansq (void)'
     Similar to '__builtin_nans', except the return type is
     '__float128'.

 The following built-in function is always available.

'void __builtin_ia32_pause (void)'
     Generates the 'pause' machine instruction with a compiler memory
     barrier.

 The following built-in functions are always available and can be used
to check the target platform type.

 -- Built-in Function: void __builtin_cpu_init (void)
     This function runs the CPU detection code to check the type of CPU
     and the features supported.  This built-in function needs to be
     invoked along with the built-in functions to check CPU type and
     features, '__builtin_cpu_is' and '__builtin_cpu_supports', only
     when used in a function that is executed before any constructors
     are called.  The CPU detection code is automatically executed in a
     very high priority constructor.

     For example, this function has to be used in 'ifunc' resolvers that
     check for CPU type using the built-in functions '__builtin_cpu_is'
     and '__builtin_cpu_supports', or in constructors on targets that
     don't support constructor priority.

          static void (*resolve_memcpy (void)) (void)
          {
            // ifunc resolvers fire before constructors, explicitly call the init
            // function.
            __builtin_cpu_init ();
            if (__builtin_cpu_supports ("ssse3"))
              return ssse3_memcpy; // super fast memcpy with ssse3 instructions.
            else
              return default_memcpy;
          }

          void *memcpy (void *, const void *, size_t)
               __attribute__ ((ifunc ("resolve_memcpy")));

 -- Built-in Function: int __builtin_cpu_is (const char *CPUNAME)
     This function returns a positive integer if the run-time CPU is of
     type CPUNAME and returns '0' otherwise.  The following CPU names
     can be detected:

     'amd'
          AMD CPU.

     'intel'
          Intel CPU.

     'atom'
          Intel Atom CPU.

     'slm'
          Intel Silvermont CPU.

     'core2'
          Intel Core 2 CPU.

     'corei7'
          Intel Core i7 CPU.

     'nehalem'
          Intel Core i7 Nehalem CPU.

     'westmere'
          Intel Core i7 Westmere CPU.

     'sandybridge'
          Intel Core i7 Sandy Bridge CPU.

     'ivybridge'
          Intel Core i7 Ivy Bridge CPU.

     'haswell'
          Intel Core i7 Haswell CPU.

     'broadwell'
          Intel Core i7 Broadwell CPU.

     'skylake'
          Intel Core i7 Skylake CPU.

     'skylake-avx512'
          Intel Core i7 Skylake AVX512 CPU.

     'cannonlake'
          Intel Core i7 Cannon Lake CPU.

     'icelake-client'
          Intel Core i7 Ice Lake Client CPU.

     'icelake-server'
          Intel Core i7 Ice Lake Server CPU.

     'cascadelake'
          Intel Core i7 Cascadelake CPU.

     'bonnell'
          Intel Atom Bonnell CPU.

     'silvermont'
          Intel Atom Silvermont CPU.

     'goldmont'
          Intel Atom Goldmont CPU.

     'goldmont-plus'
          Intel Atom Goldmont Plus CPU.

     'tremont'
          Intel Atom Tremont CPU.

     'knl'
          Intel Knights Landing CPU.

     'knm'
          Intel Knights Mill CPU.

     'amdfam10h'
          AMD Family 10h CPU.

     'barcelona'
          AMD Family 10h Barcelona CPU.

     'shanghai'
          AMD Family 10h Shanghai CPU.

     'istanbul'
          AMD Family 10h Istanbul CPU.

     'btver1'
          AMD Family 14h CPU.

     'amdfam15h'
          AMD Family 15h CPU.

     'bdver1'
          AMD Family 15h Bulldozer version 1.

     'bdver2'
          AMD Family 15h Bulldozer version 2.

     'bdver3'
          AMD Family 15h Bulldozer version 3.

     'bdver4'
          AMD Family 15h Bulldozer version 4.

     'btver2'
          AMD Family 16h CPU.

     'amdfam17h'
          AMD Family 17h CPU.

     'znver1'
          AMD Family 17h Zen version 1.

     'znver2'
          AMD Family 17h Zen version 2.

     Here is an example:
          if (__builtin_cpu_is ("corei7"))
            {
               do_corei7 (); // Core i7 specific implementation.
            }
          else
            {
               do_generic (); // Generic implementation.
            }

 -- Built-in Function: int __builtin_cpu_supports (const char *FEATURE)
     This function returns a positive integer if the run-time CPU
     supports FEATURE and returns '0' otherwise.  The following features
     can be detected:

     'cmov'
          CMOV instruction.
     'mmx'
          MMX instructions.
     'popcnt'
          POPCNT instruction.
     'sse'
          SSE instructions.
     'sse2'
          SSE2 instructions.
     'sse3'
          SSE3 instructions.
     'ssse3'
          SSSE3 instructions.
     'sse4.1'
          SSE4.1 instructions.
     'sse4.2'
          SSE4.2 instructions.
     'avx'
          AVX instructions.
     'avx2'
          AVX2 instructions.
     'sse4a'
          SSE4A instructions.
     'fma4'
          FMA4 instructions.
     'xop'
          XOP instructions.
     'fma'
          FMA instructions.
     'avx512f'
          AVX512F instructions.
     'bmi'
          BMI instructions.
     'bmi2'
          BMI2 instructions.
     'aes'
          AES instructions.
     'pclmul'
          PCLMUL instructions.
     'avx512vl'
          AVX512VL instructions.
     'avx512bw'
          AVX512BW instructions.
     'avx512dq'
          AVX512DQ instructions.
     'avx512cd'
          AVX512CD instructions.
     'avx512er'
          AVX512ER instructions.
     'avx512pf'
          AVX512PF instructions.
     'avx512vbmi'
          AVX512VBMI instructions.
     'avx512ifma'
          AVX512IFMA instructions.
     'avx5124vnniw'
          AVX5124VNNIW instructions.
     'avx5124fmaps'
          AVX5124FMAPS instructions.
     'avx512vpopcntdq'
          AVX512VPOPCNTDQ instructions.
     'avx512vbmi2'
          AVX512VBMI2 instructions.
     'gfni'
          GFNI instructions.
     'vpclmulqdq'
          VPCLMULQDQ instructions.
     'avx512vnni'
          AVX512VNNI instructions.
     'avx512bitalg'
          AVX512BITALG instructions.

     Here is an example:
          if (__builtin_cpu_supports ("popcnt"))
            {
               asm("popcnt %1,%0" : "=r"(count) : "rm"(n) : "cc");
            }
          else
            {
               count = generic_countbits (n); //generic implementation.
            }

 The following built-in functions are made available by '-mmmx'.  All of
them generate the machine instruction that is part of the name.

     v8qi __builtin_ia32_paddb (v8qi, v8qi)
     v4hi __builtin_ia32_paddw (v4hi, v4hi)
     v2si __builtin_ia32_paddd (v2si, v2si)
     v8qi __builtin_ia32_psubb (v8qi, v8qi)
     v4hi __builtin_ia32_psubw (v4hi, v4hi)
     v2si __builtin_ia32_psubd (v2si, v2si)
     v8qi __builtin_ia32_paddsb (v8qi, v8qi)
     v4hi __builtin_ia32_paddsw (v4hi, v4hi)
     v8qi __builtin_ia32_psubsb (v8qi, v8qi)
     v4hi __builtin_ia32_psubsw (v4hi, v4hi)
     v8qi __builtin_ia32_paddusb (v8qi, v8qi)
     v4hi __builtin_ia32_paddusw (v4hi, v4hi)
     v8qi __builtin_ia32_psubusb (v8qi, v8qi)
     v4hi __builtin_ia32_psubusw (v4hi, v4hi)
     v4hi __builtin_ia32_pmullw (v4hi, v4hi)
     v4hi __builtin_ia32_pmulhw (v4hi, v4hi)
     di __builtin_ia32_pand (di, di)
     di __builtin_ia32_pandn (di,di)
     di __builtin_ia32_por (di, di)
     di __builtin_ia32_pxor (di, di)
     v8qi __builtin_ia32_pcmpeqb (v8qi, v8qi)
     v4hi __builtin_ia32_pcmpeqw (v4hi, v4hi)
     v2si __builtin_ia32_pcmpeqd (v2si, v2si)
     v8qi __builtin_ia32_pcmpgtb (v8qi, v8qi)
     v4hi __builtin_ia32_pcmpgtw (v4hi, v4hi)
     v2si __builtin_ia32_pcmpgtd (v2si, v2si)
     v8qi __builtin_ia32_punpckhbw (v8qi, v8qi)
     v4hi __builtin_ia32_punpckhwd (v4hi, v4hi)
     v2si __builtin_ia32_punpckhdq (v2si, v2si)
     v8qi __builtin_ia32_punpcklbw (v8qi, v8qi)
     v4hi __builtin_ia32_punpcklwd (v4hi, v4hi)
     v2si __builtin_ia32_punpckldq (v2si, v2si)
     v8qi __builtin_ia32_packsswb (v4hi, v4hi)
     v4hi __builtin_ia32_packssdw (v2si, v2si)
     v8qi __builtin_ia32_packuswb (v4hi, v4hi)

     v4hi __builtin_ia32_psllw (v4hi, v4hi)
     v2si __builtin_ia32_pslld (v2si, v2si)
     v1di __builtin_ia32_psllq (v1di, v1di)
     v4hi __builtin_ia32_psrlw (v4hi, v4hi)
     v2si __builtin_ia32_psrld (v2si, v2si)
     v1di __builtin_ia32_psrlq (v1di, v1di)
     v4hi __builtin_ia32_psraw (v4hi, v4hi)
     v2si __builtin_ia32_psrad (v2si, v2si)
     v4hi __builtin_ia32_psllwi (v4hi, int)
     v2si __builtin_ia32_pslldi (v2si, int)
     v1di __builtin_ia32_psllqi (v1di, int)
     v4hi __builtin_ia32_psrlwi (v4hi, int)
     v2si __builtin_ia32_psrldi (v2si, int)
     v1di __builtin_ia32_psrlqi (v1di, int)
     v4hi __builtin_ia32_psrawi (v4hi, int)
     v2si __builtin_ia32_psradi (v2si, int)


 The following built-in functions are made available either with
'-msse', or with '-m3dnowa'.  All of them generate the machine
instruction that is part of the name.

     v4hi __builtin_ia32_pmulhuw (v4hi, v4hi)
     v8qi __builtin_ia32_pavgb (v8qi, v8qi)
     v4hi __builtin_ia32_pavgw (v4hi, v4hi)
     v1di __builtin_ia32_psadbw (v8qi, v8qi)
     v8qi __builtin_ia32_pmaxub (v8qi, v8qi)
     v4hi __builtin_ia32_pmaxsw (v4hi, v4hi)
     v8qi __builtin_ia32_pminub (v8qi, v8qi)
     v4hi __builtin_ia32_pminsw (v4hi, v4hi)
     int __builtin_ia32_pmovmskb (v8qi)
     void __builtin_ia32_maskmovq (v8qi, v8qi, char *)
     void __builtin_ia32_movntq (di *, di)
     void __builtin_ia32_sfence (void)

 The following built-in functions are available when '-msse' is used.
All of them generate the machine instruction that is part of the name.

     int __builtin_ia32_comieq (v4sf, v4sf)
     int __builtin_ia32_comineq (v4sf, v4sf)
     int __builtin_ia32_comilt (v4sf, v4sf)
     int __builtin_ia32_comile (v4sf, v4sf)
     int __builtin_ia32_comigt (v4sf, v4sf)
     int __builtin_ia32_comige (v4sf, v4sf)
     int __builtin_ia32_ucomieq (v4sf, v4sf)
     int __builtin_ia32_ucomineq (v4sf, v4sf)
     int __builtin_ia32_ucomilt (v4sf, v4sf)
     int __builtin_ia32_ucomile (v4sf, v4sf)
     int __builtin_ia32_ucomigt (v4sf, v4sf)
     int __builtin_ia32_ucomige (v4sf, v4sf)
     v4sf __builtin_ia32_addps (v4sf, v4sf)
     v4sf __builtin_ia32_subps (v4sf, v4sf)
     v4sf __builtin_ia32_mulps (v4sf, v4sf)
     v4sf __builtin_ia32_divps (v4sf, v4sf)
     v4sf __builtin_ia32_addss (v4sf, v4sf)
     v4sf __builtin_ia32_subss (v4sf, v4sf)
     v4sf __builtin_ia32_mulss (v4sf, v4sf)
     v4sf __builtin_ia32_divss (v4sf, v4sf)
     v4sf __builtin_ia32_cmpeqps (v4sf, v4sf)
     v4sf __builtin_ia32_cmpltps (v4sf, v4sf)
     v4sf __builtin_ia32_cmpleps (v4sf, v4sf)
     v4sf __builtin_ia32_cmpgtps (v4sf, v4sf)
     v4sf __builtin_ia32_cmpgeps (v4sf, v4sf)
     v4sf __builtin_ia32_cmpunordps (v4sf, v4sf)
     v4sf __builtin_ia32_cmpneqps (v4sf, v4sf)
     v4sf __builtin_ia32_cmpnltps (v4sf, v4sf)
     v4sf __builtin_ia32_cmpnleps (v4sf, v4sf)
     v4sf __builtin_ia32_cmpngtps (v4sf, v4sf)
     v4sf __builtin_ia32_cmpngeps (v4sf, v4sf)
     v4sf __builtin_ia32_cmpordps (v4sf, v4sf)
     v4sf __builtin_ia32_cmpeqss (v4sf, v4sf)
     v4sf __builtin_ia32_cmpltss (v4sf, v4sf)
     v4sf __builtin_ia32_cmpless (v4sf, v4sf)
     v4sf __builtin_ia32_cmpunordss (v4sf, v4sf)
     v4sf __builtin_ia32_cmpneqss (v4sf, v4sf)
     v4sf __builtin_ia32_cmpnltss (v4sf, v4sf)
     v4sf __builtin_ia32_cmpnless (v4sf, v4sf)
     v4sf __builtin_ia32_cmpordss (v4sf, v4sf)
     v4sf __builtin_ia32_maxps (v4sf, v4sf)
     v4sf __builtin_ia32_maxss (v4sf, v4sf)
     v4sf __builtin_ia32_minps (v4sf, v4sf)
     v4sf __builtin_ia32_minss (v4sf, v4sf)
     v4sf __builtin_ia32_andps (v4sf, v4sf)
     v4sf __builtin_ia32_andnps (v4sf, v4sf)
     v4sf __builtin_ia32_orps (v4sf, v4sf)
     v4sf __builtin_ia32_xorps (v4sf, v4sf)
     v4sf __builtin_ia32_movss (v4sf, v4sf)
     v4sf __builtin_ia32_movhlps (v4sf, v4sf)
     v4sf __builtin_ia32_movlhps (v4sf, v4sf)
     v4sf __builtin_ia32_unpckhps (v4sf, v4sf)
     v4sf __builtin_ia32_unpcklps (v4sf, v4sf)
     v4sf __builtin_ia32_cvtpi2ps (v4sf, v2si)
     v4sf __builtin_ia32_cvtsi2ss (v4sf, int)
     v2si __builtin_ia32_cvtps2pi (v4sf)
     int __builtin_ia32_cvtss2si (v4sf)
     v2si __builtin_ia32_cvttps2pi (v4sf)
     int __builtin_ia32_cvttss2si (v4sf)
     v4sf __builtin_ia32_rcpps (v4sf)
     v4sf __builtin_ia32_rsqrtps (v4sf)
     v4sf __builtin_ia32_sqrtps (v4sf)
     v4sf __builtin_ia32_rcpss (v4sf)
     v4sf __builtin_ia32_rsqrtss (v4sf)
     v4sf __builtin_ia32_sqrtss (v4sf)
     v4sf __builtin_ia32_shufps (v4sf, v4sf, int)
     void __builtin_ia32_movntps (float *, v4sf)
     int __builtin_ia32_movmskps (v4sf)

 The following built-in functions are available when '-msse' is used.

'v4sf __builtin_ia32_loadups (float *)'
     Generates the 'movups' machine instruction as a load from memory.
'void __builtin_ia32_storeups (float *, v4sf)'
     Generates the 'movups' machine instruction as a store to memory.
'v4sf __builtin_ia32_loadss (float *)'
     Generates the 'movss' machine instruction as a load from memory.
'v4sf __builtin_ia32_loadhps (v4sf, const v2sf *)'
     Generates the 'movhps' machine instruction as a load from memory.
'v4sf __builtin_ia32_loadlps (v4sf, const v2sf *)'
     Generates the 'movlps' machine instruction as a load from memory
'void __builtin_ia32_storehps (v2sf *, v4sf)'
     Generates the 'movhps' machine instruction as a store to memory.
'void __builtin_ia32_storelps (v2sf *, v4sf)'
     Generates the 'movlps' machine instruction as a store to memory.

 The following built-in functions are available when '-msse2' is used.
All of them generate the machine instruction that is part of the name.

     int __builtin_ia32_comisdeq (v2df, v2df)
     int __builtin_ia32_comisdlt (v2df, v2df)
     int __builtin_ia32_comisdle (v2df, v2df)
     int __builtin_ia32_comisdgt (v2df, v2df)
     int __builtin_ia32_comisdge (v2df, v2df)
     int __builtin_ia32_comisdneq (v2df, v2df)
     int __builtin_ia32_ucomisdeq (v2df, v2df)
     int __builtin_ia32_ucomisdlt (v2df, v2df)
     int __builtin_ia32_ucomisdle (v2df, v2df)
     int __builtin_ia32_ucomisdgt (v2df, v2df)
     int __builtin_ia32_ucomisdge (v2df, v2df)
     int __builtin_ia32_ucomisdneq (v2df, v2df)
     v2df __builtin_ia32_cmpeqpd (v2df, v2df)
     v2df __builtin_ia32_cmpltpd (v2df, v2df)
     v2df __builtin_ia32_cmplepd (v2df, v2df)
     v2df __builtin_ia32_cmpgtpd (v2df, v2df)
     v2df __builtin_ia32_cmpgepd (v2df, v2df)
     v2df __builtin_ia32_cmpunordpd (v2df, v2df)
     v2df __builtin_ia32_cmpneqpd (v2df, v2df)
     v2df __builtin_ia32_cmpnltpd (v2df, v2df)
     v2df __builtin_ia32_cmpnlepd (v2df, v2df)
     v2df __builtin_ia32_cmpngtpd (v2df, v2df)
     v2df __builtin_ia32_cmpngepd (v2df, v2df)
     v2df __builtin_ia32_cmpordpd (v2df, v2df)
     v2df __builtin_ia32_cmpeqsd (v2df, v2df)
     v2df __builtin_ia32_cmpltsd (v2df, v2df)
     v2df __builtin_ia32_cmplesd (v2df, v2df)
     v2df __builtin_ia32_cmpunordsd (v2df, v2df)
     v2df __builtin_ia32_cmpneqsd (v2df, v2df)
     v2df __builtin_ia32_cmpnltsd (v2df, v2df)
     v2df __builtin_ia32_cmpnlesd (v2df, v2df)
     v2df __builtin_ia32_cmpordsd (v2df, v2df)
     v2di __builtin_ia32_paddq (v2di, v2di)
     v2di __builtin_ia32_psubq (v2di, v2di)
     v2df __builtin_ia32_addpd (v2df, v2df)
     v2df __builtin_ia32_subpd (v2df, v2df)
     v2df __builtin_ia32_mulpd (v2df, v2df)
     v2df __builtin_ia32_divpd (v2df, v2df)
     v2df __builtin_ia32_addsd (v2df, v2df)
     v2df __builtin_ia32_subsd (v2df, v2df)
     v2df __builtin_ia32_mulsd (v2df, v2df)
     v2df __builtin_ia32_divsd (v2df, v2df)
     v2df __builtin_ia32_minpd (v2df, v2df)
     v2df __builtin_ia32_maxpd (v2df, v2df)
     v2df __builtin_ia32_minsd (v2df, v2df)
     v2df __builtin_ia32_maxsd (v2df, v2df)
     v2df __builtin_ia32_andpd (v2df, v2df)
     v2df __builtin_ia32_andnpd (v2df, v2df)
     v2df __builtin_ia32_orpd (v2df, v2df)
     v2df __builtin_ia32_xorpd (v2df, v2df)
     v2df __builtin_ia32_movsd (v2df, v2df)
     v2df __builtin_ia32_unpckhpd (v2df, v2df)
     v2df __builtin_ia32_unpcklpd (v2df, v2df)
     v16qi __builtin_ia32_paddb128 (v16qi, v16qi)
     v8hi __builtin_ia32_paddw128 (v8hi, v8hi)
     v4si __builtin_ia32_paddd128 (v4si, v4si)
     v2di __builtin_ia32_paddq128 (v2di, v2di)
     v16qi __builtin_ia32_psubb128 (v16qi, v16qi)
     v8hi __builtin_ia32_psubw128 (v8hi, v8hi)
     v4si __builtin_ia32_psubd128 (v4si, v4si)
     v2di __builtin_ia32_psubq128 (v2di, v2di)
     v8hi __builtin_ia32_pmullw128 (v8hi, v8hi)
     v8hi __builtin_ia32_pmulhw128 (v8hi, v8hi)
     v2di __builtin_ia32_pand128 (v2di, v2di)
     v2di __builtin_ia32_pandn128 (v2di, v2di)
     v2di __builtin_ia32_por128 (v2di, v2di)
     v2di __builtin_ia32_pxor128 (v2di, v2di)
     v16qi __builtin_ia32_pavgb128 (v16qi, v16qi)
     v8hi __builtin_ia32_pavgw128 (v8hi, v8hi)
     v16qi __builtin_ia32_pcmpeqb128 (v16qi, v16qi)
     v8hi __builtin_ia32_pcmpeqw128 (v8hi, v8hi)
     v4si __builtin_ia32_pcmpeqd128 (v4si, v4si)
     v16qi __builtin_ia32_pcmpgtb128 (v16qi, v16qi)
     v8hi __builtin_ia32_pcmpgtw128 (v8hi, v8hi)
     v4si __builtin_ia32_pcmpgtd128 (v4si, v4si)
     v16qi __builtin_ia32_pmaxub128 (v16qi, v16qi)
     v8hi __builtin_ia32_pmaxsw128 (v8hi, v8hi)
     v16qi __builtin_ia32_pminub128 (v16qi, v16qi)
     v8hi __builtin_ia32_pminsw128 (v8hi, v8hi)
     v16qi __builtin_ia32_punpckhbw128 (v16qi, v16qi)
     v8hi __builtin_ia32_punpckhwd128 (v8hi, v8hi)
     v4si __builtin_ia32_punpckhdq128 (v4si, v4si)
     v2di __builtin_ia32_punpckhqdq128 (v2di, v2di)
     v16qi __builtin_ia32_punpcklbw128 (v16qi, v16qi)
     v8hi __builtin_ia32_punpcklwd128 (v8hi, v8hi)
     v4si __builtin_ia32_punpckldq128 (v4si, v4si)
     v2di __builtin_ia32_punpcklqdq128 (v2di, v2di)
     v16qi __builtin_ia32_packsswb128 (v8hi, v8hi)
     v8hi __builtin_ia32_packssdw128 (v4si, v4si)
     v16qi __builtin_ia32_packuswb128 (v8hi, v8hi)
     v8hi __builtin_ia32_pmulhuw128 (v8hi, v8hi)
     void __builtin_ia32_maskmovdqu (v16qi, v16qi)
     v2df __builtin_ia32_loadupd (double *)
     void __builtin_ia32_storeupd (double *, v2df)
     v2df __builtin_ia32_loadhpd (v2df, double const *)
     v2df __builtin_ia32_loadlpd (v2df, double const *)
     int __builtin_ia32_movmskpd (v2df)
     int __builtin_ia32_pmovmskb128 (v16qi)
     void __builtin_ia32_movnti (int *, int)
     void __builtin_ia32_movnti64 (long long int *, long long int)
     void __builtin_ia32_movntpd (double *, v2df)
     void __builtin_ia32_movntdq (v2df *, v2df)
     v4si __builtin_ia32_pshufd (v4si, int)
     v8hi __builtin_ia32_pshuflw (v8hi, int)
     v8hi __builtin_ia32_pshufhw (v8hi, int)
     v2di __builtin_ia32_psadbw128 (v16qi, v16qi)
     v2df __builtin_ia32_sqrtpd (v2df)
     v2df __builtin_ia32_sqrtsd (v2df)
     v2df __builtin_ia32_shufpd (v2df, v2df, int)
     v2df __builtin_ia32_cvtdq2pd (v4si)
     v4sf __builtin_ia32_cvtdq2ps (v4si)
     v4si __builtin_ia32_cvtpd2dq (v2df)
     v2si __builtin_ia32_cvtpd2pi (v2df)
     v4sf __builtin_ia32_cvtpd2ps (v2df)
     v4si __builtin_ia32_cvttpd2dq (v2df)
     v2si __builtin_ia32_cvttpd2pi (v2df)
     v2df __builtin_ia32_cvtpi2pd (v2si)
     int __builtin_ia32_cvtsd2si (v2df)
     int __builtin_ia32_cvttsd2si (v2df)
     long long __builtin_ia32_cvtsd2si64 (v2df)
     long long __builtin_ia32_cvttsd2si64 (v2df)
     v4si __builtin_ia32_cvtps2dq (v4sf)
     v2df __builtin_ia32_cvtps2pd (v4sf)
     v4si __builtin_ia32_cvttps2dq (v4sf)
     v2df __builtin_ia32_cvtsi2sd (v2df, int)
     v2df __builtin_ia32_cvtsi642sd (v2df, long long)
     v4sf __builtin_ia32_cvtsd2ss (v4sf, v2df)
     v2df __builtin_ia32_cvtss2sd (v2df, v4sf)
     void __builtin_ia32_clflush (const void *)
     void __builtin_ia32_lfence (void)
     void __builtin_ia32_mfence (void)
     v16qi __builtin_ia32_loaddqu (const char *)
     void __builtin_ia32_storedqu (char *, v16qi)
     v1di __builtin_ia32_pmuludq (v2si, v2si)
     v2di __builtin_ia32_pmuludq128 (v4si, v4si)
     v8hi __builtin_ia32_psllw128 (v8hi, v8hi)
     v4si __builtin_ia32_pslld128 (v4si, v4si)
     v2di __builtin_ia32_psllq128 (v2di, v2di)
     v8hi __builtin_ia32_psrlw128 (v8hi, v8hi)
     v4si __builtin_ia32_psrld128 (v4si, v4si)
     v2di __builtin_ia32_psrlq128 (v2di, v2di)
     v8hi __builtin_ia32_psraw128 (v8hi, v8hi)
     v4si __builtin_ia32_psrad128 (v4si, v4si)
     v2di __builtin_ia32_pslldqi128 (v2di, int)
     v8hi __builtin_ia32_psllwi128 (v8hi, int)
     v4si __builtin_ia32_pslldi128 (v4si, int)
     v2di __builtin_ia32_psllqi128 (v2di, int)
     v2di __builtin_ia32_psrldqi128 (v2di, int)
     v8hi __builtin_ia32_psrlwi128 (v8hi, int)
     v4si __builtin_ia32_psrldi128 (v4si, int)
     v2di __builtin_ia32_psrlqi128 (v2di, int)
     v8hi __builtin_ia32_psrawi128 (v8hi, int)
     v4si __builtin_ia32_psradi128 (v4si, int)
     v4si __builtin_ia32_pmaddwd128 (v8hi, v8hi)
     v2di __builtin_ia32_movq128 (v2di)

 The following built-in functions are available when '-msse3' is used.
All of them generate the machine instruction that is part of the name.

     v2df __builtin_ia32_addsubpd (v2df, v2df)
     v4sf __builtin_ia32_addsubps (v4sf, v4sf)
     v2df __builtin_ia32_haddpd (v2df, v2df)
     v4sf __builtin_ia32_haddps (v4sf, v4sf)
     v2df __builtin_ia32_hsubpd (v2df, v2df)
     v4sf __builtin_ia32_hsubps (v4sf, v4sf)
     v16qi __builtin_ia32_lddqu (char const *)
     void __builtin_ia32_monitor (void *, unsigned int, unsigned int)
     v4sf __builtin_ia32_movshdup (v4sf)
     v4sf __builtin_ia32_movsldup (v4sf)
     void __builtin_ia32_mwait (unsigned int, unsigned int)

 The following built-in functions are available when '-mssse3' is used.
All of them generate the machine instruction that is part of the name.

     v2si __builtin_ia32_phaddd (v2si, v2si)
     v4hi __builtin_ia32_phaddw (v4hi, v4hi)
     v4hi __builtin_ia32_phaddsw (v4hi, v4hi)
     v2si __builtin_ia32_phsubd (v2si, v2si)
     v4hi __builtin_ia32_phsubw (v4hi, v4hi)
     v4hi __builtin_ia32_phsubsw (v4hi, v4hi)
     v4hi __builtin_ia32_pmaddubsw (v8qi, v8qi)
     v4hi __builtin_ia32_pmulhrsw (v4hi, v4hi)
     v8qi __builtin_ia32_pshufb (v8qi, v8qi)
     v8qi __builtin_ia32_psignb (v8qi, v8qi)
     v2si __builtin_ia32_psignd (v2si, v2si)
     v4hi __builtin_ia32_psignw (v4hi, v4hi)
     v1di __builtin_ia32_palignr (v1di, v1di, int)
     v8qi __builtin_ia32_pabsb (v8qi)
     v2si __builtin_ia32_pabsd (v2si)
     v4hi __builtin_ia32_pabsw (v4hi)

 The following built-in functions are available when '-mssse3' is used.
All of them generate the machine instruction that is part of the name.

     v4si __builtin_ia32_phaddd128 (v4si, v4si)
     v8hi __builtin_ia32_phaddw128 (v8hi, v8hi)
     v8hi __builtin_ia32_phaddsw128 (v8hi, v8hi)
     v4si __builtin_ia32_phsubd128 (v4si, v4si)
     v8hi __builtin_ia32_phsubw128 (v8hi, v8hi)
     v8hi __builtin_ia32_phsubsw128 (v8hi, v8hi)
     v8hi __builtin_ia32_pmaddubsw128 (v16qi, v16qi)
     v8hi __builtin_ia32_pmulhrsw128 (v8hi, v8hi)
     v16qi __builtin_ia32_pshufb128 (v16qi, v16qi)
     v16qi __builtin_ia32_psignb128 (v16qi, v16qi)
     v4si __builtin_ia32_psignd128 (v4si, v4si)
     v8hi __builtin_ia32_psignw128 (v8hi, v8hi)
     v2di __builtin_ia32_palignr128 (v2di, v2di, int)
     v16qi __builtin_ia32_pabsb128 (v16qi)
     v4si __builtin_ia32_pabsd128 (v4si)
     v8hi __builtin_ia32_pabsw128 (v8hi)

 The following built-in functions are available when '-msse4.1' is used.
All of them generate the machine instruction that is part of the name.

     v2df __builtin_ia32_blendpd (v2df, v2df, const int)
     v4sf __builtin_ia32_blendps (v4sf, v4sf, const int)
     v2df __builtin_ia32_blendvpd (v2df, v2df, v2df)
     v4sf __builtin_ia32_blendvps (v4sf, v4sf, v4sf)
     v2df __builtin_ia32_dppd (v2df, v2df, const int)
     v4sf __builtin_ia32_dpps (v4sf, v4sf, const int)
     v4sf __builtin_ia32_insertps128 (v4sf, v4sf, const int)
     vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
